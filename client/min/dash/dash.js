/*!
 * Chart.js v3.4.1
 * https://www.chartjs.org
 * (c) 2021 Chart.js Contributors
 * Released under the MIT License
 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).Chart=e()}(this,(function(){"use strict";const t="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function e(e,i,n){const o=n||(t=>Array.prototype.slice.call(t));let s=!1,a=[];return function(...n){a=o(n),s||(s=!0,t.call(window,(()=>{s=!1,e.apply(i,a)})))}}function i(t,e){let i;return function(){return e?(clearTimeout(i),i=setTimeout(t,e)):t(),e}}const n=t=>"start"===t?"left":"end"===t?"right":"center",o=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2,s=(t,e,i,n)=>t===(n?"left":"right")?i:"center"===t?(e+i)/2:e;var a=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,n){const o=e.listeners[n],s=e.duration;o.forEach((n=>n({chart:t,initial:e.initial,numSteps:s,currentStep:Math.min(i-e.start,s)})))}_refresh(){const e=this;e._request||(e._running=!0,e._request=t.call(window,(()=>{e._update(),e._request=null,e._running&&e._refresh()})))}_update(t=Date.now()){const e=this;let i=0;e._charts.forEach(((n,o)=>{if(!n.running||!n.items.length)return;const s=n.items;let a,r=s.length-1,l=!1;for(;r>=0;--r)a=s[r],a._active?(a._total>n.duration&&(n.duration=a._total),a.tick(t),l=!0):(s[r]=s[s.length-1],s.pop());l&&(o.draw(),e._notify(o,n,t,"progress")),s.length||(n.running=!1,e._notify(o,n,t,"complete"),n.initial=!1),i+=s.length})),e._lastDate=t,0===i&&(e._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let n=i.length-1;for(;n>=0;--n)i[n].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};
/*!
 * @kurkle/color v0.1.9
 * https://github.com/kurkle/color#readme
 * (c) 2020 Jukka Kurkela
 * Released under the MIT License
 */const r={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},l="0123456789ABCDEF",c=t=>l[15&t],h=t=>l[(240&t)>>4]+l[15&t],d=t=>(240&t)>>4==(15&t);function u(t){var e=function(t){return d(t.r)&&d(t.g)&&d(t.b)&&d(t.a)}(t)?c:h;return t?"#"+e(t.r)+e(t.g)+e(t.b)+(t.a<255?e(t.a):""):t}function f(t){return t+.5|0}const g=(t,e,i)=>Math.max(Math.min(t,i),e);function p(t){return g(f(2.55*t),0,255)}function m(t){return g(f(255*t),0,255)}function x(t){return g(f(t/2.55)/100,0,1)}function b(t){return g(f(100*t),0,100)}const _=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;const y=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function v(t,e,i){const n=e*Math.min(i,1-i),o=(e,o=(e+t/30)%12)=>i-n*Math.max(Math.min(o-3,9-o,1),-1);return[o(0),o(8),o(4)]}function w(t,e,i){const n=(n,o=(n+t/60)%6)=>i-i*e*Math.max(Math.min(o,4-o,1),0);return[n(5),n(3),n(1)]}function M(t,e,i){const n=v(t,1,.5);let o;for(e+i>1&&(o=1/(e+i),e*=o,i*=o),o=0;o<3;o++)n[o]*=1-e-i,n[o]+=e;return n}function k(t){const e=t.r/255,i=t.g/255,n=t.b/255,o=Math.max(e,i,n),s=Math.min(e,i,n),a=(o+s)/2;let r,l,c;return o!==s&&(c=o-s,l=a>.5?c/(2-o-s):c/(o+s),r=o===e?(i-n)/c+(i<n?6:0):o===i?(n-e)/c+2:(e-i)/c+4,r=60*r+.5),[0|r,l||0,a]}function S(t,e,i,n){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,n)).map(m)}function P(t,e,i){return S(v,t,e,i)}function D(t){return(t%360+360)%360}function C(t){const e=y.exec(t);let i,n=255;if(!e)return;e[5]!==i&&(n=e[6]?p(+e[5]):m(+e[5]));const o=D(+e[2]),s=+e[3]/100,a=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return S(M,t,e,i)}(o,s,a):"hsv"===e[1]?function(t,e,i){return S(w,t,e,i)}(o,s,a):P(o,s,a),{r:i[0],g:i[1],b:i[2],a:n}}const O={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},T={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let A;function L(t){A||(A=function(){const t={},e=Object.keys(T),i=Object.keys(O);let n,o,s,a,r;for(n=0;n<e.length;n++){for(a=r=e[n],o=0;o<i.length;o++)s=i[o],r=r.replace(s,O[s]);s=parseInt(T[a],16),t[r]=[s>>16&255,s>>8&255,255&s]}return t}(),A.transparent=[0,0,0,0]);const e=A[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}function R(t,e,i){if(t){let n=k(t);n[e]=Math.max(0,Math.min(n[e]+n[e]*i,0===e?360:1)),n=P(n),t.r=n[0],t.g=n[1],t.b=n[2]}}function E(t,e){return t?Object.assign(e||{},t):t}function z(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=m(t[3]))):(e=E(t,{r:0,g:0,b:0,a:1})).a=m(e.a),e}function I(t){return"r"===t.charAt(0)?function(t){const e=_.exec(t);let i,n,o,s=255;if(e){if(e[7]!==i){const t=+e[7];s=255&(e[8]?p(t):255*t)}return i=+e[1],n=+e[3],o=+e[5],i=255&(e[2]?p(i):i),n=255&(e[4]?p(n):n),o=255&(e[6]?p(o):o),{r:i,g:n,b:o,a:s}}}(t):C(t)}class F{constructor(t){if(t instanceof F)return t;const e=typeof t;let i;var n,o,s;"object"===e?i=z(t):"string"===e&&(s=(n=t).length,"#"===n[0]&&(4===s||5===s?o={r:255&17*r[n[1]],g:255&17*r[n[2]],b:255&17*r[n[3]],a:5===s?17*r[n[4]]:255}:7!==s&&9!==s||(o={r:r[n[1]]<<4|r[n[2]],g:r[n[3]]<<4|r[n[4]],b:r[n[5]]<<4|r[n[6]],a:9===s?r[n[7]]<<4|r[n[8]]:255})),i=o||L(t)||I(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=E(this._rgb);return t&&(t.a=x(t.a)),t}set rgb(t){this._rgb=z(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${x(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):this._rgb;var t}hexString(){return this._valid?u(this._rgb):this._rgb}hslString(){return this._valid?function(t){if(!t)return;const e=k(t),i=e[0],n=b(e[1]),o=b(e[2]);return t.a<255?`hsla(${i}, ${n}%, ${o}%, ${x(t.a)})`:`hsl(${i}, ${n}%, ${o}%)`}(this._rgb):this._rgb}mix(t,e){const i=this;if(t){const n=i.rgb,o=t.rgb;let s;const a=e===s?.5:e,r=2*a-1,l=n.a-o.a,c=((r*l==-1?r:(r+l)/(1+r*l))+1)/2;s=1-c,n.r=255&c*n.r+s*o.r+.5,n.g=255&c*n.g+s*o.g+.5,n.b=255&c*n.b+s*o.b+.5,n.a=a*n.a+(1-a)*o.a,i.rgb=n}return i}clone(){return new F(this.rgb)}alpha(t){return this._rgb.a=m(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=f(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return R(this._rgb,2,t),this}darken(t){return R(this._rgb,2,-t),this}saturate(t){return R(this._rgb,1,t),this}desaturate(t){return R(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=k(t);i[0]=D(i[0]+e),i=P(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function B(t){return new F(t)}const V=t=>t instanceof CanvasGradient||t instanceof CanvasPattern;function W(t){return V(t)?t:B(t)}function N(t){return V(t)?t:B(t).saturate(.5).darken(.1).hexString()}function H(){}const j=function(){let t=0;return function(){return t++}}();function $(t){return null==t}function Y(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)}function U(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const X=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function q(t,e){return X(t)?t:e}function K(t,e){return void 0===t?e:t}const G=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100:t/e,Z=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function Q(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function J(t,e,i,n){let o,s,a;if(Y(t))if(s=t.length,n)for(o=s-1;o>=0;o--)e.call(i,t[o],o);else for(o=0;o<s;o++)e.call(i,t[o],o);else if(U(t))for(a=Object.keys(t),s=a.length,o=0;o<s;o++)e.call(i,t[a[o]],a[o])}function tt(t,e){let i,n,o,s;if(!t||!e||t.length!==e.length)return!1;for(i=0,n=t.length;i<n;++i)if(o=t[i],s=e[i],o.datasetIndex!==s.datasetIndex||o.index!==s.index)return!1;return!0}function et(t){if(Y(t))return t.map(et);if(U(t)){const e=Object.create(null),i=Object.keys(t),n=i.length;let o=0;for(;o<n;++o)e[i[o]]=et(t[i[o]]);return e}return t}function it(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function nt(t,e,i,n){if(!it(t))return;const o=e[t],s=i[t];U(o)&&U(s)?ot(o,s,n):e[t]=et(s)}function ot(t,e,i){const n=Y(e)?e:[e],o=n.length;if(!U(t))return t;const s=(i=i||{}).merger||nt;for(let a=0;a<o;++a){if(!U(e=n[a]))continue;const o=Object.keys(e);for(let n=0,a=o.length;n<a;++n)s(o[n],t,e,i)}return t}function st(t,e){return ot(t,e,{merger:at})}function at(t,e,i){if(!it(t))return;const n=e[t],o=i[t];U(n)&&U(o)?st(n,o):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=et(o))}function rt(t,e){const i=t.indexOf(".",e);return-1===i?t.length:i}function lt(t,e){if(""===e)return t;let i=0,n=rt(e,i);for(;t&&n>i;)t=t[e.substr(i,n-i)],i=n+1,n=rt(e,i);return t}function ct(t){return t.charAt(0).toUpperCase()+t.slice(1)}const ht=t=>void 0!==t,dt=t=>"function"==typeof t,ut=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0},ft=Object.create(null),gt=Object.create(null);function pt(t,e){if(!e)return t;const i=e.split(".");for(let e=0,n=i.length;e<n;++e){const n=i[e];t=t[n]||(t[n]=Object.create(null))}return t}function mt(t,e,i){return"string"==typeof e?ot(pt(t,e),i):ot(pt(t,""),e)}var xt=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>N(e.backgroundColor),this.hoverBorderColor=(t,e)=>N(e.borderColor),this.hoverColor=(t,e)=>N(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.describe(t)}set(t,e){return mt(this,t,e)}get(t){return pt(this,t)}describe(t,e){return mt(gt,t,e)}override(t,e){return mt(ft,t,e)}route(t,e,i,n){const o=pt(this,t),s=pt(this,i),a="_"+e;Object.defineProperties(o,{[a]:{value:o[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[a],e=s[n];return U(t)?Object.assign({},e,t):K(t,e)},set(t){this[a]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});const bt=Math.PI,_t=2*bt,yt=_t+bt,vt=Number.POSITIVE_INFINITY,wt=bt/180,Mt=bt/2,kt=bt/4,St=2*bt/3,Pt=Math.log10,Dt=Math.sign;function Ct(t){const e=Math.round(t);t=At(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(Pt(t))),n=t/i;return(n<=1?1:n<=2?2:n<=5?5:10)*i}function Ot(t){const e=[],i=Math.sqrt(t);let n;for(n=1;n<i;n++)t%n==0&&(e.push(n),e.push(t/n));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}function Tt(t){return!isNaN(parseFloat(t))&&isFinite(t)}function At(t,e,i){return Math.abs(t-e)<i}function Lt(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}function Rt(t,e,i){let n,o,s;for(n=0,o=t.length;n<o;n++)s=t[n][i],isNaN(s)||(e.min=Math.min(e.min,s),e.max=Math.max(e.max,s))}function Et(t){return t*(bt/180)}function zt(t){return t*(180/bt)}function It(t){if(!X(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function Ft(t,e){const i=e.x-t.x,n=e.y-t.y,o=Math.sqrt(i*i+n*n);let s=Math.atan2(n,i);return s<-.5*bt&&(s+=_t),{angle:s,distance:o}}function Bt(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function Vt(t,e){return(t-e+yt)%_t-bt}function Wt(t){return(t%_t+_t)%_t}function Nt(t,e,i,n){const o=Wt(t),s=Wt(e),a=Wt(i),r=Wt(s-o),l=Wt(a-o),c=Wt(o-s),h=Wt(o-a);return o===s||o===a||n&&s===a||r>l&&c<h}function Ht(t,e,i){return Math.max(e,Math.min(i,t))}function jt(t){return Ht(t,-32768,32767)}function $t(t){return!t||$(t.size)||$(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}function Yt(t,e,i,n,o){let s=e[o];return s||(s=e[o]=t.measureText(o).width,i.push(o)),s>n&&(n=s),n}function Ut(t,e,i,n){let o=(n=n||{}).data=n.data||{},s=n.garbageCollect=n.garbageCollect||[];n.font!==e&&(o=n.data={},s=n.garbageCollect=[],n.font=e),t.save(),t.font=e;let a=0;const r=i.length;let l,c,h,d,u;for(l=0;l<r;l++)if(d=i[l],null!=d&&!0!==Y(d))a=Yt(t,o,s,a,d);else if(Y(d))for(c=0,h=d.length;c<h;c++)u=d[c],null==u||Y(u)||(a=Yt(t,o,s,a,u));t.restore();const f=s.length/2;if(f>i.length){for(l=0;l<f;l++)delete o[s[l]];s.splice(0,f)}return a}function Xt(t,e,i){const n=t.currentDevicePixelRatio,o=0!==i?Math.max(i/2,.5):0;return Math.round((e-o)*n)/n+o}function qt(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function Kt(t,e,i,n){let o,s,a,r,l;const c=e.pointStyle,h=e.rotation,d=e.radius;let u=(h||0)*wt;if(c&&"object"==typeof c&&(o=c.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,n),t.rotate(u),t.drawImage(c,-c.width/2,-c.height/2,c.width,c.height),void t.restore();if(!(isNaN(d)||d<=0)){switch(t.beginPath(),c){default:t.arc(i,n,d,0,_t),t.closePath();break;case"triangle":t.moveTo(i+Math.sin(u)*d,n-Math.cos(u)*d),u+=St,t.lineTo(i+Math.sin(u)*d,n-Math.cos(u)*d),u+=St,t.lineTo(i+Math.sin(u)*d,n-Math.cos(u)*d),t.closePath();break;case"rectRounded":l=.516*d,r=d-l,s=Math.cos(u+kt)*r,a=Math.sin(u+kt)*r,t.arc(i-s,n-a,l,u-bt,u-Mt),t.arc(i+a,n-s,l,u-Mt,u),t.arc(i+s,n+a,l,u,u+Mt),t.arc(i-a,n+s,l,u+Mt,u+bt),t.closePath();break;case"rect":if(!h){r=Math.SQRT1_2*d,t.rect(i-r,n-r,2*r,2*r);break}u+=kt;case"rectRot":s=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-s,n-a),t.lineTo(i+a,n-s),t.lineTo(i+s,n+a),t.lineTo(i-a,n+s),t.closePath();break;case"crossRot":u+=kt;case"cross":s=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-s,n-a),t.lineTo(i+s,n+a),t.moveTo(i+a,n-s),t.lineTo(i-a,n+s);break;case"star":s=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-s,n-a),t.lineTo(i+s,n+a),t.moveTo(i+a,n-s),t.lineTo(i-a,n+s),u+=kt,s=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-s,n-a),t.lineTo(i+s,n+a),t.moveTo(i+a,n-s),t.lineTo(i-a,n+s);break;case"line":s=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-s,n-a),t.lineTo(i+s,n+a);break;case"dash":t.moveTo(i,n),t.lineTo(i+Math.cos(u)*d,n+Math.sin(u)*d)}t.fill(),e.borderWidth>0&&t.stroke()}}function Gt(t,e,i){return i=i||.5,t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function Zt(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function Qt(t){t.restore()}function Jt(t,e,i,n,o){if(!e)return t.lineTo(i.x,i.y);if("middle"===o){const n=(e.x+i.x)/2;t.lineTo(n,e.y),t.lineTo(n,i.y)}else"after"===o!=!!n?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function te(t,e,i,n){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(n?e.cp1x:e.cp2x,n?e.cp1y:e.cp2y,n?i.cp2x:i.cp1x,n?i.cp2y:i.cp1y,i.x,i.y)}function ee(t,e,i,n,o,s={}){const a=Y(e)?e:[e],r=s.strokeWidth>0&&""!==s.strokeColor;let l,c;for(t.save(),t.font=o.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]);$(e.rotation)||t.rotate(e.rotation);e.color&&(t.fillStyle=e.color);e.textAlign&&(t.textAlign=e.textAlign);e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,s),l=0;l<a.length;++l)c=a[l],r&&(s.strokeColor&&(t.strokeStyle=s.strokeColor),$(s.strokeWidth)||(t.lineWidth=s.strokeWidth),t.strokeText(c,i,n,s.maxWidth)),t.fillText(c,i,n,s.maxWidth),ie(t,i,n,c,s),n+=o.lineHeight;t.restore()}function ie(t,e,i,n,o){if(o.strikethrough||o.underline){const s=t.measureText(n),a=e-s.actualBoundingBoxLeft,r=e+s.actualBoundingBoxRight,l=i-s.actualBoundingBoxAscent,c=i+s.actualBoundingBoxDescent,h=o.strikethrough?(l+c)/2:c;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=o.decorationWidth||2,t.moveTo(a,h),t.lineTo(r,h),t.stroke()}}function ne(t,e){const{x:i,y:n,w:o,h:s,radius:a}=e;t.arc(i+a.topLeft,n+a.topLeft,a.topLeft,-Mt,bt,!0),t.lineTo(i,n+s-a.bottomLeft),t.arc(i+a.bottomLeft,n+s-a.bottomLeft,a.bottomLeft,bt,Mt,!0),t.lineTo(i+o-a.bottomRight,n+s),t.arc(i+o-a.bottomRight,n+s-a.bottomRight,a.bottomRight,Mt,0,!0),t.lineTo(i+o,n+a.topRight),t.arc(i+o-a.topRight,n+a.topRight,a.topRight,0,-Mt,!0),t.lineTo(i+a.topLeft,n)}function oe(t,e,i){i=i||(i=>t[i]<e);let n,o=t.length-1,s=0;for(;o-s>1;)n=s+o>>1,i(n)?s=n:o=n;return{lo:s,hi:o}}const se=(t,e,i)=>oe(t,i,(n=>t[n][e]<i)),ae=(t,e,i)=>oe(t,i,(n=>t[n][e]>=i));function re(t,e,i){let n=0,o=t.length;for(;n<o&&t[n]<e;)n++;for(;o>n&&t[o-1]>i;)o--;return n>0||o<t.length?t.slice(n,o):t}const le=["push","pop","shift","splice","unshift"];function ce(t,e){t._chartjs?t._chartjs.listeners.push(e):(Object.defineProperty(t,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[e]}}),le.forEach((e=>{const i="_onData"+ct(e),n=t[e];Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value(...e){const o=n.apply(this,e);return t._chartjs.listeners.forEach((t=>{"function"==typeof t[i]&&t[i](...e)})),o}})})))}function he(t,e){const i=t._chartjs;if(!i)return;const n=i.listeners,o=n.indexOf(e);-1!==o&&n.splice(o,1),n.length>0||(le.forEach((e=>{delete t[e]})),delete t._chartjs)}function de(t){const e=new Set;let i,n;for(i=0,n=t.length;i<n;++i)e.add(t[i]);return e.size===n?t:Array.from(e)}function ue(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function fe(t,e,i){let n;return"string"==typeof t?(n=parseInt(t,10),-1!==t.indexOf("%")&&(n=n/100*e.parentNode[i])):n=t,n}const ge=t=>window.getComputedStyle(t,null);function pe(t,e){return ge(t).getPropertyValue(e)}const me=["top","right","bottom","left"];function xe(t,e,i){const n={};i=i?"-"+i:"";for(let o=0;o<4;o++){const s=me[o];n[s]=parseFloat(t[e+"-"+s+i])||0}return n.width=n.left+n.right,n.height=n.top+n.bottom,n}function be(t,e){const{canvas:i,currentDevicePixelRatio:n}=e,o=ge(i),s="border-box"===o.boxSizing,a=xe(o,"padding"),r=xe(o,"border","width"),{x:l,y:c,box:h}=function(t,e){const i=t.native||t,n=i.touches,o=n&&n.length?n[0]:i,{offsetX:s,offsetY:a}=o;let r,l,c=!1;if(((t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot))(s,a,i.target))r=s,l=a;else{const t=e.getBoundingClientRect();r=o.clientX-t.left,l=o.clientY-t.top,c=!0}return{x:r,y:l,box:c}}(t,i),d=a.left+(h&&r.left),u=a.top+(h&&r.top);let{width:f,height:g}=e;return s&&(f-=a.width+r.width,g-=a.height+r.height),{x:Math.round((l-d)/f*i.width/n),y:Math.round((c-u)/g*i.height/n)}}const _e=t=>Math.round(10*t)/10;function ye(t,e,i,n){const o=ge(t),s=xe(o,"margin"),a=fe(o.maxWidth,t,"clientWidth")||vt,r=fe(o.maxHeight,t,"clientHeight")||vt,l=function(t,e,i){let n,o;if(void 0===e||void 0===i){const s=ue(t);if(s){const t=s.getBoundingClientRect(),a=ge(s),r=xe(a,"border","width"),l=xe(a,"padding");e=t.width-l.width-r.width,i=t.height-l.height-r.height,n=fe(a.maxWidth,s,"clientWidth"),o=fe(a.maxHeight,s,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:n||vt,maxHeight:o||vt}}(t,e,i);let{width:c,height:h}=l;if("content-box"===o.boxSizing){const t=xe(o,"border","width"),e=xe(o,"padding");c-=e.width+t.width,h-=e.height+t.height}return c=Math.max(0,c-s.width),h=Math.max(0,n?Math.floor(c/n):h-s.height),c=_e(Math.min(c,a,l.maxWidth)),h=_e(Math.min(h,r,l.maxHeight)),c&&!h&&(h=_e(c/2)),{width:c,height:h}}function ve(t,e,i){const n=e||1,o=Math.floor(t.height*n),s=Math.floor(t.width*n);t.height=o/n,t.width=s/n;const a=t.canvas;return a.style&&(i||!a.style.height&&!a.style.width)&&(a.style.height=`${t.height}px`,a.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==n||a.height!==o||a.width!==s)&&(t.currentDevicePixelRatio=n,a.height=o,a.width=s,t.ctx.setTransform(n,0,0,n,0,0),!0)}const we=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function Me(t,e){const i=pe(t,e),n=i&&i.match(/^(\d+)(\.\d+)?px$/);return n?+n[1]:void 0}function ke(t,e){return"native"in t?{x:t.x,y:t.y}:be(t,e)}function Se(t,e,i,n){const{controller:o,data:s,_sorted:a}=t,r=o._cachedMeta.iScale;if(r&&e===r.axis&&a&&s.length){const t=r._reversePixels?ae:se;if(!n)return t(s,e,i);if(o._sharedOptions){const n=s[0],o="function"==typeof n.getRange&&n.getRange(e);if(o){const n=t(s,e,i-o),a=t(s,e,i+o);return{lo:n.lo,hi:a.hi}}}}return{lo:0,hi:s.length-1}}function Pe(t,e,i,n,o){const s=t.getSortedVisibleDatasetMetas(),a=i[e];for(let t=0,i=s.length;t<i;++t){const{index:i,data:r}=s[t],{lo:l,hi:c}=Se(s[t],e,a,o);for(let t=l;t<=c;++t){const e=r[t];e.skip||n(e,i,t)}}}function De(t,e,i,n){const o=[];if(!Gt(e,t.chartArea,t._minPadding))return o;return Pe(t,i,e,(function(t,i,s){t.inRange(e.x,e.y,n)&&o.push({element:t,datasetIndex:i,index:s})}),!0),o}function Ce(t,e,i,n,o){const s=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,n){const o=e?Math.abs(t.x-n.x):0,s=i?Math.abs(t.y-n.y):0;return Math.sqrt(Math.pow(o,2)+Math.pow(s,2))}}(i);let a=Number.POSITIVE_INFINITY,r=[];if(!Gt(e,t.chartArea,t._minPadding))return r;return Pe(t,i,e,(function(i,l,c){if(n&&!i.inRange(e.x,e.y,o))return;const h=i.getCenterPoint(o);if(!Gt(h,t.chartArea,t._minPadding))return;const d=s(e,h);d<a?(r=[{element:i,datasetIndex:l,index:c}],a=d):d===a&&r.push({element:i,datasetIndex:l,index:c})})),r}function Oe(t,e,i,n){const o=ke(e,t),s=[],a=i.axis,r="x"===a?"inXRange":"inYRange";let l=!1;return function(t,e){const i=t.getSortedVisibleDatasetMetas();let n,o,s;for(let t=0,a=i.length;t<a;++t){({index:n,data:o}=i[t]);for(let t=0,i=o.length;t<i;++t)s=o[t],s.skip||e(s,n,t)}}(t,((t,e,i)=>{t[r](o[a],n)&&s.push({element:t,datasetIndex:e,index:i}),t.inRange(o.x,o.y,n)&&(l=!0)})),i.intersect&&!l?[]:s}var Te={modes:{index(t,e,i,n){const o=ke(e,t),s=i.axis||"x",a=i.intersect?De(t,o,s,n):Ce(t,o,s,!1,n),r=[];return a.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=a[0].index,i=t.data[e];i&&!i.skip&&r.push({element:i,datasetIndex:t.index,index:e})})),r):[]},dataset(t,e,i,n){const o=ke(e,t),s=i.axis||"xy";let a=i.intersect?De(t,o,s,n):Ce(t,o,s,!1,n);if(a.length>0){const e=a[0].datasetIndex,i=t.getDatasetMeta(e).data;a=[];for(let t=0;t<i.length;++t)a.push({element:i[t],datasetIndex:e,index:t})}return a},point:(t,e,i,n)=>De(t,ke(e,t),i.axis||"xy",n),nearest:(t,e,i,n)=>Ce(t,ke(e,t),i.axis||"xy",i.intersect,n),x:(t,e,i,n)=>(i.axis="x",Oe(t,e,i,n)),y:(t,e,i,n)=>(i.axis="y",Oe(t,e,i,n))}};const Ae=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),Le=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function Re(t,e){const i=(""+t).match(Ae);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}function Ee(t,e){const i={},n=U(e),o=n?Object.keys(e):e,s=U(t)?n?i=>K(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of o)i[t]=+s(t)||0;return i}function ze(t){return Ee(t,{top:"y",right:"x",bottom:"y",left:"x"})}function Ie(t){return Ee(t,["topLeft","topRight","bottomLeft","bottomRight"])}function Fe(t){const e=ze(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function Be(t,e){t=t||{},e=e||xt.font;let i=K(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let n=K(t.style,e.style);n&&!(""+n).match(Le)&&(console.warn('Invalid font style specified: "'+n+'"'),n="");const o={family:K(t.family,e.family),lineHeight:Re(K(t.lineHeight,e.lineHeight),i),size:i,style:n,weight:K(t.weight,e.weight),string:""};return o.string=$t(o),o}function Ve(t,e,i,n){let o,s,a,r=!0;for(o=0,s=t.length;o<s;++o)if(a=t[o],void 0!==a&&(void 0!==e&&"function"==typeof a&&(a=a(e),r=!1),void 0!==i&&Y(a)&&(a=a[i%a.length],r=!1),void 0!==a))return n&&!r&&(n.cacheable=!1),a}function We(t,e){const{min:i,max:n}=t;return{min:i-Math.abs(Z(e,i)),max:n+Z(e,n)}}const Ne=["left","top","right","bottom"];function He(t,e){return t.filter((t=>t.pos===e))}function je(t,e){return t.filter((t=>-1===Ne.indexOf(t.pos)&&t.box.axis===e))}function $e(t,e){return t.sort(((t,i)=>{const n=e?i:t,o=e?t:i;return n.weight===o.weight?n.index-o.index:n.weight-o.weight}))}function Ye(t,e,i,n){return Math.max(t[i],e[i])+Math.max(t[n],e[n])}function Ue(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function Xe(t,e,i){const n=i.box,o=t.maxPadding;U(i.pos)||(i.size&&(t[i.pos]-=i.size),i.size=i.horizontal?n.height:n.width,t[i.pos]+=i.size),n.getPadding&&Ue(o,n.getPadding());const s=Math.max(0,e.outerWidth-Ye(o,t,"left","right")),a=Math.max(0,e.outerHeight-Ye(o,t,"top","bottom")),r=s!==t.w,l=a!==t.h;return t.w=s,t.h=a,i.horizontal?{same:r,other:l}:{same:l,other:r}}function qe(t,e){const i=e.maxPadding;function n(t){const n={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{n[t]=Math.max(e[t],i[t])})),n}return n(t?["left","right"]:["top","bottom"])}function Ke(t,e,i){const n=[];let o,s,a,r,l,c;for(o=0,s=t.length,l=0;o<s;++o){a=t[o],r=a.box,r.update(a.width||e.w,a.height||e.h,qe(a.horizontal,e));const{same:s,other:h}=Xe(e,i,a);l|=s&&n.length,c=c||h,r.fullSize||n.push(a)}return l&&Ke(n,e,i)||c}function Ge(t,e,i){const n=i.padding;let o,s,a,r,l=e.x,c=e.y;for(o=0,s=t.length;o<s;++o)a=t[o],r=a.box,a.horizontal?(r.left=r.fullSize?n.left:e.left,r.right=r.fullSize?i.outerWidth-n.right:e.left+e.w,r.top=c,r.bottom=c+r.height,r.width=r.right-r.left,c=r.bottom):(r.left=l,r.right=l+r.width,r.top=r.fullSize?n.top:e.top,r.bottom=r.fullSize?i.outerHeight-n.bottom:e.top+e.h,r.height=r.bottom-r.top,l=r.right);e.x=l,e.y=c}xt.set("layout",{padding:{top:0,right:0,bottom:0,left:0}});var Ze={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,n){if(!t)return;const o=Fe(t.options.layout.padding),s=Math.max(e-o.width,0),a=Math.max(i-o.height,0),r=function(t){const e=function(t){const e=[];let i,n,o;for(i=0,n=(t||[]).length;i<n;++i)o=t[i],e.push({index:i,box:o,pos:o.position,horizontal:o.isHorizontal(),weight:o.weight});return e}(t),i=$e(e.filter((t=>t.box.fullSize)),!0),n=$e(He(e,"left"),!0),o=$e(He(e,"right")),s=$e(He(e,"top"),!0),a=$e(He(e,"bottom")),r=je(e,"x"),l=je(e,"y");return{fullSize:i,leftAndTop:n.concat(s),rightAndBottom:o.concat(l).concat(a).concat(r),chartArea:He(e,"chartArea"),vertical:n.concat(o).concat(l),horizontal:s.concat(a).concat(r)}}(t.boxes),l=r.vertical,c=r.horizontal;J(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const h=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:o,availableWidth:s,availableHeight:a,vBoxMaxWidth:s/2/h,hBoxMaxHeight:a/2}),u=Object.assign({},o);Ue(u,Fe(n));const f=Object.assign({maxPadding:u,w:s,h:a,x:o.left,y:o.top},o);!function(t,e){let i,n,o;for(i=0,n=t.length;i<n;++i)o=t[i],o.horizontal?(o.width=o.box.fullSize&&e.availableWidth,o.height=e.hBoxMaxHeight):(o.width=e.vBoxMaxWidth,o.height=o.box.fullSize&&e.availableHeight)}(l.concat(c),d),Ke(r.fullSize,f,d),Ke(l,f,d),Ke(c,f,d)&&Ke(l,f,d),function(t){const e=t.maxPadding;function i(i){const n=Math.max(e[i]-t[i],0);return t[i]+=n,n}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(f),Ge(r.leftAndTop,f,d),f.x+=f.w,f.y+=f.h,Ge(r.rightAndBottom,f,d),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},J(r.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(f.w,f.h)}))}};class Qe{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,n){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,n?Math.floor(e/n):i)}}isAttached(t){return!0}}class Je extends Qe{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}}const ti={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},ei=t=>null===t||""===t;const ii=!!we&&{passive:!0};function ni(t,e,i){t.canvas.removeEventListener(e,i,ii)}function oi(t,e,i){const n=t.canvas,o=n&&ue(n)||n,s=new MutationObserver((t=>{const e=ue(o);t.forEach((t=>{for(let n=0;n<t.addedNodes.length;n++){const s=t.addedNodes[n];s!==o&&s!==e||i(t.target)}}))}));return s.observe(document,{childList:!0,subtree:!0}),s}function si(t,e,i){const n=t.canvas,o=n&&ue(n);if(!o)return;const s=new MutationObserver((t=>{t.forEach((t=>{for(let e=0;e<t.removedNodes.length;e++)if(t.removedNodes[e]===n){i();break}}))}));return s.observe(o,{childList:!0}),s}const ai=new Map;let ri=0;function li(){const t=window.devicePixelRatio;t!==ri&&(ri=t,ai.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function ci(t,i,n){const o=t.canvas,s=o&&ue(o);if(!s)return;const a=e(((t,e)=>{const i=s.clientWidth;n(t,e),i<s.clientWidth&&n()}),window),r=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,n=e.contentRect.height;0===i&&0===n||a(i,n)}));return r.observe(s),function(t,e){ai.size||window.addEventListener("resize",li),ai.set(t,e)}(t,a),r}function hi(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){ai.delete(t),ai.size||window.removeEventListener("resize",li)}(t)}function di(t,i,n){const o=t.canvas,s=e((e=>{null!==t.ctx&&n(function(t,e){const i=ti[t.type]||t.type,{x:n,y:o}=be(t,e);return{type:i,chart:e,native:t,x:void 0!==n?n:null,y:void 0!==o?o:null}}(e,t))}),t,(t=>{const e=t[0];return[e,e.offsetX,e.offsetY]}));return function(t,e,i){t.addEventListener(e,i,ii)}(o,i,s),s}class ui extends Qe{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,n=t.getAttribute("height"),o=t.getAttribute("width");if(t.$chartjs={initial:{height:n,width:o,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",ei(o)){const e=Me(t,"width");void 0!==e&&(t.width=e)}if(ei(n))if(""===t.style.height)t.height=t.width/(e||2);else{const e=Me(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e.$chartjs)return!1;const i=e.$chartjs.initial;["height","width"].forEach((t=>{const n=i[t];$(n)?e.removeAttribute(t):e.setAttribute(t,n)}));const n=i.style||{};return Object.keys(n).forEach((t=>{e.style[t]=n[t]})),e.width=e.width,delete e.$chartjs,!0}addEventListener(t,e,i){this.removeEventListener(t,e);const n=t.$proxies||(t.$proxies={}),o={attach:oi,detach:si,resize:ci}[e]||di;n[e]=o(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),n=i[e];if(!n)return;({attach:hi,detach:hi,resize:hi}[e]||ni)(t,e,n),i[e]=void 0}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,n){return ye(t,e,i,n)}isAttached(t){const e=ue(t);return!(!e||!ue(e))}}var fi=Object.freeze({__proto__:null,BasePlatform:Qe,BasicPlatform:Je,DomPlatform:ui});const gi=t=>0===t||1===t,pi=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*_t/i),mi=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*_t/i)+1,xi={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*Mt),easeOutSine:t=>Math.sin(t*Mt),easeInOutSine:t=>-.5*(Math.cos(bt*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>gi(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>gi(t)?t:pi(t,.075,.3),easeOutElastic:t=>gi(t)?t:mi(t,.075,.3),easeInOutElastic(t){const e=.1125;return gi(t)?t:t<.5?.5*pi(2*t,e,.45):.5+.5*mi(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-xi.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*xi.easeInBounce(2*t):.5*xi.easeOutBounce(2*t-1)+.5},bi="transparent",_i={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const n=W(t||bi),o=n.valid&&W(e||bi);return o&&o.valid?o.mix(n,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class yi{constructor(t,e,i,n){const o=e[i];n=Ve([t.to,n,o,t.from]);const s=Ve([t.from,o,n]);this._active=!0,this._fn=t.fn||_i[t.type||typeof s],this._easing=xi[t.easing]||xi.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=s,this._to=n,this._promises=void 0}active(){return this._active}update(t,e,i){const n=this;if(n._active){n._notify(!1);const o=n._target[n._prop],s=i-n._start,a=n._duration-s;n._start=i,n._duration=Math.floor(Math.max(a,t.duration)),n._total+=s,n._loop=!!t.loop,n._to=Ve([t.to,e,o,t.from]),n._from=Ve([t.from,o,e])}}cancel(){const t=this;t._active&&(t.tick(Date.now()),t._active=!1,t._notify(!1))}tick(t){const e=this,i=t-e._start,n=e._duration,o=e._prop,s=e._from,a=e._loop,r=e._to;let l;if(e._active=s!==r&&(a||i<n),!e._active)return e._target[o]=r,void e._notify(!0);i<0?e._target[o]=s:(l=i/n%2,l=a&&l>1?2-l:l,l=e._easing(Math.min(1,Math.max(0,l))),e._target[o]=e._fn(s,r,l))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}xt.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const vi=Object.keys(xt.animation);xt.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),xt.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),xt.describe("animations",{_fallback:"animation"}),xt.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class wi{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!U(t))return;const e=this._properties;Object.getOwnPropertyNames(t).forEach((i=>{const n=t[i];if(!U(n))return;const o={};for(const t of vi)o[t]=n[t];(Y(n.properties)&&n.properties||[i]).forEach((t=>{t!==i&&e.has(t)||e.set(t,o)}))}))}_animateOptions(t,e){const i=e.options,n=function(t,e){if(!e)return;let i=t.options;if(!i)return void(t.options=e);i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}}));return i}(t,i);if(!n)return[];const o=this._createAnimations(n,i);return i.$shared&&function(t,e){const i=[],n=Object.keys(e);for(let e=0;e<n.length;e++){const o=t[n[e]];o&&o.active()&&i.push(o.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),o}_createAnimations(t,e){const i=this._properties,n=[],o=t.$animations||(t.$animations={}),s=Object.keys(e),a=Date.now();let r;for(r=s.length-1;r>=0;--r){const l=s[r];if("$"===l.charAt(0))continue;if("options"===l){n.push(...this._animateOptions(t,e));continue}const c=e[l];let h=o[l];const d=i.get(l);if(h){if(d&&h.active()){h.update(d,c,a);continue}h.cancel()}d&&d.duration?(o[l]=h=new yi(d,t,l,c),n.push(h)):t[l]=c}return n}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(a.add(this._chart,i),!0):void 0}}function Mi(t,e){const i=t&&t.options||{},n=i.reverse,o=void 0===i.min?e:0,s=void 0===i.max?e:0;return{start:n?s:o,end:n?o:s}}function ki(t,e){const i=[],n=t._getSortedDatasetMetas(e);let o,s;for(o=0,s=n.length;o<s;++o)i.push(n[o].index);return i}function Si(t,e,i,n){const o=t.keys,s="single"===n.mode;let a,r,l,c;if(null!==e){for(a=0,r=o.length;a<r;++a){if(l=+o[a],l===i){if(n.all)continue;break}c=t.values[l],X(c)&&(s||0===e||Dt(e)===Dt(c))&&(e+=c)}return e}}function Pi(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function Di(t,e,i){const n=t[e]||(t[e]={});return n[i]||(n[i]={})}function Ci(t,e,i){for(const n of e.getMatchingVisibleMetas("bar").reverse()){const e=t[n.index];if(i&&e>0||!i&&e<0)return n.index}return null}function Oi(t,e){const{chart:i,_cachedMeta:n}=t,o=i._stacks||(i._stacks={}),{iScale:s,vScale:a,index:r}=n,l=s.axis,c=a.axis,h=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(s,a,n),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[l]:n,[c]:s}=i;u=(i._stacks||(i._stacks={}))[c]=Di(o,h,n),u[r]=s,u._top=Ci(u,a,!0),u._bottom=Ci(u,a,!1)}}function Ti(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function Ai(t,e){const i=t.vScale&&t.vScale.axis;if(i){e=e||t._parsed;for(const n of e){const e=n._stacks;if(!e||void 0===e[i]||void 0===e[i][t.index])return;delete e[i][t.index]}}}const Li=t=>"reset"===t||"none"===t,Ri=(t,e)=>e?t:Object.assign({},t);class Ei{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this,e=t._cachedMeta;t.configure(),t.linkScales(),e._stacked=Pi(e.vScale,e),t.addElements()}updateIndex(t){this.index!==t&&Ai(this._cachedMeta),this.index=t}linkScales(){const t=this,e=t.chart,i=t._cachedMeta,n=t.getDataset(),o=(t,e,i,n)=>"x"===t?e:"r"===t?n:i,s=i.xAxisID=K(n.xAxisID,Ti(e,"x")),a=i.yAxisID=K(n.yAxisID,Ti(e,"y")),r=i.rAxisID=K(n.rAxisID,Ti(e,"r")),l=i.indexAxis,c=i.iAxisID=o(l,s,a,r),h=i.vAxisID=o(l,a,s,r);i.xScale=t.getScaleForId(s),i.yScale=t.getScaleForId(a),i.rScale=t.getScaleForId(r),i.iScale=t.getScaleForId(c),i.vScale=t.getScaleForId(h)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&he(this._data,this),t._stacked&&Ai(t)}_dataCheck(){const t=this,e=t.getDataset(),i=e.data||(e.data=[]),n=t._data;if(U(i))t._data=function(t){const e=Object.keys(t),i=new Array(e.length);let n,o,s;for(n=0,o=e.length;n<o;++n)s=e[n],i[n]={x:s,y:t[s]};return i}(i);else if(n!==i){if(n){he(n,t);const e=t._cachedMeta;Ai(e),e._parsed=[]}i&&Object.isExtensible(i)&&ce(i,t),t._syncList=[],t._data=i}}addElements(){const t=this,e=t._cachedMeta;t._dataCheck(),t.datasetElementType&&(e.dataset=new t.datasetElementType)}buildOrUpdateElements(t){const e=this,i=e._cachedMeta,n=e.getDataset();let o=!1;e._dataCheck();const s=i._stacked;i._stacked=Pi(i.vScale,i),i.stack!==n.stack&&(o=!0,Ai(i),i.stack=n.stack),e._resyncElements(t),(o||s!==i._stacked)&&Oi(e,i._parsed)}configure(){const t=this,e=t.chart.config,i=e.datasetScopeKeys(t._type),n=e.getOptionScopes(t.getDataset(),i,!0);t.options=e.createResolver(n,t.getContext()),t._parsing=t.options.parsing}parse(t,e){const i=this,{_cachedMeta:n,_data:o}=i,{iScale:s,_stacked:a}=n,r=s.axis;let l,c,h,d=0===t&&e===o.length||n._sorted,u=t>0&&n._parsed[t-1];if(!1===i._parsing)n._parsed=o,n._sorted=!0,h=o;else{h=Y(o[t])?i.parseArrayData(n,o,t,e):U(o[t])?i.parseObjectData(n,o,t,e):i.parsePrimitiveData(n,o,t,e);const s=()=>null===c[r]||u&&c[r]<u[r];for(l=0;l<e;++l)n._parsed[l+t]=c=h[l],d&&(s()&&(d=!1),u=c);n._sorted=d}a&&Oi(i,h)}parsePrimitiveData(t,e,i,n){const{iScale:o,vScale:s}=t,a=o.axis,r=s.axis,l=o.getLabels(),c=o===s,h=new Array(n);let d,u,f;for(d=0,u=n;d<u;++d)f=d+i,h[d]={[a]:c||o.parse(l[f],f),[r]:s.parse(e[f],f)};return h}parseArrayData(t,e,i,n){const{xScale:o,yScale:s}=t,a=new Array(n);let r,l,c,h;for(r=0,l=n;r<l;++r)c=r+i,h=e[c],a[r]={x:o.parse(h[0],c),y:s.parse(h[1],c)};return a}parseObjectData(t,e,i,n){const{xScale:o,yScale:s}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,l=new Array(n);let c,h,d,u;for(c=0,h=n;c<h;++c)d=c+i,u=e[d],l[c]={x:o.parse(lt(u,a),d),y:s.parse(lt(u,r),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const n=this.chart,o=this._cachedMeta,s=e[t.axis];return Si({keys:ki(n,!0),values:e._stacks[t.axis]},s,o.index,{mode:i})}updateRangeFromParsed(t,e,i,n){const o=i[e.axis];let s=null===o?NaN:o;const a=n&&i._stacks[e.axis];n&&a&&(n.values=a,t.min=Math.min(t.min,s),t.max=Math.max(t.max,s),s=Si(n,o,this._cachedMeta.index,{all:!0})),t.min=Math.min(t.min,s),t.max=Math.max(t.max,s)}getMinMax(t,e){const i=this,n=i._cachedMeta,o=n._parsed,s=n._sorted&&t===n.iScale,a=o.length,r=i._getOtherScale(t),l=e&&n._stacked&&{keys:ki(i.chart,!0),values:null},c={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:h,max:d}=function(t){const{min:e,max:i,minDefined:n,maxDefined:o}=t.getUserBounds();return{min:n?e:Number.NEGATIVE_INFINITY,max:o?i:Number.POSITIVE_INFINITY}}(r);let u,f,g,p;function m(){return g=o[u],f=g[t.axis],p=g[r.axis],!X(f)||h>p||d<p}for(u=0;u<a&&(m()||(i.updateRangeFromParsed(c,t,g,l),!s));++u);if(s)for(u=a-1;u>=0;--u)if(!m()){i.updateRangeFromParsed(c,t,g,l);break}return c}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let n,o,s;for(n=0,o=e.length;n<o;++n)s=e[n][t.axis],X(s)&&i.push(s);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,n=e.vScale,o=this.getParsed(t);return{label:i?""+i.getLabelForValue(o[i.axis]):"",value:n?""+n.getLabelForValue(o[n.axis]):""}}_update(t){const e=this,i=e._cachedMeta;e.configure(),e._cachedDataOpts={},e.update(t||"default"),i._clip=function(t){let e,i,n,o;return U(t)?(e=t.top,i=t.right,n=t.bottom,o=t.left):e=i=n=o=t,{top:e,right:i,bottom:n,left:o,disabled:!1===t}}(K(e.options.clip,function(t,e,i){if(!1===i)return!1;const n=Mi(t,i),o=Mi(e,i);return{top:o.end,right:n.end,bottom:o.start,left:n.start}}(i.xScale,i.yScale,e.getMaxOverflow())))}update(t){}draw(){const t=this,e=t._ctx,i=t.chart,n=t._cachedMeta,o=n.data||[],s=i.chartArea,a=[],r=t._drawStart||0,l=t._drawCount||o.length-r;let c;for(n.dataset&&n.dataset.draw(e,s,r,l),c=r;c<r+l;++c){const t=o[c];t.active?a.push(t):t.draw(e,s)}for(c=0;c<a.length;++c)a[c].draw(e,s)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const n=this,o=n.getDataset();let s;if(t>=0&&t<n._cachedMeta.data.length){const e=n._cachedMeta.data[t];s=e.$context||(e.$context=function(t,e,i){return Object.assign(Object.create(t),{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(n.getContext(),t,e)),s.parsed=n.getParsed(t),s.raw=o.data[t],s.index=s.dataIndex=t}else s=n.$context||(n.$context=function(t,e){return Object.assign(Object.create(t),{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(n.chart.getContext(),n.index)),s.dataset=o,s.index=s.datasetIndex=n.index;return s.active=!!e,s.mode=i,s}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const n=this,o="active"===e,s=n._cachedDataOpts,a=t+"-"+e,r=s[a],l=n.enableOptionSharing&&ht(i);if(r)return Ri(r,l);const c=n.chart.config,h=c.datasetElementScopeKeys(n._type,t),d=o?[`${t}Hover`,"hover",t,""]:[t,""],u=c.getOptionScopes(n.getDataset(),h),f=Object.keys(xt.elements[t]),g=c.resolveNamedOptions(u,f,(()=>n.getContext(i,o)),d);return g.$shared&&(g.$shared=l,s[a]=Object.freeze(Ri(g,l))),g}_resolveAnimations(t,e,i){const n=this,o=n.chart,s=n._cachedDataOpts,a=`animation-${e}`,r=s[a];if(r)return r;let l;if(!1!==o.options.animation){const o=n.chart.config,s=o.datasetAnimationScopeKeys(n._type,e),a=o.getOptionScopes(n.getDataset(),s);l=o.createResolver(a,n.getContext(t,i,e))}const c=new wi(o,l&&l.animations);return l&&l._cacheable&&(s[a]=Object.freeze(c)),c}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Li(t)||this.chart._animationsDisabled}updateElement(t,e,i,n){Li(n)?Object.assign(t,i):this._resolveAnimations(e,n).update(t,i)}updateSharedOptions(t,e,i){t&&!Li(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,n){t.active=n;const o=this.getStyle(e,n);this._resolveAnimations(e,i,n).update(t,{options:!n&&this.getSharedOptions(o)||o})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this,i=e._data,n=e._cachedMeta.data;for(const[t,i,n]of e._syncList)e[t](i,n);e._syncList=[];const o=n.length,s=i.length,a=Math.min(s,o);a&&e.parse(0,a),s>o?e._insertElements(o,s-o,t):s<o&&e._removeElements(s,o-s)}_insertElements(t,e,i=!0){const n=this,o=n._cachedMeta,s=o.data,a=t+e;let r;const l=t=>{for(t.length+=e,r=t.length-1;r>=a;r--)t[r]=t[r-e]};for(l(s),r=t;r<a;++r)s[r]=new n.dataElementType;n._parsing&&l(o._parsed),n.parse(t,e),i&&n.updateElements(s,t,e,"reset")}updateElements(t,e,i,n){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const n=i._parsed.splice(t,e);i._stacked&&Ai(i,n)}i.data.splice(t,e)}_onDataPush(){const t=arguments.length;this._syncList.push(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._syncList.push(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._syncList.push(["_removeElements",0,1])}_onDataSplice(t,e){this._syncList.push(["_removeElements",t,e]),this._syncList.push(["_insertElements",t,arguments.length-2])}_onDataUnshift(){this._syncList.push(["_insertElements",0,arguments.length])}}Ei.defaults={},Ei.prototype.datasetElementType=null,Ei.prototype.dataElementType=null;class zi{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return Tt(this.x)&&Tt(this.y)}getProps(t,e){const i=this,n=this.$animations;if(!e||!n)return i;const o={};return t.forEach((t=>{o[t]=n[t]&&n[t].active()?n[t]._to:i[t]})),o}}zi.defaults={},zi.defaultRoutes=void 0;const Ii=new Map;function Fi(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let n=Ii.get(i);return n||(n=new Intl.NumberFormat(t,e),Ii.set(i,n)),n}(e,i).format(t)}const Bi={values:t=>Y(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const n=this.chart.options.locale;let o,s=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(o="scientific"),s=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t));return i}(t,i)}const a=Pt(Math.abs(s)),r=Math.max(Math.min(-1*Math.floor(a),20),0),l={notation:o,minimumFractionDigits:r,maximumFractionDigits:r};return Object.assign(l,this.options.ticks.format),Fi(t,n,l)},logarithmic(t,e,i){if(0===t)return"0";const n=t/Math.pow(10,Math.floor(Pt(t)));return 1===n||2===n||5===n?Bi.numeric.call(this,t,e,i):""}};var Vi={formatters:Bi};function Wi(t,e){const i=t.options.ticks,n=i.maxTicksLimit||function(t){const e=t.options.offset,i=t._tickSize(),n=t._length/i+(e?0:1),o=t._maxLength/i;return Math.floor(Math.min(n,o))}(t),o=i.major.enabled?function(t){const e=[];let i,n;for(i=0,n=t.length;i<n;i++)t[i].major&&e.push(i);return e}(e):[],s=o.length,a=o[0],r=o[s-1],l=[];if(s>n)return function(t,e,i,n){let o,s=0,a=i[0];for(n=Math.ceil(n),o=0;o<t.length;o++)o===a&&(e.push(t[o]),s++,a=i[s*n])}(e,l,o,s/n),l;const c=function(t,e,i){const n=function(t){const e=t.length;let i,n;if(e<2)return!1;for(n=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==n)return!1;return n}(t),o=e.length/i;if(!n)return Math.max(o,1);const s=Ot(n);for(let t=0,e=s.length-1;t<e;t++){const e=s[t];if(e>o)return e}return Math.max(o,1)}(o,e,n);if(s>0){let t,i;const n=s>1?Math.round((r-a)/(s-1)):null;for(Ni(e,l,c,$(n)?0:a-n,a),t=0,i=s-1;t<i;t++)Ni(e,l,c,o[t],o[t+1]);return Ni(e,l,c,r,$(n)?e.length:r+n),l}return Ni(e,l,c),l}function Ni(t,e,i,n,o){const s=K(n,0),a=Math.min(K(o,t.length),t.length);let r,l,c,h=0;for(i=Math.ceil(i),o&&(r=o-n,i=r/Math.floor(r/i)),c=s;c<0;)h++,c=Math.round(s+h*i);for(l=Math.max(s,0);l<a;l++)l===c&&(e.push(t[l]),h++,c=Math.round(s+h*i))}xt.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Vi.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),xt.route("scale.ticks","color","","color"),xt.route("scale.grid","color","","borderColor"),xt.route("scale.grid","borderColor","","borderColor"),xt.route("scale.title","color","","color"),xt.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),xt.describe("scales",{_fallback:"scale"}),xt.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const Hi=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i;function ji(t,e){const i=[],n=t.length/e,o=t.length;let s=0;for(;s<o;s+=n)i.push(t[Math.floor(s)]);return i}function $i(t,e,i){const n=t.ticks.length,o=Math.min(e,n-1),s=t._startPixel,a=t._endPixel,r=1e-6;let l,c=t.getPixelForTick(o);if(!(i&&(l=1===n?Math.max(c-s,a-c):0===e?(t.getPixelForTick(1)-c)/2:(c-t.getPixelForTick(o-1))/2,c+=o<e?l:-l,c<s-r||c>a+r)))return c}function Yi(t){return t.drawTicks?t.tickLength:0}function Ui(t,e){if(!t.display)return 0;const i=Be(t.font,e),n=Fe(t.padding);return(Y(t.text)?t.text.length:1)*i.lineHeight+n.height}function Xi(t,e,i){let o=n(t);return(i&&"right"!==e||!i&&"right"===e)&&(o=(t=>"left"===t?"right":"right"===t?"left":t)(o)),o}class qi extends zi{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){const e=this;e.options=t.setContext(e.getContext()),e.axis=t.axis,e._userMin=e.parse(t.min),e._userMax=e.parse(t.max),e._suggestedMin=e.parse(t.suggestedMin),e._suggestedMax=e.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:n}=this;return t=q(t,Number.POSITIVE_INFINITY),e=q(e,Number.NEGATIVE_INFINITY),i=q(i,Number.POSITIVE_INFINITY),n=q(n,Number.NEGATIVE_INFINITY),{min:q(t,i),max:q(e,n),minDefined:X(t),maxDefined:X(e)}}getMinMax(t){const e=this;let i,{min:n,max:o,minDefined:s,maxDefined:a}=e.getUserBounds();if(s&&a)return{min:n,max:o};const r=e.getMatchingVisibleMetas();for(let l=0,c=r.length;l<c;++l)i=r[l].controller.getMinMax(e,t),s||(n=Math.min(n,i.min)),a||(o=Math.max(o,i.max));return{min:q(n,q(o,n)),max:q(o,q(n,o))}}getPadding(){const t=this;return{left:t.paddingLeft||0,top:t.paddingTop||0,right:t.paddingRight||0,bottom:t.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){Q(this.options.beforeUpdate,[this])}update(t,e,i){const n=this,o=n.options.ticks,s=o.sampleSize;n.beforeUpdate(),n.maxWidth=t,n.maxHeight=e,n._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),n.ticks=null,n._labelSizes=null,n._gridLineItems=null,n._labelItems=null,n.beforeSetDimensions(),n.setDimensions(),n.afterSetDimensions(),n._maxLength=n.isHorizontal()?n.width+i.left+i.right:n.height+i.top+i.bottom,n._dataLimitsCached||(n.beforeDataLimits(),n.determineDataLimits(),n.afterDataLimits(),n._range=We(n,n.options.grace),n._dataLimitsCached=!0),n.beforeBuildTicks(),n.ticks=n.buildTicks()||[],n.afterBuildTicks();const a=s<n.ticks.length;n._convertTicksToLabels(a?ji(n.ticks,s):n.ticks),n.configure(),n.beforeCalculateLabelRotation(),n.calculateLabelRotation(),n.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(n.ticks=Wi(n,n.ticks),n._labelSizes=null),a&&n._convertTicksToLabels(n.ticks),n.beforeFit(),n.fit(),n.afterFit(),n.afterUpdate()}configure(){const t=this;let e,i,n=t.options.reverse;t.isHorizontal()?(e=t.left,i=t.right):(e=t.top,i=t.bottom,n=!n),t._startPixel=e,t._endPixel=i,t._reversePixels=n,t._length=i-e,t._alignToPixels=t.options.alignToPixels}afterUpdate(){Q(this.options.afterUpdate,[this])}beforeSetDimensions(){Q(this.options.beforeSetDimensions,[this])}setDimensions(){const t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0}afterSetDimensions(){Q(this.options.afterSetDimensions,[this])}_callHooks(t){const e=this;e.chart.notifyPlugins(t,e.getContext()),Q(e.options[t],[e])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){Q(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this,i=e.options.ticks;let n,o,s;for(n=0,o=t.length;n<o;n++)s=t[n],s.label=Q(i.callback,[s.value,n,t],e)}afterTickToLabelConversion(){Q(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){Q(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this,e=t.options,i=e.ticks,n=t.ticks.length,o=i.minRotation||0,s=i.maxRotation;let a,r,l,c=o;if(!t._isVisible()||!i.display||o>=s||n<=1||!t.isHorizontal())return void(t.labelRotation=o);const h=t._getLabelSizes(),d=h.widest.width,u=h.highest.height,f=Ht(t.chart.width-d,0,t.maxWidth);a=e.offset?t.maxWidth/n:f/(n-1),d+6>a&&(a=f/(n-(e.offset?.5:1)),r=t.maxHeight-Yi(e.grid)-i.padding-Ui(e.title,t.chart.options.font),l=Math.sqrt(d*d+u*u),c=zt(Math.min(Math.asin(Math.min((h.highest.height+6)/a,1)),Math.asin(Math.min(r/l,1))-Math.asin(u/l))),c=Math.max(o,Math.min(s,c))),t.labelRotation=c}afterCalculateLabelRotation(){Q(this.options.afterCalculateLabelRotation,[this])}beforeFit(){Q(this.options.beforeFit,[this])}fit(){const t=this,e={width:0,height:0},{chart:i,options:{ticks:n,title:o,grid:s}}=t,a=t._isVisible(),r=t.isHorizontal();if(a){const a=Ui(o,i.options.font);if(r?(e.width=t.maxWidth,e.height=Yi(s)+a):(e.height=t.maxHeight,e.width=Yi(s)+a),n.display&&t.ticks.length){const{first:i,last:o,widest:s,highest:a}=t._getLabelSizes(),l=2*n.padding,c=Et(t.labelRotation),h=Math.cos(c),d=Math.sin(c);if(r){const i=n.mirror?0:d*s.width+h*a.height;e.height=Math.min(t.maxHeight,e.height+i+l)}else{const i=n.mirror?0:h*s.width+d*a.height;e.width=Math.min(t.maxWidth,e.width+i+l)}t._calculatePadding(i,o,d,h)}}t._handleMargins(),r?(t.width=t._length=i.width-t._margins.left-t._margins.right,t.height=e.height):(t.width=e.width,t.height=t._length=i.height-t._margins.top-t._margins.bottom)}_calculatePadding(t,e,i,n){const o=this,{ticks:{align:s,padding:a},position:r}=o.options,l=0!==o.labelRotation,c="top"!==r&&"x"===o.axis;if(o.isHorizontal()){const r=o.getPixelForTick(0)-o.left,h=o.right-o.getPixelForTick(o.ticks.length-1);let d=0,u=0;l?c?(d=n*t.width,u=i*e.height):(d=i*t.height,u=n*e.width):"start"===s?u=e.width:"end"===s?d=t.width:(d=t.width/2,u=e.width/2),o.paddingLeft=Math.max((d-r+a)*o.width/(o.width-r),0),o.paddingRight=Math.max((u-h+a)*o.width/(o.width-h),0)}else{let i=e.height/2,n=t.height/2;"start"===s?(i=0,n=t.height):"end"===s&&(i=e.height,n=0),o.paddingTop=i+a,o.paddingBottom=n+a}}_handleMargins(){const t=this;t._margins&&(t._margins.left=Math.max(t.paddingLeft,t._margins.left),t._margins.top=Math.max(t.paddingTop,t._margins.top),t._margins.right=Math.max(t.paddingRight,t._margins.right),t._margins.bottom=Math.max(t.paddingBottom,t._margins.bottom))}afterFit(){Q(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){const e=this;let i,n;for(e.beforeTickToLabelConversion(),e.generateTickLabels(t),i=0,n=t.length;i<n;i++)$(t[i].label)&&(t.splice(i,1),n--,i--);e.afterTickToLabelConversion()}_getLabelSizes(){const t=this;let e=t._labelSizes;if(!e){const i=t.options.ticks.sampleSize;let n=t.ticks;i<n.length&&(n=ji(n,i)),t._labelSizes=e=t._computeLabelSizes(n,n.length)}return e}_computeLabelSizes(t,e){const{ctx:i,_longestTextCache:n}=this,o=[],s=[];let a,r,l,c,h,d,u,f,g,p,m,x=0,b=0;for(a=0;a<e;++a){if(c=t[a].label,h=this._resolveTickFontOptions(a),i.font=d=h.string,u=n[d]=n[d]||{data:{},gc:[]},f=h.lineHeight,g=p=0,$(c)||Y(c)){if(Y(c))for(r=0,l=c.length;r<l;++r)m=c[r],$(m)||Y(m)||(g=Yt(i,u.data,u.gc,g,m),p+=f)}else g=Yt(i,u.data,u.gc,g,c),p=f;o.push(g),s.push(p),x=Math.max(g,x),b=Math.max(p,b)}!function(t,e){J(t,(t=>{const i=t.gc,n=i.length/2;let o;if(n>e){for(o=0;o<n;++o)delete t.data[i[o]];i.splice(0,n)}}))}(n,e);const _=o.indexOf(x),y=s.indexOf(b),v=t=>({width:o[t]||0,height:s[t]||0});return{first:v(0),last:v(e-1),widest:v(_),highest:v(y),widths:o,heights:s}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){const e=this;e._reversePixels&&(t=1-t);const i=e._startPixel+t*e._length;return jt(e._alignToPixels?Xt(e.chart,i,0):i)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this,i=e.ticks||[];if(t>=0&&t<i.length){const n=i[t];return n.$context||(n.$context=function(t,e,i){return Object.assign(Object.create(t),{tick:i,index:e,type:"tick"})}(e.getContext(),t,n))}return e.$context||(e.$context=(n=e.chart.getContext(),o=e,Object.assign(Object.create(n),{scale:o,type:"scale"})));var n,o}_tickSize(){const t=this,e=t.options.ticks,i=Et(t.labelRotation),n=Math.abs(Math.cos(i)),o=Math.abs(Math.sin(i)),s=t._getLabelSizes(),a=e.autoSkipPadding||0,r=s?s.widest.width+a:0,l=s?s.highest.height+a:0;return t.isHorizontal()?l*n>r*o?r/n:l/o:l*o<r*n?l/n:r/o}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this,i=e.axis,n=e.chart,o=e.options,{grid:s,position:a}=o,r=s.offset,l=e.isHorizontal(),c=e.ticks.length+(r?1:0),h=Yi(s),d=[],u=s.setContext(e.getContext()),f=u.drawBorder?u.borderWidth:0,g=f/2,p=function(t){return Xt(n,t,f)};let m,x,b,_,y,v,w,M,k,S,P,D;if("top"===a)m=p(e.bottom),v=e.bottom-h,M=m-g,S=p(t.top)+g,D=t.bottom;else if("bottom"===a)m=p(e.top),S=t.top,D=p(t.bottom)-g,v=m+g,M=e.top+h;else if("left"===a)m=p(e.right),y=e.right-h,w=m-g,k=p(t.left)+g,P=t.right;else if("right"===a)m=p(e.left),k=t.left,P=p(t.right)-g,y=m+g,w=e.left+h;else if("x"===i){if("center"===a)m=p((t.top+t.bottom)/2+.5);else if(U(a)){const t=Object.keys(a)[0],i=a[t];m=p(e.chart.scales[t].getPixelForValue(i))}S=t.top,D=t.bottom,v=m+g,M=v+h}else if("y"===i){if("center"===a)m=p((t.left+t.right)/2);else if(U(a)){const t=Object.keys(a)[0],i=a[t];m=p(e.chart.scales[t].getPixelForValue(i))}y=m-g,w=y-h,k=t.left,P=t.right}const C=K(o.ticks.maxTicksLimit,c),O=Math.max(1,Math.ceil(c/C));for(x=0;x<c;x+=O){const t=s.setContext(e.getContext(x)),i=t.lineWidth,o=t.color,a=s.borderDash||[],c=t.borderDashOffset,h=t.tickWidth,u=t.tickColor,f=t.tickBorderDash||[],g=t.tickBorderDashOffset;b=$i(e,x,r),void 0!==b&&(_=Xt(n,b,i),l?y=w=k=P=_:v=M=S=D=_,d.push({tx1:y,ty1:v,tx2:w,ty2:M,x1:k,y1:S,x2:P,y2:D,width:i,color:o,borderDash:a,borderDashOffset:c,tickWidth:h,tickColor:u,tickBorderDash:f,tickBorderDashOffset:g}))}return e._ticksLength=c,e._borderValue=m,d}_computeLabelItems(t){const e=this,i=e.axis,n=e.options,{position:o,ticks:s}=n,a=e.isHorizontal(),r=e.ticks,{align:l,crossAlign:c,padding:h,mirror:d}=s,u=Yi(n.grid),f=u+h,g=d?-h:f,p=-Et(e.labelRotation),m=[];let x,b,_,y,v,w,M,k,S,P,D,C,O="middle";if("top"===o)w=e.bottom-g,M=e._getXAxisLabelAlignment();else if("bottom"===o)w=e.top+g,M=e._getXAxisLabelAlignment();else if("left"===o){const t=e._getYAxisLabelAlignment(u);M=t.textAlign,v=t.x}else if("right"===o){const t=e._getYAxisLabelAlignment(u);M=t.textAlign,v=t.x}else if("x"===i){if("center"===o)w=(t.top+t.bottom)/2+f;else if(U(o)){const t=Object.keys(o)[0],i=o[t];w=e.chart.scales[t].getPixelForValue(i)+f}M=e._getXAxisLabelAlignment()}else if("y"===i){if("center"===o)v=(t.left+t.right)/2-f;else if(U(o)){const t=Object.keys(o)[0],i=o[t];v=e.chart.scales[t].getPixelForValue(i)}M=e._getYAxisLabelAlignment(u).textAlign}"y"===i&&("start"===l?O="top":"end"===l&&(O="bottom"));const T=e._getLabelSizes();for(x=0,b=r.length;x<b;++x){_=r[x],y=_.label;const t=s.setContext(e.getContext(x));k=e.getPixelForTick(x)+s.labelOffset,S=e._resolveTickFontOptions(x),P=S.lineHeight,D=Y(y)?y.length:1;const i=D/2,n=t.color,l=t.textStrokeColor,h=t.textStrokeWidth;let u;if(a?(v=k,C="top"===o?"near"===c||0!==p?-D*P+P/2:"center"===c?-T.highest.height/2-i*P+P:-T.highest.height+P/2:"near"===c||0!==p?P/2:"center"===c?T.highest.height/2-i*P:T.highest.height-D*P,d&&(C*=-1)):(w=k,C=(1-D)*P/2),t.showLabelBackdrop){const e=Fe(t.backdropPadding),i=T.heights[x],n=T.widths[x];let o=w+C-e.top,s=v-e.left;switch(O){case"middle":o-=i/2;break;case"bottom":o-=i}switch(M){case"center":s-=n/2;break;case"right":s-=n}u={left:s,top:o,width:n+e.width,height:i+e.height,color:t.backdropColor}}m.push({rotation:p,label:y,font:S,color:n,strokeColor:l,strokeWidth:h,textOffset:C,textAlign:M,textBaseline:O,translation:[v,w],backdrop:u})}return m}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-Et(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align&&(i="right"),i}_getYAxisLabelAlignment(t){const e=this,{position:i,ticks:{crossAlign:n,mirror:o,padding:s}}=e.options,a=t+s,r=e._getLabelSizes().widest.width;let l,c;return"left"===i?o?(l="left",c=e.right+s):(c=e.right-a,"near"===n?l="right":"center"===n?(l="center",c-=r/2):(l="left",c=e.left)):"right"===i?o?(l="right",c=e.left+s):(c=e.left+a,"near"===n?l="left":"center"===n?(l="center",c+=r/2):(l="right",c=e.right)):l="right",{textAlign:l,x:c}}_computeLabelArea(){const t=this;if(t.options.ticks.mirror)return;const e=t.chart,i=t.options.position;return"left"===i||"right"===i?{top:0,left:t.left,bottom:e.height,right:t.right}:"top"===i||"bottom"===i?{top:t.top,left:0,bottom:t.bottom,right:e.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:n,width:o,height:s}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,n,o,s),t.restore())}getLineWidthForValue(t){const e=this,i=e.options.grid;if(!e._isVisible()||!i.display)return 0;const n=e.ticks.findIndex((e=>e.value===t));if(n>=0){return i.setContext(e.getContext(n)).lineWidth}return 0}drawGrid(t){const e=this,i=e.options.grid,n=e.ctx,o=e._gridLineItems||(e._gridLineItems=e._computeGridLineItems(t));let s,a;const r=(t,e,i)=>{i.width&&i.color&&(n.save(),n.lineWidth=i.width,n.strokeStyle=i.color,n.setLineDash(i.borderDash||[]),n.lineDashOffset=i.borderDashOffset,n.beginPath(),n.moveTo(t.x,t.y),n.lineTo(e.x,e.y),n.stroke(),n.restore())};if(i.display)for(s=0,a=o.length;s<a;++s){const t=o[s];i.drawOnChartArea&&r({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),i.drawTicks&&r({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const t=this,{chart:e,ctx:i,options:{grid:n}}=t,o=n.setContext(t.getContext()),s=n.drawBorder?o.borderWidth:0;if(!s)return;const a=n.setContext(t.getContext(0)).lineWidth,r=t._borderValue;let l,c,h,d;t.isHorizontal()?(l=Xt(e,t.left,s)-s/2,c=Xt(e,t.right,a)+a/2,h=d=r):(h=Xt(e,t.top,s)-s/2,d=Xt(e,t.bottom,a)+a/2,l=c=r),i.save(),i.lineWidth=o.borderWidth,i.strokeStyle=o.borderColor,i.beginPath(),i.moveTo(l,h),i.lineTo(c,d),i.stroke(),i.restore()}drawLabels(t){const e=this;if(!e.options.ticks.display)return;const i=e.ctx,n=e._computeLabelArea();n&&Zt(i,n);const o=e._labelItems||(e._labelItems=e._computeLabelItems(t));let s,a;for(s=0,a=o.length;s<a;++s){const t=o[s],e=t.font,n=t.label;t.backdrop&&(i.fillStyle=t.backdrop.color,i.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height)),ee(i,n,0,t.textOffset,e,t)}n&&Qt(i)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:n}}=this;if(!i.display)return;const s=Be(i.font),a=Fe(i.padding),r=i.align;let l=s.lineHeight/2;"bottom"===e?(l+=a.bottom,Y(i.text)&&(l+=s.lineHeight*(i.text.length-1))):l+=a.top;const{titleX:c,titleY:h,maxWidth:d,rotation:u}=function(t,e,i,n){const{top:s,left:a,bottom:r,right:l}=t;let c,h,d,u=0;return t.isHorizontal()?(h=o(n,a,l),d=Hi(t,i,e),c=l-a):(h=Hi(t,i,e),d=o(n,r,s),u="left"===i?-Mt:Mt),{titleX:h,titleY:d,maxWidth:c,rotation:u}}(this,l,e,r);ee(t,i.text,0,0,s,{color:i.color,maxWidth:d,rotation:u,textAlign:Xi(r,e,n),textBaseline:"middle",translation:[c,h]})}draw(t){const e=this;e._isVisible()&&(e.drawBackground(),e.drawGrid(t),e.drawBorder(),e.drawTitle(),e.drawLabels(t))}_layers(){const t=this,e=t.options,i=e.ticks&&e.ticks.z||0,n=e.grid&&e.grid.z||0;return t._isVisible()&&t.draw===qi.prototype.draw?[{z:n,draw(e){t.drawBackground(),t.drawGrid(e),t.drawTitle()}},{z:n+1,draw(){t.drawBorder()}},{z:i,draw(e){t.drawLabels(e)}}]:[{z:i,draw(e){t.draw(e)}}]}getMatchingVisibleMetas(t){const e=this,i=e.chart.getSortedVisibleDatasetMetas(),n=e.axis+"AxisID",o=[];let s,a;for(s=0,a=i.length;s<a;++s){const a=i[s];a[n]!==e.id||t&&a.type!==t||o.push(a)}return o}_resolveTickFontOptions(t){return Be(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this,e=t._resolveTickFontOptions(0).lineHeight;return(t.isHorizontal()?t.width:t.height)/e}}function Ki(t,e=[""],i=t,n,o=(()=>t[0])){ht(n)||(n=rn("_fallback",t));const s={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:i,_fallback:n,_getTarget:o,override:o=>Ki([o,...t],e,i,n)};return new Proxy(s,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,n)=>tn(i,n,(()=>function(t,e,i,n){let o;for(const s of e)if(o=rn(Qi(s,t),i),ht(o))return Ji(t,o)?sn(i,n,t,o):o}(n,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>ln(t).includes(e),ownKeys:t=>ln(t),set:(t,e,i)=>((t._storage||(t._storage=o()))[e]=i,delete t[e],delete t._keys,!0)})}function Gi(t,e,i,n){const o={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:Zi(t,n),setContext:e=>Gi(t,e,i,n),override:o=>Gi(t.override(o),e,i,n)};return new Proxy(o,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>tn(t,e,(()=>function(t,e,i){const{_proxy:n,_context:o,_subProxy:s,_descriptors:a}=t;let r=n[e];dt(r)&&a.isScriptable(e)&&(r=function(t,e,i,n){const{_proxy:o,_context:s,_subProxy:a,_stack:r}=i;if(r.has(t))throw new Error("Recursion detected: "+Array.from(r).join("->")+"->"+t);r.add(t),e=e(s,a||n),r.delete(t),U(e)&&(e=sn(o._scopes,o,t,e));return e}(e,r,t,i));Y(r)&&r.length&&(r=function(t,e,i,n){const{_proxy:o,_context:s,_subProxy:a,_descriptors:r}=i;if(ht(s.index)&&n(t))e=e[s.index%e.length];else if(U(e[0])){const i=e,n=o._scopes.filter((t=>t!==i));e=[];for(const l of i){const i=sn(n,o,t,l);e.push(Gi(i,s,a&&a[t],r))}}return e}(e,r,t,a.isIndexable));Ji(e,r)&&(r=Gi(r,o,s&&s[e],a));return r}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,n)=>(t[i]=n,delete e[i],!0)})}function Zi(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:n=e.indexable,_allKeys:o=e.allKeys}=t;return{allKeys:o,scriptable:i,indexable:n,isScriptable:dt(i)?i:()=>i,isIndexable:dt(n)?n:()=>n}}const Qi=(t,e)=>t?t+ct(e):e,Ji=(t,e)=>U(e)&&"adapters"!==t;function tn(t,e,i){let n=t[e];return ht(n)||(n=i(),ht(n)&&(t[e]=n)),n}function en(t,e,i){return dt(t)?t(e,i):t}const nn=(t,e)=>!0===t?e:"string"==typeof t?lt(e,t):void 0;function on(t,e,i,n){for(const o of e){const e=nn(i,o);if(e){t.add(e);const o=en(e._fallback,i,e);if(ht(o)&&o!==i&&o!==n)return o}else if(!1===e&&ht(n)&&i!==n)return null}return!1}function sn(t,e,i,n){const o=e._rootScopes,s=en(e._fallback,i,n),a=[...t,...o],r=new Set;r.add(n);let l=an(r,a,i,s||i);return null!==l&&((!ht(s)||s===i||(l=an(r,a,s,l),null!==l))&&Ki(Array.from(r),[""],o,s,(()=>function(t,e,i){const n=t._getTarget();e in n||(n[e]={});const o=n[e];if(Y(o)&&U(i))return i;return o}(e,i,n))))}function an(t,e,i,n){for(;i;)i=on(t,e,i,n);return i}function rn(t,e){for(const i of e){if(!i)continue;const e=i[t];if(ht(e))return e}}function ln(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}const cn=Number.EPSILON||1e-14,hn=(t,e)=>e<t.length&&!t[e].skip&&t[e],dn=t=>"x"===t?"y":"x";function un(t,e,i,n){const o=t.skip?e:t,s=e,a=i.skip?e:i,r=Bt(s,o),l=Bt(a,s);let c=r/(r+l),h=l/(r+l);c=isNaN(c)?0:c,h=isNaN(h)?0:h;const d=n*c,u=n*h;return{previous:{x:s.x-d*(a.x-o.x),y:s.y-d*(a.y-o.y)},next:{x:s.x+u*(a.x-o.x),y:s.y+u*(a.y-o.y)}}}function fn(t,e="x"){const i=dn(e),n=t.length,o=Array(n).fill(0),s=Array(n);let a,r,l,c=hn(t,0);for(a=0;a<n;++a)if(r=l,l=c,c=hn(t,a+1),l){if(c){const t=c[e]-l[e];o[a]=0!==t?(c[i]-l[i])/t:0}s[a]=r?c?Dt(o[a-1])!==Dt(o[a])?0:(o[a-1]+o[a])/2:o[a-1]:o[a]}!function(t,e,i){const n=t.length;let o,s,a,r,l,c=hn(t,0);for(let h=0;h<n-1;++h)l=c,c=hn(t,h+1),l&&c&&(At(e[h],0,cn)?i[h]=i[h+1]=0:(o=i[h]/e[h],s=i[h+1]/e[h],r=Math.pow(o,2)+Math.pow(s,2),r<=9||(a=3/Math.sqrt(r),i[h]=o*a*e[h],i[h+1]=s*a*e[h])))}(t,o,s),function(t,e,i="x"){const n=dn(i),o=t.length;let s,a,r,l=hn(t,0);for(let c=0;c<o;++c){if(a=r,r=l,l=hn(t,c+1),!r)continue;const o=r[i],h=r[n];a&&(s=(o-a[i])/3,r[`cp1${i}`]=o-s,r[`cp1${n}`]=h-s*e[c]),l&&(s=(l[i]-o)/3,r[`cp2${i}`]=o+s,r[`cp2${n}`]=h+s*e[c])}}(t,s,e)}function gn(t,e,i){return Math.max(Math.min(t,i),e)}function pn(t,e,i,n,o){let s,a,r,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)fn(t,o);else{let i=n?t[t.length-1]:t[0];for(s=0,a=t.length;s<a;++s)r=t[s],l=un(i,r,t[Math.min(s+1,a-(n?0:1))%a],e.tension),r.cp1x=l.previous.x,r.cp1y=l.previous.y,r.cp2x=l.next.x,r.cp2y=l.next.y,i=r}e.capBezierPoints&&function(t,e){let i,n,o,s,a,r=Gt(t[0],e);for(i=0,n=t.length;i<n;++i)a=s,s=r,r=i<n-1&&Gt(t[i+1],e),s&&(o=t[i],a&&(o.cp1x=gn(o.cp1x,e.left,e.right),o.cp1y=gn(o.cp1y,e.top,e.bottom)),r&&(o.cp2x=gn(o.cp2x,e.left,e.right),o.cp2y=gn(o.cp2y,e.top,e.bottom)))}(t,i)}function mn(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function xn(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:"middle"===n?i<.5?t.y:e.y:"after"===n?i<1?t.y:e.y:i>0?e.y:t.y}}function bn(t,e,i,n){const o={x:t.cp2x,y:t.cp2y},s={x:e.cp1x,y:e.cp1y},a=mn(t,o,i),r=mn(o,s,i),l=mn(s,e,i),c=mn(a,r,i),h=mn(r,l,i);return mn(c,h,i)}function _n(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function yn(t,e){let i,n;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,n=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=n)}function vn(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function wn(t){return"angle"===t?{between:Nt,compare:Vt,normalize:Wt}:{between:(t,e,i)=>t>=Math.min(e,i)&&t<=Math.max(i,e),compare:(t,e)=>t-e,normalize:t=>t}}function Mn({start:t,end:e,count:i,loop:n,style:o}){return{start:t%i,end:e%i,loop:n&&(e-t+1)%i==0,style:o}}function kn(t,e,i){if(!i)return[t];const{property:n,start:o,end:s}=i,a=e.length,{compare:r,between:l,normalize:c}=wn(n),{start:h,end:d,loop:u,style:f}=function(t,e,i){const{property:n,start:o,end:s}=i,{between:a,normalize:r}=wn(n),l=e.length;let c,h,{start:d,end:u,loop:f}=t;if(f){for(d+=l,u+=l,c=0,h=l;c<h&&a(r(e[d%l][n]),o,s);++c)d--,u--;d%=l,u%=l}return u<d&&(u+=l),{start:d,end:u,loop:f,style:t.style}}(t,e,i),g=[];let p,m,x,b=!1,_=null;const y=()=>b||l(o,x,p)&&0!==r(o,x),v=()=>!b||0===r(s,p)||l(s,x,p);for(let t=h,i=h;t<=d;++t)m=e[t%a],m.skip||(p=c(m[n]),p!==x&&(b=l(p,o,s),null===_&&y()&&(_=0===r(p,o)?t:i),null!==_&&v()&&(g.push(Mn({start:_,end:t,loop:u,count:a,style:f})),_=null),i=t,x=p));return null!==_&&g.push(Mn({start:_,end:d,loop:u,count:a,style:f})),g}function Sn(t,e){const i=[],n=t.segments;for(let o=0;o<n.length;o++){const s=kn(n[o],t.points,e);s.length&&i.push(...s)}return i}function Pn(t,e){const i=t.points,n=t.options.spanGaps,o=i.length;if(!o)return[];const s=!!t._loop,{start:a,end:r}=function(t,e,i,n){let o=0,s=e-1;if(i&&!n)for(;o<e&&!t[o].skip;)o++;for(;o<e&&t[o].skip;)o++;for(o%=e,i&&(s+=o);s>o&&t[s%e].skip;)s--;return s%=e,{start:o,end:s}}(i,o,s,n);if(!0===n)return Dn([{start:a,end:r,loop:s}],i,e);return Dn(function(t,e,i,n){const o=t.length,s=[];let a,r=e,l=t[e];for(a=e+1;a<=i;++a){const i=t[a%o];i.skip||i.stop?l.skip||(n=!1,s.push({start:e%o,end:(a-1)%o,loop:n}),e=r=i.stop?a:null):(r=a,l.skip&&(e=a)),l=i}return null!==r&&s.push({start:e%o,end:r%o,loop:n}),s}(i,a,r<a?r+o:r,!!t._fullLoop&&0===a&&r===o-1),i,e)}function Dn(t,e,i){return i&&i.setContext&&e?function(t,e,i){const n=e.length,o=[];let s=t[0].start,a=s;for(const r of t){let t,l,c=e[s%n];for(a=s+1;a<=r.end;a++){const h=e[a%n];l=Cn(i.setContext({type:"segment",p0:c,p1:h})),On(l,t)&&(o.push({start:s,end:a-1,loop:r.loop,style:t}),t=l,s=a-1),c=h,t=l}s<a-1&&(o.push({start:s,end:a-1,loop:r.loop,style:l}),s=a-1)}return o}(t,e,i):t}function Cn(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function On(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}var Tn=Object.freeze({__proto__:null,easingEffects:xi,color:W,getHoverColor:N,noop:H,uid:j,isNullOrUndef:$,isArray:Y,isObject:U,isFinite:X,finiteOrDefault:q,valueOrDefault:K,toPercentage:G,toDimension:Z,callback:Q,each:J,_elementsEqual:tt,clone:et,_merger:nt,merge:ot,mergeIf:st,_mergerIf:at,_deprecated:function(t,e,i,n){void 0!==e&&console.warn(t+': "'+i+'" is deprecated. Please use "'+n+'" instead')},resolveObjectKey:lt,_capitalize:ct,defined:ht,isFunction:dt,setsEqual:ut,toFontString:$t,_measureText:Yt,_longestText:Ut,_alignPixel:Xt,clearCanvas:qt,drawPoint:Kt,_isPointInArea:Gt,clipArea:Zt,unclipArea:Qt,_steppedLineTo:Jt,_bezierCurveTo:te,renderText:ee,addRoundedRectPath:ne,_lookup:oe,_lookupByKey:se,_rlookupByKey:ae,_filterBetween:re,listenArrayEvents:ce,unlistenArrayEvents:he,_arrayUnique:de,_createResolver:Ki,_attachContext:Gi,_descriptors:Zi,splineCurve:un,splineCurveMonotone:fn,_updateBezierControlPoints:pn,_getParentNode:ue,getStyle:pe,getRelativePosition:be,getMaximumSize:ye,retinaScale:ve,supportsEventListenerOptions:we,readUsedSize:Me,fontString:function(t,e,i){return e+" "+t+"px "+i},requestAnimFrame:t,throttled:e,debounce:i,_toLeftRightCenter:n,_alignStartEnd:o,_textX:s,_pointInLine:mn,_steppedInterpolation:xn,_bezierInterpolation:bn,formatNumber:Fi,toLineHeight:Re,_readValueToProps:Ee,toTRBL:ze,toTRBLCorners:Ie,toPadding:Fe,toFont:Be,resolve:Ve,_addGrace:We,PI:bt,TAU:_t,PITAU:yt,INFINITY:vt,RAD_PER_DEG:wt,HALF_PI:Mt,QUARTER_PI:kt,TWO_THIRDS_PI:St,log10:Pt,sign:Dt,niceNum:Ct,_factorize:Ot,isNumber:Tt,almostEquals:At,almostWhole:Lt,_setMinAndMaxByKey:Rt,toRadians:Et,toDegrees:zt,_decimalPlaces:It,getAngleFromPoint:Ft,distanceBetweenPoints:Bt,_angleDiff:Vt,_normalizeAngle:Wt,_angleBetween:Nt,_limitValue:Ht,_int16Range:jt,getRtlAdapter:_n,overrideTextDirection:yn,restoreTextDirection:vn,_boundSegment:kn,_boundSegments:Sn,_computeSegments:Pn});class An{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=this,i=Object.getPrototypeOf(t);let n;(function(t){return"id"in t&&"defaults"in t})(i)&&(n=e.register(i));const o=e.items,s=t.id,a=e.scope+"."+s;if(!s)throw new Error("class does not have id: "+t);return s in o||(o[s]=t,function(t,e,i){const n=ot(Object.create(null),[i?xt.get(i):{},xt.get(e),t.defaults]);xt.set(e,n),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const n=i.split("."),o=n.pop(),s=[t].concat(n).join("."),a=e[i].split("."),r=a.pop(),l=a.join(".");xt.route(s,o,l,r)}))}(e,t.defaultRoutes);t.descriptors&&xt.describe(e,t.descriptors)}(t,a,n),e.override&&xt.override(t.id,t.overrides)),a}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,n=this.scope;i in e&&delete e[i],n&&i in xt[n]&&(delete xt[n][i],this.override&&delete ft[i])}}var Ln=new class{constructor(){this.controllers=new An(Ei,"datasets",!0),this.elements=new An(zi,"elements"),this.plugins=new An(Object,"plugins"),this.scales=new An(qi,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){const n=this;[...e].forEach((e=>{const o=i||n._getRegistryForType(e);i||o.isForType(e)||o===n.plugins&&e.id?n._exec(t,o,e):J(e,(e=>{const o=i||n._getRegistryForType(e);n._exec(t,o,e)}))}))}_exec(t,e,i){const n=ct(t);Q(i["before"+n],[],i),e[t](i),Q(i["after"+n],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const n=e.get(t);if(void 0===n)throw new Error('"'+t+'" is not a registered '+i+".");return n}};class Rn{constructor(){this._init=[]}notify(t,e,i,n){const o=this;"beforeInit"===e&&(o._init=o._createDescriptors(t,!0),o._notify(o._init,t,"install"));const s=n?o._descriptors(t).filter(n):o._descriptors(t),a=o._notify(s,t,e,i);return"destroy"===e&&(o._notify(s,t,"stop"),o._notify(o._init,t,"uninstall")),a}_notify(t,e,i,n){n=n||{};for(const o of t){const t=o.plugin;if(!1===Q(t[i],[e,n,o.options],t)&&n.cancelable)return!1}return!0}invalidate(){$(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,n=K(i.options&&i.options.plugins,{}),o=function(t){const e=[],i=Object.keys(Ln.plugins.items);for(let t=0;t<i.length;t++)e.push(Ln.getPlugin(i[t]));const n=t.plugins||[];for(let t=0;t<n.length;t++){const i=n[t];-1===e.indexOf(i)&&e.push(i)}return e}(i);return!1!==n||e?function(t,e,i,n){const o=[],s=t.getContext();for(let a=0;a<e.length;a++){const r=e[a],l=En(i[r.id],n);null!==l&&o.push({plugin:r,options:zn(t.config,r,l,s)})}return o}(t,o,n,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,n=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(n(e,i),t,"stop"),this._notify(n(i,e),t,"start")}}function En(t,e){return e||!1!==t?!0===t?{}:t:null}function zn(t,e,i,n){const o=t.pluginScopeKeys(e),s=t.getOptionScopes(i,o);return t.createResolver(s,n,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function In(t,e){const i=xt.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function Fn(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(i=e.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.charAt(0).toLowerCase();var i}function Bn(t){const e=t.options||(t.options={});e.plugins=K(e.plugins,{}),e.scales=function(t,e){const i=ft[t.type]||{scales:{}},n=e.scales||{},o=In(t.type,e),s=Object.create(null),a=Object.create(null);return Object.keys(n).forEach((t=>{const e=n[t],r=Fn(t,e),l=function(t,e){return t===e?"_index_":"_value_"}(r,o),c=i.scales||{};s[r]=s[r]||t,a[t]=st(Object.create(null),[{axis:r},e,c[r],c[l]])})),t.data.datasets.forEach((i=>{const o=i.type||t.type,r=i.indexAxis||In(o,e),l=(ft[o]||{}).scales||{};Object.keys(l).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,r),o=i[e+"AxisID"]||s[e]||e;a[o]=a[o]||Object.create(null),st(a[o],[{axis:e},n[o],l[t]])}))})),Object.keys(a).forEach((t=>{const e=a[t];st(e,[xt.scales[e.type],xt.scale])})),a}(t,e)}function Vn(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const Wn=new Map,Nn=new Set;function Hn(t,e){let i=Wn.get(t);return i||(i=e(),Wn.set(t,i),Nn.add(i)),i}const jn=(t,e,i)=>{const n=lt(e,i);void 0!==n&&t.add(n)};class $n{constructor(t){this._config=function(t){return(t=t||{}).data=Vn(t.data),Bn(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Vn(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),Bn(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return Hn(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return Hn(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return Hn(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return Hn(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let n=i.get(t);return n&&!e||(n=new Map,i.set(t,n)),n}getOptionScopes(t,e,i){const{options:n,type:o}=this,s=this._cachedScopes(t,i),a=s.get(e);if(a)return a;const r=new Set;e.forEach((e=>{t&&(r.add(t),e.forEach((e=>jn(r,t,e)))),e.forEach((t=>jn(r,n,t))),e.forEach((t=>jn(r,ft[o]||{},t))),e.forEach((t=>jn(r,xt,t))),e.forEach((t=>jn(r,gt,t)))}));const l=Array.from(r);return Nn.has(e)&&s.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,ft[e]||{},xt.datasets[e]||{},{type:e},xt,gt]}resolveNamedOptions(t,e,i,n=[""]){const o={$shared:!0},{resolver:s,subPrefixes:a}=Yn(this._resolverCache,t,n);let r=s;if(function(t,e){const{isScriptable:i,isIndexable:n}=Zi(t);for(const o of e)if(i(o)&&dt(t[o])||n(o)&&Y(t[o]))return!0;return!1}(s,e)){o.$shared=!1;r=Gi(s,i=dt(i)?i():i,this.createResolver(t,i,a))}for(const t of e)o[t]=r[t];return o}createResolver(t,e,i=[""],n){const{resolver:o}=Yn(this._resolverCache,t,i);return U(e)?Gi(o,e,void 0,n):o}}function Yn(t,e,i){let n=t.get(e);n||(n=new Map,t.set(e,n));const o=i.join();let s=n.get(o);if(!s){s={resolver:Ki(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},n.set(o,s)}return s}const Un=["top","bottom","left","right","chartArea"];function Xn(t,e){return"top"===t||"bottom"===t||-1===Un.indexOf(t)&&"x"===e}function qn(t,e){return function(i,n){return i[t]===n[t]?i[e]-n[e]:i[t]-n[t]}}function Kn(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),Q(i&&i.onComplete,[t],e)}function Gn(t){const e=t.chart,i=e.options.animation;Q(i&&i.onProgress,[t],e)}function Zn(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Qn(t){return Zn()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const Jn={},to=t=>{const e=Qn(t);return Object.values(Jn).filter((t=>t.canvas===e)).pop()};class eo{constructor(t,e){const n=this;this.config=e=new $n(e);const o=Qn(t),s=to(o);if(s)throw new Error("Canvas is already in use. Chart with ID '"+s.id+"' must be destroyed before the canvas can be reused.");const r=e.createResolver(e.chartOptionScopes(),n.getContext());this.platform=n._initializePlatform(o,e);const l=n.platform.acquireContext(o,r.aspectRatio),c=l&&l.canvas,h=c&&c.height,d=c&&c.width;this.id=j(),this.ctx=l,this.canvas=c,this.width=d,this.height=h,this._options=r,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this.scale=void 0,this._plugins=new Rn,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=i((()=>this.update("resize")),r.resizeDelay||0),Jn[n.id]=n,l&&c?(a.listen(n,"complete",Kn),a.listen(n,"progress",Gn),n._initialize(),n.attached&&n.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:n,_aspectRatio:o}=this;return $(t)?e&&o?o:n?i/n:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){const t=this;return t.notifyPlugins("beforeInit"),t.options.responsive?t.resize():ve(t,t.options.devicePixelRatio),t.bindEvents(),t.notifyPlugins("afterInit"),t}_initializePlatform(t,e){return e.platform?new e.platform:!Zn()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?new Je:new ui}clear(){return qt(this.canvas,this.ctx),this}stop(){return a.stop(this),this}resize(t,e){a.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this,n=i.options,o=i.canvas,s=n.maintainAspectRatio&&i.aspectRatio,a=i.platform.getMaximumSize(o,t,e,s),r=n.devicePixelRatio||i.platform.getDevicePixelRatio();i.width=a.width,i.height=a.height,i._aspectRatio=i.aspectRatio,ve(i,r,!0)&&(i.notifyPlugins("resize",{size:a}),Q(n.onResize,[i,a],i),i.attached&&i._doResize()&&i.render())}ensureScalesHaveIDs(){J(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this,e=t.options,i=e.scales,n=t.scales,o=Object.keys(n).reduce(((t,e)=>(t[e]=!1,t)),{});let s=[];i&&(s=s.concat(Object.keys(i).map((t=>{const e=i[t],n=Fn(t,e),o="r"===n,s="x"===n;return{options:e,dposition:o?"chartArea":s?"bottom":"left",dtype:o?"radialLinear":s?"category":"linear"}})))),J(s,(i=>{const s=i.options,a=s.id,r=Fn(a,s),l=K(s.type,i.dtype);void 0!==s.position&&Xn(s.position,r)===Xn(i.dposition)||(s.position=i.dposition),o[a]=!0;let c=null;if(a in n&&n[a].type===l)c=n[a];else{c=new(Ln.getScale(l))({id:a,type:l,ctx:t.ctx,chart:t}),n[c.id]=c}c.init(s,e)})),J(o,((t,e)=>{t||delete n[e]})),J(n,(e=>{Ze.configure(t,e,e.options),Ze.addBox(t,e)}))}_updateMetasets(){const t=this,e=t._metasets,i=t.data.datasets.length,n=e.length;if(e.sort(((t,e)=>t.index-e.index)),n>i){for(let e=i;e<n;++e)t._destroyDatasetMeta(e);e.splice(i,n-i)}t._sortedMetasets=e.slice(0).sort(qn("order","index"))}_removeUnreferencedMetasets(){const t=this,{_metasets:e,data:{datasets:i}}=t;e.length>i.length&&delete t._stacks,e.forEach(((e,n)=>{0===i.filter((t=>t===e._dataset)).length&&t._destroyDatasetMeta(n)}))}buildOrUpdateControllers(){const t=this,e=[],i=t.data.datasets;let n,o;for(t._removeUnreferencedMetasets(),n=0,o=i.length;n<o;n++){const o=i[n];let s=t.getDatasetMeta(n);const a=o.type||t.config.type;if(s.type&&s.type!==a&&(t._destroyDatasetMeta(n),s=t.getDatasetMeta(n)),s.type=a,s.indexAxis=o.indexAxis||In(a,t.options),s.order=o.order||0,s.index=n,s.label=""+o.label,s.visible=t.isDatasetVisible(n),s.controller)s.controller.updateIndex(n),s.controller.linkScales();else{const i=Ln.getController(a),{datasetElementType:o,dataElementType:r}=xt.datasets[a];Object.assign(i.prototype,{dataElementType:Ln.getElement(r),datasetElementType:o&&Ln.getElement(o)}),s.controller=new i(t,n),e.push(s.controller)}}return t._updateMetasets(),e}_resetElements(){const t=this;J(t.data.datasets,((e,i)=>{t.getDatasetMeta(i).controller.reset()}),t)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this,i=e.config;i.update(),e._options=i.createResolver(i.chartOptionScopes(),e.getContext()),J(e.scales,(t=>{Ze.removeBox(e,t)}));const n=e._animationsDisabled=!e.options.animation;e.ensureScalesHaveIDs(),e.buildOrUpdateScales();const o=new Set(Object.keys(e._listeners)),s=new Set(e.options.events);if(ut(o,s)&&!!this._responsiveListeners===e.options.responsive||(e.unbindEvents(),e.bindEvents()),e._plugins.invalidate(),!1===e.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const a=e.buildOrUpdateControllers();e.notifyPlugins("beforeElementsUpdate");let r=0;for(let t=0,i=e.data.datasets.length;t<i;t++){const{controller:i}=e.getDatasetMeta(t),o=!n&&-1===a.indexOf(i);i.buildOrUpdateElements(o),r=Math.max(+i.getMaxOverflow(),r)}e._minPadding=r,e._updateLayout(r),n||J(a,(t=>{t.reset()})),e._updateDatasets(t),e.notifyPlugins("afterUpdate",{mode:t}),e._layers.sort(qn("z","_idx")),e._lastEvent&&e._eventHandler(e._lastEvent,!0),e.render()}_updateLayout(t){const e=this;if(!1===e.notifyPlugins("beforeLayout",{cancelable:!0}))return;Ze.update(e,e.width,e.height,t);const i=e.chartArea,n=i.width<=0||i.height<=0;e._layers=[],J(e.boxes,(t=>{n&&"chartArea"===t.position||(t.configure&&t.configure(),e._layers.push(...t._layers()))}),e),e._layers.forEach(((t,e)=>{t._idx=e})),e.notifyPlugins("afterLayout")}_updateDatasets(t){const e=this,i="function"==typeof t;if(!1!==e.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let n=0,o=e.data.datasets.length;n<o;++n)e._updateDataset(n,i?t({datasetIndex:n}):t);e.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this,n=i.getDatasetMeta(t),o={meta:n,index:t,mode:e,cancelable:!0};!1!==i.notifyPlugins("beforeDatasetUpdate",o)&&(n.controller._update(e),o.cancelable=!1,i.notifyPlugins("afterDatasetUpdate",o))}render(){const t=this;!1!==t.notifyPlugins("beforeRender",{cancelable:!0})&&(a.has(t)?t.attached&&!a.running(t)&&a.start(t):(t.draw(),Kn({chart:t})))}draw(){const t=this;let e;if(t._resizeBeforeDraw){const{width:e,height:i}=t._resizeBeforeDraw;t._resize(e,i),t._resizeBeforeDraw=null}if(t.clear(),t.width<=0||t.height<=0)return;if(!1===t.notifyPlugins("beforeDraw",{cancelable:!0}))return;const i=t._layers;for(e=0;e<i.length&&i[e].z<=0;++e)i[e].draw(t.chartArea);for(t._drawDatasets();e<i.length;++e)i[e].draw(t.chartArea);t.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let n,o;for(n=0,o=e.length;n<o;++n){const o=e[n];t&&!o.visible||i.push(o)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){const t=this;if(!1===t.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const e=t.getSortedVisibleDatasetMetas();for(let i=e.length-1;i>=0;--i)t._drawDataset(e[i]);t.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this,i=e.ctx,n=t._clip,o=!n.disabled,s=e.chartArea,a={meta:t,index:t.index,cancelable:!0};!1!==e.notifyPlugins("beforeDatasetDraw",a)&&(o&&Zt(i,{left:!1===n.left?0:s.left-n.left,right:!1===n.right?e.width:s.right+n.right,top:!1===n.top?0:s.top-n.top,bottom:!1===n.bottom?e.height:s.bottom+n.bottom}),t.controller.draw(),o&&Qt(i),a.cancelable=!1,e.notifyPlugins("afterDatasetDraw",a))}getElementsAtEventForMode(t,e,i,n){const o=Te.modes[e];return"function"==typeof o?o(this,t,i,n):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let n=i.filter((t=>t&&t._dataset===e)).pop();return n||(n={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(n)),n}getContext(){return this.$context||(this.$context={chart:this,type:"chart"})}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateDatasetVisibility(t,e){const i=this,n=e?"show":"hide",o=i.getDatasetMeta(t),s=o.controller._resolveAnimations(void 0,n);i.setDatasetVisibility(t,e),s.update(o,{visible:e}),i.update((e=>e.datasetIndex===t?n:void 0))}hide(t){this._updateDatasetVisibility(t,!1)}show(t){this._updateDatasetVisibility(t,!0)}_destroyDatasetMeta(t){const e=this,i=e._metasets&&e._metasets[t];i&&i.controller&&(i.controller._destroy(),delete e._metasets[t])}destroy(){const t=this,{canvas:e,ctx:i}=t;let n,o;for(t.stop(),a.remove(t),n=0,o=t.data.datasets.length;n<o;++n)t._destroyDatasetMeta(n);t.config.clearCache(),e&&(t.unbindEvents(),qt(e,i),t.platform.releaseContext(i),t.canvas=null,t.ctx=null),t.notifyPlugins("destroy"),delete Jn[t.id]}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this,e=t._listeners,i=t.platform,n=function(e,i,n){e.offsetX=i,e.offsetY=n,t._eventHandler(e)};J(t.options.events,(o=>((n,o)=>{i.addEventListener(t,n,o),e[n]=o})(o,n)))}bindResponsiveEvents(){const t=this;t._responsiveListeners||(t._responsiveListeners={});const e=t._responsiveListeners,i=t.platform,n=(n,o)=>{i.addEventListener(t,n,o),e[n]=o},o=(n,o)=>{e[n]&&(i.removeEventListener(t,n,o),delete e[n])},s=(e,i)=>{t.canvas&&t.resize(e,i)};let a;const r=()=>{o("attach",r),t.attached=!0,t.resize(),n("resize",s),n("detach",a)};a=()=>{t.attached=!1,o("resize",s),n("attach",r)},i.isAttached(t.canvas)?r():a()}unbindEvents(){const t=this;J(t._listeners,((e,i)=>{t.platform.removeEventListener(t,i,e)})),t._listeners={},J(t._responsiveListeners,((e,i)=>{t.platform.removeEventListener(t,i,e)})),t._responsiveListeners=void 0}updateHoverStyle(t,e,i){const n=i?"set":"remove";let o,s,a,r;for("dataset"===e&&(o=this.getDatasetMeta(t[0].datasetIndex),o.controller["_"+n+"DatasetHoverStyle"]()),a=0,r=t.length;a<r;++a){s=t[a];const e=s&&this.getDatasetMeta(s.datasetIndex).controller;e&&e[n+"HoverStyle"](s.element,s.datasetIndex,s.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this,i=e._active||[],n=t.map((({datasetIndex:t,index:i})=>{const n=e.getDatasetMeta(t);if(!n)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:n.data[i],index:i}}));!tt(n,i)&&(e._active=n,e._updateHoverStyles(n,i))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}_updateHoverStyles(t,e,i){const n=this,o=n.options.hover,s=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),a=s(e,t),r=i?t:s(t,e);a.length&&n.updateHoverStyle(a,o.mode,!1),r.length&&o.mode&&n.updateHoverStyle(r,o.mode,!0)}_eventHandler(t,e){const i=this,n={event:t,replay:e,cancelable:!0},o=e=>(e.options.events||this.options.events).includes(t.type);if(!1===i.notifyPlugins("beforeEvent",n,o))return;const s=i._handleEvent(t,e);return n.cancelable=!1,i.notifyPlugins("afterEvent",n,o),(s||n.changed)&&i.render(),i}_handleEvent(t,e){const i=this,{_active:n=[],options:o}=i,s=o.hover,a=e;let r=[],l=!1,c=null;return"mouseout"!==t.type&&(r=i.getElementsAtEventForMode(t,s.mode,s,a),c="click"===t.type?i._lastEvent:t),i._lastEvent=null,Gt(t,i.chartArea,i._minPadding)&&(Q(o.onHover,[t,r,i],i),"mouseup"!==t.type&&"click"!==t.type&&"contextmenu"!==t.type||Q(o.onClick,[t,r,i],i)),l=!tt(r,n),(l||e)&&(i._active=r,i._updateHoverStyles(r,n,e)),i._lastEvent=c,l}}const io=()=>J(eo.instances,(t=>t._plugins.invalidate())),no=!0;function oo(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}Object.defineProperties(eo,{defaults:{enumerable:no,value:xt},instances:{enumerable:no,value:Jn},overrides:{enumerable:no,value:ft},registry:{enumerable:no,value:Ln},version:{enumerable:no,value:"3.4.1"},getChart:{enumerable:no,value:to},register:{enumerable:no,value:(...t)=>{Ln.add(...t),io()}},unregister:{enumerable:no,value:(...t)=>{Ln.remove(...t),io()}}});class so{constructor(t){this.options=t||{}}formats(){return oo()}parse(t,e){return oo()}format(t,e){return oo()}add(t,e,i){return oo()}diff(t,e,i){return oo()}startOf(t,e,i){return oo()}endOf(t,e){return oo()}}so.override=function(t){Object.assign(so.prototype,t)};var ao={_date:so};function ro(t){const e=function(t){if(!t._cache.$bar){const e=t.getMatchingVisibleMetas("bar");let i=[];for(let n=0,o=e.length;n<o;n++)i=i.concat(e[n].controller.getAllParsedValues(t));t._cache.$bar=de(i.sort(((t,e)=>t-e)))}return t._cache.$bar}(t);let i,n,o,s,a=t._length;const r=()=>{32767!==o&&-32768!==o&&(ht(s)&&(a=Math.min(a,Math.abs(o-s)||a)),s=o)};for(i=0,n=e.length;i<n;++i)o=t.getPixelForValue(e[i]),r();for(s=void 0,i=0,n=t.ticks.length;i<n;++i)o=t.getPixelForTick(i),r();return a}function lo(t,e,i,n){return Y(t)?function(t,e,i,n){const o=i.parse(t[0],n),s=i.parse(t[1],n),a=Math.min(o,s),r=Math.max(o,s);let l=a,c=r;Math.abs(a)>Math.abs(r)&&(l=r,c=a),e[i.axis]=c,e._custom={barStart:l,barEnd:c,start:o,end:s,min:a,max:r}}(t,e,i,n):e[i.axis]=i.parse(t,n),e}function co(t,e,i,n){const o=t.iScale,s=t.vScale,a=o.getLabels(),r=o===s,l=[];let c,h,d,u;for(c=i,h=i+n;c<h;++c)u=e[c],d={},d[o.axis]=r||o.parse(a[c],c),l.push(lo(u,d,s,c));return l}function ho(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}class uo extends Ei{parsePrimitiveData(t,e,i,n){return co(t,e,i,n)}parseArrayData(t,e,i,n){return co(t,e,i,n)}parseObjectData(t,e,i,n){const{iScale:o,vScale:s}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,l="x"===o.axis?a:r,c="x"===s.axis?a:r,h=[];let d,u,f,g;for(d=i,u=i+n;d<u;++d)g=e[d],f={},f[o.axis]=o.parse(lt(g,l),d),h.push(lo(lt(g,c),f,s,d));return h}updateRangeFromParsed(t,e,i,n){super.updateRangeFromParsed(t,e,i,n);const o=i._custom;o&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,o.min),t.max=Math.max(t.max,o.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:n}=e,o=this.getParsed(t),s=o._custom,a=ho(s)?"["+s.start+", "+s.end+"]":""+n.getLabelForValue(o[n.axis]);return{label:""+i.getLabelForValue(o[i.axis]),value:a}}initialize(){const t=this;t.enableOptionSharing=!0,super.initialize();t._cachedMeta.stack=t.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,n){const o=this,s="reset"===n,a=o._cachedMeta.vScale,r=a.getBasePixel(),l=a.isHorizontal(),c=o._getRuler(),h=o.resolveDataElementOptions(e,n),d=o.getSharedOptions(h),u=o.includeOptions(n,d);o.updateSharedOptions(d,n,h);for(let h=e;h<e+i;h++){const e=o.getParsed(h),i=s||$(e[a.axis])?{base:r,head:r}:o._calculateBarValuePixels(h),f=o._calculateBarIndexPixels(h,c),g=(e._stacks||{})[a.axis],p={horizontal:l,base:i.base,enableBorderRadius:!g||ho(e._custom)||o.index===g._top||o.index===g._bottom,x:l?i.head:f.center,y:l?f.center:i.head,height:l?f.size:Math.abs(i.size),width:l?Math.abs(i.size):f.size};u&&(p.options=d||o.resolveDataElementOptions(h,t[h].active?"active":n)),o.updateElement(t[h],h,p,n)}}_getStacks(t,e){const i=this._cachedMeta.iScale,n=i.getMatchingVisibleMetas(this._type),o=i.options.stacked,s=n.length,a=[];let r,l;for(r=0;r<s;++r)if(l=n[r],l.controller.options.grouped){if(void 0!==e){const t=l.controller.getParsed(e)[l.controller._cachedMeta.vScale.axis];if($(t)||isNaN(t))continue}if((!1===o||-1===a.indexOf(l.stack)||void 0===o&&void 0===l.stack)&&a.push(l.stack),l.index===t)break}return a.length||a.push(void 0),a}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const n=this._getStacks(t,i),o=void 0!==e?n.indexOf(e):-1;return-1===o?n.length-1:o}_getRuler(){const t=this,e=t.options,i=t._cachedMeta,n=i.iScale,o=[];let s,a;for(s=0,a=i.data.length;s<a;++s)o.push(n.getPixelForValue(t.getParsed(s)[n.axis],s));const r=e.barThickness;return{min:r||ro(n),pixels:o,start:n._startPixel,end:n._endPixel,stackCount:t._getStackCount(),scale:n,grouped:e.grouped,ratio:r?1:e.categoryPercentage*e.barPercentage}}_calculateBarValuePixels(t){const e=this,{vScale:i,_stacked:n}=e._cachedMeta,{base:o,minBarLength:s}=e.options,a=e.getParsed(t),r=a._custom,l=ho(r);let c,h,d=a[i.axis],u=0,f=n?e.applyStack(i,a,n):d;f!==d&&(u=f-d,f=d),l&&(d=r.barStart,f=r.barEnd-r.barStart,0!==d&&Dt(d)!==Dt(r.barEnd)&&(u=0),u+=d);const g=$(o)||l?u:o;let p=i.getPixelForValue(g);c=this.chart.getDataVisibility(t)?i.getPixelForValue(u+f):p,h=c-p,void 0!==s&&Math.abs(h)<s&&(h=h<0?-s:s,0===d&&(p-=h/2),c=p+h);const m=o||0;if(p===i.getPixelForValue(m)){const t=i.getLineWidthForValue(m)/2;h>0?(p+=t,h-=t):h<0&&(p-=t,h+=t)}return{size:h,base:p,head:c,center:c+h/2}}_calculateBarIndexPixels(t,e){const i=this,n=e.scale,o=i.options,s=o.skipNull,a=K(o.maxBarThickness,1/0);let r,l;if(e.grouped){const n=s?i._getStackCount(t):e.stackCount,c="flex"===o.barThickness?function(t,e,i,n){const o=e.pixels,s=o[t];let a=t>0?o[t-1]:null,r=t<o.length-1?o[t+1]:null;const l=i.categoryPercentage;null===a&&(a=s-(null===r?e.end-e.start:r-s)),null===r&&(r=s+s-a);const c=s-(s-Math.min(a,r))/2*l;return{chunk:Math.abs(r-a)/2*l/n,ratio:i.barPercentage,start:c}}(t,e,o,n):function(t,e,i,n){const o=i.barThickness;let s,a;return $(o)?(s=e.min*i.categoryPercentage,a=i.barPercentage):(s=o*n,a=1),{chunk:s/n,ratio:a,start:e.pixels[t]-s/2}}(t,e,o,n),h=i._getStackIndex(i.index,i._cachedMeta.stack,s?t:void 0);r=c.start+c.chunk*h+c.chunk/2,l=Math.min(a,c.chunk*c.ratio)}else r=n.getPixelForValue(i.getParsed(t)[n.axis],t),l=Math.min(a,e.min*e.ratio);return{base:r-l/2,head:r+l/2,center:r,size:l}}draw(){const t=this,e=t._cachedMeta,i=e.vScale,n=e.data,o=n.length;let s=0;for(;s<o;++s)null!==t.getParsed(s)[i.axis]&&n[s].draw(t._ctx)}}uo.id="bar",uo.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},uo.overrides={interaction:{mode:"index"},scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class fo extends Ei{initialize(){this.enableOptionSharing=!0,super.initialize()}parseObjectData(t,e,i,n){const{xScale:o,yScale:s}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,l=[];let c,h,d;for(c=i,h=i+n;c<h;++c)d=e[c],l.push({x:o.parse(lt(d,a),c),y:s.parse(lt(d,r),c),_custom:d&&d.r&&+d.r});return l}getMaxOverflow(){const{data:t,_parsed:e}=this._cachedMeta;let i=0;for(let n=t.length-1;n>=0;--n)i=Math.max(i,t[n].size()/2,e[n]._custom);return i>0&&i}getLabelAndValue(t){const e=this._cachedMeta,{xScale:i,yScale:n}=e,o=this.getParsed(t),s=i.getLabelForValue(o.x),a=n.getLabelForValue(o.y),r=o._custom;return{label:e.label,value:"("+s+", "+a+(r?", "+r:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,n){const o=this,s="reset"===n,{iScale:a,vScale:r}=o._cachedMeta,l=o.resolveDataElementOptions(e,n),c=o.getSharedOptions(l),h=o.includeOptions(n,c),d=a.axis,u=r.axis;for(let l=e;l<e+i;l++){const e=t[l],i=!s&&o.getParsed(l),c={},f=c[d]=s?a.getPixelForDecimal(.5):a.getPixelForValue(i[d]),g=c[u]=s?r.getBasePixel():r.getPixelForValue(i[u]);c.skip=isNaN(f)||isNaN(g),h&&(c.options=o.resolveDataElementOptions(l,e.active?"active":n),s&&(c.options.radius=0)),o.updateElement(e,l,c,n)}o.updateSharedOptions(c,n,l)}resolveDataElementOptions(t,e){const i=this.getParsed(t);let n=super.resolveDataElementOptions(t,e);n.$shared&&(n=Object.assign({},n,{$shared:!1}));const o=n.radius;return"active"!==e&&(n.radius=0),n.radius+=K(i&&i._custom,o),n}}fo.id="bubble",fo.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},fo.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class go extends Ei{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,n=this._cachedMeta;let o,s;for(o=t,s=t+e;o<s;++o)n._parsed[o]=+i[o]}_getRotation(){return Et(this.options.rotation-90)}_getCircumference(){return Et(this.options.circumference)}_getRotationExtents(){let t=_t,e=-_t;const i=this;for(let n=0;n<i.chart.data.datasets.length;++n)if(i.chart.isDatasetVisible(n)){const o=i.chart.getDatasetMeta(n).controller,s=o._getRotation(),a=o._getCircumference();t=Math.min(t,s),e=Math.max(e,s+a)}return{rotation:t,circumference:e-t}}update(t){const e=this,i=e.chart,{chartArea:n}=i,o=e._cachedMeta,s=o.data,a=e.getMaxBorderWidth()+e.getMaxOffset(s)+e.options.spacing,r=Math.max((Math.min(n.width,n.height)-a)/2,0),l=Math.min(G(e.options.cutout,r),1),c=e._getRingWeight(e.index),{circumference:h,rotation:d}=e._getRotationExtents(),{ratioX:u,ratioY:f,offsetX:g,offsetY:p}=function(t,e,i){let n=1,o=1,s=0,a=0;if(e<_t){const r=t,l=r+e,c=Math.cos(r),h=Math.sin(r),d=Math.cos(l),u=Math.sin(l),f=(t,e,n)=>Nt(t,r,l,!0)?1:Math.max(e,e*i,n,n*i),g=(t,e,n)=>Nt(t,r,l,!0)?-1:Math.min(e,e*i,n,n*i),p=f(0,c,d),m=f(Mt,h,u),x=g(bt,c,d),b=g(bt+Mt,h,u);n=(p-x)/2,o=(m-b)/2,s=-(p+x)/2,a=-(m+b)/2}return{ratioX:n,ratioY:o,offsetX:s,offsetY:a}}(d,h,l),m=(n.width-a)/u,x=(n.height-a)/f,b=Math.max(Math.min(m,x)/2,0),_=Z(e.options.radius,b),y=(_-Math.max(_*l,0))/e._getVisibleDatasetWeightTotal();e.offsetX=g*_,e.offsetY=p*_,o.total=e.calculateTotal(),e.outerRadius=_-y*e._getRingWeightOffset(e.index),e.innerRadius=Math.max(e.outerRadius-y*c,0),e.updateElements(s,0,s.length,t)}_circumference(t,e){const i=this,n=i.options,o=i._cachedMeta,s=i._getCircumference();return e&&n.animation.animateRotate||!this.chart.getDataVisibility(t)||null===o._parsed[t]?0:i.calculateCircumference(o._parsed[t]*s/_t)}updateElements(t,e,i,n){const o=this,s="reset"===n,a=o.chart,r=a.chartArea,l=a.options.animation,c=(r.left+r.right)/2,h=(r.top+r.bottom)/2,d=s&&l.animateScale,u=d?0:o.innerRadius,f=d?0:o.outerRadius,g=o.resolveDataElementOptions(e,n),p=o.getSharedOptions(g),m=o.includeOptions(n,p);let x,b=o._getRotation();for(x=0;x<e;++x)b+=o._circumference(x,s);for(x=e;x<e+i;++x){const e=o._circumference(x,s),i=t[x],a={x:c+o.offsetX,y:h+o.offsetY,startAngle:b,endAngle:b+e,circumference:e,outerRadius:f,innerRadius:u};m&&(a.options=p||o.resolveDataElementOptions(x,i.active?"active":n)),b+=e,o.updateElement(i,x,a,n)}o.updateSharedOptions(p,n,g)}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,n=0;for(i=0;i<e.length;i++){const e=t._parsed[i];null!==e&&!isNaN(e)&&this.chart.getDataVisibility(i)&&(n+=Math.abs(e))}return n}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?_t*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],o=Fi(e._parsed[t],i.options.locale);return{label:n[t]||"",value:o}}getMaxBorderWidth(t){const e=this;let i=0;const n=e.chart;let o,s,a,r,l;if(!t)for(o=0,s=n.data.datasets.length;o<s;++o)if(n.isDatasetVisible(o)){a=n.getDatasetMeta(o),t=a.data,r=a.controller,r!==e&&r.configure();break}if(!t)return 0;for(o=0,s=t.length;o<s;++o)l=r.resolveDataElementOptions(o),"inner"!==l.borderAlign&&(i=Math.max(i,l.borderWidth||0,l.hoverBorderWidth||0));return i}getMaxOffset(t){let e=0;for(let i=0,n=t.length;i<n;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(K(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}go.id="doughnut",go.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},go.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},go.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map(((e,n)=>{const o=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;const i=": "+t.formattedValue;return Y(e)?(e=e.slice(),e[0]+=i):e+=i,e}}}}};class po extends Ei{initialize(){this.enableOptionSharing=!0,super.initialize()}update(t){const e=this,i=e._cachedMeta,{dataset:n,data:o=[],_dataset:s}=i,a=e.chart._animationsDisabled;let{start:r,count:l}=function(t,e,i){const n=e.length;let o=0,s=n;if(t._sorted){const{iScale:a,_parsed:r}=t,l=a.axis,{min:c,max:h,minDefined:d,maxDefined:u}=a.getUserBounds();d&&(o=Ht(Math.min(se(r,a.axis,c).lo,i?n:se(e,l,a.getPixelForValue(c)).lo),0,n-1)),s=u?Ht(Math.max(se(r,a.axis,h).hi+1,i?0:se(e,l,a.getPixelForValue(h)).hi+1),o,n)-o:n-o}return{start:o,count:s}}(i,o,a);e._drawStart=r,e._drawCount=l,function(t){const{xScale:e,yScale:i,_scaleRanges:n}=t,o={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!n)return t._scaleRanges=o,!0;const s=n.xmin!==e.min||n.xmax!==e.max||n.ymin!==i.min||n.ymax!==i.max;return Object.assign(n,o),s}(i)&&(r=0,l=o.length),n._decimated=!!s._decimated,n.points=o;const c=e.resolveDatasetElementOptions(t);e.options.showLine||(c.borderWidth=0),c.segment=e.options.segment,e.updateElement(n,void 0,{animated:!a,options:c},t),e.updateElements(o,r,l,t)}updateElements(t,e,i,n){const o=this,s="reset"===n,{iScale:a,vScale:r,_stacked:l}=o._cachedMeta,c=o.resolveDataElementOptions(e,n),h=o.getSharedOptions(c),d=o.includeOptions(n,h),u=a.axis,f=r.axis,g=o.options.spanGaps,p=Tt(g)?g:Number.POSITIVE_INFINITY,m=o.chart._animationsDisabled||s||"none"===n;let x=e>0&&o.getParsed(e-1);for(let c=e;c<e+i;++c){const e=t[c],i=o.getParsed(c),g=m?e:{},b=$(i[f]),_=g[u]=a.getPixelForValue(i[u],c),y=g[f]=s||b?r.getBasePixel():r.getPixelForValue(l?o.applyStack(r,i,l):i[f],c);g.skip=isNaN(_)||isNaN(y)||b,g.stop=c>0&&i[u]-x[u]>p,g.parsed=i,d&&(g.options=h||o.resolveDataElementOptions(c,e.active?"active":n)),m||o.updateElement(e,c,g,n),x=i}o.updateSharedOptions(h,n,c)}getMaxOverflow(){const t=this,e=t._cachedMeta,i=e.dataset,n=i.options&&i.options.borderWidth||0,o=e.data||[];if(!o.length)return n;const s=o[0].size(t.resolveDataElementOptions(0)),a=o[o.length-1].size(t.resolveDataElementOptions(o.length-1));return Math.max(n,s,a)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}po.id="line",po.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},po.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class mo extends Ei{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],o=Fi(e._parsed[t].r,i.options.locale);return{label:n[t]||"",value:o}}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}_updateRadius(){const t=this,e=t.chart,i=e.chartArea,n=e.options,o=Math.min(i.right-i.left,i.bottom-i.top),s=Math.max(o/2,0),a=(s-Math.max(n.cutoutPercentage?s/100*n.cutoutPercentage:1,0))/e.getVisibleDatasetCount();t.outerRadius=s-a*t.index,t.innerRadius=t.outerRadius-a}updateElements(t,e,i,n){const o=this,s="reset"===n,a=o.chart,r=o.getDataset(),l=a.options.animation,c=o._cachedMeta.rScale,h=c.xCenter,d=c.yCenter,u=c.getIndexAngle(0)-.5*bt;let f,g=u;const p=360/o.countVisibleElements();for(f=0;f<e;++f)g+=o._computeAngle(f,n,p);for(f=e;f<e+i;f++){const e=t[f];let i=g,m=g+o._computeAngle(f,n,p),x=a.getDataVisibility(f)?c.getDistanceFromCenterForValue(r.data[f]):0;g=m,s&&(l.animateScale&&(x=0),l.animateRotate&&(i=m=u));const b={x:h,y:d,innerRadius:0,outerRadius:x,startAngle:i,endAngle:m,options:o.resolveDataElementOptions(f,e.active?"active":n)};o.updateElement(e,f,b,n)}}countVisibleElements(){const t=this.getDataset(),e=this._cachedMeta;let i=0;return e.data.forEach(((e,n)=>{!isNaN(t.data[n])&&this.chart.getDataVisibility(n)&&i++})),i}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?Et(this.resolveDataElementOptions(t,e).angle||i):0}}mo.id="polarArea",mo.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},mo.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map(((e,n)=>{const o=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class xo extends go{}xo.id="pie",xo.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class bo extends Ei{getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}update(t){const e=this,i=e._cachedMeta,n=i.dataset,o=i.data||[],s=i.iScale.getLabels();if(n.points=o,"resize"!==t){const i=e.resolveDatasetElementOptions(t);e.options.showLine||(i.borderWidth=0);const a={_loop:!0,_fullLoop:s.length===o.length,options:i};e.updateElement(n,void 0,a,t)}e.updateElements(o,0,o.length,t)}updateElements(t,e,i,n){const o=this,s=o.getDataset(),a=o._cachedMeta.rScale,r="reset"===n;for(let l=e;l<e+i;l++){const e=t[l],i=o.resolveDataElementOptions(l,e.active?"active":n),c=a.getPointPositionForValue(l,s.data[l]),h=r?a.xCenter:c.x,d=r?a.yCenter:c.y,u={x:h,y:d,angle:c.angle,skip:isNaN(h)||isNaN(d),options:i};o.updateElement(e,l,u,n)}}}bo.id="radar",bo.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},bo.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class _o extends po{}_o.id="scatter",_o.defaults={showLine:!1,fill:!1},_o.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var yo=Object.freeze({__proto__:null,BarController:uo,BubbleController:fo,DoughnutController:go,LineController:po,PolarAreaController:mo,PieController:xo,RadarController:bo,ScatterController:_o});function vo(t,e,i){const{startAngle:n,pixelMargin:o,x:s,y:a,outerRadius:r,innerRadius:l}=e;let c=o/r;t.beginPath(),t.arc(s,a,r,n-c,i+c),l>o?(c=o/l,t.arc(s,a,l,i+c,n-c,!0)):t.arc(s,a,o,i+Mt,n-Mt),t.closePath(),t.clip()}function wo(t,e,i,n){const o=Ee(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]);const s=(i-e)/2,a=Math.min(s,n*e/2),r=t=>{const e=(i-Math.min(s,t))*n/2;return Ht(t,0,Math.min(s,e))};return{outerStart:r(o.outerStart),outerEnd:r(o.outerEnd),innerStart:Ht(o.innerStart,0,a),innerEnd:Ht(o.innerEnd,0,a)}}function Mo(t,e,i,n){return{x:i+t*Math.cos(e),y:n+t*Math.sin(e)}}function ko(t,e,i,n,o){const{x:s,y:a,startAngle:r,pixelMargin:l,innerRadius:c}=e,h=Math.max(e.outerRadius+n+i-l,0),d=c>0?c+n+i+l:0;let u=0;const f=o-r;if(n){const t=((c>0?c-n:0)+(h>0?h-n:0))/2;u=(f-(0!==t?f*t/(t+n):f))/2}const g=(f-Math.max(.001,f*h-i/bt)/h)/2,p=r+g+u,m=o-g-u,{outerStart:x,outerEnd:b,innerStart:_,innerEnd:y}=wo(e,d,h,m-p),v=h-x,w=h-b,M=p+x/v,k=m-b/w,S=d+_,P=d+y,D=p+_/S,C=m-y/P;if(t.beginPath(),t.arc(s,a,h,M,k),b>0){const e=Mo(w,k,s,a);t.arc(e.x,e.y,b,k,m+Mt)}const O=Mo(P,m,s,a);if(t.lineTo(O.x,O.y),y>0){const e=Mo(P,C,s,a);t.arc(e.x,e.y,y,m+Mt,C+Math.PI)}if(t.arc(s,a,d,m-y/d,p+_/d,!0),_>0){const e=Mo(S,D,s,a);t.arc(e.x,e.y,_,D+Math.PI,p-Mt)}const T=Mo(v,p,s,a);if(t.lineTo(T.x,T.y),x>0){const e=Mo(v,M,s,a);t.arc(e.x,e.y,x,p-Mt,M)}t.closePath()}function So(t,e,i,n,o){const{options:s}=e,a="inner"===s.borderAlign;s.borderWidth&&(a?(t.lineWidth=2*s.borderWidth,t.lineJoin="round"):(t.lineWidth=s.borderWidth,t.lineJoin="bevel"),e.fullCircles&&function(t,e,i){const{x:n,y:o,startAngle:s,pixelMargin:a,fullCircles:r}=e,l=Math.max(e.outerRadius-a,0),c=e.innerRadius+a;let h;for(i&&vo(t,e,s+_t),t.beginPath(),t.arc(n,o,c,s+_t,s,!0),h=0;h<r;++h)t.stroke();for(t.beginPath(),t.arc(n,o,l,s,s+_t),h=0;h<r;++h)t.stroke()}(t,e,a),a&&vo(t,e,o),ko(t,e,i,n,o),t.stroke())}class Po extends zi{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.getProps(["x","y"],i),{angle:o,distance:s}=Ft(n,{x:t,y:e}),{startAngle:a,endAngle:r,innerRadius:l,outerRadius:c,circumference:h}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),d=this.options.spacing/2;return(h>=_t||Nt(o,a,r))&&(s>=l+d&&s<=c+d)}getCenterPoint(t){const{x:e,y:i,startAngle:n,endAngle:o,innerRadius:s,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:r,spacing:l}=this.options,c=(n+o)/2,h=(s+a+l+r)/2;return{x:e+Math.cos(c)*h,y:i+Math.sin(c)*h}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const e=this,{options:i,circumference:n}=e,o=(i.offset||0)/2,s=(i.spacing||0)/2;if(e.pixelMargin="inner"===i.borderAlign?.33:0,e.fullCircles=n>_t?Math.floor(n/_t):0,0===n||e.innerRadius<0||e.outerRadius<0)return;t.save();let a=0;if(o){a=o/2;const i=(e.startAngle+e.endAngle)/2;t.translate(Math.cos(i)*a,Math.sin(i)*a),e.circumference>=bt&&(a=o)}t.fillStyle=i.backgroundColor,t.strokeStyle=i.borderColor;const r=function(t,e,i,n){const{fullCircles:o,startAngle:s,circumference:a}=e;let r=e.endAngle;if(o){ko(t,e,i,n,s+_t);for(let e=0;e<o;++e)t.fill();isNaN(a)||(r=s+a%_t,a%_t==0&&(r+=_t))}return ko(t,e,i,n,r),t.fill(),r}(t,e,a,s);So(t,e,a,s,r),t.restore()}}function Do(t,e,i=e){t.lineCap=K(i.borderCapStyle,e.borderCapStyle),t.setLineDash(K(i.borderDash,e.borderDash)),t.lineDashOffset=K(i.borderDashOffset,e.borderDashOffset),t.lineJoin=K(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=K(i.borderWidth,e.borderWidth),t.strokeStyle=K(i.borderColor,e.borderColor)}function Co(t,e,i){t.lineTo(i.x,i.y)}function Oo(t,e,i={}){const n=t.length,{start:o=0,end:s=n-1}=i,{start:a,end:r}=e,l=Math.max(o,a),c=Math.min(s,r),h=o<a&&s<a||o>r&&s>r;return{count:n,start:l,loop:e.loop,ilen:c<l&&!h?n+c-l:c-l}}function To(t,e,i,n){const{points:o,options:s}=e,{count:a,start:r,loop:l,ilen:c}=Oo(o,i,n),h=function(t){return t.stepped?Jt:t.tension||"monotone"===t.cubicInterpolationMode?te:Co}(s);let d,u,f,{move:g=!0,reverse:p}=n||{};for(d=0;d<=c;++d)u=o[(r+(p?c-d:d))%a],u.skip||(g?(t.moveTo(u.x,u.y),g=!1):h(t,f,u,p,s.stepped),f=u);return l&&(u=o[(r+(p?c:0))%a],h(t,f,u,p,s.stepped)),!!l}function Ao(t,e,i,n){const o=e.points,{count:s,start:a,ilen:r}=Oo(o,i,n),{move:l=!0,reverse:c}=n||{};let h,d,u,f,g,p,m=0,x=0;const b=t=>(a+(c?r-t:t))%s,_=()=>{f!==g&&(t.lineTo(m,g),t.lineTo(m,f),t.lineTo(m,p))};for(l&&(d=o[b(0)],t.moveTo(d.x,d.y)),h=0;h<=r;++h){if(d=o[b(h)],d.skip)continue;const e=d.x,i=d.y,n=0|e;n===u?(i<f?f=i:i>g&&(g=i),m=(x*m+e)/++x):(_(),t.lineTo(e,i),u=n,x=0,f=g=i),p=i}_()}function Lo(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return!(t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i)?Ao:To}Po.id="arc",Po.defaults={borderAlign:"center",borderColor:"#fff",borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0},Po.defaultRoutes={backgroundColor:"backgroundColor"};const Ro="function"==typeof Path2D;function Eo(t,e,i,n){Ro&&1===e.segments.length?function(t,e,i,n){let o=e._path;o||(o=e._path=new Path2D,e.path(o,i,n)&&o.closePath()),Do(t,e.options),t.stroke(o)}(t,e,i,n):function(t,e,i,n){const{segments:o,options:s}=e,a=Lo(e);for(const r of o)Do(t,s,r.style),t.beginPath(),a(t,e,r,{start:i,end:i+n-1})&&t.closePath(),t.stroke()}(t,e,i,n)}class zo extends zi{constructor(t){super(),this.animated=!0,this.options=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this,n=i.options;if((n.tension||"monotone"===n.cubicInterpolationMode)&&!n.stepped&&!i._pointsUpdated){const o=n.spanGaps?i._loop:i._fullLoop;pn(i._points,n,t,o,e),i._pointsUpdated=!0}}set points(t){const e=this;e._points=t,delete e._segments,delete e._path,e._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=Pn(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this,n=i.options,o=t[e],s=i.points,a=Sn(i,{property:e,start:o,end:o});if(!a.length)return;const r=[],l=function(t){return t.stepped?xn:t.tension||"monotone"===t.cubicInterpolationMode?bn:mn}(n);let c,h;for(c=0,h=a.length;c<h;++c){const{start:i,end:h}=a[c],d=s[i],u=s[h];if(d===u){r.push(d);continue}const f=l(d,u,Math.abs((o-d[e])/(u[e]-d[e])),n.stepped);f[e]=t[e],r.push(f)}return 1===r.length?r[0]:r}pathSegment(t,e,i){return Lo(this)(t,this,e,i)}path(t,e,i){const n=this,o=n.segments,s=Lo(n);let a=n._loop;e=e||0,i=i||n.points.length-e;for(const r of o)a&=s(t,n,r,{start:e,end:e+i-1});return!!a}draw(t,e,i,n){const o=this,s=o.options||{};(o.points||[]).length&&s.borderWidth&&(t.save(),Eo(t,o,i,n),t.restore(),o.animated&&(o._pointsUpdated=!1,o._path=void 0))}}function Io(t,e,i,n){const o=t.options,{[i]:s}=t.getProps([i],n);return Math.abs(e-s)<o.radius+o.hitRadius}zo.id="line",zo.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},zo.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},zo.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class Fo extends zi{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.options,{x:o,y:s}=this.getProps(["x","y"],i);return Math.pow(t-o,2)+Math.pow(e-s,2)<Math.pow(n.hitRadius+n.radius,2)}inXRange(t,e){return Io(this,t,"x",e)}inYRange(t,e){return Io(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;e=Math.max(e,e&&t.hoverRadius||0);return 2*(e+(e&&t.borderWidth||0))}draw(t){const e=this,i=e.options;e.skip||i.radius<.1||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,Kt(t,i,e.x,e.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Bo(t,e){const{x:i,y:n,base:o,width:s,height:a}=t.getProps(["x","y","base","width","height"],e);let r,l,c,h,d;return t.horizontal?(d=a/2,r=Math.min(i,o),l=Math.max(i,o),c=n-d,h=n+d):(d=s/2,r=i-d,l=i+d,c=Math.min(n,o),h=Math.max(n,o)),{left:r,top:c,right:l,bottom:h}}function Vo(t){let e=t.options.borderSkipped;const i={};return e?(e=t.horizontal?Wo(e,"left","right",t.base>t.x):Wo(e,"bottom","top",t.base<t.y),i[e]=!0,i):i}function Wo(t,e,i,n){var o,s,a;return n?(a=i,t=No(t=(o=t)===(s=e)?a:o===a?s:o,i,e)):t=No(t,e,i),t}function No(t,e,i){return"start"===t?e:"end"===t?i:t}function Ho(t,e,i,n){return t?0:Math.max(Math.min(e,n),i)}function jo(t){const e=Bo(t),i=e.right-e.left,n=e.bottom-e.top,o=function(t,e,i){const n=t.options.borderWidth,o=Vo(t),s=ze(n);return{t:Ho(o.top,s.top,0,i),r:Ho(o.right,s.right,0,e),b:Ho(o.bottom,s.bottom,0,i),l:Ho(o.left,s.left,0,e)}}(t,i/2,n/2),s=function(t,e,i){const{enableBorderRadius:n}=t.getProps(["enableBorderRadius"]),o=t.options.borderRadius,s=Ie(o),a=Math.min(e,i),r=Vo(t),l=n||U(o);return{topLeft:Ho(!l||r.top||r.left,s.topLeft,0,a),topRight:Ho(!l||r.top||r.right,s.topRight,0,a),bottomLeft:Ho(!l||r.bottom||r.left,s.bottomLeft,0,a),bottomRight:Ho(!l||r.bottom||r.right,s.bottomRight,0,a)}}(t,i/2,n/2);return{outer:{x:e.left,y:e.top,w:i,h:n,radius:s},inner:{x:e.left+o.l,y:e.top+o.t,w:i-o.l-o.r,h:n-o.t-o.b,radius:{topLeft:Math.max(0,s.topLeft-Math.max(o.t,o.l)),topRight:Math.max(0,s.topRight-Math.max(o.t,o.r)),bottomLeft:Math.max(0,s.bottomLeft-Math.max(o.b,o.l)),bottomRight:Math.max(0,s.bottomRight-Math.max(o.b,o.r))}}}}function $o(t,e,i,n){const o=null===e,s=null===i,a=t&&!(o&&s)&&Bo(t,n);return a&&(o||e>=a.left&&e<=a.right)&&(s||i>=a.top&&i<=a.bottom)}function Yo(t,e){t.rect(e.x,e.y,e.w,e.h)}Fo.id="point",Fo.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},Fo.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Uo extends zi{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,t&&Object.assign(this,t)}draw(t){const e=this.options,{inner:i,outer:n}=jo(this),o=(s=n.radius).topLeft||s.topRight||s.bottomLeft||s.bottomRight?ne:Yo;var s;t.save(),n.w===i.w&&n.h===i.h||(t.beginPath(),o(t,n),t.clip(),o(t,i),t.fillStyle=e.borderColor,t.fill("evenodd")),t.beginPath(),o(t,i),t.fillStyle=e.backgroundColor,t.fill(),t.restore()}inRange(t,e,i){return $o(this,t,e,i)}inXRange(t,e){return $o(this,t,null,e)}inYRange(t,e){return $o(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:n,horizontal:o}=this.getProps(["x","y","base","horizontal"],t);return{x:o?(e+n)/2:e,y:o?i:(i+n)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}Uo.id="bar",Uo.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,enableBorderRadius:!0,pointStyle:void 0},Uo.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var Xo=Object.freeze({__proto__:null,ArcElement:Po,LineElement:zo,PointElement:Fo,BarElement:Uo});function qo(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:e})}}function Ko(t){t.data.datasets.forEach((t=>{qo(t)}))}var Go={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void Ko(t);const n=t.width;t.data.datasets.forEach(((e,o)=>{const{_data:s,indexAxis:a}=e,r=t.getDatasetMeta(o),l=s||e.data;if("y"===Ve([a,t.options.indexAxis]))return;if("line"!==r.type)return;const c=t.scales[r.xAxisID];if("linear"!==c.type&&"time"!==c.type)return;if(t.options.parsing)return;let h,{start:d,count:u}=function(t,e){const i=e.length;let n,o=0;const{iScale:s}=t,{min:a,max:r,minDefined:l,maxDefined:c}=s.getUserBounds();return l&&(o=Ht(se(e,s.axis,a).lo,0,i-1)),n=c?Ht(se(e,s.axis,r).hi+1,o,i)-o:i-o,{start:o,count:n}}(r,l);if(u<=4*n)qo(e);else{switch($(s)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":h=function(t,e,i,n,o){const s=o.samples||n;if(s>=i)return t.slice(e,e+i);const a=[],r=(i-2)/(s-2);let l=0;const c=e+i-1;let h,d,u,f,g,p=e;for(a[l++]=t[p],h=0;h<s-2;h++){let n,o=0,s=0;const c=Math.floor((h+1)*r)+1+e,m=Math.min(Math.floor((h+2)*r)+1,i)+e,x=m-c;for(n=c;n<m;n++)o+=t[n].x,s+=t[n].y;o/=x,s/=x;const b=Math.floor(h*r)+1+e,_=Math.floor((h+1)*r)+1+e,{x:y,y:v}=t[p];for(u=f=-1,n=b;n<_;n++)f=.5*Math.abs((y-o)*(t[n].y-v)-(y-t[n].x)*(s-v)),f>u&&(u=f,d=t[n],g=n);a[l++]=d,p=g}return a[l++]=t[c],a}(l,d,u,n,i);break;case"min-max":h=function(t,e,i,n){let o,s,a,r,l,c,h,d,u,f,g=0,p=0;const m=[],x=e+i-1,b=t[e].x,_=t[x].x-b;for(o=e;o<e+i;++o){s=t[o],a=(s.x-b)/_*n,r=s.y;const e=0|a;if(e===l)r<u?(u=r,c=o):r>f&&(f=r,h=o),g=(p*g+s.x)/++p;else{const i=o-1;if(!$(c)&&!$(h)){const e=Math.min(c,h),n=Math.max(c,h);e!==d&&e!==i&&m.push({...t[e],x:g}),n!==d&&n!==i&&m.push({...t[n],x:g})}o>0&&i!==d&&m.push(t[i]),m.push(s),l=e,p=0,u=f=r,c=h=d=o}}return m}(l,d,u,n);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=h}}))},destroy(t){Ko(t)}};function Zo(t,e,i){const n=function(t){const e=t.options,i=e.fill;let n=K(i&&i.target,i);return void 0===n&&(n=!!e.backgroundColor),!1!==n&&null!==n&&(!0===n?"origin":n)}(t);if(U(n))return!isNaN(n.value)&&n;let o=parseFloat(n);return X(o)&&Math.floor(o)===o?("-"!==n[0]&&"+"!==n[0]||(o=e+o),!(o===e||o<0||o>=i)&&o):["origin","start","end","stack"].indexOf(n)>=0&&n}class Qo{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:n,y:o,radius:s}=this;return e=e||{start:0,end:_t},t.arc(n,o,s,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:n}=this,o=t.angle;return{x:e+Math.cos(o)*n,y:i+Math.sin(o)*n,angle:o}}}function Jo(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,n=e.options,o=e.getLabels().length,s=[],a=n.reverse?e.max:e.min,r=n.reverse?e.min:e.max;let l,c,h;if(h="start"===i?a:"end"===i?r:U(i)?i.value:e.getBaseValue(),n.grid.circular)return c=e.getPointPositionForValue(0,a),new Qo({x:c.x,y:c.y,radius:e.getDistanceFromCenterForValue(h)});for(l=0;l<o;++l)s.push(e.getPointPositionForValue(l,h));return s}(t):function(t){const{scale:e={},fill:i}=t;let n,o=null;return"start"===i?o=e.bottom:"end"===i?o=e.top:U(i)?o=e.getPixelForValue(i.value):e.getBasePixel&&(o=e.getBasePixel()),X(o)?(n=e.isHorizontal(),{x:n?o:null,y:n?null:o}):null}(t)}function ts(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function es(t){const{chart:e,scale:i,index:n,line:o}=t,s=[],a=o.segments,r=o.points,l=function(t,e){const i=[],n=t.getSortedVisibleDatasetMetas();for(let t=0;t<n.length;t++){const o=n[t];if(o.index===e)break;is(o)&&i.unshift(o.dataset)}return i}(e,n);l.push(ss({x:null,y:i.bottom},o));for(let t=0;t<a.length;t++){const e=a[t];for(let t=e.start;t<=e.end;t++)ns(s,r[t],l)}return new zo({points:s,options:{}})}const is=t=>"line"===t.type&&!t.hidden;function ns(t,e,i){const n=[];for(let o=0;o<i.length;o++){const s=i[o],{first:a,last:r,point:l}=os(s,e,"x");if(!(!l||a&&r))if(a)n.unshift(l);else if(t.push(l),!r)break}t.push(...n)}function os(t,e,i){const n=t.interpolate(e,i);if(!n)return{};const o=n[i],s=t.segments,a=t.points;let r=!1,l=!1;for(let t=0;t<s.length;t++){const e=s[t],n=a[e.start][i],c=a[e.end][i];if(o>=n&&o<=c){r=o===n,l=o===c;break}}return{first:r,last:l,point:n}}function ss(t,e){let i=[],n=!1;return Y(t)?(n=!0,i=t):i=function(t,e){const{x:i=null,y:n=null}=t||{},o=e.points,s=[];return e.segments.forEach((({start:t,end:e})=>{e=ts(t,e,o);const a=o[t],r=o[e];null!==n?(s.push({x:a.x,y:n}),s.push({x:r.x,y:n})):null!==i&&(s.push({x:i,y:a.y}),s.push({x:i,y:r.y}))})),s}(t,e),i.length?new zo({points:i,options:{tension:0},_loop:n,_fullLoop:n}):null}function as(t,e,i){let n=t[e].fill;const o=[e];let s;if(!i)return n;for(;!1!==n&&-1===o.indexOf(n);){if(!X(n))return n;if(s=t[n],!s)return!1;if(s.visible)return n;o.push(n),n=s.fill}return!1}function rs(t,e,i){t.beginPath(),e.path(t),t.lineTo(e.last().x,i),t.lineTo(e.first().x,i),t.closePath(),t.clip()}function ls(t,e,i,n){if(n)return;let o=e[t],s=i[t];return"angle"===t&&(o=Wt(o),s=Wt(s)),{property:t,start:o,end:s}}function cs(t,e,i,n){return t&&e?n(t[i],e[i]):t?t[i]:e?e[i]:0}function hs(t,e,i){const{top:n,bottom:o}=e.chart.chartArea,{property:s,start:a,end:r}=i||{};"x"===s&&(t.beginPath(),t.rect(a,n,r-a,o-n),t.clip())}function ds(t,e,i,n){const o=e.interpolate(i,n);o&&t.lineTo(o.x,o.y)}function us(t,e){const{line:i,target:n,property:o,color:s,scale:a}=e,r=function(t,e,i){const n=t.segments,o=t.points,s=e.points,a=[];for(const t of n){let{start:n,end:r}=t;r=ts(n,r,o);const l=ls(i,o[n],o[r],t.loop);if(!e.segments){a.push({source:t,target:l,start:o[n],end:o[r]});continue}const c=Sn(e,l);for(const e of c){const n=ls(i,s[e.start],s[e.end],e.loop),r=kn(t,o,n);for(const t of r)a.push({source:t,target:e,start:{[i]:cs(l,n,"start",Math.max)},end:{[i]:cs(l,n,"end",Math.min)}})}}return a}(i,n,o);for(const{source:e,target:l,start:c,end:h}of r){const{style:{backgroundColor:r=s}={}}=e;t.save(),t.fillStyle=r,hs(t,a,ls(o,c,h)),t.beginPath();const d=!!i.pathSegment(t,e);d?t.closePath():ds(t,n,h,o);const u=!!n.pathSegment(t,l,{move:d,reverse:!0}),f=d&&u;f||ds(t,n,c,o),t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function fs(t,e,i){const n=function(t){const{chart:e,fill:i,line:n}=t;if(X(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return es(t);const o=Jo(t);return o instanceof Qo?o:ss(o,n)}(e),{line:o,scale:s,axis:a}=e,r=o.options,l=r.fill,c=r.backgroundColor,{above:h=c,below:d=c}=l||{};n&&o.points.length&&(Zt(t,i),function(t,e){const{line:i,target:n,above:o,below:s,area:a,scale:r}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&s!==o&&(rs(t,n,a.top),us(t,{line:i,target:n,color:o,scale:r,property:l}),t.restore(),t.save(),rs(t,n,a.bottom)),us(t,{line:i,target:n,color:s,scale:r,property:l}),t.restore()}(t,{line:o,target:n,above:h,below:d,area:i,scale:s,axis:a}),Qt(t))}var gs={id:"filler",afterDatasetsUpdate(t,e,i){const n=(t.data.datasets||[]).length,o=[];let s,a,r,l;for(a=0;a<n;++a)s=t.getDatasetMeta(a),r=s.dataset,l=null,r&&r.options&&r instanceof zo&&(l={visible:t.isDatasetVisible(a),index:a,fill:Zo(r,a,n),chart:t,axis:s.controller.options.indexAxis,scale:s.vScale,line:r}),s.$filler=l,o.push(l);for(a=0;a<n;++a)l=o[a],l&&!1!==l.fill&&(l.fill=as(o,a,i.propagate))},beforeDraw(t,e,i){const n="beforeDraw"===i.drawTime,o=t.getSortedVisibleDatasetMetas(),s=t.chartArea;for(let e=o.length-1;e>=0;--e){const i=o[e].$filler;i&&(i.line.updateControlPoints(s,i.axis),n&&fs(t.ctx,i,s))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const n=t.getSortedVisibleDatasetMetas();for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;i&&fs(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const n=e.meta.$filler;n&&!1!==n.fill&&"beforeDatasetDraw"===i.drawTime&&fs(t.ctx,n,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const ps=(t,e)=>{let{boxHeight:i=e,boxWidth:n=e}=t;return t.usePointStyle&&(i=Math.min(i,e),n=Math.min(n,e)),{boxWidth:n,boxHeight:i,itemHeight:Math.max(e,i)}};class ms extends zi{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){const n=this;n.maxWidth=t,n.maxHeight=e,n._margins=i,n.setDimensions(),n.buildLabels(),n.fit()}setDimensions(){const t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=t._margins.left,t.right=t.width):(t.height=t.maxHeight,t.top=t._margins.top,t.bottom=t.height)}buildLabels(){const t=this,e=t.options.labels||{};let i=Q(e.generateLabels,[t.chart],t)||[];e.filter&&(i=i.filter((i=>e.filter(i,t.chart.data)))),e.sort&&(i=i.sort(((i,n)=>e.sort(i,n,t.chart.data)))),t.options.reverse&&i.reverse(),t.legendItems=i}fit(){const t=this,{options:e,ctx:i}=t;if(!e.display)return void(t.width=t.height=0);const n=e.labels,o=Be(n.font),s=o.size,a=t._computeTitleHeight(),{boxWidth:r,itemHeight:l}=ps(n,s);let c,h;i.font=o.string,t.isHorizontal()?(c=t.maxWidth,h=t._fitRows(a,s,r,l)+10):(h=t.maxHeight,c=t._fitCols(a,s,r,l)+10),t.width=Math.min(c,e.maxWidth||t.maxWidth),t.height=Math.min(h,e.maxHeight||t.maxHeight)}_fitRows(t,e,i,n){const o=this,{ctx:s,maxWidth:a,options:{labels:{padding:r}}}=o,l=o.legendHitBoxes=[],c=o.lineWidths=[0],h=n+r;let d=t;s.textAlign="left",s.textBaseline="middle";let u=-1,f=-h;return o.legendItems.forEach(((t,o)=>{const g=i+e/2+s.measureText(t.text).width;(0===o||c[c.length-1]+g+2*r>a)&&(d+=h,c[c.length-(o>0?0:1)]=0,f+=h,u++),l[o]={left:0,top:f,row:u,width:g,height:n},c[c.length-1]+=g+r})),d}_fitCols(t,e,i,n){const o=this,{ctx:s,maxHeight:a,options:{labels:{padding:r}}}=o,l=o.legendHitBoxes=[],c=o.columnSizes=[],h=a-t;let d=r,u=0,f=0,g=0,p=0;return o.legendItems.forEach(((t,o)=>{const a=i+e/2+s.measureText(t.text).width;o>0&&f+n+2*r>h&&(d+=u+r,c.push({width:u,height:f}),g+=u+r,p++,u=f=0),l[o]={left:g,top:f,col:p,width:a,height:n},u=Math.max(u,a),f+=n+r})),d+=u,c.push({width:u,height:f}),d}adjustHitBoxes(){const t=this;if(!t.options.display)return;const e=t._computeTitleHeight(),{legendHitBoxes:i,options:{align:n,labels:{padding:s},rtl:a}}=t;if(this.isHorizontal()){let r=0,l=o(n,t.left+s,t.right-t.lineWidths[r]);for(const a of i)r!==a.row&&(r=a.row,l=o(n,t.left+s,t.right-t.lineWidths[r])),a.top+=t.top+e+s,a.left=l,l+=a.width+s;if(a){const e=i.reduce(((t,e)=>(t[e.row]=t[e.row]||[],t[e.row].push(e),t)),{}),n=[];Object.keys(e).forEach((t=>{e[t].reverse(),n.push(...e[t])})),t.legendHitBoxes=n}}else{let a=0,r=o(n,t.top+e+s,t.bottom-t.columnSizes[a].height);for(const l of i)l.col!==a&&(a=l.col,r=o(n,t.top+e+s,t.bottom-t.columnSizes[a].height)),l.top=r,l.left+=t.left+s,r+=l.height+s}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){const t=this;if(t.options.display){const e=t.ctx;Zt(e,t),t._draw(),Qt(e)}}_draw(){const t=this,{options:e,columnSizes:i,lineWidths:n,ctx:a}=t,{align:r,labels:l}=e,c=xt.color,h=_n(e.rtl,t.left,t.width),d=Be(l.font),{color:u,padding:f}=l,g=d.size,p=g/2;let m;t.drawTitle(),a.textAlign=h.textAlign("left"),a.textBaseline="middle",a.lineWidth=.5,a.font=d.string;const{boxWidth:x,boxHeight:b,itemHeight:_}=ps(l,g),y=t.isHorizontal(),v=this._computeTitleHeight();m=y?{x:o(r,t.left+f,t.right-n[0]),y:t.top+f+v,line:0}:{x:t.left+f,y:o(r,t.top+v+f,t.bottom-i[0].height),line:0},yn(t.ctx,e.textDirection);const w=_+f;t.legendItems.forEach(((M,k)=>{a.strokeStyle=M.fontColor||u,a.fillStyle=M.fontColor||u;const S=a.measureText(M.text).width,P=h.textAlign(M.textAlign||(M.textAlign=l.textAlign)),D=x+p+S;let C=m.x,O=m.y;h.setWidth(t.width),y?k>0&&C+D+f>t.right&&(O=m.y+=w,m.line++,C=m.x=o(r,t.left+f,t.right-n[m.line])):k>0&&O+w>t.bottom&&(C=m.x=C+i[m.line].width+f,m.line++,O=m.y=o(r,t.top+v+f,t.bottom-i[m.line].height));!function(t,e,i){if(isNaN(x)||x<=0||isNaN(b)||b<0)return;a.save();const n=K(i.lineWidth,1);if(a.fillStyle=K(i.fillStyle,c),a.lineCap=K(i.lineCap,"butt"),a.lineDashOffset=K(i.lineDashOffset,0),a.lineJoin=K(i.lineJoin,"miter"),a.lineWidth=n,a.strokeStyle=K(i.strokeStyle,c),a.setLineDash(K(i.lineDash,[])),l.usePointStyle){const o={radius:x*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:n},s=h.xPlus(t,x/2);Kt(a,o,s,e+p)}else{const o=e+Math.max((g-b)/2,0),s=h.leftForLtr(t,x),r=Ie(i.borderRadius);a.beginPath(),Object.values(r).some((t=>0!==t))?ne(a,{x:s,y:o,w:x,h:b,radius:r}):a.rect(s,o,x,b),a.fill(),0!==n&&a.stroke()}a.restore()}(h.x(C),O,M),C=s(P,C+x+p,y?C+D:t.right,e.rtl),function(t,e,i){ee(a,i.text,t,e+_/2,d,{strikethrough:i.hidden,textAlign:h.textAlign(i.textAlign)})}(h.x(C),O,M),y?m.x+=D+f:m.y+=w})),vn(t.ctx,e.textDirection)}drawTitle(){const t=this,e=t.options,i=e.title,s=Be(i.font),a=Fe(i.padding);if(!i.display)return;const r=_n(e.rtl,t.left,t.width),l=t.ctx,c=i.position,h=s.size/2,d=a.top+h;let u,f=t.left,g=t.width;if(this.isHorizontal())g=Math.max(...t.lineWidths),u=t.top+d,f=o(e.align,f,t.right-g);else{const i=t.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);u=d+o(e.align,t.top,t.bottom-i-e.labels.padding-t._computeTitleHeight())}const p=o(c,f,f+g);l.textAlign=r.textAlign(n(c)),l.textBaseline="middle",l.strokeStyle=i.color,l.fillStyle=i.color,l.font=s.string,ee(l,i.text,p,u,s)}_computeTitleHeight(){const t=this.options.title,e=Be(t.font),i=Fe(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){const i=this;let n,o,s;if(t>=i.left&&t<=i.right&&e>=i.top&&e<=i.bottom)for(s=i.legendHitBoxes,n=0;n<s.length;++n)if(o=s[n],t>=o.left&&t<=o.left+o.width&&e>=o.top&&e<=o.top+o.height)return i.legendItems[n];return null}handleEvent(t){const e=this,i=e.options;if(!function(t,e){if("mousemove"===t&&(e.onHover||e.onLeave))return!0;if(e.onClick&&("click"===t||"mouseup"===t))return!0;return!1}(t.type,i))return;const n=e._getLegendItemAt(t.x,t.y);if("mousemove"===t.type){const a=e._hoveredItem,r=(s=n,null!==(o=a)&&null!==s&&o.datasetIndex===s.datasetIndex&&o.index===s.index);a&&!r&&Q(i.onLeave,[t,a,e],e),e._hoveredItem=n,n&&!r&&Q(i.onHover,[t,n,e],e)}else n&&Q(i.onClick,[t,n,e],e);var o,s}}var xs={id:"legend",_element:ms,start(t,e,i){const n=t.legend=new ms({ctx:t.ctx,options:i,chart:t});Ze.configure(t,n,i),Ze.addBox(t,n)},stop(t){Ze.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const n=t.legend;Ze.configure(t,n,i),n.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const n=e.datasetIndex,o=i.chart;o.isDatasetVisible(n)?(o.hide(n),e.hidden=!0):(o.show(n),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:n,textAlign:o,color:s}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const a=t.controller.getStyle(i?0:void 0),r=Fe(a.borderWidth);return{text:e[t.index].label,fillStyle:a.backgroundColor,fontColor:s,hidden:!t.visible,lineCap:a.borderCapStyle,lineDash:a.borderDash,lineDashOffset:a.borderDashOffset,lineJoin:a.borderJoinStyle,lineWidth:(r.width+r.height)/4,strokeStyle:a.borderColor,pointStyle:n||a.pointStyle,rotation:a.rotation,textAlign:o||a.textAlign,borderRadius:0,datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class bs extends zi{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this,n=i.options;if(i.left=0,i.top=0,!n.display)return void(i.width=i.height=i.right=i.bottom=0);i.width=i.right=t,i.height=i.bottom=e;const o=Y(n.text)?n.text.length:1;i._padding=Fe(n.padding);const s=o*Be(n.font).lineHeight+i._padding.height;i.isHorizontal()?i.height=s:i.width=s}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:n,right:s,options:a}=this,r=a.align;let l,c,h,d=0;return this.isHorizontal()?(c=o(r,i,s),h=e+t,l=s-i):("left"===a.position?(c=i+t,h=o(r,n,e),d=-.5*bt):(c=s-t,h=o(r,e,n),d=.5*bt),l=n-e),{titleX:c,titleY:h,maxWidth:l,rotation:d}}draw(){const t=this,e=t.ctx,i=t.options;if(!i.display)return;const o=Be(i.font),s=o.lineHeight/2+t._padding.top,{titleX:a,titleY:r,maxWidth:l,rotation:c}=t._drawArgs(s);ee(e,i.text,0,0,o,{color:i.color,maxWidth:l,rotation:c,textAlign:n(i.align),textBaseline:"middle",translation:[a,r]})}}var _s={id:"title",_element:bs,start(t,e,i){!function(t,e){const i=new bs({ctx:t.ctx,options:e,chart:t});Ze.configure(t,i,e),Ze.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;Ze.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const n=t.titleBlock;Ze.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const ys=new WeakMap;var vs={id:"subtitle",start(t,e,i){const n=new bs({ctx:t.ctx,options:i,chart:t});Ze.configure(t,n,i),Ze.addBox(t,n),ys.set(t,n)},stop(t){Ze.removeBox(t,ys.get(t)),ys.delete(t)},beforeUpdate(t,e,i){const n=ys.get(t);Ze.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const ws={average(t){if(!t.length)return!1;let e,i,n=0,o=0,s=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();n+=t.x,o+=t.y,++s}}return{x:n/s,y:o/s}},nearest(t,e){if(!t.length)return!1;let i,n,o,s=e.x,a=e.y,r=Number.POSITIVE_INFINITY;for(i=0,n=t.length;i<n;++i){const n=t[i].element;if(n&&n.hasValue()){const t=Bt(e,n.getCenterPoint());t<r&&(r=t,o=n)}}if(o){const t=o.tooltipPosition();s=t.x,a=t.y}return{x:s,y:a}}};function Ms(t,e){return e&&(Y(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function ks(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function Ss(t,e){const{element:i,datasetIndex:n,index:o}=e,s=t.getDatasetMeta(n).controller,{label:a,value:r}=s.getLabelAndValue(o);return{chart:t,label:a,parsed:s.getParsed(o),raw:t.data.datasets[n].data[o],formattedValue:r,dataset:s.getDataset(),dataIndex:o,datasetIndex:n,element:i}}function Ps(t,e){const i=t._chart.ctx,{body:n,footer:o,title:s}=t,{boxWidth:a,boxHeight:r}=e,l=Be(e.bodyFont),c=Be(e.titleFont),h=Be(e.footerFont),d=s.length,u=o.length,f=n.length,g=Fe(e.padding);let p=g.height,m=0,x=n.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);if(x+=t.beforeBody.length+t.afterBody.length,d&&(p+=d*c.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),x){p+=f*(e.displayColors?Math.max(r,l.lineHeight):l.lineHeight)+(x-f)*l.lineHeight+(x-1)*e.bodySpacing}u&&(p+=e.footerMarginTop+u*h.lineHeight+(u-1)*e.footerSpacing);let b=0;const _=function(t){m=Math.max(m,i.measureText(t).width+b)};return i.save(),i.font=c.string,J(t.title,_),i.font=l.string,J(t.beforeBody.concat(t.afterBody),_),b=e.displayColors?a+2:0,J(n,(t=>{J(t.before,_),J(t.lines,_),J(t.after,_)})),b=0,i.font=h.string,J(t.footer,_),i.restore(),m+=g.width,{width:m,height:p}}function Ds(t,e,i,n){const{x:o,width:s}=i,{width:a,chartArea:{left:r,right:l}}=t;let c="center";return"center"===n?c=o<=(r+l)/2?"left":"right":o<=s/2?c="left":o>=a-s/2&&(c="right"),function(t,e,i,n){const{x:o,width:s}=n,a=i.caretSize+i.caretPadding;return"left"===t&&o+s+a>e.width||"right"===t&&o-s-a<0||void 0}(c,t,e,i)&&(c="center"),c}function Cs(t,e,i){const n=e.yAlign||function(t,e){const{y:i,height:n}=e;return i<n/2?"top":i>t.height-n/2?"bottom":"center"}(t,i);return{xAlign:e.xAlign||Ds(t,e,i,n),yAlign:n}}function Os(t,e,i,n){const{caretSize:o,caretPadding:s,cornerRadius:a}=t,{xAlign:r,yAlign:l}=i,c=o+s,h=a+s;let d=function(t,e){let{x:i,width:n}=t;return"right"===e?i-=n:"center"===e&&(i-=n/2),i}(e,r);const u=function(t,e,i){let{y:n,height:o}=t;return"top"===e?n+=i:n-="bottom"===e?o+i:o/2,n}(e,l,c);return"center"===l?"left"===r?d+=c:"right"===r&&(d-=c):"left"===r?d-=h:"right"===r&&(d+=h),{x:Ht(d,0,n.width-e.width),y:Ht(u,0,n.height-e.height)}}function Ts(t,e,i){const n=Fe(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-n.right:t.x+n.left}function As(t){return Ms([],ks(t))}function Ls(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}class Rs extends zi{constructor(t){super(),this.opacity=0,this._active=[],this._chart=t._chart,this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this,e=t._cachedAnimations;if(e)return e;const i=t._chart,n=t.options.setContext(t.getContext()),o=n.enabled&&i.options.animation&&n.animations,s=new wi(t._chart,o);return o._cacheable&&(t._cachedAnimations=Object.freeze(s)),s}getContext(){const t=this;return t.$context||(t.$context=(e=t._chart.getContext(),i=t,n=t._tooltipItems,Object.assign(Object.create(e),{tooltip:i,tooltipItems:n,type:"tooltip"})));var e,i,n}getTitle(t,e){const i=this,{callbacks:n}=e,o=n.beforeTitle.apply(i,[t]),s=n.title.apply(i,[t]),a=n.afterTitle.apply(i,[t]);let r=[];return r=Ms(r,ks(o)),r=Ms(r,ks(s)),r=Ms(r,ks(a)),r}getBeforeBody(t,e){return As(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const i=this,{callbacks:n}=e,o=[];return J(t,(t=>{const e={before:[],lines:[],after:[]},s=Ls(n,t);Ms(e.before,ks(s.beforeLabel.call(i,t))),Ms(e.lines,s.label.call(i,t)),Ms(e.after,ks(s.afterLabel.call(i,t))),o.push(e)})),o}getAfterBody(t,e){return As(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const i=this,{callbacks:n}=e,o=n.beforeFooter.apply(i,[t]),s=n.footer.apply(i,[t]),a=n.afterFooter.apply(i,[t]);let r=[];return r=Ms(r,ks(o)),r=Ms(r,ks(s)),r=Ms(r,ks(a)),r}_createItems(t){const e=this,i=e._active,n=e._chart.data,o=[],s=[],a=[];let r,l,c=[];for(r=0,l=i.length;r<l;++r)c.push(Ss(e._chart,i[r]));return t.filter&&(c=c.filter(((e,i,o)=>t.filter(e,i,o,n)))),t.itemSort&&(c=c.sort(((e,i)=>t.itemSort(e,i,n)))),J(c,(i=>{const n=Ls(t.callbacks,i);o.push(n.labelColor.call(e,i)),s.push(n.labelPointStyle.call(e,i)),a.push(n.labelTextColor.call(e,i))})),e.labelColors=o,e.labelPointStyles=s,e.labelTextColors=a,e.dataPoints=c,c}update(t,e){const i=this,n=i.options.setContext(i.getContext()),o=i._active;let s,a=[];if(o.length){const t=ws[n.position].call(i,o,i._eventPosition);a=i._createItems(n),i.title=i.getTitle(a,n),i.beforeBody=i.getBeforeBody(a,n),i.body=i.getBody(a,n),i.afterBody=i.getAfterBody(a,n),i.footer=i.getFooter(a,n);const e=i._size=Ps(i,n),r=Object.assign({},t,e),l=Cs(i._chart,n,r),c=Os(n,r,l,i._chart);i.xAlign=l.xAlign,i.yAlign=l.yAlign,s={opacity:1,x:c.x,y:c.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==i.opacity&&(s={opacity:0});i._tooltipItems=a,i.$context=void 0,s&&i._resolveAnimations().update(i,s),t&&n.external&&n.external.call(i,{chart:i._chart,tooltip:i,replay:e})}drawCaret(t,e,i,n){const o=this.getCaretPosition(t,i,n);e.lineTo(o.x1,o.y1),e.lineTo(o.x2,o.y2),e.lineTo(o.x3,o.y3)}getCaretPosition(t,e,i){const{xAlign:n,yAlign:o}=this,{cornerRadius:s,caretSize:a}=i,{x:r,y:l}=t,{width:c,height:h}=e;let d,u,f,g,p,m;return"center"===o?(p=l+h/2,"left"===n?(d=r,u=d-a,g=p+a,m=p-a):(d=r+c,u=d+a,g=p-a,m=p+a),f=d):(u="left"===n?r+s+a:"right"===n?r+c-s-a:this.caretX,"top"===o?(g=l,p=g-a,d=u-a,f=u+a):(g=l+h,p=g+a,d=u+a,f=u-a),m=g),{x1:d,x2:u,x3:f,y1:g,y2:p,y3:m}}drawTitle(t,e,i){const n=this,o=n.title,s=o.length;let a,r,l;if(s){const c=_n(i.rtl,n.x,n.width);for(t.x=Ts(n,i.titleAlign,i),e.textAlign=c.textAlign(i.titleAlign),e.textBaseline="middle",a=Be(i.titleFont),r=i.titleSpacing,e.fillStyle=i.titleColor,e.font=a.string,l=0;l<s;++l)e.fillText(o[l],c.x(t.x),t.y+a.lineHeight/2),t.y+=a.lineHeight+r,l+1===s&&(t.y+=i.titleMarginBottom-r)}}_drawColorBox(t,e,i,n,o){const s=this,a=s.labelColors[i],r=s.labelPointStyles[i],{boxHeight:l,boxWidth:c}=o,h=Be(o.bodyFont),d=Ts(s,"left",o),u=n.x(d),f=l<h.lineHeight?(h.lineHeight-l)/2:0,g=e.y+f;if(o.usePointStyle){const e={radius:Math.min(c,l)/2,pointStyle:r.pointStyle,rotation:r.rotation,borderWidth:1},i=n.leftForLtr(u,c)+c/2,s=g+l/2;t.strokeStyle=o.multiKeyBackground,t.fillStyle=o.multiKeyBackground,Kt(t,e,i,s),t.strokeStyle=a.borderColor,t.fillStyle=a.backgroundColor,Kt(t,e,i,s)}else{t.lineWidth=a.borderWidth||1,t.strokeStyle=a.borderColor,t.setLineDash(a.borderDash||[]),t.lineDashOffset=a.borderDashOffset||0;const e=n.leftForLtr(u,c),i=n.leftForLtr(n.xPlus(u,1),c-2),s=Ie(a.borderRadius);Object.values(s).some((t=>0!==t))?(t.beginPath(),t.fillStyle=o.multiKeyBackground,ne(t,{x:e,y:g,w:c,h:l,radius:s}),t.fill(),t.stroke(),t.fillStyle=a.backgroundColor,t.beginPath(),ne(t,{x:i,y:g+1,w:c-2,h:l-2,radius:s}),t.fill()):(t.fillStyle=o.multiKeyBackground,t.fillRect(e,g,c,l),t.strokeRect(e,g,c,l),t.fillStyle=a.backgroundColor,t.fillRect(i,g+1,c-2,l-2))}t.fillStyle=s.labelTextColors[i]}drawBody(t,e,i){const n=this,{body:o}=n,{bodySpacing:s,bodyAlign:a,displayColors:r,boxHeight:l,boxWidth:c}=i,h=Be(i.bodyFont);let d=h.lineHeight,u=0;const f=_n(i.rtl,n.x,n.width),g=function(i){e.fillText(i,f.x(t.x+u),t.y+d/2),t.y+=d+s},p=f.textAlign(a);let m,x,b,_,y,v,w;for(e.textAlign=a,e.textBaseline="middle",e.font=h.string,t.x=Ts(n,p,i),e.fillStyle=i.bodyColor,J(n.beforeBody,g),u=r&&"right"!==p?"center"===a?c/2+1:c+2:0,_=0,v=o.length;_<v;++_){for(m=o[_],x=n.labelTextColors[_],e.fillStyle=x,J(m.before,g),b=m.lines,r&&b.length&&(n._drawColorBox(e,t,_,f,i),d=Math.max(h.lineHeight,l)),y=0,w=b.length;y<w;++y)g(b[y]),d=h.lineHeight;J(m.after,g)}u=0,d=h.lineHeight,J(n.afterBody,g),t.y-=s}drawFooter(t,e,i){const n=this,o=n.footer,s=o.length;let a,r;if(s){const l=_n(i.rtl,n.x,n.width);for(t.x=Ts(n,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=l.textAlign(i.footerAlign),e.textBaseline="middle",a=Be(i.footerFont),e.fillStyle=i.footerColor,e.font=a.string,r=0;r<s;++r)e.fillText(o[r],l.x(t.x),t.y+a.lineHeight/2),t.y+=a.lineHeight+i.footerSpacing}}drawBackground(t,e,i,n){const{xAlign:o,yAlign:s}=this,{x:a,y:r}=t,{width:l,height:c}=i,h=n.cornerRadius;e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.beginPath(),e.moveTo(a+h,r),"top"===s&&this.drawCaret(t,e,i,n),e.lineTo(a+l-h,r),e.quadraticCurveTo(a+l,r,a+l,r+h),"center"===s&&"right"===o&&this.drawCaret(t,e,i,n),e.lineTo(a+l,r+c-h),e.quadraticCurveTo(a+l,r+c,a+l-h,r+c),"bottom"===s&&this.drawCaret(t,e,i,n),e.lineTo(a+h,r+c),e.quadraticCurveTo(a,r+c,a,r+c-h),"center"===s&&"left"===o&&this.drawCaret(t,e,i,n),e.lineTo(a,r+h),e.quadraticCurveTo(a,r,a+h,r),e.closePath(),e.fill(),n.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this,i=e._chart,n=e.$animations,o=n&&n.x,s=n&&n.y;if(o||s){const n=ws[t.position].call(e,e._active,e._eventPosition);if(!n)return;const a=e._size=Ps(e,t),r=Object.assign({},n,e._size),l=Cs(i,t,r),c=Os(t,r,l,i);o._to===c.x&&s._to===c.y||(e.xAlign=l.xAlign,e.yAlign=l.yAlign,e.width=a.width,e.height=a.height,e.caretX=n.x,e.caretY=n.y,e._resolveAnimations().update(e,c))}}draw(t){const e=this,i=e.options.setContext(e.getContext());let n=e.opacity;if(!n)return;e._updateAnimationTarget(i);const o={width:e.width,height:e.height},s={x:e.x,y:e.y};n=Math.abs(n)<.001?0:n;const a=Fe(i.padding),r=e.title.length||e.beforeBody.length||e.body.length||e.afterBody.length||e.footer.length;i.enabled&&r&&(t.save(),t.globalAlpha=n,e.drawBackground(s,t,o,i),yn(t,i.textDirection),s.y+=a.top,e.drawTitle(s,t,i),e.drawBody(s,t,i),e.drawFooter(s,t,i),vn(t,i.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this,n=i._active,o=t.map((({datasetIndex:t,index:e})=>{const n=i._chart.getDatasetMeta(t);if(!n)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:n.data[e],index:e}})),s=!tt(n,o),a=i._positionChanged(o,e);(s||a)&&(i._active=o,i._eventPosition=e,i.update(!0))}handleEvent(t,e){const i=this,n=i.options,o=i._active||[];let s=!1,a=[];"mouseout"!==t.type&&(a=i._chart.getElementsAtEventForMode(t,n.mode,n,e),n.reverse&&a.reverse());const r=i._positionChanged(a,t);return s=e||!tt(a,o)||r,s&&(i._active=a,(n.enabled||n.external)&&(i._eventPosition={x:t.x,y:t.y},i.update(!0,e))),s}_positionChanged(t,e){const{caretX:i,caretY:n,options:o}=this,s=ws[o.position].call(this,t,e);return!1!==s&&(i!==s.x||n!==s.y)}}Rs.positioners=ws;var Es={id:"tooltip",_element:Rs,positioners:ws,afterInit(t,e,i){i&&(t.tooltip=new Rs({_chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip,i={tooltip:e};!1!==t.notifyPlugins("beforeTooltipDraw",i)&&(e&&e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i))},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:H,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,n=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(n>0&&e.dataIndex<n)return i[e.dataIndex]}return""},afterTitle:H,beforeBody:H,beforeLabel:H,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return $(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:H,afterBody:H,beforeFooter:H,footer:H,afterFooter:H}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},zs=Object.freeze({__proto__:null,Decimation:Go,Filler:gs,Legend:xs,SubTitle:vs,Title:_s,Tooltip:Es});function Is(t,e,i){const n=t.indexOf(e);if(-1===n)return((t,e,i)=>"string"==typeof e?t.push(e)-1:isNaN(e)?null:i)(t,e,i);return n!==t.lastIndexOf(e)?i:n}class Fs extends qi{constructor(t){super(t),this._startValue=void 0,this._valueRange=0}parse(t,e){if($(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:Ht(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:Is(i,t,K(e,t)),i.length-1)}determineDataLimits(){const t=this,{minDefined:e,maxDefined:i}=t.getUserBounds();let{min:n,max:o}=t.getMinMax(!0);"ticks"===t.options.bounds&&(e||(n=0),i||(o=t.getLabels().length-1)),t.min=n,t.max=o}buildTicks(){const t=this,e=t.min,i=t.max,n=t.options.offset,o=[];let s=t.getLabels();s=0===e&&i===s.length-1?s:s.slice(e,i+1),t._valueRange=Math.max(s.length-(n?0:1),1),t._startValue=t.min-(n?.5:0);for(let t=e;t<=i;t++)o.push({value:t});return o}getLabelForValue(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}configure(){const t=this;super.configure(),t.isHorizontal()||(t._reversePixels=!t._reversePixels)}getPixelForValue(t){const e=this;return"number"!=typeof t&&(t=e.parse(t)),null===t?NaN:e.getPixelForDecimal((t-e._startValue)/e._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){const e=this;return Math.round(e._startValue+e.getDecimalForPixel(t)*e._valueRange)}getBasePixel(){return this.bottom}}function Bs(t,e,{horizontal:i,minRotation:n}){const o=Et(n),s=(i?Math.sin(o):Math.cos(o))||.001,a=.75*e*(""+t).length;return Math.min(e/s,a)}Fs.id="category",Fs.defaults={ticks:{callback:Fs.prototype.getLabelForValue}};class Vs extends qi{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return $(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const t=this,{beginAtZero:e}=t.options,{minDefined:i,maxDefined:n}=t.getUserBounds();let{min:o,max:s}=t;const a=t=>o=i?o:t,r=t=>s=n?s:t;if(e){const t=Dt(o),e=Dt(s);t<0&&e<0?r(0):t>0&&e>0&&a(0)}o===s&&(r(s+1),e||a(o-1)),t.min=o,t.max=s}getTickLimit(){const t=this,e=t.options.ticks;let i,{maxTicksLimit:n,stepSize:o}=e;return o?i=Math.ceil(t.max/o)-Math.floor(t.min/o)+1:(i=t.computeTickLimit(),n=n||11),n&&(i=Math.min(n,i)),i}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this,e=t.options,i=e.ticks;let n=t.getTickLimit();n=Math.max(2,n);const o=function(t,e){const i=[],{bounds:n,step:o,min:s,max:a,precision:r,count:l,maxTicks:c,maxDigits:h,includeBounds:d}=t,u=o||1,f=c-1,{min:g,max:p}=e,m=!$(s),x=!$(a),b=!$(l),_=(p-g)/(h+1);let y,v,w,M,k=Ct((p-g)/f/u)*u;if(k<1e-14&&!m&&!x)return[{value:g},{value:p}];M=Math.ceil(p/k)-Math.floor(g/k),M>f&&(k=Ct(M*k/f/u)*u),$(r)||(y=Math.pow(10,r),k=Math.ceil(k*y)/y),"ticks"===n?(v=Math.floor(g/k)*k,w=Math.ceil(p/k)*k):(v=g,w=p),m&&x&&o&&Lt((a-s)/o,k/1e3)?(M=Math.round(Math.min((a-s)/k,c)),k=(a-s)/M,v=s,w=a):b?(v=m?s:v,w=x?a:w,M=l-1,k=(w-v)/M):(M=(w-v)/k,M=At(M,Math.round(M),k/1e3)?Math.round(M):Math.ceil(M));const S=Math.max(It(k),It(v));y=Math.pow(10,$(r)?S:r),v=Math.round(v*y)/y,w=Math.round(w*y)/y;let P=0;for(m&&(d&&v!==s?(i.push({value:s}),v<s&&P++,At(Math.round((v+P*k)*y)/y,s,Bs(s,_,t))&&P++):v<s&&P++);P<M;++P)i.push({value:Math.round((v+P*k)*y)/y});return x&&d&&w!==a?At(i[i.length-1].value,a,Bs(a,_,t))?i[i.length-1].value=a:i.push({value:a}):x&&w!==a||i.push({value:w}),i}({maxTicks:n,bounds:e.bounds,min:e.min,max:e.max,precision:i.precision,step:i.stepSize,count:i.count,maxDigits:t._maxDigits(),horizontal:t.isHorizontal(),minRotation:i.minRotation||0,includeBounds:!1!==i.includeBounds},t._range||t);return"ticks"===e.bounds&&Rt(o,t,"value"),e.reverse?(o.reverse(),t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max),o}configure(){const t=this,e=t.ticks;let i=t.min,n=t.max;if(super.configure(),t.options.offset&&e.length){const t=(n-i)/Math.max(e.length-1,1)/2;i-=t,n+=t}t._startValue=i,t._endValue=n,t._valueRange=n-i}getLabelForValue(t){return Fi(t,this.chart.options.locale)}}class Ws extends Vs{determineDataLimits(){const t=this,{min:e,max:i}=t.getMinMax(!0);t.min=X(e)?e:0,t.max=X(i)?i:1,t.handleTickRangeOptions()}computeTickLimit(){const t=this,e=t.isHorizontal(),i=e?t.width:t.height,n=Et(t.options.ticks.minRotation),o=(e?Math.sin(n):Math.cos(n))||.001,s=t._resolveTickFontOptions(0);return Math.ceil(i/Math.min(40,s.lineHeight/o))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function Ns(t){return 1===t/Math.pow(10,Math.floor(Pt(t)))}Ws.id="linear",Ws.defaults={ticks:{callback:Vi.formatters.numeric}};class Hs extends qi{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=Vs.prototype.parse.apply(this,[t,e]);if(0!==i)return X(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const t=this,{min:e,max:i}=t.getMinMax(!0);t.min=X(e)?Math.max(0,e):null,t.max=X(i)?Math.max(0,i):null,t.options.beginAtZero&&(t._zero=!0),t.handleTickRangeOptions()}handleTickRangeOptions(){const t=this,{minDefined:e,maxDefined:i}=t.getUserBounds();let n=t.min,o=t.max;const s=t=>n=e?n:t,a=t=>o=i?o:t,r=(t,e)=>Math.pow(10,Math.floor(Pt(t))+e);n===o&&(n<=0?(s(1),a(10)):(s(r(n,-1)),a(r(o,1)))),n<=0&&s(r(o,-1)),o<=0&&a(r(n,1)),t._zero&&t.min!==t._suggestedMin&&n===r(t.min,0)&&s(r(n,-1)),t.min=n,t.max=o}buildTicks(){const t=this,e=t.options,i=function(t,e){const i=Math.floor(Pt(e.max)),n=Math.ceil(e.max/Math.pow(10,i)),o=[];let s=q(t.min,Math.pow(10,Math.floor(Pt(e.min)))),a=Math.floor(Pt(s)),r=Math.floor(s/Math.pow(10,a)),l=a<0?Math.pow(10,Math.abs(a)):1;do{o.push({value:s,major:Ns(s)}),++r,10===r&&(r=1,++a,l=a>=0?1:l),s=Math.round(r*Math.pow(10,a)*l)/l}while(a<i||a===i&&r<n);const c=q(t.max,s);return o.push({value:c,major:Ns(s)}),o}({min:t._userMin,max:t._userMax},t);return"ticks"===e.bounds&&Rt(i,t,"value"),e.reverse?(i.reverse(),t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max),i}getLabelForValue(t){return void 0===t?"0":Fi(t,this.chart.options.locale)}configure(){const t=this,e=t.min;super.configure(),t._startValue=Pt(e),t._valueRange=Pt(t.max)-Pt(e)}getPixelForValue(t){const e=this;return void 0!==t&&0!==t||(t=e.min),null===t||isNaN(t)?NaN:e.getPixelForDecimal(t===e.min?0:(Pt(t)-e._startValue)/e._valueRange)}getValueForPixel(t){const e=this,i=e.getDecimalForPixel(t);return Math.pow(10,e._startValue+i*e._valueRange)}}function js(t){const e=t.ticks;if(e.display&&t.display){const t=Fe(e.backdropPadding);return K(e.font&&e.font.size,xt.font.size)+t.height}return 0}function $s(t,e,i,n,o){return t===n||t===o?{start:e-i/2,end:e+i/2}:t<n||t>o?{start:e-i,end:e}:{start:e,end:e+i}}function Ys(t){const e={l:0,r:t.width,t:0,b:t.height-t.paddingTop},i={},n=[],o=[],s=t.getLabels().length;for(let c=0;c<s;c++){const s=t.options.pointLabels.setContext(t.getContext(c));o[c]=s.padding;const h=t.getPointPosition(c,t.drawingArea+o[c]),d=Be(s.font),u=(a=t.ctx,r=d,l=Y(l=t._pointLabels[c])?l:[l],{w:Ut(a,r.string,l),h:l.length*r.lineHeight});n[c]=u;const f=t.getIndexAngle(c),g=zt(f),p=$s(g,h.x,u.w,0,180),m=$s(g,h.y,u.h,90,270);p.start<e.l&&(e.l=p.start,i.l=f),p.end>e.r&&(e.r=p.end,i.r=f),m.start<e.t&&(e.t=m.start,i.t=f),m.end>e.b&&(e.b=m.end,i.b=f)}var a,r,l;t._setReductions(t.drawingArea,e,i),t._pointLabelItems=function(t,e,i){const n=[],o=t.getLabels().length,s=t.options,a=js(s),r=t.getDistanceFromCenterForValue(s.ticks.reverse?t.min:t.max);for(let s=0;s<o;s++){const o=0===s?a/2:0,l=t.getPointPosition(s,r+o+i[s]),c=zt(t.getIndexAngle(s)),h=e[s],d=qs(l.y,h.h,c),u=Us(c),f=Xs(l.x,h.w,u);n.push({x:l.x,y:d,textAlign:u,left:f,top:d,right:f+h.w,bottom:d+h.h})}return n}(t,n,o)}function Us(t){return 0===t||180===t?"center":t<180?"left":"right"}function Xs(t,e,i){return"right"===i?t-=e:"center"===i&&(t-=e/2),t}function qs(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}function Ks(t,e,i,n){const{ctx:o}=t;if(i)o.arc(t.xCenter,t.yCenter,e,0,_t);else{let i=t.getPointPosition(0,e);o.moveTo(i.x,i.y);for(let s=1;s<n;s++)i=t.getPointPosition(s,e),o.lineTo(i.x,i.y)}}function Gs(t){return Tt(t)?t:0}Hs.id="logarithmic",Hs.defaults={ticks:{callback:Vi.formatters.logarithmic,major:{enabled:!0}}};class Zs extends Vs{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this;t.width=t.maxWidth,t.height=t.maxHeight,t.paddingTop=js(t.options)/2,t.xCenter=Math.floor(t.width/2),t.yCenter=Math.floor((t.height-t.paddingTop)/2),t.drawingArea=Math.min(t.height-t.paddingTop,t.width)/2}determineDataLimits(){const t=this,{min:e,max:i}=t.getMinMax(!1);t.min=X(e)&&!isNaN(e)?e:0,t.max=X(i)&&!isNaN(i)?i:0,t.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/js(this.options))}generateTickLabels(t){const e=this;Vs.prototype.generateTickLabels.call(e,t),e._pointLabels=e.getLabels().map(((t,i)=>{const n=Q(e.options.pointLabels.callback,[t,i],e);return n||0===n?n:""}))}fit(){const t=this,e=t.options;e.display&&e.pointLabels.display?Ys(t):t.setCenterPoint(0,0,0,0)}_setReductions(t,e,i){const n=this;let o=e.l/Math.sin(i.l),s=Math.max(e.r-n.width,0)/Math.sin(i.r),a=-e.t/Math.cos(i.t),r=-Math.max(e.b-(n.height-n.paddingTop),0)/Math.cos(i.b);o=Gs(o),s=Gs(s),a=Gs(a),r=Gs(r),n.drawingArea=Math.max(t/2,Math.min(Math.floor(t-(o+s)/2),Math.floor(t-(a+r)/2))),n.setCenterPoint(o,s,a,r)}setCenterPoint(t,e,i,n){const o=this,s=o.width-e-o.drawingArea,a=t+o.drawingArea,r=i+o.drawingArea,l=o.height-o.paddingTop-n-o.drawingArea;o.xCenter=Math.floor((a+s)/2+o.left),o.yCenter=Math.floor((r+l)/2+o.top+o.paddingTop)}getIndexAngle(t){return Wt(t*(_t/this.getLabels().length)+Et(this.options.startAngle||0))}getDistanceFromCenterForValue(t){const e=this;if($(t))return NaN;const i=e.drawingArea/(e.max-e.min);return e.options.reverse?(e.max-t)*i:(t-e.min)*i}getValueForDistanceFromCenter(t){if($(t))return NaN;const e=this,i=t/(e.drawingArea/(e.max-e.min));return e.options.reverse?e.max-i:e.min+i}getPointPosition(t,e){const i=this,n=i.getIndexAngle(t)-Mt;return{x:Math.cos(n)*e+i.xCenter,y:Math.sin(n)*e+i.yCenter,angle:n}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:n,bottom:o}=this._pointLabelItems[t];return{left:e,top:i,right:n,bottom:o}}drawBackground(){const t=this,{backgroundColor:e,grid:{circular:i}}=t.options;if(e){const n=t.ctx;n.save(),n.beginPath(),Ks(t,t.getDistanceFromCenterForValue(t._endValue),i,t.getLabels().length),n.closePath(),n.fillStyle=e,n.fill(),n.restore()}}drawGrid(){const t=this,e=t.ctx,i=t.options,{angleLines:n,grid:o}=i,s=t.getLabels().length;let a,r,l;if(i.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:n}}=t;for(let o=e-1;o>=0;o--){const e=n.setContext(t.getContext(o)),s=Be(e.font),{x:a,y:r,textAlign:l,left:c,top:h,right:d,bottom:u}=t._pointLabelItems[o],{backdropColor:f}=e;if(!$(f)){const t=Fe(e.backdropPadding);i.fillStyle=f,i.fillRect(c-t.left,h-t.top,d-c+t.width,u-h+t.height)}ee(i,t._pointLabels[o],a,r+s.lineHeight/2,s,{color:e.color,textAlign:l,textBaseline:"middle"})}}(t,s),o.display&&t.ticks.forEach(((e,i)=>{if(0!==i){r=t.getDistanceFromCenterForValue(e.value);const n=o.setContext(t.getContext(i-1));!function(t,e,i,n){const o=t.ctx,s=e.circular,{color:a,lineWidth:r}=e;!s&&!n||!a||!r||i<0||(o.save(),o.strokeStyle=a,o.lineWidth=r,o.setLineDash(e.borderDash),o.lineDashOffset=e.borderDashOffset,o.beginPath(),Ks(t,i,s,n),o.closePath(),o.stroke(),o.restore())}(t,n,r,s)}})),n.display){for(e.save(),a=t.getLabels().length-1;a>=0;a--){const o=n.setContext(t.getContext(a)),{color:s,lineWidth:c}=o;c&&s&&(e.lineWidth=c,e.strokeStyle=s,e.setLineDash(o.borderDash),e.lineDashOffset=o.borderDashOffset,r=t.getDistanceFromCenterForValue(i.ticks.reverse?t.min:t.max),l=t.getPointPosition(a,r),e.beginPath(),e.moveTo(t.xCenter,t.yCenter),e.lineTo(l.x,l.y),e.stroke())}e.restore()}}drawBorder(){}drawLabels(){const t=this,e=t.ctx,i=t.options,n=i.ticks;if(!n.display)return;const o=t.getIndexAngle(0);let s,a;e.save(),e.translate(t.xCenter,t.yCenter),e.rotate(o),e.textAlign="center",e.textBaseline="middle",t.ticks.forEach(((o,r)=>{if(0===r&&!i.reverse)return;const l=n.setContext(t.getContext(r)),c=Be(l.font);if(s=t.getDistanceFromCenterForValue(t.ticks[r].value),l.showLabelBackdrop){e.font=c.string,a=e.measureText(o.label).width,e.fillStyle=l.backdropColor;const t=Fe(l.backdropPadding);e.fillRect(-a/2-t.left,-s-c.size/2-t.top,a+t.width,c.size+t.height)}ee(e,o.label,0,-s,c,{color:l.color})})),e.restore()}drawTitle(){}}Zs.id="radialLinear",Zs.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Vi.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5}},Zs.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},Zs.descriptors={angleLines:{_fallback:"grid"}};const Qs={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Js=Object.keys(Qs);function ta(t,e){return t-e}function ea(t,e){if($(e))return null;const i=t._adapter,{parser:n,round:o,isoWeekday:s}=t._parseOpts;let a=e;return"function"==typeof n&&(a=n(a)),X(a)||(a="string"==typeof n?i.parse(a,n):i.parse(a)),null===a?null:(o&&(a="week"!==o||!Tt(s)&&!0!==s?i.startOf(a,o):i.startOf(a,"isoWeek",s)),+a)}function ia(t,e,i,n){const o=Js.length;for(let s=Js.indexOf(t);s<o-1;++s){const t=Qs[Js[s]],o=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(o*t.size))<=n)return Js[s]}return Js[o-1]}function na(t,e,i){if(i){if(i.length){const{lo:n,hi:o}=oe(i,e);t[i[n]>=e?i[n]:i[o]]=!0}}else t[e]=!0}function oa(t,e,i){const n=[],o={},s=e.length;let a,r;for(a=0;a<s;++a)r=e[a],o[r]=a,n.push({value:r,major:!1});return 0!==s&&i?function(t,e,i,n){const o=t._adapter,s=+o.startOf(e[0].value,n),a=e[e.length-1].value;let r,l;for(r=s;r<=a;r=+o.add(r,1,n))l=i[r],l>=0&&(e[l].major=!0);return e}(t,n,o,i):n}class sa extends qi{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const i=t.time||(t.time={}),n=this._adapter=new ao._date(t.adapters.date);st(i.displayFormats,n.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:ea(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this,e=t.options,i=t._adapter,n=e.time.unit||"day";let{min:o,max:s,minDefined:a,maxDefined:r}=t.getUserBounds();function l(t){a||isNaN(t.min)||(o=Math.min(o,t.min)),r||isNaN(t.max)||(s=Math.max(s,t.max))}a&&r||(l(t._getLabelBounds()),"ticks"===e.bounds&&"labels"===e.ticks.source||l(t.getMinMax(!1))),o=X(o)&&!isNaN(o)?o:+i.startOf(Date.now(),n),s=X(s)&&!isNaN(s)?s:+i.endOf(Date.now(),n)+1,t.min=Math.min(o,s-1),t.max=Math.max(o+1,s)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this,e=t.options,i=e.time,n=e.ticks,o="labels"===n.source?t.getLabelTimestamps():t._generate();"ticks"===e.bounds&&o.length&&(t.min=t._userMin||o[0],t.max=t._userMax||o[o.length-1]);const s=t.min,a=re(o,s,t.max);return t._unit=i.unit||(n.autoSkip?ia(i.minUnit,t.min,t.max,t._getLabelCapacity(s)):function(t,e,i,n,o){for(let s=Js.length-1;s>=Js.indexOf(i);s--){const i=Js[s];if(Qs[i].common&&t._adapter.diff(o,n,i)>=e-1)return i}return Js[i?Js.indexOf(i):0]}(t,a.length,i.minUnit,t.min,t.max)),t._majorUnit=n.major.enabled&&"year"!==t._unit?function(t){for(let e=Js.indexOf(t)+1,i=Js.length;e<i;++e)if(Qs[Js[e]].common)return Js[e]}(t._unit):void 0,t.initOffsets(o),e.reverse&&a.reverse(),oa(t,a,t._majorUnit)}initOffsets(t){const e=this;let i,n,o=0,s=0;e.options.offset&&t.length&&(i=e.getDecimalForValue(t[0]),o=1===t.length?1-i:(e.getDecimalForValue(t[1])-i)/2,n=e.getDecimalForValue(t[t.length-1]),s=1===t.length?n:(n-e.getDecimalForValue(t[t.length-2]))/2);const a=t.length<3?.5:.25;o=Ht(o,0,a),s=Ht(s,0,a),e._offsets={start:o,end:s,factor:1/(o+1+s)}}_generate(){const t=this,e=t._adapter,i=t.min,n=t.max,o=t.options,s=o.time,a=s.unit||ia(s.minUnit,i,n,t._getLabelCapacity(i)),r=K(s.stepSize,1),l="week"===a&&s.isoWeekday,c=Tt(l)||!0===l,h={};let d,u,f=i;if(c&&(f=+e.startOf(f,"isoWeek",l)),f=+e.startOf(f,c?"day":a),e.diff(n,i,a)>1e5*r)throw new Error(i+" and "+n+" are too far apart with stepSize of "+r+" "+a);const g="data"===o.ticks.source&&t.getDataTimestamps();for(d=f,u=0;d<n;d=+e.add(d,r,a),u++)na(h,d,g);return d!==n&&"ticks"!==o.bounds&&1!==u||na(h,d,g),Object.keys(h).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}_tickFormatFunction(t,e,i,n){const o=this,s=o.options,a=s.time.displayFormats,r=o._unit,l=o._majorUnit,c=r&&a[r],h=l&&a[l],d=i[e],u=l&&h&&d&&d.major,f=o._adapter.format(t,n||(u?h:c)),g=s.ticks.callback;return g?Q(g,[f,e,i],o):f}generateTickLabels(t){let e,i,n;for(e=0,i=t.length;e<i;++e)n=t[e],n.label=this._tickFormatFunction(n.value,e,t)}getDecimalForValue(t){const e=this;return null===t?NaN:(t-e.min)/(e.max-e.min)}getPixelForValue(t){const e=this,i=e._offsets,n=e.getDecimalForValue(t);return e.getPixelForDecimal((i.start+n)*i.factor)}getValueForPixel(t){const e=this,i=e._offsets,n=e.getDecimalForPixel(t)/i.factor-i.end;return e.min+n*(e.max-e.min)}_getLabelSize(t){const e=this,i=e.options.ticks,n=e.ctx.measureText(t).width,o=Et(e.isHorizontal()?i.maxRotation:i.minRotation),s=Math.cos(o),a=Math.sin(o),r=e._resolveTickFontOptions(0).size;return{w:n*s+r*a,h:n*a+r*s}}_getLabelCapacity(t){const e=this,i=e.options.time,n=i.displayFormats,o=n[i.unit]||n.millisecond,s=e._tickFormatFunction(t,0,oa(e,[t],e._majorUnit),o),a=e._getLabelSize(s),r=Math.floor(e.isHorizontal()?e.width/a.w:e.height/a.h)-1;return r>0?r:1}getDataTimestamps(){const t=this;let e,i,n=t._cache.data||[];if(n.length)return n;const o=t.getMatchingVisibleMetas();if(t._normalized&&o.length)return t._cache.data=o[0].controller.getAllParsedValues(t);for(e=0,i=o.length;e<i;++e)n=n.concat(o[e].controller.getAllParsedValues(t));return t._cache.data=t.normalize(n)}getLabelTimestamps(){const t=this,e=t._cache.labels||[];let i,n;if(e.length)return e;const o=t.getLabels();for(i=0,n=o.length;i<n;++i)e.push(ea(t,o[i]));return t._cache.labels=t._normalized?e:t.normalize(e)}normalize(t){return de(t.sort(ta))}}function aa(t,e,i){let n,o,s,a,r=0,l=t.length-1;i?(e>=t[r].pos&&e<=t[l].pos&&({lo:r,hi:l}=se(t,"pos",e)),({pos:n,time:s}=t[r]),({pos:o,time:a}=t[l])):(e>=t[r].time&&e<=t[l].time&&({lo:r,hi:l}=se(t,"time",e)),({time:n,pos:s}=t[r]),({time:o,pos:a}=t[l]));const c=o-n;return c?s+(a-s)*(e-n)/c:s}sa.id="time",sa.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class ra extends sa{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this,e=t._getTimestampsForTable(),i=t._table=t.buildLookupTable(e);t._minPos=aa(i,t.min),t._tableRange=aa(i,t.max)-t._minPos,super.initOffsets(e)}buildLookupTable(t){const{min:e,max:i}=this,n=[],o=[];let s,a,r,l,c;for(s=0,a=t.length;s<a;++s)l=t[s],l>=e&&l<=i&&n.push(l);if(n.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(s=0,a=n.length;s<a;++s)c=n[s+1],r=n[s-1],l=n[s],Math.round((c+r)/2)!==l&&o.push({time:l,pos:s/(a-1)});return o}_getTimestampsForTable(){const t=this;let e=t._cache.all||[];if(e.length)return e;const i=t.getDataTimestamps(),n=t.getLabelTimestamps();return e=i.length&&n.length?t.normalize(i.concat(n)):i.length?i:n,e=t._cache.all=e,e}getDecimalForValue(t){return(aa(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this,i=e._offsets,n=e.getDecimalForPixel(t)/i.factor-i.end;return aa(e._table,n*e._tableRange+e._minPos,!0)}}ra.id="timeseries",ra.defaults=sa.defaults;var la=Object.freeze({__proto__:null,CategoryScale:Fs,LinearScale:Ws,LogarithmicScale:Hs,RadialLinearScale:Zs,TimeScale:sa,TimeSeriesScale:ra});return eo.register(yo,la,Xo,zs),eo.helpers={...Tn},eo._adapters=ao,eo.Animation=yi,eo.Animations=wi,eo.animator=a,eo.controllers=Ln.controllers.items,eo.DatasetController=Ei,eo.Element=zi,eo.elements=Xo,eo.Interaction=Te,eo.layouts=Ze,eo.platforms=fi,eo.Scale=qi,eo.Ticks=Vi,Object.assign(eo,yo,la,Xo,zs,fi),eo.Chart=eo,"undefined"!=typeof window&&(window.Chart=eo),eo}));

/*! jQuery v2.2.2 | (c) jQuery Foundation | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={},m="2.2.2",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a){return n.each(this,a)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){var b=a&&a.toString();return!n.isArray(a)&&b-parseFloat(b)+1>=0},isPlainObject:function(a){var b;if("object"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;if(a.constructor&&!k.call(a,"constructor")&&!k.call(a.constructor.prototype||{},"isPrototypeOf"))return!1;for(b in a);return void 0===b||k.call(a,b)},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?i[j.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=d.createElement("script"),b.text=a,d.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(s(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:h.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(s(a))for(d=a.length;d>g;g++)e=b(a[g],g,c),null!=e&&h.push(e);else for(g in a)e=b(a[g],g,c),null!=e&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(d=e.call(arguments,2),f=function(){return a.apply(b||this,d.concat(e.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:l}),"function"==typeof Symbol&&(n.fn[Symbol.iterator]=c[Symbol.iterator]),n.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){i["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=!!a&&"length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ga(),z=ga(),A=ga(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+L+"*\\]",O=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+N+")*)|.*)\\)|)",P=new RegExp(L+"+","g"),Q=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),R=new RegExp("^"+L+"*,"+L+"*"),S=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),T=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),U=new RegExp(O),V=new RegExp("^"+M+"$"),W={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+O),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,$=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,_=/[+~]/,aa=/'|\\/g,ba=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),ca=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},da=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(ea){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fa(a,b,d,e){var f,h,j,k,l,o,r,s,w=b&&b.ownerDocument,x=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==x&&9!==x&&11!==x)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==x&&(o=$.exec(a)))if(f=o[1]){if(9===x){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(w&&(j=w.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(o[2])return H.apply(d,b.getElementsByTagName(a)),d;if((f=o[3])&&c.getElementsByClassName&&b.getElementsByClassName)return H.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==x)w=b,s=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(aa,"\\$&"):b.setAttribute("id",k=u),r=g(a),h=r.length,l=V.test(k)?"#"+k:"[id='"+k+"']";while(h--)r[h]=l+" "+qa(r[h]);s=r.join(","),w=_.test(a)&&oa(b.parentNode)||b}if(s)try{return H.apply(d,w.querySelectorAll(s)),d}catch(y){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(Q,"$1"),b,d,e)}function ga(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ha(a){return a[u]=!0,a}function ia(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ja(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function ka(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function la(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function na(a){return ha(function(b){return b=+b,ha(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function oa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=fa.support={},f=fa.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=fa.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ia(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ia(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Z.test(n.getElementsByClassName),c.getById=ia(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return"undefined"!=typeof b.getElementsByClassName&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=Z.test(n.querySelectorAll))&&(ia(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ia(function(a){var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Z.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ia(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",O)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Z.test(o.compareDocumentPosition),t=b||Z.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return ka(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?ka(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},fa.matches=function(a,b){return fa(a,null,null,b)},fa.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(T,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fa(b,n,null,[a]).length>0},fa.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fa.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fa.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},fa.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fa.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fa.selectors={cacheLength:50,createPseudo:ha,match:W,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ba,ca),a[3]=(a[3]||a[4]||a[5]||"").replace(ba,ca),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||fa.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&fa.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return W.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&U.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ba,ca).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=fa.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(P," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fa.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ha(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ha(function(a){var b=[],c=[],d=h(a.replace(Q,"$1"));return d[u]?ha(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ha(function(a){return function(b){return fa(a,b).length>0}}),contains:ha(function(a){return a=a.replace(ba,ca),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ha(function(a){return V.test(a||"")||fa.error("unsupported lang: "+a),a=a.replace(ba,ca).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Y.test(a.nodeName)},input:function(a){return X.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:na(function(){return[0]}),last:na(function(a,b){return[b-1]}),eq:na(function(a,b,c){return[0>c?c+b:c]}),even:na(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:na(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:na(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:na(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=la(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=ma(b);function pa(){}pa.prototype=d.filters=d.pseudos,d.setFilters=new pa,g=fa.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=R.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=S.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(Q," ")}),h=h.slice(c.length));for(g in d.filter)!(e=W[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fa.error(a):z(a,i).slice(0)};function qa(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function ra(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j,k=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(j=b[u]||(b[u]={}),i=j[b.uniqueID]||(j[b.uniqueID]={}),(h=i[d])&&h[0]===w&&h[1]===f)return k[2]=h[2];if(i[d]=k,k[2]=a(b,c,g))return!0}}}function sa(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ta(a,b,c){for(var d=0,e=b.length;e>d;d++)fa(a,b[d],c);return c}function ua(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function va(a,b,c,d,e,f){return d&&!d[u]&&(d=va(d)),e&&!e[u]&&(e=va(e,f)),ha(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ta(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ua(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ua(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ua(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function wa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ra(function(a){return a===b},h,!0),l=ra(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[ra(sa(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return va(i>1&&sa(m),i>1&&qa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(Q,"$1"),c,e>i&&wa(a.slice(i,e)),f>e&&wa(a=a.slice(e)),f>e&&qa(a))}m.push(c)}return sa(m)}function xa(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=F.call(i));u=ua(u)}H.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&fa.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ha(f):f}return h=fa.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xa(e,d)),f.selector=a}return f},i=fa.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ba,ca),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=W.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ba,ca),_.test(j[0].type)&&oa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qa(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,!b||_.test(a)&&oa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ia(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ia(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ja("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ia(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ja("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ia(function(a){return null==a.getAttribute("disabled")})||ja(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fa}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.uniqueSort=n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},v=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},w=n.expr.match.needsContext,x=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,y=/^.[^:#\[\.,]*$/;function z(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(y.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return h.call(b,a)>-1!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(z(this,a||[],!1))},not:function(a){return this.pushStack(z(this,a||[],!0))},is:function(a){return!!z(this,"string"==typeof a&&w.test(a)?n(a):a||[],!1).length}});var A,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,C=n.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||A,"string"==typeof a){if(e="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:B.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),x.test(e[1])&&n.isPlainObject(b))for(e in b)n.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}return f=d.getElementById(e[2]),f&&f.parentNode&&(this.length=1,this[0]=f),this.context=d,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?void 0!==c.ready?c.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};C.prototype=n.fn,A=n(d);var D=/^(?:parents|prev(?:Until|All))/,E={children:!0,contents:!0,next:!0,prev:!0};n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=w.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?h.call(n(a),this[0]):h.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.uniqueSort(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function F(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return u(a,"parentNode")},parentsUntil:function(a,b,c){return u(a,"parentNode",c)},next:function(a){return F(a,"nextSibling")},prev:function(a){return F(a,"previousSibling")},nextAll:function(a){return u(a,"nextSibling")},prevAll:function(a){return u(a,"previousSibling")},nextUntil:function(a,b,c){return u(a,"nextSibling",c)},prevUntil:function(a,b,c){return u(a,"previousSibling",c)},siblings:function(a){return v((a.parentNode||{}).firstChild,a)},children:function(a){return v(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(E[a]||n.uniqueSort(e),D.test(a)&&e.reverse()),this.pushStack(e)}});var G=/\S+/g;function H(a){var b={};return n.each(a.match(G)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?H(a):n.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){n.each(b,function(b,c){n.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!==n.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return n.each(arguments,function(a,b){var c;while((c=n.inArray(b,f,c))>-1)f.splice(c,1),h>=c&&h--}),this},has:function(a){return a?n.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=g=[],c||(f=c=""),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().progress(c.notify).done(c.resolve).fail(c.reject):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=e.call(arguments),d=c.length,f=1!==d||a&&n.isFunction(a.promise)?d:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?e.call(arguments):d,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(d>1)for(i=new Array(d),j=new Array(d),k=new Array(d);d>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().progress(h(b,j,i)).done(h(b,k,c)).fail(g.reject):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(d,[n]),n.fn.triggerHandler&&(n(d).triggerHandler("ready"),n(d).off("ready"))))}});function J(){d.removeEventListener("DOMContentLoaded",J),a.removeEventListener("load",J),n.ready()}n.ready.promise=function(b){return I||(I=n.Deferred(),"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll?a.setTimeout(n.ready):(d.addEventListener("DOMContentLoaded",J),a.addEventListener("load",J))),I.promise(b)},n.ready.promise();var K=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)K(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},L=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function M(){this.expando=n.expando+M.uid++}M.uid=1,M.prototype={register:function(a,b){var c=b||{};return a.nodeType?a[this.expando]=c:Object.defineProperty(a,this.expando,{value:c,writable:!0,configurable:!0}),a[this.expando]},cache:function(a){if(!L(a))return{};var b=a[this.expando];return b||(b={},L(a)&&(a.nodeType?a[this.expando]=b:Object.defineProperty(a,this.expando,{value:b,configurable:!0}))),b},set:function(a,b,c){var d,e=this.cache(a);if("string"==typeof b)e[b]=c;else for(d in b)e[d]=b[d];return e},get:function(a,b){return void 0===b?this.cache(a):a[this.expando]&&a[this.expando][b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=a[this.expando];if(void 0!==f){if(void 0===b)this.register(a);else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in f?d=[b,e]:(d=e,d=d in f?[d]:d.match(G)||[])),c=d.length;while(c--)delete f[d[c]]}(void 0===b||n.isEmptyObject(f))&&(a.nodeType?a[this.expando]=void 0:delete a[this.expando])}},hasData:function(a){var b=a[this.expando];return void 0!==b&&!n.isEmptyObject(b)}};var N=new M,O=new M,P=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Q=/[A-Z]/g;function R(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(Q,"-$&").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:P.test(c)?n.parseJSON(c):c;
}catch(e){}O.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return O.hasData(a)||N.hasData(a)},data:function(a,b,c){return O.access(a,b,c)},removeData:function(a,b){O.remove(a,b)},_data:function(a,b,c){return N.access(a,b,c)},_removeData:function(a,b){N.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=O.get(f),1===f.nodeType&&!N.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),R(f,d,e[d])));N.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){O.set(this,a)}):K(this,function(b){var c,d;if(f&&void 0===b){if(c=O.get(f,a)||O.get(f,a.replace(Q,"-$&").toLowerCase()),void 0!==c)return c;if(d=n.camelCase(a),c=O.get(f,d),void 0!==c)return c;if(c=R(f,d,void 0),void 0!==c)return c}else d=n.camelCase(a),this.each(function(){var c=O.get(this,d);O.set(this,d,b),a.indexOf("-")>-1&&void 0!==c&&O.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){O.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=N.get(a,b),c&&(!d||n.isArray(c)?d=N.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return N.get(a,c)||N.access(a,c,{empty:n.Callbacks("once memory").add(function(){N.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=N.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T=new RegExp("^(?:([+-])=|)("+S+")([a-z%]*)$","i"),U=["Top","Right","Bottom","Left"],V=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)};function W(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return n.css(a,b,"")},i=h(),j=c&&c[3]||(n.cssNumber[b]?"":"px"),k=(n.cssNumber[b]||"px"!==j&&+i)&&T.exec(n.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||".5",k/=f,n.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var X=/^(?:checkbox|radio)$/i,Y=/<([\w:-]+)/,Z=/^$|\/(?:java|ecma)script/i,$={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};$.optgroup=$.option,$.tbody=$.tfoot=$.colgroup=$.caption=$.thead,$.th=$.td;function _(a,b){var c="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function aa(a,b){for(var c=0,d=a.length;d>c;c++)N.set(a[c],"globalEval",!b||N.get(b[c],"globalEval"))}var ba=/<|&#?\w+;/;function ca(a,b,c,d,e){for(var f,g,h,i,j,k,l=b.createDocumentFragment(),m=[],o=0,p=a.length;p>o;o++)if(f=a[o],f||0===f)if("object"===n.type(f))n.merge(m,f.nodeType?[f]:f);else if(ba.test(f)){g=g||l.appendChild(b.createElement("div")),h=(Y.exec(f)||["",""])[1].toLowerCase(),i=$[h]||$._default,g.innerHTML=i[1]+n.htmlPrefilter(f)+i[2],k=i[0];while(k--)g=g.lastChild;n.merge(m,g.childNodes),g=l.firstChild,g.textContent=""}else m.push(b.createTextNode(f));l.textContent="",o=0;while(f=m[o++])if(d&&n.inArray(f,d)>-1)e&&e.push(f);else if(j=n.contains(f.ownerDocument,f),g=_(l.appendChild(f),"script"),j&&aa(g),c){k=0;while(f=g[k++])Z.test(f.type||"")&&c.push(f)}return l}!function(){var a=d.createDocumentFragment(),b=a.appendChild(d.createElement("div")),c=d.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),l.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",l.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var da=/^key/,ea=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,fa=/^([^.]*)(?:\.(.+)|)/;function ga(){return!0}function ha(){return!1}function ia(){try{return d.activeElement}catch(a){}}function ja(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)ja(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=ha;else if(!e)return a;return 1===f&&(g=e,e=function(a){return n().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=n.guid++)),a.each(function(){n.event.add(this,b,e,d,c)})}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=N.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return"undefined"!=typeof n&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(G)||[""],j=b.length;while(j--)h=fa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=N.hasData(a)&&N.get(a);if(r&&(i=r.events)){b=(b||"").match(G)||[""],j=b.length;while(j--)if(h=fa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&N.remove(a,"handle events")}},dispatch:function(a){a=n.event.fix(a);var b,c,d,f,g,h=[],i=e.call(arguments),j=(N.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())a.rnamespace&&!a.rnamespace.test(g.namespace)||(a.handleObj=g,a.data=g.data,d=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==d&&(a.result=d)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&("click"!==a.type||isNaN(a.button)||a.button<1))for(;i!==this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>-1:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,e,f,g=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||d,e=c.documentElement,f=c.body,a.pageX=b.clientX+(e&&e.scrollLeft||f&&f.scrollLeft||0)-(e&&e.clientLeft||f&&f.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||f&&f.scrollTop||0)-(e&&e.clientTop||f&&f.clientTop||0)),a.which||void 0===g||(a.which=1&g?1:2&g?3:4&g?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,e,f=a.type,g=a,h=this.fixHooks[f];h||(this.fixHooks[f]=h=ea.test(f)?this.mouseHooks:da.test(f)?this.keyHooks:{}),e=h.props?this.props.concat(h.props):this.props,a=new n.Event(g),b=e.length;while(b--)c=e[b],a[c]=g[c];return a.target||(a.target=d),3===a.target.nodeType&&(a.target=a.target.parentNode),h.filter?h.filter(a,g):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==ia()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===ia()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ga:ha):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={constructor:n.Event,isDefaultPrevented:ha,isPropagationStopped:ha,isImmediatePropagationStopped:ha,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ga,a&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ga,a&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ga,a&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||n.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),n.fn.extend({on:function(a,b,c,d){return ja(this,a,b,c,d)},one:function(a,b,c,d){return ja(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return b!==!1&&"function"!=typeof b||(c=b,b=void 0),c===!1&&(c=ha),this.each(function(){n.event.remove(this,a,c,b)})}});var ka=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,la=/<script|<style|<link/i,ma=/checked\s*(?:[^=]|=\s*.checked.)/i,na=/^true\/(.*)/,oa=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function pa(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function qa(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function ra(a){var b=na.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function sa(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(N.hasData(a)&&(f=N.access(a),g=N.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}O.hasData(a)&&(h=O.access(a),i=n.extend({},h),O.set(b,i))}}function ta(a,b){var c=b.nodeName.toLowerCase();"input"===c&&X.test(a.type)?b.checked=a.checked:"input"!==c&&"textarea"!==c||(b.defaultValue=a.defaultValue)}function ua(a,b,c,d){b=f.apply([],b);var e,g,h,i,j,k,m=0,o=a.length,p=o-1,q=b[0],r=n.isFunction(q);if(r||o>1&&"string"==typeof q&&!l.checkClone&&ma.test(q))return a.each(function(e){var f=a.eq(e);r&&(b[0]=q.call(this,e,f.html())),ua(f,b,c,d)});if(o&&(e=ca(b,a[0].ownerDocument,!1,a,d),g=e.firstChild,1===e.childNodes.length&&(e=g),g||d)){for(h=n.map(_(e,"script"),qa),i=h.length;o>m;m++)j=e,m!==p&&(j=n.clone(j,!0,!0),i&&n.merge(h,_(j,"script"))),c.call(a[m],j,m);if(i)for(k=h[h.length-1].ownerDocument,n.map(h,ra),m=0;i>m;m++)j=h[m],Z.test(j.type||"")&&!N.access(j,"globalEval")&&n.contains(k,j)&&(j.src?n._evalUrl&&n._evalUrl(j.src):n.globalEval(j.textContent.replace(oa,"")))}return a}function va(a,b,c){for(var d,e=b?n.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||n.cleanData(_(d)),d.parentNode&&(c&&n.contains(d.ownerDocument,d)&&aa(_(d,"script")),d.parentNode.removeChild(d));return a}n.extend({htmlPrefilter:function(a){return a.replace(ka,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=_(h),f=_(a),d=0,e=f.length;e>d;d++)ta(f[d],g[d]);if(b)if(c)for(f=f||_(a),g=g||_(h),d=0,e=f.length;e>d;d++)sa(f[d],g[d]);else sa(a,h);return g=_(h,"script"),g.length>0&&aa(g,!i&&_(a,"script")),h},cleanData:function(a){for(var b,c,d,e=n.event.special,f=0;void 0!==(c=a[f]);f++)if(L(c)){if(b=c[N.expando]){if(b.events)for(d in b.events)e[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);c[N.expando]=void 0}c[O.expando]&&(c[O.expando]=void 0)}}}),n.fn.extend({domManip:ua,detach:function(a){return va(this,a,!0)},remove:function(a){return va(this,a)},text:function(a){return K(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=a)})},null,a,arguments.length)},append:function(){return ua(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=pa(this,a);b.appendChild(a)}})},prepend:function(){return ua(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=pa(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return ua(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return ua(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(_(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return K(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!la.test(a)&&!$[(Y.exec(a)||["",""])[1].toLowerCase()]){a=n.htmlPrefilter(a);try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(_(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return ua(this,arguments,function(b){var c=this.parentNode;n.inArray(this,a)<0&&(n.cleanData(_(this)),c&&c.replaceChild(b,this))},a)}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),f=e.length-1,h=0;f>=h;h++)c=h===f?this:this.clone(!0),n(e[h])[b](c),g.apply(d,c.get());return this.pushStack(d)}});var wa,xa={HTML:"block",BODY:"block"};function ya(a,b){var c=n(b.createElement(a)).appendTo(b.body),d=n.css(c[0],"display");return c.detach(),d}function za(a){var b=d,c=xa[a];return c||(c=ya(a,b),"none"!==c&&c||(wa=(wa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=wa[0].contentDocument,b.write(),b.close(),c=ya(a,b),wa.detach()),xa[a]=c),c}var Aa=/^margin/,Ba=new RegExp("^("+S+")(?!px)[a-z%]+$","i"),Ca=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)},Da=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e},Ea=d.documentElement;!function(){var b,c,e,f,g=d.createElement("div"),h=d.createElement("div");if(h.style){h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===h.style.backgroundClip,g.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",g.appendChild(h);function i(){h.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",h.innerHTML="",Ea.appendChild(g);var d=a.getComputedStyle(h);b="1%"!==d.top,f="2px"===d.marginLeft,c="4px"===d.width,h.style.marginRight="50%",e="4px"===d.marginRight,Ea.removeChild(g)}n.extend(l,{pixelPosition:function(){return i(),b},boxSizingReliable:function(){return null==c&&i(),c},pixelMarginRight:function(){return null==c&&i(),e},reliableMarginLeft:function(){return null==c&&i(),f},reliableMarginRight:function(){var b,c=h.appendChild(d.createElement("div"));return c.style.cssText=h.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",h.style.width="1px",Ea.appendChild(g),b=!parseFloat(a.getComputedStyle(c).marginRight),Ea.removeChild(g),h.removeChild(c),b}})}}();function Fa(a,b,c){var d,e,f,g,h=a.style;return c=c||Ca(a),g=c?c.getPropertyValue(b)||c[b]:void 0,""!==g&&void 0!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),c&&!l.pixelMarginRight()&&Ba.test(g)&&Aa.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f),void 0!==g?g+"":g}function Ga(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Ha=/^(none|table(?!-c[ea]).+)/,Ia={position:"absolute",visibility:"hidden",display:"block"},Ja={letterSpacing:"0",fontWeight:"400"},Ka=["Webkit","O","Moz","ms"],La=d.createElement("div").style;function Ma(a){if(a in La)return a;var b=a[0].toUpperCase()+a.slice(1),c=Ka.length;while(c--)if(a=Ka[c]+b,a in La)return a}function Na(a,b,c){var d=T.exec(b);return d?Math.max(0,d[2]-(c||0))+(d[3]||"px"):b}function Oa(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+U[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+U[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+U[f]+"Width",!0,e))):(g+=n.css(a,"padding"+U[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+U[f]+"Width",!0,e)));return g}function Pa(b,c,e){var f=!0,g="width"===c?b.offsetWidth:b.offsetHeight,h=Ca(b),i="border-box"===n.css(b,"boxSizing",!1,h);if(d.msFullscreenElement&&a.top!==a&&b.getClientRects().length&&(g=Math.round(100*b.getBoundingClientRect()[c])),0>=g||null==g){if(g=Fa(b,c,h),(0>g||null==g)&&(g=b.style[c]),Ba.test(g))return g;f=i&&(l.boxSizingReliable()||g===b.style[c]),g=parseFloat(g)||0}return g+Oa(b,c,e||(i?"border":"content"),f,h)+"px"}function Qa(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=N.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&V(d)&&(f[g]=N.access(d,"olddisplay",za(d.nodeName)))):(e=V(d),"none"===c&&e||N.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Fa(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Ma(h)||h),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=T.exec(c))&&e[1]&&(c=W(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(n.cssNumber[h]?"":"px")),l.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Ma(h)||h),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=Fa(a,b,d)),"normal"===e&&b in Ja&&(e=Ja[b]),""===c||c?(f=parseFloat(e),c===!0||isFinite(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?Ha.test(n.css(a,"display"))&&0===a.offsetWidth?Da(a,Ia,function(){return Pa(a,b,d)}):Pa(a,b,d):void 0},set:function(a,c,d){var e,f=d&&Ca(a),g=d&&Oa(a,b,d,"border-box"===n.css(a,"boxSizing",!1,f),f);return g&&(e=T.exec(c))&&"px"!==(e[3]||"px")&&(a.style[b]=c,c=n.css(a,b)),Na(a,c,g)}}}),n.cssHooks.marginLeft=Ga(l.reliableMarginLeft,function(a,b){return b?(parseFloat(Fa(a,"marginLeft"))||a.getBoundingClientRect().left-Da(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}))+"px":void 0}),n.cssHooks.marginRight=Ga(l.reliableMarginRight,function(a,b){return b?Da(a,{display:"inline-block"},Fa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+U[d]+b]=f[d]||f[d-2]||f[0];return e}},Aa.test(a)||(n.cssHooks[a+b].set=Na)}),n.fn.extend({css:function(a,b){return K(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Ca(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Qa(this,!0)},hide:function(){return Qa(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){V(this)?n(this).show():n(this).hide()})}});function Ra(a,b,c,d,e){return new Ra.prototype.init(a,b,c,d,e)}n.Tween=Ra,Ra.prototype={constructor:Ra,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||n.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ra.propHooks[this.prop];return a&&a.get?a.get(this):Ra.propHooks._default.get(this)},run:function(a){var b,c=Ra.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ra.propHooks._default.set(this),this}},Ra.prototype.init.prototype=Ra.prototype,Ra.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[n.cssProps[a.prop]]&&!n.cssHooks[a.prop]?a.elem[a.prop]=a.now:n.style(a.elem,a.prop,a.now+a.unit)}}},Ra.propHooks.scrollTop=Ra.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},n.fx=Ra.prototype.init,n.fx.step={};var Sa,Ta,Ua=/^(?:toggle|show|hide)$/,Va=/queueHooks$/;function Wa(){return a.setTimeout(function(){Sa=void 0}),Sa=n.now()}function Xa(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=U[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ya(a,b,c){for(var d,e=(_a.tweeners[b]||[]).concat(_a.tweeners["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Za(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&V(a),q=N.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?N.get(a,"olddisplay")||za(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Ua.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?za(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=N.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;N.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ya(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function $a(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function _a(a,b,c){var d,e,f=0,g=_a.prefilters.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=Sa||Wa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{},easing:n.easing._default},c),originalProperties:b,originalOptions:c,startTime:Sa||Wa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for($a(k,j.opts.specialEasing);g>f;f++)if(d=_a.prefilters[f].call(j,a,k,j.opts))return n.isFunction(d.stop)&&(n._queueHooks(j.elem,j.opts.queue).stop=n.proxy(d.stop,d)),d;return n.map(k,Ya,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(_a,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return W(c.elem,a,T.exec(b),c),c}]},tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.match(G);for(var c,d=0,e=a.length;e>d;d++)c=a[d],_a.tweeners[c]=_a.tweeners[c]||[],_a.tweeners[c].unshift(b)},prefilters:[Za],prefilter:function(a,b){b?_a.prefilters.unshift(a):_a.prefilters.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,null!=d.queue&&d.queue!==!0||(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(V).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=_a(this,n.extend({},a),f);(e||N.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=N.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Va.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=N.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Xa(b,!0),a,d,e)}}),n.each({slideDown:Xa("show"),slideUp:Xa("hide"),slideToggle:Xa("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(Sa=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),Sa=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ta||(Ta=a.setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){a.clearInterval(Ta),Ta=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(b,c){return b=n.fx?n.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a=d.createElement("input"),b=d.createElement("select"),c=b.appendChild(d.createElement("option"));a.type="checkbox",l.checkOn=""!==a.value,l.optSelected=c.selected,b.disabled=!0,l.optDisabled=!c.disabled,a=d.createElement("input"),a.value="t",a.type="radio",l.radioValue="t"===a.value}();var ab,bb=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return K(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),e=n.attrHooks[b]||(n.expr.match.bool.test(b)?ab:void 0)),void 0!==c?null===c?void n.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=n.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(G);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)}}),ab={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=bb[b]||n.find.attr;bb[b]=function(a,b,d){var e,f;return d||(f=bb[b],bb[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,bb[b]=f),e}});var cb=/^(?:input|select|textarea|button)$/i,db=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return K(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&n.isXMLDoc(a)||(b=n.propFix[b]||b,
e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,"tabindex");return b?parseInt(b,10):cb.test(a.nodeName)||db.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var eb=/[\t\r\n\f]/g;function fb(a){return a.getAttribute&&a.getAttribute("class")||""}n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,fb(this)))});if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=fb(c),d=1===c.nodeType&&(" "+e+" ").replace(eb," ")){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=n.trim(d),e!==h&&c.setAttribute("class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,fb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=fb(c),d=1===c.nodeType&&(" "+e+" ").replace(eb," ")){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=n.trim(d),e!==h&&c.setAttribute("class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):n.isFunction(a)?this.each(function(c){n(this).toggleClass(a.call(this,c,fb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=n(this),f=a.match(G)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&"boolean"!==c||(b=fb(this),b&&N.set(this,"__className__",b),this.setAttribute&&this.setAttribute("class",b||a===!1?"":N.get(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+fb(c)+" ").replace(eb," ").indexOf(b)>-1)return!0;return!1}});var gb=/\r/g,hb=/[\x20\t\r\n\f]+/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(gb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a)).replace(hb," ")}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],(c.selected||i===e)&&(l.optDisabled?!c.disabled:null===c.getAttribute("disabled"))&&(!c.parentNode.disabled||!n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(n.valHooks.option.get(d),f)>-1)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>-1:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var ib=/^(?:focusinfocus|focusoutblur)$/;n.extend(n.event,{trigger:function(b,c,e,f){var g,h,i,j,l,m,o,p=[e||d],q=k.call(b,"type")?b.type:b,r=k.call(b,"namespace")?b.namespace.split("."):[];if(h=i=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!ib.test(q+n.event.triggered)&&(q.indexOf(".")>-1&&(r=q.split("."),q=r.shift(),r.sort()),l=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=r.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},f||!o.trigger||o.trigger.apply(e,c)!==!1)){if(!f&&!o.noBubble&&!n.isWindow(e)){for(j=o.delegateType||q,ib.test(j+q)||(h=h.parentNode);h;h=h.parentNode)p.push(h),i=h;i===(e.ownerDocument||d)&&p.push(i.defaultView||i.parentWindow||a)}g=0;while((h=p[g++])&&!b.isPropagationStopped())b.type=g>1?j:o.bindType||q,m=(N.get(h,"events")||{})[b.type]&&N.get(h,"handle"),m&&m.apply(h,c),m=l&&h[l],m&&m.apply&&L(h)&&(b.result=m.apply(h,c),b.result===!1&&b.preventDefault());return b.type=q,f||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!L(e)||l&&n.isFunction(e[q])&&!n.isWindow(e)&&(i=e[l],i&&(e[l]=null),n.event.triggered=q,e[q](),n.event.triggered=void 0,i&&(e[l]=i)),b.result}},simulate:function(a,b,c){var d=n.extend(new n.Event,c,{type:a,isSimulated:!0});n.event.trigger(d,null,b),d.isDefaultPrevented()&&c.preventDefault()}}),n.fn.extend({trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),l.focusin="onfocusin"in a,l.focusin||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a))};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=N.access(d,b);e||d.addEventListener(a,c,!0),N.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=N.access(d,b)-1;e?N.access(d,b,e):(d.removeEventListener(a,c,!0),N.remove(d,b))}}});var jb=a.location,kb=n.now(),lb=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(b){var c;if(!b||"string"!=typeof b)return null;try{c=(new a.DOMParser).parseFromString(b,"text/xml")}catch(d){c=void 0}return c&&!c.getElementsByTagName("parsererror").length||n.error("Invalid XML: "+b),c};var mb=/#.*$/,nb=/([?&])_=[^&]*/,ob=/^(.*?):[ \t]*([^\r\n]*)$/gm,pb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,qb=/^(?:GET|HEAD)$/,rb=/^\/\//,sb={},tb={},ub="*/".concat("*"),vb=d.createElement("a");vb.href=jb.href;function wb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(G)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function xb(a,b,c,d){var e={},f=a===tb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function yb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function zb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Ab(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:jb.href,type:"GET",isLocal:pb.test(jb.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ub,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?yb(yb(a,n.ajaxSettings),b):yb(n.ajaxSettings,a)},ajaxPrefilter:wb(sb),ajaxTransport:wb(tb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var e,f,g,h,i,j,k,l,m=n.ajaxSetup({},c),o=m.context||m,p=m.context&&(o.nodeType||o.jquery)?n(o):n.event,q=n.Deferred(),r=n.Callbacks("once memory"),s=m.statusCode||{},t={},u={},v=0,w="canceled",x={readyState:0,getResponseHeader:function(a){var b;if(2===v){if(!h){h={};while(b=ob.exec(g))h[b[1].toLowerCase()]=b[2]}b=h[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===v?g:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return v||(a=u[c]=u[c]||a,t[a]=b),this},overrideMimeType:function(a){return v||(m.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>v)for(b in a)s[b]=[s[b],a[b]];else x.always(a[x.status]);return this},abort:function(a){var b=a||w;return e&&e.abort(b),z(0,b),this}};if(q.promise(x).complete=r.add,x.success=x.done,x.error=x.fail,m.url=((b||m.url||jb.href)+"").replace(mb,"").replace(rb,jb.protocol+"//"),m.type=c.method||c.type||m.method||m.type,m.dataTypes=n.trim(m.dataType||"*").toLowerCase().match(G)||[""],null==m.crossDomain){j=d.createElement("a");try{j.href=m.url,j.href=j.href,m.crossDomain=vb.protocol+"//"+vb.host!=j.protocol+"//"+j.host}catch(y){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=n.param(m.data,m.traditional)),xb(sb,m,c,x),2===v)return x;k=n.event&&m.global,k&&0===n.active++&&n.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!qb.test(m.type),f=m.url,m.hasContent||(m.data&&(f=m.url+=(lb.test(f)?"&":"?")+m.data,delete m.data),m.cache===!1&&(m.url=nb.test(f)?f.replace(nb,"$1_="+kb++):f+(lb.test(f)?"&":"?")+"_="+kb++)),m.ifModified&&(n.lastModified[f]&&x.setRequestHeader("If-Modified-Since",n.lastModified[f]),n.etag[f]&&x.setRequestHeader("If-None-Match",n.etag[f])),(m.data&&m.hasContent&&m.contentType!==!1||c.contentType)&&x.setRequestHeader("Content-Type",m.contentType),x.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+ub+"; q=0.01":""):m.accepts["*"]);for(l in m.headers)x.setRequestHeader(l,m.headers[l]);if(m.beforeSend&&(m.beforeSend.call(o,x,m)===!1||2===v))return x.abort();w="abort";for(l in{success:1,error:1,complete:1})x[l](m[l]);if(e=xb(tb,m,c,x)){if(x.readyState=1,k&&p.trigger("ajaxSend",[x,m]),2===v)return x;m.async&&m.timeout>0&&(i=a.setTimeout(function(){x.abort("timeout")},m.timeout));try{v=1,e.send(t,z)}catch(y){if(!(2>v))throw y;z(-1,y)}}else z(-1,"No Transport");function z(b,c,d,h){var j,l,t,u,w,y=c;2!==v&&(v=2,i&&a.clearTimeout(i),e=void 0,g=h||"",x.readyState=b>0?4:0,j=b>=200&&300>b||304===b,d&&(u=zb(m,x,d)),u=Ab(m,u,x,j),j?(m.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(n.lastModified[f]=w),w=x.getResponseHeader("etag"),w&&(n.etag[f]=w)),204===b||"HEAD"===m.type?y="nocontent":304===b?y="notmodified":(y=u.state,l=u.data,t=u.error,j=!t)):(t=y,!b&&y||(y="error",0>b&&(b=0))),x.status=b,x.statusText=(c||y)+"",j?q.resolveWith(o,[l,y,x]):q.rejectWith(o,[x,y,t]),x.statusCode(s),s=void 0,k&&p.trigger(j?"ajaxSuccess":"ajaxError",[x,m,j?l:t]),r.fireWith(o,[x,y]),k&&(p.trigger("ajaxComplete",[x,m]),--n.active||n.event.trigger("ajaxStop")))}return x},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax(n.extend({url:a,type:b,dataType:e,data:c,success:d},n.isPlainObject(a)&&a))}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return n.isFunction(a)?this.each(function(b){n(this).wrapInner(a.call(this,b))}):this.each(function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return!n.expr.filters.visible(a)},n.expr.filters.visible=function(a){return a.offsetWidth>0||a.offsetHeight>0||a.getClientRects().length>0};var Bb=/%20/g,Cb=/\[\]$/,Db=/\r?\n/g,Eb=/^(?:submit|button|image|reset|file)$/i,Fb=/^(?:input|select|textarea|keygen)/i;function Gb(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||Cb.test(a)?d(a,e):Gb(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Gb(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Gb(c,a[c],b,e);return d.join("&").replace(Bb,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&Fb.test(this.nodeName)&&!Eb.test(a)&&(this.checked||!X.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(Db,"\r\n")}}):{name:b.name,value:c.replace(Db,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new a.XMLHttpRequest}catch(b){}};var Hb={0:200,1223:204},Ib=n.ajaxSettings.xhr();l.cors=!!Ib&&"withCredentials"in Ib,l.ajax=Ib=!!Ib,n.ajaxTransport(function(b){var c,d;return l.cors||Ib&&!b.crossDomain?{send:function(e,f){var g,h=b.xhr();if(h.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(g in b.xhrFields)h[g]=b.xhrFields[g];b.mimeType&&h.overrideMimeType&&h.overrideMimeType(b.mimeType),b.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest");for(g in e)h.setRequestHeader(g,e[g]);c=function(a){return function(){c&&(c=d=h.onload=h.onerror=h.onabort=h.onreadystatechange=null,"abort"===a?h.abort():"error"===a?"number"!=typeof h.status?f(0,"error"):f(h.status,h.statusText):f(Hb[h.status]||h.status,h.statusText,"text"!==(h.responseType||"text")||"string"!=typeof h.responseText?{binary:h.response}:{text:h.responseText},h.getAllResponseHeaders()))}},h.onload=c(),d=h.onerror=c("error"),void 0!==h.onabort?h.onabort=d:h.onreadystatechange=function(){4===h.readyState&&a.setTimeout(function(){c&&d()})},c=c("abort");try{h.send(b.hasContent&&b.data||null)}catch(i){if(c)throw i}},abort:function(){c&&c()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(e,f){b=n("<script>").prop({charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&f("error"===a.type?404:200,a.type)}),d.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Jb=[],Kb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Jb.pop()||n.expando+"_"+kb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Kb.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Kb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Kb,"$1"+e):b.jsonp!==!1&&(b.url+=(lb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?n(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Jb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||d;var e=x.exec(a),f=!c&&[];return e?[b.createElement(e[1])]:(e=ca([a],b,f),f&&f.length&&n(f).remove(),n.merge([],e.childNodes))};var Lb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Lb)return Lb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(g,f||[a.responseText,b,a])})}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};function Mb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,n.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(e=d.getBoundingClientRect(),c=Mb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ea})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c="pageYOffset"===b;n.fn[a]=function(d){return K(this,function(a,d,e){var f=Mb(a);return void 0===e?f?f[b]:a[d]:void(f?f.scrollTo(c?f.pageXOffset:e,c?e:f.pageYOffset):a[d]=e)},a,d,arguments.length)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=Ga(l.pixelPosition,function(a,c){return c?(c=Fa(a,b),Ba.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return K(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)},size:function(){return this.length}}),n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Nb=a.jQuery,Ob=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Ob),b&&a.jQuery===n&&(a.jQuery=Nb),n},b||(a.jQuery=a.$=n),n});

!function(s,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n((s=s||self).timeago={})}(this,function(s){"use strict";var a=["second","minute","hour","day","week","month","year"];function n(s,n){if(0===n)return["just now","right now"];var e=a[Math.floor(n/2)];return 1<s&&(e+="s"),[s+" "+e+" ago","in "+s+" "+e]}var t=["秒","分钟","小时","天","周","个月","年"];function e(s,n){if(0===n)return["刚刚","片刻后"];var e=t[~~(n/2)];return[s+" "+e+"前",s+" "+e+"后"]}function u(s,n){i[s]=n}function r(s){return i[s]||i.en_US}var i={},m=[60,60,24,7,365/7/12,12];function o(s){return s instanceof Date?s:!isNaN(s)||/^\d+$/.test(s)?new Date(parseInt(s)):(s=(s||"").trim().replace(/\.\d+/,"").replace(/-/,"/").replace(/-/,"/").replace(/(\d)T(\d)/,"$1 $2").replace(/Z/," UTC").replace(/([+-]\d\d):?(\d\d)/," $1$2"),new Date(s))}function d(s,n){for(var e=s<0?1:0,a=s=Math.abs(s),t=0;s>=m[t]&&t<m.length;t++)s/=m[t];return(0===(t*=2)?9:1)<(s=Math.floor(s))&&(t+=1),n(s,t,a)[e].replace("%s",s.toString())}function c(s,n){return((n?o(n):new Date)-o(s))/1e3}var l="timeago-id";function h(s){return parseInt(s.getAttribute(l))}var g={},f=function(s){clearTimeout(s),delete g[s]};function p(s,n,e,a){f(h(s));var t=a.relativeDate,u=a.minInterval,r=c(n,t);s.innerText=d(r,e);var i,o=setTimeout(function(){p(s,n,e,a)},Math.min(1e3*Math.max(function(s){for(var n=1,e=0,a=Math.abs(s);s>=m[e]&&e<m.length;e++)s/=m[e],n*=m[e];return a=(a%=n)?n-a:n,Math.ceil(a)}(r),u||1),2147483647));g[o]=0,i=o,s.setAttribute(l,i)}u("en_US",n),u("zh_CN",e);var b=[["ثانية","ثانيتين","%s ثوان","%s ثانية"],["دقيقة","دقيقتين","%s دقائق","%s دقيقة"],["ساعة","ساعتين","%s ساعات","%s ساعة"],["يوم","يومين","%s أيام","%s يوماً"],["أسبوع","أسبوعين","%s أسابيع","%s أسبوعاً"],["شهر","شهرين","%s أشهر","%s شهراً"],["عام","عامين","%s أعوام","%s عاماً"]];function v(s,n,e,a,t){var u=t%10,r=a;return 1===t?r=s:1==u&&20<t?r=n:1<u&&u<5&&(20<t||t<10)&&(r=e),r}var y=v.bind(null,"секунду","%s секунду","%s секунды","%s секунд"),k=v.bind(null,"хвіліну","%s хвіліну","%s хвіліны","%s хвілін"),j=v.bind(null,"гадзіну","%s гадзіну","%s гадзіны","%s гадзін"),z=v.bind(null,"дзень","%s дзень","%s дні","%s дзён"),w=v.bind(null,"тыдзень","%s тыдзень","%s тыдні","%s тыдняў"),_=v.bind(null,"месяц","%s месяц","%s месяцы","%s месяцаў"),M=v.bind(null,"год","%s год","%s гады","%s гадоў");function q(s){var n=["۰","۱","۲","۳","۴","۵","۶","۷","۸","۹"];return s.toString().replace(/\d/g,function(s){return n[s]})}var S=[["w tej chwili","za chwilę"],["%s sekund temu","za %s sekund"],["1 minutę temu","za 1 minutę"],["%s minut temu","za %s minut"],["1 godzinę temu","za 1 godzinę"],["%s godzin temu","za %s godzin"],["1 dzień temu","za 1 dzień"],["%s dni temu","za %s dni"],["1 tydzień temu","za 1 tydzień"],["%s tygodni temu","za %s tygodni"],["1 miesiąc temu","za 1 miesiąc"],["%s miesięcy temu","za %s miesięcy"],["1 rok temu","za 1 rok"],["%s lat temu","za %s lat"],["%s sekundy temu","za %s sekundy"],["%s minuty temu","za %s minuty"],["%s godziny temu","za %s godziny"],["%s dni temu","za %s dni"],["%s tygodnie temu","za %s tygodnie"],["%s miesiące temu","za %s miesiące"],["%s lata temu","za %s lata"]];function T(s,n,e,a,t){var u=t%10,r=a;return 1===t?r=s:1==u&&20<t?r=n:1<u&&u<5&&(20<t||t<10)&&(r=e),r}var N=T.bind(null,"секунду","%s секунду","%s секунды","%s секунд"),x=T.bind(null,"минуту","%s минуту","%s минуты","%s минут"),D=T.bind(null,"час","%s час","%s часа","%s часов"),I=T.bind(null,"день","%s день","%s дня","%s дней"),O=T.bind(null,"неделю","%s неделю","%s недели","%s недель"),W=T.bind(null,"месяц","%s месяц","%s месяца","%s месяцев"),$=T.bind(null,"год","%s год","%s года","%s лет");function J(s,n,e,a,t){var u=t%10,r=t%100;return 1==t?s:1==u&&11!=r?n:2<=u&&u<=4&&!(12<=r&&r<=14)?e:a}var U=J.bind(null,"1 секунд","%s секунд","%s секунде","%s секунди"),A=J.bind(null,"1 минут","%s минут","%s минуте","%s минута"),C=J.bind(null,"сат времена","%s сат","%s сата","%s сати"),E=J.bind(null,"1 дан","%s дан","%s дана","%s дана"),B=J.bind(null,"недељу дана","%s недељу","%s недеље","%s недеља"),P=J.bind(null,"месец дана","%s месец","%s месеца","%s месеци"),R=J.bind(null,"годину дана","%s годину","%s године","%s година");function Z(s,n,e,a,t){var u=t%10,r=a;return 1===t?r=s:1==u&&20<t?r=n:1<u&&u<5&&(20<t||t<10)&&(r=e),r}var F=Z.bind(null,"секунду","%s секунду","%s секунди","%s секунд"),G=Z.bind(null,"хвилину","%s хвилину","%s хвилини","%s хвилин"),H=Z.bind(null,"годину","%s годину","%s години","%s годин"),K=Z.bind(null,"день","%s день","%s дні","%s днів"),L=Z.bind(null,"тиждень","%s тиждень","%s тиждні","%s тижднів"),Q=Z.bind(null,"місяць","%s місяць","%s місяці","%s місяців"),V=Z.bind(null,"рік","%s рік","%s роки","%s років");var X=Object.freeze({__proto__:null,ar:function(s,n){if(0===n)return["منذ لحظات","بعد لحظات"];var e,a,t=(e=Math.floor(n/2),(a=s)<3?b[e][a-1]:3<=a&&a<=10?b[e][2]:b[e][3]);return["منذ "+t,"بعد "+t]},be:function(s,n){switch(n){case 0:return["толькі што","праз некалькі секунд"];case 1:return[y(s)+" таму","праз "+y(s)];case 2:case 3:return[k(s)+" таму","праз "+k(s)];case 4:case 5:return[j(s)+" таму","праз "+j(s)];case 6:case 7:return[z(s)+" таму","праз "+z(s)];case 8:case 9:return[w(s)+" таму","праз "+w(s)];case 10:case 11:return[_(s)+" таму","праз "+_(s)];case 12:case 13:return[M(s)+" таму","праз "+M(s)];default:return["",""]}},bg:function(s,n){return[["току що","съвсем скоро"],["преди %s секунди","след %s секунди"],["преди 1 минута","след 1 минута"],["преди %s минути","след %s минути"],["преди 1 час","след 1 час"],["преди %s часа","след %s часа"],["преди 1 ден","след 1 ден"],["преди %s дни","след %s дни"],["преди 1 седмица","след 1 седмица"],["преди %s седмици","след %s седмици"],["преди 1 месец","след 1 месец"],["преди %s месеца","след %s месеца"],["преди 1 година","след 1 година"],["преди %s години","след %s години"]][n]},bn_IN:function(s,n){return[["এইমাত্র","একটা সময়"],["%s সেকেন্ড আগে","%s এর সেকেন্ডের মধ্যে"],["1 মিনিট আগে","1 মিনিটে"],["%s এর মিনিট আগে","%s এর মিনিটের মধ্যে"],["1 ঘন্টা আগে","1 ঘন্টা"],["%s ঘণ্টা আগে","%s এর ঘন্টার মধ্যে"],["1 দিন আগে","1 দিনের মধ্যে"],["%s এর দিন আগে","%s এর দিন"],["1 সপ্তাহ আগে","1 সপ্তাহের মধ্যে"],["%s এর সপ্তাহ আগে","%s সপ্তাহের মধ্যে"],["1 মাস আগে","1 মাসে"],["%s মাস আগে","%s মাসে"],["1 বছর আগে","1 বছরের মধ্যে"],["%s বছর আগে","%s বছরে"]][n]},ca:function(s,n){return[["fa un moment","d'aquí un moment"],["fa %s segons","d'aquí %s segons"],["fa 1 minut","d'aquí 1 minut"],["fa %s minuts","d'aquí %s minuts"],["fa 1 hora","d'aquí 1 hora"],["fa %s hores","d'aquí %s hores"],["fa 1 dia","d'aquí 1 dia"],["fa %s dies","d'aquí %s dies"],["fa 1 setmana","d'aquí 1 setmana"],["fa %s setmanes","d'aquí %s setmanes"],["fa 1 mes","d'aquí 1 mes"],["fa %s mesos","d'aquí %s mesos"],["fa 1 any","d'aquí 1 any"],["fa %s anys","d'aquí %s anys"]][n]},de:function(s,n){return[["gerade eben","vor einer Weile"],["vor %s Sekunden","in %s Sekunden"],["vor 1 Minute","in 1 Minute"],["vor %s Minuten","in %s Minuten"],["vor 1 Stunde","in 1 Stunde"],["vor %s Stunden","in %s Stunden"],["vor 1 Tag","in 1 Tag"],["vor %s Tagen","in %s Tagen"],["vor 1 Woche","in 1 Woche"],["vor %s Wochen","in %s Wochen"],["vor 1 Monat","in 1 Monat"],["vor %s Monaten","in %s Monaten"],["vor 1 Jahr","in 1 Jahr"],["vor %s Jahren","in %s Jahren"]][n]},el:function(s,n){return[["μόλις τώρα","σε λίγο"],["%s δευτερόλεπτα πριν","σε %s δευτερόλεπτα"],["1 λεπτό πριν","σε 1 λεπτό"],["%s λεπτά πριν","σε %s λεπτά"],["1 ώρα πριν","σε 1 ώρα"],["%s ώρες πριν","σε %s ώρες"],["1 μέρα πριν","σε 1 μέρα"],["%s μέρες πριν","σε %s μέρες"],["1 εβδομάδα πριν","σε 1 εβδομάδα"],["%s εβδομάδες πριν","σε %s εβδομάδες"],["1 μήνα πριν","σε 1 μήνα"],["%s μήνες πριν","σε %s μήνες"],["1 χρόνο πριν","σε 1 χρόνο"],["%s χρόνια πριν","σε %s χρόνια"]][n]},en_short:function(s,n){return[["just now","right now"],["%ss ago","in %ss"],["1m ago","in 1m"],["%sm ago","in %sm"],["1h ago","in 1h"],["%sh ago","in %sh"],["1d ago","in 1d"],["%sd ago","in %sd"],["1w ago","in 1w"],["%sw ago","in %sw"],["1mo ago","in 1mo"],["%smo ago","in %smo"],["1yr ago","in 1yr"],["%syr ago","in %syr"]][n]},en_US:n,es:function(s,n){return[["justo ahora","en un rato"],["hace %s segundos","en %s segundos"],["hace 1 minuto","en 1 minuto"],["hace %s minutos","en %s minutos"],["hace 1 hora","en 1 hora"],["hace %s horas","en %s horas"],["hace 1 día","en 1 día"],["hace %s días","en %s días"],["hace 1 semana","en 1 semana"],["hace %s semanas","en %s semanas"],["hace 1 mes","en 1 mes"],["hace %s meses","en %s meses"],["hace 1 año","en 1 año"],["hace %s años","en %s años"]][n]},eu:function(s,n){return[["orain","denbora bat barru"],["duela %s segundu","%s segundu barru"],["duela minutu 1","minutu 1 barru"],["duela %s minutu","%s minutu barru"],["duela ordu 1","ordu 1 barru"],["duela %s ordu","%s ordu barru"],["duela egun 1","egun 1 barru"],["duela %s egun","%s egun barru"],["duela aste 1","aste 1 barru"],["duela %s aste","%s aste barru"],["duela hillabete 1","hillabete 1 barru"],["duela %s hillabete","%s hillabete barru"],["duela urte 1","urte 1 barru"],["duela %s urte","%s urte barru"]][n]},fa:function(s,n){var e=[["لحظاتی پیش","همین حالا"],["%s ثانیه پیش","%s ثانیه دیگر"],["۱ دقیقه پیش","۱ دقیقه دیگر"],["%s دقیقه پیش","%s دقیقه دیگر"],["۱ ساعت پیش","۱ ساعت دیگر"],["%s ساعت پیش","%s ساعت دیگر"],["۱ روز پیش","۱ روز دیگر"],["%s روز پیش","%s روز دیگر"],["۱ هفته پیش","۱ هفته دیگر"],["%s هفته پیش","%s هفته دیگر"],["۱ ماه پیش","۱ ماه دیگر"],["%s ماه پیش","%s ماه دیگر"],["۱ سال پیش","۱ سال دیگر"],["%s سال پیش","%s سال دیگر"]][n];return[e[0].replace("%s",q(s)),e[1].replace("%s",q(s))]},fi:function(s,n){return[["juuri äsken","juuri nyt"],["%s sekuntia sitten","%s sekunnin päästä"],["minuutti sitten","minuutin päästä"],["%s minuuttia sitten","%s minuutin päästä"],["tunti sitten","tunnin päästä"],["%s tuntia sitten","%s tunnin päästä"],["päivä sitten","päivän päästä"],["%s päivää sitten","%s päivän päästä"],["viikko sitten","viikon päästä"],["%s viikkoa sitten","%s viikon päästä"],["kuukausi sitten","kuukauden päästä"],["%s kuukautta sitten","%s kuukauden päästä"],["vuosi sitten","vuoden päästä"],["%s vuotta sitten","%s vuoden päästä"]][n]},fr:function(s,n){return[["à l'instant","dans un instant"],["il y a %s secondes","dans %s secondes"],["il y a 1 minute","dans 1 minute"],["il y a %s minutes","dans %s minutes"],["il y a 1 heure","dans 1 heure"],["il y a %s heures","dans %s heures"],["il y a 1 jour","dans 1 jour"],["il y a %s jours","dans %s jours"],["il y a 1 semaine","dans 1 semaine"],["il y a %s semaines","dans %s semaines"],["il y a 1 mois","dans 1 mois"],["il y a %s mois","dans %s mois"],["il y a 1 an","dans 1 an"],["il y a %s ans","dans %s ans"]][n]},gl:function(s,n){return[["xusto agora","daquí a un pouco"],["hai %s segundos","en %s segundos"],["hai 1 minuto","nun minuto"],["hai %s minutos","en %s minutos"],["hai 1 hora","nunha hora"],["hai %s horas","en %s horas"],["hai 1 día","nun día"],["hai %s días","en %s días"],["hai 1 semana","nunha semana"],["hai %s semanas","en %s semanas"],["hai 1 mes","nun mes"],["hai %s meses","en %s meses"],["hai 1 ano","nun ano"],["hai %s anos","en %s anos"]][n]},he:function(s,n){return[["זה עתה","עכשיו"],["לפני %s שניות","בעוד %s שניות"],["לפני דקה","בעוד דקה"],["לפני %s דקות","בעוד %s דקות"],["לפני שעה","בעוד שעה"],2===s?["לפני שעתיים","בעוד שעתיים"]:["לפני %s שעות","בעוד %s שעות"],["אתמול","מחר"],2===s?["לפני יומיים","בעוד יומיים"]:["לפני %s ימים","בעוד %s ימים"],["לפני שבוע","בעוד שבוע"],2===s?["לפני שבועיים","בעוד שבועיים"]:["לפני %s שבועות","בעוד %s שבועות"],["לפני חודש","בעוד חודש"],2===s?["לפני חודשיים","בעוד חודשיים"]:["לפני %s חודשים","בעוד %s חודשים"],["לפני שנה","בעוד שנה"],2===s?["לפני שנתיים","בעוד שנתיים"]:["לפני %s שנים","בעוד %s שנים"]][n]},hi_IN:function(s,n){return[["अभी","कुछ समय"],["%s सेकंड पहले","%s सेकंड में"],["1 मिनट पहले","1 मिनट में"],["%s मिनट पहले","%s मिनट में"],["1 घंटे पहले","1 घंटे में"],["%s घंटे पहले","%s घंटे में"],["1 दिन पहले","1 दिन में"],["%s दिन पहले","%s दिनों में"],["1 सप्ताह पहले","1 सप्ताह में"],["%s हफ्ते पहले","%s हफ्तों में"],["1 महीने पहले","1 महीने में"],["%s महीने पहले","%s महीनों में"],["1 साल पहले","1 साल में"],["%s साल पहले","%s साल में"]][n]},hu:function(s,n){return[["éppen most","éppen most"],["%s másodperce","%s másodpercen belül"],["1 perce","1 percen belül"],["%s perce","%s percen belül"],["1 órája","1 órán belül"],["%s órája","%s órán belül"],["1 napja","1 napon belül"],["%s napja","%s napon belül"],["1 hete","1 héten belül"],["%s hete","%s héten belül"],["1 hónapja","1 hónapon belül"],["%s hónapja","%s hónapon belül"],["1 éve","1 éven belül"],["%s éve","%s éven belül"]][n]},id_ID:function(s,n){return[["baru saja","sebentar"],["%s detik yang lalu","dalam %s detik"],["1 menit yang lalu","dalam 1 menit"],["%s menit yang lalu","dalam %s menit"],["1 jam yang lalu","dalam 1 jam"],["%s jam yang lalu","dalam %s jam"],["1 hari yang lalu","dalam 1 hari"],["%s hari yang lalu","dalam %s hari"],["1 minggu yang lalu","dalam 1 minggu"],["%s minggu yang lalu","dalam %s minggu"],["1 bulan yang lalu","dalam 1 bulan"],["%s bulan yang lalu","dalam %s bulan"],["1 tahun yang lalu","dalam 1 tahun"],["%s tahun yang lalu","dalam %s tahun"]][n]},it:function(s,n){return[["poco fa","fra poco"],["%s secondi fa","fra %s secondi"],["un minuto fa","fra un minuto"],["%s minuti fa","fra %s minuti"],["un'ora fa","fra un'ora"],["%s ore fa","fra %s ore"],["un giorno fa","fra un giorno"],["%s giorni fa","fra %s giorni"],["una settimana fa","fra una settimana"],["%s settimane fa","fra %s settimane"],["un mese fa","fra un mese"],["%s mesi fa","fra %s mesi"],["un anno fa","fra un anno"],["%s anni fa","fra %s anni"]][n]},ja:function(s,n){return[["すこし前","すぐに"],["%s秒前","%s秒以内"],["1分前","1分以内"],["%s分前","%s分以内"],["1時間前","1時間以内"],["%s時間前","%s時間以内"],["1日前","1日以内"],["%s日前","%s日以内"],["1週間前","1週間以内"],["%s週間前","%s週間以内"],["1ヶ月前","1ヶ月以内"],["%sヶ月前","%sヶ月以内"],["1年前","1年以内"],["%s年前","%s年以内"]][n]},ko:function(s,n){return[["방금","곧"],["%s초 전","%s초 후"],["1분 전","1분 후"],["%s분 전","%s분 후"],["1시간 전","1시간 후"],["%s시간 전","%s시간 후"],["1일 전","1일 후"],["%s일 전","%s일 후"],["1주일 전","1주일 후"],["%s주일 전","%s주일 후"],["1개월 전","1개월 후"],["%s개월 전","%s개월 후"],["1년 전","1년 후"],["%s년 전","%s년 후"]][n]},ml:function(s,n){return[["ഇപ്പോള്‍","കുറച്ചു മുന്‍പ്"],["%s സെക്കന്റ്‌കള്‍ക്ക് മുന്‍പ്","%s സെക്കന്റില്‍"],["1 മിനിറ്റിനു മുന്‍പ്","1 മിനിറ്റില്‍"],["%s മിനിറ്റുകള്‍ക്ക് മുന്‍പ","%s മിനിറ്റില്‍"],["1 മണിക്കൂറിനു മുന്‍പ്","1 മണിക്കൂറില്‍"],["%s മണിക്കൂറുകള്‍ക്കു മുന്‍പ്","%s മണിക്കൂറില്‍"],["1 ഒരു ദിവസം മുന്‍പ്","1 ദിവസത്തില്‍"],["%s ദിവസങ്ങള്‍ക് മുന്‍പ്","%s ദിവസങ്ങള്‍ക്കുള്ളില്‍"],["1 ആഴ്ച മുന്‍പ്","1 ആഴ്ചയില്‍"],["%s ആഴ്ചകള്‍ക്ക് മുന്‍പ്","%s ആഴ്ചകള്‍ക്കുള്ളില്‍"],["1 മാസത്തിനു മുന്‍പ്","1 മാസത്തിനുള്ളില്‍"],["%s മാസങ്ങള്‍ക്ക് മുന്‍പ്","%s മാസങ്ങള്‍ക്കുള്ളില്‍"],["1 വര്‍ഷത്തിനു  മുന്‍പ്","1 വര്‍ഷത്തിനുള്ളില്‍"],["%s വര്‍ഷങ്ങള്‍ക്കു മുന്‍പ്","%s വര്‍ഷങ്ങള്‍ക്കുല്ല്ളില്‍"]][n]},my:function(s,n){return[["ယခုအတွင်း","ယခု"],["%s စက္ကန့် အကြာက","%s စက္ကန့်အတွင်း"],["1 မိနစ် အကြာက","1 မိနစ်အတွင်း"],["%s မိနစ် အကြာက","%s မိနစ်အတွင်း"],["1 နာရီ အကြာက","1 နာရီအတွင်း"],["%s နာရီ အကြာက","%s နာရီအတွင်း"],["1 ရက် အကြာက","1 ရက်အတွင်း"],["%s ရက် အကြာက","%s ရက်အတွင်း"],["1 ပတ် အကြာက","1 ပတ်အတွင်း"],["%s ပတ် အကြာက","%s ပတ်အတွင်း"],["1 လ အကြာက","1 လအတွင်း"],["%s လ အကြာက","%s လအတွင်း"],["1 နှစ် အကြာက","1 နှစ်အတွင်း"],["%s နှစ် အကြာက","%s နှစ်အတွင်း"]][n]},nb_NO:function(s,n){return[["akkurat nå","om litt"],["%s sekunder siden","om %s sekunder"],["1 minutt siden","om 1 minutt"],["%s minutter siden","om %s minutter"],["1 time siden","om 1 time"],["%s timer siden","om %s timer"],["1 dag siden","om 1 dag"],["%s dager siden","om %s dager"],["1 uke siden","om 1 uke"],["%s uker siden","om %s uker"],["1 måned siden","om 1 måned"],["%s måneder siden","om %s måneder"],["1 år siden","om 1 år"],["%s år siden","om %s år"]][n]},nl:function(s,n){return[["recent","binnenkort"],["%s seconden geleden","binnen %s seconden"],["1 minuut geleden","binnen 1 minuut"],["%s minuten geleden","binnen %s minuten"],["1 uur geleden","binnen 1 uur"],["%s uur geleden","binnen %s uur"],["1 dag geleden","binnen 1 dag"],["%s dagen geleden","binnen %s dagen"],["1 week geleden","binnen 1 week"],["%s weken geleden","binnen %s weken"],["1 maand geleden","binnen 1 maand"],["%s maanden geleden","binnen %s maanden"],["1 jaar geleden","binnen 1 jaar"],["%s jaar geleden","binnen %s jaar"]][n]},nn_NO:function(s,n){return[["nett no","om litt"],["%s sekund sidan","om %s sekund"],["1 minutt sidan","om 1 minutt"],["%s minutt sidan","om %s minutt"],["1 time sidan","om 1 time"],["%s timar sidan","om %s timar"],["1 dag sidan","om 1 dag"],["%s dagar sidan","om %s dagar"],["1 veke sidan","om 1 veke"],["%s veker sidan","om %s veker"],["1 månad sidan","om 1 månad"],["%s månadar sidan","om %s månadar"],["1 år sidan","om 1 år"],["%s år sidan","om %s år"]][n]},pl:function(s,n){return S[1&n?4<s%10||s%10<2||1==~~(s/10)%10?n:++n/2+13:n]},pt_BR:function(s,n){return[["agora mesmo","agora"],["há %s segundos","em %s segundos"],["há um minuto","em um minuto"],["há %s minutos","em %s minutos"],["há uma hora","em uma hora"],["há %s horas","em %s horas"],["há um dia","em um dia"],["há %s dias","em %s dias"],["há uma semana","em uma semana"],["há %s semanas","em %s semanas"],["há um mês","em um mês"],["há %s meses","em %s meses"],["há um ano","em um ano"],["há %s anos","em %s anos"]][n]},ro:function(s,n){var e=[["chiar acum","chiar acum"],["acum %s secunde","peste %s secunde"],["acum un minut","peste un minut"],["acum %s minute","peste %s minute"],["acum o oră","peste o oră"],["acum %s ore","peste %s ore"],["acum o zi","peste o zi"],["acum %s zile","peste %s zile"],["acum o săptămână","peste o săptămână"],["acum %s săptămâni","peste %s săptămâni"],["acum o lună","peste o lună"],["acum %s luni","peste %s luni"],["acum un an","peste un an"],["acum %s ani","peste %s ani"]];return s<20?e[n]:[e[n][0].replace("%s","%s de"),e[n][1].replace("%s","%s de")]},ru:function(s,n){switch(n){case 0:return["только что","через несколько секунд"];case 1:return[N(s)+" назад","через "+N(s)];case 2:case 3:return[x(s)+" назад","через "+x(s)];case 4:case 5:return[D(s)+" назад","через "+D(s)];case 6:return["вчера","завтра"];case 7:return[I(s)+" назад","через "+I(s)];case 8:case 9:return[O(s)+" назад","через "+O(s)];case 10:case 11:return[W(s)+" назад","через "+W(s)];case 12:case 13:return[$(s)+" назад","через "+$(s)];default:return["",""]}},sq:function(s,n){return[["pak më parë","pas pak"],["para %s sekondash","pas %s sekondash"],["para një minute","pas një minute"],["para %s minutash","pas %s minutash"],["para një ore","pas një ore"],["para %s orësh","pas %s orësh"],["dje","nesër"],["para %s ditësh","pas %s ditësh"],["para një jave","pas një jave"],["para %s javësh","pas %s javësh"],["para një muaji","pas një muaji"],["para %s muajsh","pas %s muajsh"],["para një viti","pas një viti"],["para %s vjetësh","pas %s vjetësh"]][n]},sr:function(s,n){switch(n){case 0:return["малопре","управо сад"];case 1:return["пре "+U(s),"за "+U(s)];case 2:case 3:return["пре "+A(s),"за "+A(s)];case 4:case 5:return["пре "+C(s),"за "+C(s)];case 6:case 7:return["пре "+E(s),"за "+E(s)];case 8:case 9:return["пре "+B(s),"за "+B(s)];case 10:case 11:return["пре "+P(s),"за "+P(s)];case 12:case 13:return["пре "+R(s),"за "+R(s)];default:return["",""]}},sv:function(s,n){return[["just nu","om en stund"],["%s sekunder sedan","om %s sekunder"],["1 minut sedan","om 1 minut"],["%s minuter sedan","om %s minuter"],["1 timme sedan","om 1 timme"],["%s timmar sedan","om %s timmar"],["1 dag sedan","om 1 dag"],["%s dagar sedan","om %s dagar"],["1 vecka sedan","om 1 vecka"],["%s veckor sedan","om %s veckor"],["1 månad sedan","om 1 månad"],["%s månader sedan","om %s månader"],["1 år sedan","om 1 år"],["%s år sedan","om %s år"]][n]},ta:function(s,n){return[["இப்போது","சற்று நேரம் முன்பு"],["%s நொடிக்கு முன்","%s நொடிகளில்"],["1 நிமிடத்திற்க்கு முன்","1 நிமிடத்தில்"],["%s நிமிடத்திற்க்கு முன்","%s நிமிடங்களில்"],["1 மணி நேரத்திற்கு முன்","1 மணி நேரத்திற்குள்"],["%s மணி நேரத்திற்கு முன்","%s மணி நேரத்திற்குள்"],["1 நாளுக்கு முன்","1 நாளில்"],["%s நாட்களுக்கு முன்","%s நாட்களில்"],["1 வாரத்திற்கு முன்","1 வாரத்தில்"],["%s வாரங்களுக்கு முன்","%s வாரங்களில்"],["1 மாதத்திற்கு முன்","1 மாதத்தில்"],["%s மாதங்களுக்கு முன்","%s மாதங்களில்"],["1 வருடத்திற்கு முன்","1 வருடத்தில்"],["%s வருடங்களுக்கு முன்","%s வருடங்களில்"]][n]},th:function(s,n){return[["เมื่อสักครู่นี้","อีกสักครู่"],["%s วินาทีที่แล้ว","ใน %s วินาที"],["1 นาทีที่แล้ว","ใน 1 นาที"],["%s นาทีที่แล้ว","ใน %s นาที"],["1 ชั่วโมงที่แล้ว","ใน 1 ชั่วโมง"],["%s ชั่วโมงที่แล้ว","ใน %s ชั่วโมง"],["1 วันที่แล้ว","ใน 1 วัน"],["%s วันที่แล้ว","ใน %s วัน"],["1 อาทิตย์ที่แล้ว","ใน 1 อาทิตย์"],["%s อาทิตย์ที่แล้ว","ใน %s อาทิตย์"],["1 เดือนที่แล้ว","ใน 1 เดือน"],["%s เดือนที่แล้ว","ใน %s เดือน"],["1 ปีที่แล้ว","ใน 1 ปี"],["%s ปีที่แล้ว","ใน %s ปี"]][n]},tr:function(s,n){return[["az önce","şimdi"],["%s saniye önce","%s saniye içinde"],["1 dakika önce","1 dakika içinde"],["%s dakika önce","%s dakika içinde"],["1 saat önce","1 saat içinde"],["%s saat önce","%s saat içinde"],["1 gün önce","1 gün içinde"],["%s gün önce","%s gün içinde"],["1 hafta önce","1 hafta içinde"],["%s hafta önce","%s hafta içinde"],["1 ay önce","1 ay içinde"],["%s ay önce","%s ay içinde"],["1 yıl önce","1 yıl içinde"],["%s yıl önce","%s yıl içinde"]][n]},uk:function(s,n){switch(n){case 0:return["щойно","через декілька секунд"];case 1:return[F(s)+" тому","через "+F(s)];case 2:case 3:return[G(s)+" тому","через "+G(s)];case 4:case 5:return[H(s)+" тому","через "+H(s)];case 6:case 7:return[K(s)+" тому","через "+K(s)];case 8:case 9:return[L(s)+" тому","через "+L(s)];case 10:case 11:return[Q(s)+" тому","через "+Q(s)];case 12:case 13:return[V(s)+" тому","через "+V(s)];default:return["",""]}},vi:function(s,n){return[["vừa xong","một lúc"],["%s giây trước","trong %s giây"],["1 phút trước","trong 1 phút"],["%s phút trước","trong %s phút"],["1 giờ trước","trong 1 giờ"],["%s giờ trước","trong %s giờ"],["1 ngày trước","trong 1 ngày"],["%s ngày trước","trong %s ngày"],["1 tuần trước","trong 1 tuần"],["%s tuần trước","trong %s tuần"],["1 tháng trước","trong 1 tháng"],["%s tháng trước","trong %s tháng"],["1 năm trước","trong 1 năm"],["%s năm trước","trong %s năm"]][n]},zh_CN:e,zh_TW:function(s,n){return[["剛剛","片刻後"],["%s 秒前","%s 秒後"],["1 分鐘前","1 分鐘後"],["%s 分鐘前","%s 分鐘後"],["1 小時前","1 小時後"],["%s 小時前","%s 小時後"],["1 天前","1 天後"],["%s 天前","%s 天後"],["1 週前","1 週後"],["%s 週前","%s 週後"],["1 個月前","1 個月後"],["%s 個月前","%s 個月後"],["1 年前","1 年後"],["%s 年前","%s 年後"]][n]}});Object.keys(X).forEach(function(s){u(s,X[s])}),s.cancel=function(s){s?f(h(s)):Object.keys(g).forEach(f)},s.format=function(s,n,e){return d(c(s,e&&e.relativeDate),r(n))},s.register=u,s.render=function(s,n,e){var a=s.length?s:[s];return a.forEach(function(s){p(s,s.getAttribute("datetime"),r(n),e||{})}),a},Object.defineProperty(s,"__esModule",{value:!0})});


/*
 *
 * More info at [www.dropzonejs.com](https://www.dropzonejs.com)
 *
 * Copyright (c) 2012, Matias Meno
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */
(function() {
  var Dropzone, Emitter, camelize, contentLoaded, detectVerticalSquash, drawImageIOSFix, noop, without,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
  noop = function() {};
  Emitter = (function() {
    function Emitter() {}
    Emitter.prototype.addEventListener = Emitter.prototype.on;
    Emitter.prototype.on = function(event, fn) {
      this._callbacks = this._callbacks || {};
      if (!this._callbacks[event]) {
        this._callbacks[event] = [];
      }
      this._callbacks[event].push(fn);
      return this;
    };
    Emitter.prototype.emit = function() {
      var args, callback, callbacks, event, _i, _len;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this._callbacks = this._callbacks || {};
      callbacks = this._callbacks[event];
      if (callbacks) {
        for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
          callback = callbacks[_i];
          callback.apply(this, args);
        }
      }
      return this;
    };
    Emitter.prototype.removeListener = Emitter.prototype.off;
    Emitter.prototype.removeAllListeners = Emitter.prototype.off;
    Emitter.prototype.removeEventListener = Emitter.prototype.off;
    Emitter.prototype.off = function(event, fn) {
      var callback, callbacks, i, _i, _len;
      if (!this._callbacks || arguments.length === 0) {
        this._callbacks = {};
        return this;
      }
      callbacks = this._callbacks[event];
      if (!callbacks) {
        return this;
      }
      if (arguments.length === 1) {
        delete this._callbacks[event];
        return this;
      }
      for (i = _i = 0, _len = callbacks.length; _i < _len; i = ++_i) {
        callback = callbacks[i];
        if (callback === fn) {
          callbacks.splice(i, 1);
          break;
        }
      }
      return this;
    };
    return Emitter;
  })();
  Dropzone = (function(_super) {
    var extend, resolveOption;
    __extends(Dropzone, _super);
    Dropzone.prototype.Emitter = Emitter;

    /*
    This is a list of all available events you can register on a dropzone object.
    
    You can register an event handler like this:
    
        dropzone.on("dragEnter", function() { });
     */
    Dropzone.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "addedfiles", "removedfile", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"];
    Dropzone.prototype.defaultOptions = {
      url: null,
      method: "post",
      withCredentials: false,
      parallelUploads: 2,
      uploadMultiple: false,
      maxFilesize: 5000,
      paramName: "file",
      createImageThumbnails: true,
      maxThumbnailFilesize: 10,
      thumbnailWidth: 120,
      thumbnailHeight: 120,
      filesizeBase: 1000,
      maxFiles: null,
      params: {},
      clickable: true,
      ignoreHiddenFiles: true,
      acceptedFiles: null,
      acceptedMimeTypes: null,
      autoProcessQueue: true,
      autoQueue: true,
      addRemoveLinks: false,
      previewsContainer: null,
      hiddenInputContainer: "body",
      capture: null,
      renameFilename: null,
      dictDefaultMessage: "Drop files here to upload",
      dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.",
      dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.",
      dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.",
      dictInvalidFileType: "You can't upload files of this type.",
      dictResponseError: "Server responded with {{statusCode}} code.",
      dictCancelUpload: "Cancel upload",
      dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?",
      dictRemoveFile: "Remove file",
      dictRemoveFileConfirmation: null,
      dictMaxFilesExceeded: "You can not upload any more files.",
      accept: function(file, done) {
        return done();
      },
      init: function() {
        return noop;
      },
      forceFallback: false,
      fallback: function() {
        var child, messageElement, span, _i, _len, _ref;
        this.element.className = "" + this.element.className + " dz-browser-not-supported";
        _ref = this.element.getElementsByTagName("div");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (/(^| )dz-message($| )/.test(child.className)) {
            messageElement = child;
            child.className = "dz-message";
            continue;
          }
        }
        if (!messageElement) {
          messageElement = Dropzone.createElement("<div class=\"dz-message\"><span></span></div>");
          this.element.appendChild(messageElement);
        }
        span = messageElement.getElementsByTagName("span")[0];
        if (span) {
          if (span.textContent != null) {
            span.textContent = this.options.dictFallbackMessage;
          } else if (span.innerText != null) {
            span.innerText = this.options.dictFallbackMessage;
          }
        }
        return this.element.appendChild(this.getFallbackForm());
      },
      resize: function(file) {
        var info, srcRatio, trgRatio;
        info = {
          srcX: 0,
          srcY: 0,
          srcWidth: file.width,
          srcHeight: file.height
        };
        srcRatio = file.width / file.height;
        info.optWidth = this.options.thumbnailWidth;
        info.optHeight = this.options.thumbnailHeight;
        if ((info.optWidth == null) && (info.optHeight == null)) {
          info.optWidth = info.srcWidth;
          info.optHeight = info.srcHeight;
        } else if (info.optWidth == null) {
          info.optWidth = srcRatio * info.optHeight;
        } else if (info.optHeight == null) {
          info.optHeight = (1 / srcRatio) * info.optWidth;
        }
        trgRatio = info.optWidth / info.optHeight;
        if (file.height < info.optHeight || file.width < info.optWidth) {
          info.trgHeight = info.srcHeight;
          info.trgWidth = info.srcWidth;
        } else {
          if (srcRatio > trgRatio) {
            info.srcHeight = file.height;
            info.srcWidth = info.srcHeight * trgRatio;
          } else {
            info.srcWidth = file.width;
            info.srcHeight = info.srcWidth / trgRatio;
          }
        }
        info.srcX = (file.width - info.srcWidth) / 2;
        info.srcY = (file.height - info.srcHeight) / 2;
        return info;
      },
      /*
      Those functions register themselves to the events on init and handle all
      the user interface specific stuff. Overwriting them won't break the upload
      but can break the way it's displayed.
      You can overwrite them if you don't like the default behavior. If you just
      want to add an additional event handler, register it on the dropzone object
      and don't overwrite those options.
       */
      drop: function(e) {
        return this.element.classList.remove("dz-drag-hover");
      },
      dragstart: noop,
      dragend: function(e) {
        return this.element.classList.remove("dz-drag-hover");
      },
      dragenter: function(e) {
        return this.element.classList.add("dz-drag-hover");
      },
      dragover: function(e) {
        return this.element.classList.add("dz-drag-hover");
      },
      dragleave: function(e) {
        return this.element.classList.remove("dz-drag-hover");
      },
      paste: noop,
      reset: function() {
        return this.element.classList.remove("dz-started");
      },
      addedfile: function(file) {
        var node, removeFileEvent, removeLink, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
        if (this.element === this.previewsContainer) {
          this.element.classList.add("dz-started");
        }
        if (this.previewsContainer) {
          file.previewElement = Dropzone.createElement(this.options.previewTemplate.trim());
          file.previewTemplate = file.previewElement;
          this.previewsContainer.appendChild(file.previewElement);
          _ref = file.previewElement.querySelectorAll("[data-dz-name]");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            node.textContent = this._renameFilename(file.name);
          }
          _ref1 = file.previewElement.querySelectorAll("[data-dz-size]");
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            node = _ref1[_j];
            node.innerHTML = this.filesize(file.size);
          }
          if (this.options.addRemoveLinks) {
            file._removeLink = Dropzone.createElement("<a class=\"dz-remove\" href=\"javascript:undefined;\" data-dz-remove>" + this.options.dictRemoveFile + "</a>");
            file.previewElement.appendChild(file._removeLink);
          }
          removeFileEvent = (function(_this) {
            return function(e) {
              e.preventDefault();
              e.stopPropagation();
              if (file.status === Dropzone.UPLOADING) {
                return Dropzone.confirm(_this.options.dictCancelUploadConfirmation, function() {
                  return _this.removeFile(file);
                });
              } else {
                if (_this.options.dictRemoveFileConfirmation) {
                  return Dropzone.confirm(_this.options.dictRemoveFileConfirmation, function() {
                    return _this.removeFile(file);
                  });
                } else {
                  return _this.removeFile(file);
                }
              }
            };
          })(this);
          _ref2 = file.previewElement.querySelectorAll("[data-dz-remove]");
          _results = [];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            removeLink = _ref2[_k];
            _results.push(removeLink.addEventListener("click", removeFileEvent));
          }
          return _results;
        }
      },
      removedfile: function(file) {
        var _ref;
        if (file.previewElement) {
          if ((_ref = file.previewElement) != null) {
            _ref.parentNode.removeChild(file.previewElement);
          }
        }
        return this._updateMaxFilesReachedClass();
      },
      thumbnail: function(file, dataUrl) {
        var thumbnailElement, _i, _len, _ref;
        if (file.previewElement) {
          file.previewElement.classList.remove("dz-file-preview");
          _ref = file.previewElement.querySelectorAll("[data-dz-thumbnail]");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            thumbnailElement = _ref[_i];
            thumbnailElement.alt = file.name;
            thumbnailElement.src = dataUrl;
          }
          return setTimeout(((function(_this) {
            return function() {
              return file.previewElement.classList.add("dz-image-preview");
            };
          })(this)), 1);
        }
      },
      error: function(file, message) {
        var node, _i, _len, _ref, _results;
        if (file.previewElement) {
          file.previewElement.classList.add("dz-error");
          if (typeof message !== "String" && message.error) {
            message = message.error;
          }
          _ref = file.previewElement.querySelectorAll("[data-dz-errormessage]");
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            _results.push(node.textContent = message);
          }
          return _results;
        }
      },
      errormultiple: noop,
      processing: function(file) {
        if (file.previewElement) {
          file.previewElement.classList.add("dz-processing");
          if (file._removeLink) {
            return file._removeLink.textContent = this.options.dictCancelUpload;
          }
        }
      },
      processingmultiple: noop,
      uploadprogress: function(file, progress, bytesSent) {
        var node, _i, _len, _ref, _results;
        if (file.previewElement) {
          _ref = file.previewElement.querySelectorAll("[data-dz-uploadprogress]");
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            if (node.nodeName === 'PROGRESS') {
              _results.push(node.value = progress);
            } else {
              _results.push(node.style.width = "" + progress + "%");
            }
          }
          return _results;
        }
      },
      totaluploadprogress: noop,
      sending: noop,
      sendingmultiple: noop,
      success: function(file) {
        if (file.previewElement) {
          return file.previewElement.classList.add("dz-success");
        }
      },
      successmultiple: noop,
      canceled: function(file) {
        return this.emit("error", file, "Upload canceled.");
      },
      canceledmultiple: noop,
      complete: function(file) {
        if (file._removeLink) {
          file._removeLink.textContent = this.options.dictRemoveFile;
        }
        if (file.previewElement) {
          return file.previewElement.classList.add("dz-complete");
        }
      },
      completemultiple: noop,
      maxfilesexceeded: noop,
      maxfilesreached: noop,
      queuecomplete: noop,
      addedfiles: noop,
      previewTemplate: "<div class=\"dz-preview dz-file-preview\">\n  <div class=\"dz-image\"><img data-dz-thumbnail /></div>\n  <div class=\"dz-details\">\n    <div class=\"dz-size\"><span data-dz-size></span></div>\n    <div class=\"dz-filename\"><span data-dz-name></span></div>\n  </div>\n  <div class=\"dz-progress\"><span class=\"dz-upload\" data-dz-uploadprogress></span></div>\n  <div class=\"dz-error-message\"><span data-dz-errormessage></span></div>\n  <div class=\"dz-success-mark\">\n    <svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"https://www.w3.org/2000/svg\" xmlns:xlink=\"https://www.w3.org/1999/xlink\" xmlns:sketch=\"https://www.bohemiancoding.com/sketch/ns\">\n      <title>Check</title>\n      <defs></defs>\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <path d=\"M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\" id=\"Oval-2\" stroke-opacity=\"0.198794158\" stroke=\"#747474\" fill-opacity=\"0.816519475\" fill=\"#FFFFFF\" sketch:type=\"MSShapeGroup\"></path>\n      </g>\n    </svg>\n  </div>\n  <div class=\"dz-error-mark\">\n    <svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"https://www.w3.org/2000/svg\" xmlns:xlink=\"https://www.w3.org/1999/xlink\" xmlns:sketch=\"https://www.bohemiancoding.com/sketch/ns\">\n      <title>Error</title>\n      <defs></defs>\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <g id=\"Check-+-Oval-2\" sketch:type=\"MSLayerGroup\" stroke=\"#747474\" stroke-opacity=\"0.198794158\" fill=\"#FFFFFF\" fill-opacity=\"0.816519475\">\n          <path d=\"M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\" id=\"Oval-2\" sketch:type=\"MSShapeGroup\"></path>\n        </g>\n      </g>\n    </svg>\n  </div>\n</div>"
    };
    extend = function() {
      var key, object, objects, target, val, _i, _len;
      target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        object = objects[_i];
        for (key in object) {
          val = object[key];
          target[key] = val;
        }
      }
      return target;
    };
    function Dropzone(element, options) {
      var elementOptions, fallback, _ref;
      this.element = element;
      this.version = Dropzone.version;
      this.defaultOptions.previewTemplate = this.defaultOptions.previewTemplate.replace(/\n*/g, "");
      this.clickableElements = [];
      this.listeners = [];
      this.files = [];
      if (typeof this.element === "string") {
        this.element = document.querySelector(this.element);
      }
      if (!(this.element && (this.element.nodeType != null))) {
        throw new Error("Invalid dropzone element.");
      }
      if (this.element.dropzone) {
        throw new Error("Dropzone already attached.");
      }
      Dropzone.instances.push(this);
      this.element.dropzone = this;
      elementOptions = (_ref = Dropzone.optionsForElement(this.element)) != null ? _ref : {};
      this.options = extend({}, this.defaultOptions, elementOptions, options != null ? options : {});
      if (this.options.forceFallback || !Dropzone.isBrowserSupported()) {
        return this.options.fallback.call(this);
      }
      if (this.options.url == null) {
        this.options.url = this.element.getAttribute("action");
      }
      if (!this.options.url) {
        throw new Error("No URL provided.");
      }
      if (this.options.acceptedFiles && this.options.acceptedMimeTypes) {
        throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.");
      }
      if (this.options.acceptedMimeTypes) {
        this.options.acceptedFiles = this.options.acceptedMimeTypes;
        delete this.options.acceptedMimeTypes;
      }
      this.options.method = this.options.method.toUpperCase();
      if ((fallback = this.getExistingFallback()) && fallback.parentNode) {
        fallback.parentNode.removeChild(fallback);
      }
      if (this.options.previewsContainer !== false) {
        if (this.options.previewsContainer) {
          this.previewsContainer = Dropzone.getElement(this.options.previewsContainer, "previewsContainer");
        } else {
          this.previewsContainer = this.element;
        }
      }
      if (this.options.clickable) {
        if (this.options.clickable === true) {
          this.clickableElements = [this.element];
        } else {
          this.clickableElements = Dropzone.getElements(this.options.clickable, "clickable");
        }
      }
      this.init();
    }
    Dropzone.prototype.getAcceptedFiles = function() {
      var file, _i, _len, _ref, _results;
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.accepted) {
          _results.push(file);
        }
      }
      return _results;
    };
    Dropzone.prototype.getRejectedFiles = function() {
      var file, _i, _len, _ref, _results;
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (!file.accepted) {
          _results.push(file);
        }
      }
      return _results;
    };
    Dropzone.prototype.getFilesWithStatus = function(status) {
      var file, _i, _len, _ref, _results;
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.status === status) {
          _results.push(file);
        }
      }
      return _results;
    };
    Dropzone.prototype.getQueuedFiles = function() {
      return this.getFilesWithStatus(Dropzone.QUEUED);
    };
    Dropzone.prototype.getUploadingFiles = function() {
      return this.getFilesWithStatus(Dropzone.UPLOADING);
    };
    Dropzone.prototype.getAddedFiles = function() {
      return this.getFilesWithStatus(Dropzone.ADDED);
    };
    Dropzone.prototype.getActiveFiles = function() {
      var file, _i, _len, _ref, _results;
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.status === Dropzone.UPLOADING || file.status === Dropzone.QUEUED) {
          _results.push(file);
        }
      }
      return _results;
    };
    Dropzone.prototype.init = function() {
      var eventName, noPropagation, setupHiddenFileInput, _i, _len, _ref, _ref1;
      if (this.element.tagName === "form") {
        this.element.setAttribute("enctype", "multipart/form-data");
      }
      if (this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message")) {
        this.element.appendChild(Dropzone.createElement("<div class=\"dz-default dz-message\"><span>" + this.options.dictDefaultMessage + "</span></div>"));
      }
      if (this.clickableElements.length) {
        setupHiddenFileInput = (function(_this) {
          return function() {
            if (_this.hiddenFileInput) {
              _this.hiddenFileInput.parentNode.removeChild(_this.hiddenFileInput);
            }
            _this.hiddenFileInput = document.createElement("input");
            _this.hiddenFileInput.setAttribute("type", "file");
            if ((_this.options.maxFiles == null) || _this.options.maxFiles > 1) {
              _this.hiddenFileInput.setAttribute("multiple", "multiple");
            }
            _this.hiddenFileInput.className = "dz-hidden-input";
            if (_this.options.acceptedFiles != null) {
              _this.hiddenFileInput.setAttribute("accept", _this.options.acceptedFiles);
            }
            if (_this.options.capture != null) {
              _this.hiddenFileInput.setAttribute("capture", _this.options.capture);
            }
            _this.hiddenFileInput.style.visibility = "hidden";
            _this.hiddenFileInput.style.position = "absolute";
            _this.hiddenFileInput.style.top = "0";
            _this.hiddenFileInput.style.left = "0";
            _this.hiddenFileInput.style.height = "0";
            _this.hiddenFileInput.style.width = "0";
            document.querySelector(_this.options.hiddenInputContainer).appendChild(_this.hiddenFileInput);
            return _this.hiddenFileInput.addEventListener("change", function() {
              var file, files, _i, _len;
              files = _this.hiddenFileInput.files;
              if (files.length) {
                for (_i = 0, _len = files.length; _i < _len; _i++) {
                  file = files[_i];
                  _this.addFile(file);
                }
              }
              _this.emit("addedfiles", files);
              return setupHiddenFileInput();
            });
          };
        })(this);
        setupHiddenFileInput();
      }
      this.URL = (_ref = window.URL) != null ? _ref : window.webkitURL;
      _ref1 = this.events;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        eventName = _ref1[_i];
        this.on(eventName, this.options[eventName]);
      }
      this.on("uploadprogress", (function(_this) {
        return function() {
          return _this.updateTotalUploadProgress();
        };
      })(this));
      this.on("removedfile", (function(_this) {
        return function() {
          return _this.updateTotalUploadProgress();
        };
      })(this));
      this.on("canceled", (function(_this) {
        return function(file) {
          return _this.emit("complete", file);
        };
      })(this));
      this.on("complete", (function(_this) {
        return function(file) {
          if (_this.getAddedFiles().length === 0 && _this.getUploadingFiles().length === 0 && _this.getQueuedFiles().length === 0) {
            return setTimeout((function() {
              return _this.emit("queuecomplete");
            }), 0);
          }
        };
      })(this));
      noPropagation = function(e) {
        e.stopPropagation();
        if (e.preventDefault) {
          return e.preventDefault();
        } else {
          return e.returnValue = false;
        }
      };
      this.listeners = [
        {
          element: this.element,
          events: {
            "dragstart": (function(_this) {
              return function(e) {
                return _this.emit("dragstart", e);
              };
            })(this),
            "dragenter": (function(_this) {
              return function(e) {
                noPropagation(e);
                return _this.emit("dragenter", e);
              };
            })(this),
            "dragover": (function(_this) {
              return function(e) {
                var efct;
                try {
                  efct = e.dataTransfer.effectAllowed;
                } catch (_error) {}
                e.dataTransfer.dropEffect = 'move' === efct || 'linkMove' === efct ? 'move' : 'copy';
                noPropagation(e);
                return _this.emit("dragover", e);
              };
            })(this),
            "dragleave": (function(_this) {
              return function(e) {
                return _this.emit("dragleave", e);
              };
            })(this),
            "drop": (function(_this) {
              return function(e) {
                noPropagation(e);
                return _this.drop(e);
              };
            })(this),
            "dragend": (function(_this) {
              return function(e) {
                return _this.emit("dragend", e);
              };
            })(this)
          }
        }
      ];
      this.clickableElements.forEach((function(_this) {
        return function(clickableElement) {
          return _this.listeners.push({
            element: clickableElement,
            events: {
              "click": function(evt) {
                if ((clickableElement !== _this.element) || (evt.target === _this.element || Dropzone.elementInside(evt.target, _this.element.querySelector(".dz-message")))) {
                  _this.hiddenFileInput.click();
                }
                return true;
              }
            }
          });
        };
      })(this));
      this.enable();
      return this.options.init.call(this);
    };
    Dropzone.prototype.destroy = function() {
      var _ref;
      this.disable();
      this.removeAllFiles(true);
      if ((_ref = this.hiddenFileInput) != null ? _ref.parentNode : void 0) {
        this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);
        this.hiddenFileInput = null;
      }
      delete this.element.dropzone;
      return Dropzone.instances.splice(Dropzone.instances.indexOf(this), 1);
    };
    Dropzone.prototype.updateTotalUploadProgress = function() {
      var activeFiles, file, totalBytes, totalBytesSent, totalUploadProgress, _i, _len, _ref;
      totalBytesSent = 0;
      totalBytes = 0;
      activeFiles = this.getActiveFiles();
      if (activeFiles.length) {
        _ref = this.getActiveFiles();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          file = _ref[_i];
          totalBytesSent += file.upload.bytesSent;
          totalBytes += file.upload.total;
        }
        totalUploadProgress = 100 * totalBytesSent / totalBytes;
      } else {
        totalUploadProgress = 100;
      }
      return this.emit("totaluploadprogress", totalUploadProgress, totalBytes, totalBytesSent);
    };
    Dropzone.prototype._getParamName = function(n) {
      if (typeof this.options.paramName === "function") {
        return this.options.paramName(n);
      } else {
        return "" + this.options.paramName + (this.options.uploadMultiple ? "[" + n + "]" : "");
      }
    };
    Dropzone.prototype._renameFilename = function(name) {
      if (typeof this.options.renameFilename !== "function") {
        return name;
      }
      return this.options.renameFilename(name);
    };
    Dropzone.prototype.getFallbackForm = function() {
      var existingFallback, fields, fieldsString, form;
      if (existingFallback = this.getExistingFallback()) {
        return existingFallback;
      }
      fieldsString = "<div class=\"dz-fallback\">";
      if (this.options.dictFallbackText) {
        fieldsString += "<p>" + this.options.dictFallbackText + "</p>";
      }
      fieldsString += "<input type=\"file\" name=\"" + (this._getParamName(0)) + "\" " + (this.options.uploadMultiple ? 'multiple="multiple"' : void 0) + " /><input type=\"submit\" value=\"Upload!\"></div>";
      fields = Dropzone.createElement(fieldsString);
      if (this.element.tagName !== "FORM") {
        form = Dropzone.createElement("<form action=\"" + this.options.url + "\" enctype=\"multipart/form-data\" method=\"" + this.options.method + "\"></form>");
        form.appendChild(fields);
      } else {
        this.element.setAttribute("enctype", "multipart/form-data");
        this.element.setAttribute("method", this.options.method);
      }
      return form != null ? form : fields;
    };
    Dropzone.prototype.getExistingFallback = function() {
      var fallback, getFallback, tagName, _i, _len, _ref;
      getFallback = function(elements) {
        var el, _i, _len;
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          el = elements[_i];
          if (/(^| )fallback($| )/.test(el.className)) {
            return el;
          }
        }
      };
      _ref = ["div", "form"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tagName = _ref[_i];
        if (fallback = getFallback(this.element.getElementsByTagName(tagName))) {
          return fallback;
        }
      }
    };
    Dropzone.prototype.setupEventListeners = function() {
      var elementListeners, event, listener, _i, _len, _ref, _results;
      _ref = this.listeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elementListeners = _ref[_i];
        _results.push((function() {
          var _ref1, _results1;
          _ref1 = elementListeners.events;
          _results1 = [];
          for (event in _ref1) {
            listener = _ref1[event];
            _results1.push(elementListeners.element.addEventListener(event, listener, false));
          }
          return _results1;
        })());
      }
      return _results;
    };
    Dropzone.prototype.removeEventListeners = function() {
      var elementListeners, event, listener, _i, _len, _ref, _results;
      _ref = this.listeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elementListeners = _ref[_i];
        _results.push((function() {
          var _ref1, _results1;
          _ref1 = elementListeners.events;
          _results1 = [];
          for (event in _ref1) {
            listener = _ref1[event];
            _results1.push(elementListeners.element.removeEventListener(event, listener, false));
          }
          return _results1;
        })());
      }
      return _results;
    };
    Dropzone.prototype.disable = function() {
      var file, _i, _len, _ref, _results;
      this.clickableElements.forEach(function(element) {
        return element.classList.remove("dz-clickable");
      });
      this.removeEventListeners();
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        _results.push(this.cancelUpload(file));
      }
      return _results;
    };
    Dropzone.prototype.enable = function() {
      this.clickableElements.forEach(function(element) {
        return element.classList.add("dz-clickable");
      });
      return this.setupEventListeners();
    };
    Dropzone.prototype.filesize = function(size) {
      var cutoff, i, selectedSize, selectedUnit, unit, units, _i, _len;
      selectedSize = 0;
      selectedUnit = "b";
      if (size > 0) {
        units = ['TB', 'GB', 'MB', 'KB', 'b'];
        for (i = _i = 0, _len = units.length; _i < _len; i = ++_i) {
          unit = units[i];
          cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;
          if (size >= cutoff) {
            selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);
            selectedUnit = unit;
            break;
          }
        }
        selectedSize = Math.round(10 * selectedSize) / 10;
      }
      return "<strong>" + selectedSize + "</strong> " + selectedUnit;
    };
    Dropzone.prototype._updateMaxFilesReachedClass = function() {
      if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {
        if (this.getAcceptedFiles().length === this.options.maxFiles) {
          this.emit('maxfilesreached', this.files);
        }
        return this.element.classList.add("dz-max-files-reached");
      } else {
        return this.element.classList.remove("dz-max-files-reached");
      }
    };
    Dropzone.prototype.drop = function(e) {
      var files, items;
      if (!e.dataTransfer) {
        return;
      }
      this.emit("drop", e);
      files = e.dataTransfer.files;
      this.emit("addedfiles", files);
      if (files.length) {
        items = e.dataTransfer.items;
        if (items && items.length && (items[0].webkitGetAsEntry != null)) {
          this._addFilesFromItems(items);
        } else {
          this.handleFiles(files);
        }
      }
    };
    Dropzone.prototype.paste = function(e) {
      var items, _ref;
      if ((e != null ? (_ref = e.clipboardData) != null ? _ref.items : void 0 : void 0) == null) {
        return;
      }
      this.emit("paste", e);
      items = e.clipboardData.items;
      if (items.length) {
        return this._addFilesFromItems(items);
      }
    };
    Dropzone.prototype.handleFiles = function(files) {
      var file, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        _results.push(this.addFile(file));
      }
      return _results;
    };
    Dropzone.prototype._addFilesFromItems = function(items) {
      var entry, item, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        if ((item.webkitGetAsEntry != null) && (entry = item.webkitGetAsEntry())) {
          if (entry.isFile) {
            _results.push(this.addFile(item.getAsFile()));
          } else if (entry.isDirectory) {
            _results.push(this._addFilesFromDirectory(entry, entry.name));
          } else {
            _results.push(void 0);
          }
        } else if (item.getAsFile != null) {
          if ((item.kind == null) || item.kind === "file") {
            _results.push(this.addFile(item.getAsFile()));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    Dropzone.prototype._addFilesFromDirectory = function(directory, path) {
      var dirReader, errorHandler, readEntries;
      dirReader = directory.createReader();
      errorHandler = function(error) {
        return typeof console !== "undefined" && console !== null ? typeof console.log === "function" ? console.log(error) : void 0 : void 0;
      };
      readEntries = (function(_this) {
        return function() {
          return dirReader.readEntries(function(entries) {
            var entry, _i, _len;
            if (entries.length > 0) {
              for (_i = 0, _len = entries.length; _i < _len; _i++) {
                entry = entries[_i];
                if (entry.isFile) {
                  entry.file(function(file) {
                    if (_this.options.ignoreHiddenFiles && file.name.substring(0, 1) === '.') {
                      return;
                    }
                    file.fullPath = "" + path + "/" + file.name;
                    return _this.addFile(file);
                  });
                } else if (entry.isDirectory) {
                  _this._addFilesFromDirectory(entry, "" + path + "/" + entry.name);
                }
              }
              readEntries();
            }
            return null;
          }, errorHandler);
        };
      })(this);
      return readEntries();
    };
    Dropzone.prototype.accept = function(file, done) {
      if (file.size > this.options.maxFilesize * 1024 * 1024) {
        return done(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(file.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize));
      } else if (!Dropzone.isValidFile(file, this.options.acceptedFiles)) {
        return done(this.options.dictInvalidFileType);
      } else if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {
        done(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles));
        return this.emit("maxfilesexceeded", file);
      } else {
        return this.options.accept.call(this, file, done);
      }
    };
    Dropzone.prototype.addFile = function(file) {
      file.upload = {
        progress: 0,
        total: file.size,
        bytesSent: 0
      };
      this.files.push(file);
      file.status = Dropzone.ADDED;
      this.emit("addedfile", file);
      this._enqueueThumbnail(file);
      return this.accept(file, (function(_this) {
        return function(error) {
          if (error) {
            file.accepted = false;
            _this._errorProcessing([file], error);
          } else {
            file.accepted = true;
            if (_this.options.autoQueue) {
              _this.enqueueFile(file);
            }
          }
          return _this._updateMaxFilesReachedClass();
        };
      })(this));
    };
    Dropzone.prototype.enqueueFiles = function(files) {
      var file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        this.enqueueFile(file);
      }
      return null;
    };
    Dropzone.prototype.enqueueFile = function(file) {
      if (file.status === Dropzone.ADDED && file.accepted === true) {
        file.status = Dropzone.QUEUED;
        if (this.options.autoProcessQueue) {
          return setTimeout(((function(_this) {
            return function() {
              return _this.processQueue();
            };
          })(this)), 0);
        }
      } else {
        throw new Error("This file can't be queued because it has already been processed or was rejected.");
      }
    };
    Dropzone.prototype._thumbnailQueue = [];
    Dropzone.prototype._processingThumbnail = false;
    Dropzone.prototype._enqueueThumbnail = function(file) {
      if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {
        this._thumbnailQueue.push(file);
        return setTimeout(((function(_this) {
          return function() {
            return _this._processThumbnailQueue();
          };
        })(this)), 0);
      }
    };
    Dropzone.prototype._processThumbnailQueue = function() {
      if (this._processingThumbnail || this._thumbnailQueue.length === 0) {
        return;
      }
      this._processingThumbnail = true;
      return this.createThumbnail(this._thumbnailQueue.shift(), (function(_this) {
        return function() {
          _this._processingThumbnail = false;
          return _this._processThumbnailQueue();
        };
      })(this));
    };
    Dropzone.prototype.removeFile = function(file) {
      if (file.status === Dropzone.UPLOADING) {
        this.cancelUpload(file);
      }
      this.files = without(this.files, file);
      this.emit("removedfile", file);
      if (this.files.length === 0) {
        return this.emit("reset");
      }
    };
    Dropzone.prototype.removeAllFiles = function(cancelIfNecessary) {
      var file, _i, _len, _ref;
      if (cancelIfNecessary == null) {
        cancelIfNecessary = false;
      }
      _ref = this.files.slice();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.status !== Dropzone.UPLOADING || cancelIfNecessary) {
          this.removeFile(file);
        }
      }
      return null;
    };
    Dropzone.prototype.createThumbnail = function(file, callback) {
      var fileReader;
      fileReader = new FileReader;
      fileReader.onload = (function(_this) {
        return function() {
          if (file.type === "image/svg+xml") {
            _this.emit("thumbnail", file, fileReader.result);
            if (callback != null) {
              callback();
            }
            return;
          }
          return _this.createThumbnailFromUrl(file, fileReader.result, callback);
        };
      })(this);
      return fileReader.readAsDataURL(file);
    };
    Dropzone.prototype.createThumbnailFromUrl = function(file, imageUrl, callback, crossOrigin) {
      var img;
      img = document.createElement("img");
      if (crossOrigin) {
        img.crossOrigin = crossOrigin;
      }
      img.onload = (function(_this) {
        return function() {
          var canvas, ctx, resizeInfo, thumbnail, _ref, _ref1, _ref2, _ref3;
          file.width = img.width;
          file.height = img.height;
          resizeInfo = _this.options.resize.call(_this, file);
          if (resizeInfo.trgWidth == null) {
            resizeInfo.trgWidth = resizeInfo.optWidth;
          }
          if (resizeInfo.trgHeight == null) {
            resizeInfo.trgHeight = resizeInfo.optHeight;
          }
          canvas = document.createElement("canvas");
          ctx = canvas.getContext("2d");
          canvas.width = resizeInfo.trgWidth;
          canvas.height = resizeInfo.trgHeight;
          drawImageIOSFix(ctx, img, (_ref = resizeInfo.srcX) != null ? _ref : 0, (_ref1 = resizeInfo.srcY) != null ? _ref1 : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, (_ref2 = resizeInfo.trgX) != null ? _ref2 : 0, (_ref3 = resizeInfo.trgY) != null ? _ref3 : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);
          thumbnail = canvas.toDataURL("image/png");
          _this.emit("thumbnail", file, thumbnail);
          if (callback != null) {
            return callback();
          }
        };
      })(this);
      if (callback != null) {
        img.onerror = callback;
      }
      return img.src = imageUrl;
    };
    Dropzone.prototype.processQueue = function() {
      var i, parallelUploads, processingLength, queuedFiles;
      parallelUploads = this.options.parallelUploads;
      processingLength = this.getUploadingFiles().length;
      i = processingLength;
      if (processingLength >= parallelUploads) {
        return;
      }
      queuedFiles = this.getQueuedFiles();
      if (!(queuedFiles.length > 0)) {
        return;
      }
      if (this.options.uploadMultiple) {
        return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));
      } else {
        while (i < parallelUploads) {
          if (!queuedFiles.length) {
            return;
          }
          this.processFile(queuedFiles.shift());
          i++;
        }
      }
    };
    Dropzone.prototype.processFile = function(file) {
      return this.processFiles([file]);
    };
    Dropzone.prototype.processFiles = function(files) {
      var file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        file.processing = true;
        file.status = Dropzone.UPLOADING;
        this.emit("processing", file);
      }
      if (this.options.uploadMultiple) {
        this.emit("processingmultiple", files);
      }
      return this.uploadFiles(files);
    };
    Dropzone.prototype._getFilesWithXhr = function(xhr) {
      var file, files;
      return files = (function() {
        var _i, _len, _ref, _results;
        _ref = this.files;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          file = _ref[_i];
          if (file.xhr === xhr) {
            _results.push(file);
          }
        }
        return _results;
      }).call(this);
    };
    Dropzone.prototype.cancelUpload = function(file) {
      var groupedFile, groupedFiles, _i, _j, _len, _len1, _ref;
      if (file.status === Dropzone.UPLOADING) {
        groupedFiles = this._getFilesWithXhr(file.xhr);
        for (_i = 0, _len = groupedFiles.length; _i < _len; _i++) {
          groupedFile = groupedFiles[_i];
          groupedFile.status = Dropzone.CANCELED;
        }
        file.xhr.abort();
        for (_j = 0, _len1 = groupedFiles.length; _j < _len1; _j++) {
          groupedFile = groupedFiles[_j];
          this.emit("canceled", groupedFile);
        }
        if (this.options.uploadMultiple) {
          this.emit("canceledmultiple", groupedFiles);
        }
      } else if ((_ref = file.status) === Dropzone.ADDED || _ref === Dropzone.QUEUED) {
        file.status = Dropzone.CANCELED;
        this.emit("canceled", file);
        if (this.options.uploadMultiple) {
          this.emit("canceledmultiple", [file]);
        }
      }
      if (this.options.autoProcessQueue) {
        return this.processQueue();
      }
    };
    resolveOption = function() {
      var args, option;
      option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (typeof option === 'function') {
        return option.apply(this, args);
      }
      return option;
    };
    Dropzone.prototype.uploadFile = function(file) {
      return this.uploadFiles([file]);
    };
    Dropzone.prototype.uploadFiles = function(files) {
      var file, formData, handleError, headerName, headerValue, headers, i, input, inputName, inputType, key, method, option, progressObj, response, updateProgress, url, value, xhr, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      xhr = new XMLHttpRequest();
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        file.xhr = xhr;
      }
      method = resolveOption(this.options.method, files);
      url = resolveOption(this.options.url, files);
      xhr.open(method, url, true);
      xhr.withCredentials = !!this.options.withCredentials;
      response = null;
      handleError = (function(_this) {
        return function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
            file = files[_j];
            _results.push(_this._errorProcessing(files, response || _this.options.dictResponseError.replace("{{statusCode}}", xhr.status), xhr));
          }
          return _results;
        };
      })(this);
      updateProgress = (function(_this) {
        return function(e) {
          var allFilesFinished, progress, _j, _k, _l, _len1, _len2, _len3, _results;
          if (e != null) {
            progress = 100 * e.loaded / e.total;
            for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
              file = files[_j];
              file.upload = {
                progress: progress,
                total: e.total,
                bytesSent: e.loaded
              };
            }
          } else {
            allFilesFinished = true;
            progress = 100;
            for (_k = 0, _len2 = files.length; _k < _len2; _k++) {
              file = files[_k];
              if (!(file.upload.progress === 100 && file.upload.bytesSent === file.upload.total)) {
                allFilesFinished = false;
              }
              file.upload.progress = progress;
              file.upload.bytesSent = file.upload.total;
            }
            if (allFilesFinished) {
              return;
            }
          }
          _results = [];
          for (_l = 0, _len3 = files.length; _l < _len3; _l++) {
            file = files[_l];
            _results.push(_this.emit("uploadprogress", file, progress, file.upload.bytesSent));
          }
          return _results;
        };
      })(this);
      xhr.onload = (function(_this) {
        return function(e) {
          var _ref;
          if (files[0].status === Dropzone.CANCELED) {
            return;
          }
          if (xhr.readyState !== 4) {
            return;
          }
          response = xhr.responseText;
          if (xhr.getResponseHeader("content-type") && ~xhr.getResponseHeader("content-type").indexOf("application/json")) {
            try {
              response = JSON.parse(response);
            } catch (_error) {
              e = _error;
              response = "Invalid JSON response from server.";
            }
          }
          updateProgress();
          if (!((200 <= (_ref = xhr.status) && _ref < 300))) {
            return handleError();
          } else {
            return _this._finished(files, response, e);
          }
        };
      })(this);
      xhr.onerror = (function(_this) {
        return function() {
          if (files[0].status === Dropzone.CANCELED) {
            return;
          }
          return handleError();
        };
      })(this);
      progressObj = (_ref = xhr.upload) != null ? _ref : xhr;
      progressObj.onprogress = updateProgress;
      headers = {
        "Accept": "application/json",
        "Cache-Control": "no-cache",
        "X-Requested-With": "XMLHttpRequest"
      };
      if (this.options.headers) {
        extend(headers, this.options.headers);
      }
      for (headerName in headers) {
        headerValue = headers[headerName];
        if (headerValue) {
          xhr.setRequestHeader(headerName, headerValue);
        }
      }
      formData = new FormData();
      if (this.options.params) {
        _ref1 = this.options.params;
        for (key in _ref1) {
          value = _ref1[key];
          formData.append(key, value);
        }
      }
      if (files.length == 1) {
          formData.append("filename", files[0].name);
      }
      else {
          for (var i in files) {
              var f = files[i];
              var iter = 1 + parseInt(i);
              formData.append("filename_" + iter, f.name);
          }
      }
      for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
        file = files[_j];
        this.emit("sending", file, xhr, formData);
      }
      if (this.options.uploadMultiple) {
        this.emit("sendingmultiple", files, xhr, formData);
      }
      if (this.element.tagName === "FORM") {
        _ref2 = this.element.querySelectorAll("input, textarea, select, button");
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          input = _ref2[_k];
          inputName = input.getAttribute("name");
          inputType = input.getAttribute("type");
          if (input.tagName === "SELECT" && input.hasAttribute("multiple")) {
            _ref3 = input.options;
            for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
              option = _ref3[_l];
              if (option.selected) {
                formData.append(inputName, option.value);
              }
            }
          } else if (!inputType || ((_ref4 = inputType.toLowerCase()) !== "checkbox" && _ref4 !== "radio") || input.checked) {
            formData.append(inputName, input.value);
          }
        }
      }
      for (i = _m = 0, _ref5 = files.length - 1; 0 <= _ref5 ? _m <= _ref5 : _m >= _ref5; i = 0 <= _ref5 ? ++_m : --_m) {
        formData.append(this._getParamName(i), files[i], this._renameFilename(files[i].name));
      }
      return this.submitRequest(xhr, formData, files);
    };
    Dropzone.prototype.submitRequest = function(xhr, formData, files) {
      return xhr.send(formData);
    };
    Dropzone.prototype._finished = function(files, responseText, e) {
      var file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        file.status = Dropzone.SUCCESS;
        this.emit("success", file, responseText, e);
        this.emit("complete", file);
      }
      if (this.options.uploadMultiple) {
        this.emit("successmultiple", files, responseText, e);
        this.emit("completemultiple", files);
      }
      if (this.options.autoProcessQueue) {
        return this.processQueue();
      }
    };
    Dropzone.prototype._errorProcessing = function(files, message, xhr) {
      var file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        file.status = Dropzone.ERROR;
        this.emit("error", file, message, xhr);
        this.emit("complete", file);
      }
      if (this.options.uploadMultiple) {
        this.emit("errormultiple", files, message, xhr);
        this.emit("completemultiple", files);
      }
      if (this.options.autoProcessQueue) {
        return this.processQueue();
      }
    };
    return Dropzone;
  })(Emitter);
  Dropzone.version = "4.3.0";
  Dropzone.options = {};
  Dropzone.optionsForElement = function(element) {
    if (element.getAttribute("id")) {
      return Dropzone.options[camelize(element.getAttribute("id"))];
    } else {
      return void 0;
    }
  };
  Dropzone.instances = [];
  Dropzone.forElement = function(element) {
    if (typeof element === "string") {
      element = document.querySelector(element);
    }
    if ((element != null ? element.dropzone : void 0) == null) {
      throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.");
    }
    return element.dropzone;
  };
  Dropzone.autoDiscover = true;
  Dropzone.discover = function() {
    var checkElements, dropzone, dropzones, _i, _len, _results;
    if (document.querySelectorAll) {
      dropzones = document.querySelectorAll(".dropzone");
    } else {
      dropzones = [];
      checkElements = function(elements) {
        var el, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          el = elements[_i];
          if (/(^| )dropzone($| )/.test(el.className)) {
            _results.push(dropzones.push(el));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      checkElements(document.getElementsByTagName("div"));
      checkElements(document.getElementsByTagName("form"));
    }
    _results = [];
    for (_i = 0, _len = dropzones.length; _i < _len; _i++) {
      dropzone = dropzones[_i];
      if (Dropzone.optionsForElement(dropzone) !== false) {
        _results.push(new Dropzone(dropzone));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };
  Dropzone.blacklistedBrowsers = [/opera.*Macintosh.*version\/12/i];
  Dropzone.isBrowserSupported = function() {
    var capableBrowser, regex, _i, _len, _ref;
    capableBrowser = true;
    if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {
      if (!("classList" in document.createElement("a"))) {
        capableBrowser = false;
      } else {
        _ref = Dropzone.blacklistedBrowsers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          regex = _ref[_i];
          if (regex.test(navigator.userAgent)) {
            capableBrowser = false;
            continue;
          }
        }
      }
    } else {
      capableBrowser = false;
    }
    return capableBrowser;
  };
  without = function(list, rejectedItem) {
    var item, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      item = list[_i];
      if (item !== rejectedItem) {
        _results.push(item);
      }
    }
    return _results;
  };
  camelize = function(str) {
    return str.replace(/[\-_](\w)/g, function(match) {
      return match.charAt(1).toUpperCase();
    });
  };
  Dropzone.createElement = function(string) {
    var div;
    div = document.createElement("div");
    div.innerHTML = string;
    return div.childNodes[0];
  };
  Dropzone.elementInside = function(element, container) {
    if (element === container) {
      return true;
    }
    while (element = element.parentNode) {
      if (element === container) {
        return true;
      }
    }
    return false;
  };
  Dropzone.getElement = function(el, name) {
    var element;
    if (typeof el === "string") {
      element = document.querySelector(el);
    } else if (el.nodeType != null) {
      element = el;
    }
    if (element == null) {
      throw new Error("Invalid `" + name + "` option provided. Please provide a CSS selector or a plain HTML element.");
    }
    return element;
  };
  Dropzone.getElements = function(els, name) {
    var e, el, elements, _i, _j, _len, _len1, _ref;
    if (els instanceof Array) {
      elements = [];
      try {
        for (_i = 0, _len = els.length; _i < _len; _i++) {
          el = els[_i];
          elements.push(this.getElement(el, name));
        }
      } catch (_error) {
        e = _error;
        elements = null;
      }
    } else if (typeof els === "string") {
      elements = [];
      _ref = document.querySelectorAll(els);
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        el = _ref[_j];
        elements.push(el);
      }
    } else if (els.nodeType != null) {
      elements = [els];
    }
    if (!((elements != null) && elements.length)) {
      throw new Error("Invalid `" + name + "` option provided. Please provide a CSS selector, a plain HTML element or a list of those.");
    }
    return elements;
  };
  Dropzone.confirm = function(question, accepted, rejected) {
    if (window.confirm(question)) {
      return accepted();
    } else if (rejected != null) {
      return rejected();
    }
  };
  Dropzone.isValidFile = function(file, acceptedFiles) {
    var baseMimeType, mimeType, validType, _i, _len;
    if (!acceptedFiles) {
      return true;
    }
    acceptedFiles = acceptedFiles.split(",");
    mimeType = file.type;
    baseMimeType = mimeType.replace(/\/.*$/, "");
    for (_i = 0, _len = acceptedFiles.length; _i < _len; _i++) {
      validType = acceptedFiles[_i];
      validType = validType.trim();
      if (validType.charAt(0) === ".") {
        if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {
          return true;
        }
      } else if (/\/\*$/.test(validType)) {
        if (baseMimeType === validType.replace(/\/.*$/, "")) {
          return true;
        }
      } else {
        if (mimeType === validType) {
          return true;
        }
      }
    }
    return false;
  };
  if (typeof jQuery !== "undefined" && jQuery !== null) {
    jQuery.fn.dropzone = function(options) {
      return this.each(function() {
        return new Dropzone(this, options);
      });
    };
  }
  if (typeof module !== "undefined" && module !== null) {
    module.exports = Dropzone;
  } else {
    window.Dropzone = Dropzone;
  }
  Dropzone.ADDED = "added";
  Dropzone.QUEUED = "queued";
  Dropzone.ACCEPTED = Dropzone.QUEUED;
  Dropzone.UPLOADING = "uploading";
  Dropzone.PROCESSING = Dropzone.UPLOADING;
  Dropzone.CANCELED = "canceled";
  Dropzone.ERROR = "error";
  Dropzone.SUCCESS = "success";

  /*
  
  Bugfix for iOS 6 and 7
  Source: https://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios
  based on the work of https://github.com/stomita/ios-imagefile-megapixel
   */
  detectVerticalSquash = function(img) {
    var alpha, canvas, ctx, data, ey, ih, iw, py, ratio, sy;
    iw = img.naturalWidth;
    ih = img.naturalHeight;
    canvas = document.createElement("canvas");
    canvas.width = 1;
    canvas.height = ih;
    ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);
    data = ctx.getImageData(0, 0, 1, ih).data;
    sy = 0;
    ey = ih;
    py = ih;
    while (py > sy) {
      alpha = data[(py - 1) * 4 + 3];
      if (alpha === 0) {
        ey = py;
      } else {
        sy = py;
      }
      py = (ey + sy) >> 1;
    }
    ratio = py / ih;
    if (ratio === 0) {
      return 1;
    } else {
      return ratio;
    }
  };
  drawImageIOSFix = function(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {
    var vertSquashRatio;
    vertSquashRatio = detectVerticalSquash(img);
    return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);
  };

  /*
   * contentloaded.js
   *
   * Author: Diego Perini (diego.perini at gmail.com)
   * Summary: cross-browser wrapper for DOMContentLoaded
   * Updated: 20101020
   * License: MIT
   * Version: 1.2
   *
   * URL:
   * https://javascript.nwbox.com/ContentLoaded/
   * https://javascript.nwbox.com/ContentLoaded/MIT-LICENSE
   */
  contentLoaded = function(win, fn) {
    var add, doc, done, init, poll, pre, rem, root, top;
    done = false;
    top = true;
    doc = win.document;
    root = doc.documentElement;
    add = (doc.addEventListener ? "addEventListener" : "attachEvent");
    rem = (doc.addEventListener ? "removeEventListener" : "detachEvent");
    pre = (doc.addEventListener ? "" : "on");
    init = function(e) {
      if (e.type === "readystatechange" && doc.readyState !== "complete") {
        return;
      }
      (e.type === "load" ? win : doc)[rem](pre + e.type, init, false);
      if (!done && (done = true)) {
        return fn.call(win, e.type || e);
      }
    };
    poll = function() {
      var e;
      try {
        root.doScroll("left");
      } catch (_error) {
        e = _error;
        setTimeout(poll, 50);
        return;
      }
      return init("poll");
    };
    if (doc.readyState !== "complete") {
      if (doc.createEventObject && root.doScroll) {
        try {
          top = !win.frameElement;
        } catch (_error) {}
        if (top) {
          poll();
        }
      }
      doc[add](pre + "DOMContentLoaded", init, false);
      doc[add](pre + "readystatechange", init, false);
      return win[add](pre + "load", init, false);
    }
  };
  Dropzone._autoDiscoverFunction = function() {
    if (Dropzone.autoDiscover) {
      return Dropzone.discover();
    }
  };
  contentLoaded(window, Dropzone._autoDiscoverFunction);
}).call(this);

(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
var zlib = require("zlib");
var Buffer = require('buffer').Buffer;
module.exports = zlib
// module.exports = zlib
window.zlib = zlib
// window.Buffer = Buffer
},{"buffer":12,"zlib":11}],2:[function(require,module,exports){
/**
 * Array#filter.
 *
 * @param {Array} arr
 * @param {Function} fn
 * @param {Object=} self
 * @return {Array}
 * @throw TypeError
 */
module.exports = function (arr, fn, self) {
  if (arr.filter) return arr.filter(fn, self);
  if (void 0 === arr || null === arr) throw new TypeError;
  if ('function' != typeof fn) throw new TypeError;
  var ret = [];
  for (var i = 0; i < arr.length; i++) {
    if (!hasOwn.call(arr, i)) continue;
    var val = arr[i];
    if (fn.call(self, val, i, arr)) ret.push(val);
  }
  return ret;
};
var hasOwn = Object.prototype.hasOwnProperty;
},{}],3:[function(require,module,exports){
(function (global){(function (){
'use strict';
var objectAssign = require('object-assign');
// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }
  var x = a.length;
  var y = b.length;
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }
  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}
// based on node assert, original notice:
// NB: The URL to the CommonJS spec is kept just for tradition.
//     node-assert has evolved a lot since then, both in API and behavior.
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
var util = require('util/');
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.
var assert = module.exports = ok;
// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })
var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;
      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }
      this.stack = out;
    }
  }
};
// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);
function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}
// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.
// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.
function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}
// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;
// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.
function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;
// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);
assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};
// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);
assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};
// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);
assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};
assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};
function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;
  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();
  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;
  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;
  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;
  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};
    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }
    memos.actual.push(actual);
    memos.expected.push(expected);
    return objEquiv(actual, expected, strict, memos);
  }
}
function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}
function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}
// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);
assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};
assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);
assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};
// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};
function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }
  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }
  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }
  if (Error.isPrototypeOf(expected)) {
    return false;
  }
  return expected.call({}, actual) === true;
}
function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}
function _throws(shouldThrow, block, expected, message) {
  var actual;
  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }
  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }
  actual = _tryBlock(block);
  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');
  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }
  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;
  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }
  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}
// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);
assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};
// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};
assert.ifError = function(err) { if (err) throw err; };
// Expose a strict only variant of assert
function strict(value, message) {
  if (!value) fail(value, true, message, '==', strict);
}
assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};
}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"object-assign":29,"util/":6}],4:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}
},{}],5:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],6:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }
  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};

// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }
  if (process.noDeprecation === true) {
    return fn;
  }
  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }
  return deprecated;
};

var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;

// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};
// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};

function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];
  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}

function stylizeNoColor(str, styleType) {
  return str;
}

function arrayToHash(array) {
  var hash = {};
  array.forEach(function(val, idx) {
    hash[val] = true;
  });
  return hash;
}

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }
  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }
  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);
  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }
  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }
  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }
  var base = '', array = false, braces = ['{', '}'];
  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }
  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }
  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }
  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }
  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }
  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }
  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }
  ctx.seen.push(value);
  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }
  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}

function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }
  return name + ': ' + str;
}

function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);
  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }
  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;
function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;
function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;
function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;
function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;
function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;
function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;
function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;
function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;
function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;
exports.isBuffer = require('./support/isBuffer');
function objectToString(o) {
  return Object.prototype.toString.call(o);
}

function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];
// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}

// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};

/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');
exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;
  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":5,"_process":41,"inherits":4}],7:[function(require,module,exports){
(function (global){(function (){
'use strict';
var filter = require('array-filter');
module.exports = function availableTypedArrays() {
	return filter([
		'BigInt64Array',
		'BigUint64Array',
		'Float32Array',
		'Float64Array',
		'Int16Array',
		'Int32Array',
		'Int8Array',
		'Uint16Array',
		'Uint32Array',
		'Uint8Array',
		'Uint8ClampedArray'
	], function (typedArray) {
		return typeof global[typedArray] === 'function';
	});
};
}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"array-filter":2}],8:[function(require,module,exports){
'use strict'
exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray
var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63
function getLens (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }
  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len
  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)
  return [validLen, placeHoldersLen]
}
// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}
function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}
function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))
  var curByte = 0
  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen
  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }
  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }
  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }
  return arr
}
function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}
function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}
function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }
  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }
  return parts.join('')
}
},{}],9:[function(require,module,exports){
},{}],10:[function(require,module,exports){
(function (process,Buffer){(function (){
'use strict';
/* eslint camelcase: "off" */
var assert = require('assert');
var Zstream = require('pako/lib/zlib/zstream');
var zlib_deflate = require('pako/lib/zlib/deflate.js');
var zlib_inflate = require('pako/lib/zlib/inflate.js');
var constants = require('pako/lib/zlib/constants');
for (var key in constants) {
  exports[key] = constants[key];
}
// zlib modes
exports.NONE = 0;
exports.DEFLATE = 1;
exports.INFLATE = 2;
exports.GZIP = 3;
exports.GUNZIP = 4;
exports.DEFLATERAW = 5;
exports.INFLATERAW = 6;
exports.UNZIP = 7;
var GZIP_HEADER_ID1 = 0x1f;
var GZIP_HEADER_ID2 = 0x8b;
/**
 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
 */
function Zlib(mode) {
  if (typeof mode !== 'number' || mode < exports.DEFLATE || mode > exports.UNZIP) {
    throw new TypeError('Bad argument');
  }
  this.dictionary = null;
  this.err = 0;
  this.flush = 0;
  this.init_done = false;
  this.level = 0;
  this.memLevel = 0;
  this.mode = mode;
  this.strategy = 0;
  this.windowBits = 0;
  this.write_in_progress = false;
  this.pending_close = false;
  this.gzip_id_bytes_read = 0;
}
Zlib.prototype.close = function () {
  if (this.write_in_progress) {
    this.pending_close = true;
    return;
  }
  this.pending_close = false;
  assert(this.init_done, 'close before init');
  assert(this.mode <= exports.UNZIP);
  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
    zlib_deflate.deflateEnd(this.strm);
  } else if (this.mode === exports.INFLATE || this.mode === exports.GUNZIP || this.mode === exports.INFLATERAW || this.mode === exports.UNZIP) {
    zlib_inflate.inflateEnd(this.strm);
  }
  this.mode = exports.NONE;
  this.dictionary = null;
};
Zlib.prototype.write = function (flush, input, in_off, in_len, out, out_off, out_len) {
  return this._write(true, flush, input, in_off, in_len, out, out_off, out_len);
};
Zlib.prototype.writeSync = function (flush, input, in_off, in_len, out, out_off, out_len) {
  return this._write(false, flush, input, in_off, in_len, out, out_off, out_len);
};
Zlib.prototype._write = function (async, flush, input, in_off, in_len, out, out_off, out_len) {
  assert.equal(arguments.length, 8);
  assert(this.init_done, 'write before init');
  assert(this.mode !== exports.NONE, 'already finalized');
  assert.equal(false, this.write_in_progress, 'write already in progress');
  assert.equal(false, this.pending_close, 'close is pending');
  this.write_in_progress = true;
  assert.equal(false, flush === undefined, 'must provide flush value');
  this.write_in_progress = true;
  if (flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) {
    throw new Error('Invalid flush value');
  }
  if (input == null) {
    input = Buffer.alloc(0);
    in_len = 0;
    in_off = 0;
  }
  this.strm.avail_in = in_len;
  this.strm.input = input;
  this.strm.next_in = in_off;
  this.strm.avail_out = out_len;
  this.strm.output = out;
  this.strm.next_out = out_off;
  this.flush = flush;
  if (!async) {
    // sync version
    this._process();
    if (this._checkError()) {
      return this._afterSync();
    }
    return;
  }
  // async version
  var self = this;
  process.nextTick(function () {
    self._process();
    self._after();
  });
  return this;
};
Zlib.prototype._afterSync = function () {
  var avail_out = this.strm.avail_out;
  var avail_in = this.strm.avail_in;
  this.write_in_progress = false;
  return [avail_in, avail_out];
};
Zlib.prototype._process = function () {
  var next_expected_header_byte = null;
  // If the avail_out is left at 0, then it means that it ran out
  // of room.  If there was avail_out left over, then it means
  // that all of the input was consumed.
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflate(this.strm, this.flush);
      break;
    case exports.UNZIP:
      if (this.strm.avail_in > 0) {
        next_expected_header_byte = this.strm.next_in;
      }
      switch (this.gzip_id_bytes_read) {
        case 0:
          if (next_expected_header_byte === null) {
            break;
          }
          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID1) {
            this.gzip_id_bytes_read = 1;
            next_expected_header_byte++;
            if (this.strm.avail_in === 1) {
              // The only available byte was already read.
              break;
            }
          } else {
            this.mode = exports.INFLATE;
            break;
          }
        // fallthrough
        case 1:
          if (next_expected_header_byte === null) {
            break;
          }
          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID2) {
            this.gzip_id_bytes_read = 2;
            this.mode = exports.GUNZIP;
          } else {
            // There is no actual difference between INFLATE and INFLATERAW
            // (after initialization).
            this.mode = exports.INFLATE;
          }
          break;
        default:
          throw new Error('invalid number of gzip magic number bytes read');
      }
    // fallthrough
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
      this.err = zlib_inflate.inflate(this.strm, this.flush
      // If data was encoded with dictionary
      );if (this.err === exports.Z_NEED_DICT && this.dictionary) {
        // Load it
        this.err = zlib_inflate.inflateSetDictionary(this.strm, this.dictionary);
        if (this.err === exports.Z_OK) {
          // And try to decode again
          this.err = zlib_inflate.inflate(this.strm, this.flush);
        } else if (this.err === exports.Z_DATA_ERROR) {
          // Both inflateSetDictionary() and inflate() return Z_DATA_ERROR.
          // Make it possible for After() to tell a bad dictionary from bad
          // input.
          this.err = exports.Z_NEED_DICT;
        }
      }
      while (this.strm.avail_in > 0 && this.mode === exports.GUNZIP && this.err === exports.Z_STREAM_END && this.strm.next_in[0] !== 0x00) {
        // Bytes remain in input buffer. Perhaps this is another compressed
        // member in the same archive, or just trailing garbage.
        // Trailing zero bytes are okay, though, since they are frequently
        // used for padding.
        this.reset();
        this.err = zlib_inflate.inflate(this.strm, this.flush);
      }
      break;
    default:
      throw new Error('Unknown mode ' + this.mode);
  }
};
Zlib.prototype._checkError = function () {
  // Acceptable error states depend on the type of zlib stream.
  switch (this.err) {
    case exports.Z_OK:
    case exports.Z_BUF_ERROR:
      if (this.strm.avail_out !== 0 && this.flush === exports.Z_FINISH) {
        this._error('unexpected end of file');
        return false;
      }
      break;
    case exports.Z_STREAM_END:
      // normal statuses, not fatal
      break;
    case exports.Z_NEED_DICT:
      if (this.dictionary == null) {
        this._error('Missing dictionary');
      } else {
        this._error('Bad dictionary');
      }
      return false;
    default:
      // something else.
      this._error('Zlib error');
      return false;
  }
  return true;
};
Zlib.prototype._after = function () {
  if (!this._checkError()) {
    return;
  }
  var avail_out = this.strm.avail_out;
  var avail_in = this.strm.avail_in;
  this.write_in_progress = false;
  // call the write() cb
  this.callback(avail_in, avail_out);
  if (this.pending_close) {
    this.close();
  }
};
Zlib.prototype._error = function (message) {
  if (this.strm.msg) {
    message = this.strm.msg;
  }
  this.onerror(message, this.err
  // no hope of rescue.
  );this.write_in_progress = false;
  if (this.pending_close) {
    this.close();
  }
};
Zlib.prototype.init = function (windowBits, level, memLevel, strategy, dictionary) {
  assert(arguments.length === 4 || arguments.length === 5, 'init(windowBits, level, memLevel, strategy, [dictionary])');
  assert(windowBits >= 8 && windowBits <= 15, 'invalid windowBits');
  assert(level >= -1 && level <= 9, 'invalid compression level');
  assert(memLevel >= 1 && memLevel <= 9, 'invalid memlevel');
  assert(strategy === exports.Z_FILTERED || strategy === exports.Z_HUFFMAN_ONLY || strategy === exports.Z_RLE || strategy === exports.Z_FIXED || strategy === exports.Z_DEFAULT_STRATEGY, 'invalid strategy');
  this._init(level, windowBits, memLevel, strategy, dictionary);
  this._setDictionary();
};
Zlib.prototype.params = function () {
  throw new Error('deflateParams Not supported');
};
Zlib.prototype.reset = function () {
  this._reset();
  this._setDictionary();
};
Zlib.prototype._init = function (level, windowBits, memLevel, strategy, dictionary) {
  this.level = level;
  this.windowBits = windowBits;
  this.memLevel = memLevel;
  this.strategy = strategy;
  this.flush = exports.Z_NO_FLUSH;
  this.err = exports.Z_OK;
  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP) {
    this.windowBits += 16;
  }
  if (this.mode === exports.UNZIP) {
    this.windowBits += 32;
  }
  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) {
    this.windowBits = -1 * this.windowBits;
  }
  this.strm = new Zstream();
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
      break;
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
    case exports.UNZIP:
      this.err = zlib_inflate.inflateInit2(this.strm, this.windowBits);
      break;
    default:
      throw new Error('Unknown mode ' + this.mode);
  }
  if (this.err !== exports.Z_OK) {
    this._error('Init error');
  }
  this.dictionary = dictionary;
  this.write_in_progress = false;
  this.init_done = true;
};
Zlib.prototype._setDictionary = function () {
  if (this.dictionary == null) {
    return;
  }
  this.err = exports.Z_OK;
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflateSetDictionary(this.strm, this.dictionary);
      break;
    default:
      break;
  }
  if (this.err !== exports.Z_OK) {
    this._error('Failed to set dictionary');
  }
};
Zlib.prototype._reset = function () {
  this.err = exports.Z_OK;
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
    case exports.GZIP:
      this.err = zlib_deflate.deflateReset(this.strm);
      break;
    case exports.INFLATE:
    case exports.INFLATERAW:
    case exports.GUNZIP:
      this.err = zlib_inflate.inflateReset(this.strm);
      break;
    default:
      break;
  }
  if (this.err !== exports.Z_OK) {
    this._error('Failed to reset stream');
  }
};
exports.Zlib = Zlib;
}).call(this)}).call(this,require('_process'),require("buffer").Buffer)
},{"_process":41,"assert":3,"buffer":12,"pako/lib/zlib/constants":32,"pako/lib/zlib/deflate.js":34,"pako/lib/zlib/inflate.js":36,"pako/lib/zlib/zstream":40}],11:[function(require,module,exports){
(function (process){(function (){
'use strict';
var Buffer = require('buffer').Buffer;
var Transform = require('stream').Transform;
var binding = require('./binding');
var util = require('util');
var assert = require('assert').ok;
var kMaxLength = require('buffer').kMaxLength;
var kRangeErrorMessage = 'Cannot create final Buffer. It would be larger ' + 'than 0x' + kMaxLength.toString(16) + ' bytes';
// zlib doesn't provide these, so kludge them in following the same
// const naming scheme zlib uses.
binding.Z_MIN_WINDOWBITS = 8;
binding.Z_MAX_WINDOWBITS = 15;
binding.Z_DEFAULT_WINDOWBITS = 15;
// fewer than 64 bytes per chunk is stupid.
// technically it could work with as few as 8, but even 64 bytes
// is absurdly low.  Usually a MB or more is best.
binding.Z_MIN_CHUNK = 64;
binding.Z_MAX_CHUNK = Infinity;
binding.Z_DEFAULT_CHUNK = 16 * 1024;
binding.Z_MIN_MEMLEVEL = 1;
binding.Z_MAX_MEMLEVEL = 9;
binding.Z_DEFAULT_MEMLEVEL = 8;
binding.Z_MIN_LEVEL = -1;
binding.Z_MAX_LEVEL = 9;
binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;
// expose all the zlib constants
var bkeys = Object.keys(binding);
for (var bk = 0; bk < bkeys.length; bk++) {
  var bkey = bkeys[bk];
  if (bkey.match(/^Z/)) {
    Object.defineProperty(exports, bkey, {
      enumerable: true, value: binding[bkey], writable: false
    });
  }
}
// translation table for return codes.
var codes = {
  Z_OK: binding.Z_OK,
  Z_STREAM_END: binding.Z_STREAM_END,
  Z_NEED_DICT: binding.Z_NEED_DICT,
  Z_ERRNO: binding.Z_ERRNO,
  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
  Z_DATA_ERROR: binding.Z_DATA_ERROR,
  Z_MEM_ERROR: binding.Z_MEM_ERROR,
  Z_BUF_ERROR: binding.Z_BUF_ERROR,
  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
};
var ckeys = Object.keys(codes);
for (var ck = 0; ck < ckeys.length; ck++) {
  var ckey = ckeys[ck];
  codes[codes[ckey]] = ckey;
}
Object.defineProperty(exports, 'codes', {
  enumerable: true, value: Object.freeze(codes), writable: false
});
exports.Deflate = Deflate;
exports.Inflate = Inflate;
exports.Gzip = Gzip;
exports.Gunzip = Gunzip;
exports.DeflateRaw = DeflateRaw;
exports.InflateRaw = InflateRaw;
exports.Unzip = Unzip;
exports.createDeflate = function (o) {
  return new Deflate(o);
};
exports.createInflate = function (o) {
  return new Inflate(o);
};
exports.createDeflateRaw = function (o) {
  return new DeflateRaw(o);
};
exports.createInflateRaw = function (o) {
  return new InflateRaw(o);
};
exports.createGzip = function (o) {
  return new Gzip(o);
};
exports.createGunzip = function (o) {
  return new Gunzip(o);
};
exports.createUnzip = function (o) {
  return new Unzip(o);
};
// Convenience methods.
// compress/decompress a string or buffer in one step.
exports.deflate = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Deflate(opts), buffer, callback);
};
exports.deflateSync = function (buffer, opts) {
  return zlibBufferSync(new Deflate(opts), buffer);
};
exports.gzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gzip(opts), buffer, callback);
};
exports.gzipSync = function (buffer, opts) {
  return zlibBufferSync(new Gzip(opts), buffer);
};
exports.deflateRaw = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
};
exports.deflateRawSync = function (buffer, opts) {
  return zlibBufferSync(new DeflateRaw(opts), buffer);
};
exports.unzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Unzip(opts), buffer, callback);
};
exports.unzipSync = function (buffer, opts) {
  return zlibBufferSync(new Unzip(opts), buffer);
};
exports.inflate = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Inflate(opts), buffer, callback);
};
exports.inflateSync = function (buffer, opts) {
  return zlibBufferSync(new Inflate(opts), buffer);
};
exports.gunzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gunzip(opts), buffer, callback);
};
exports.gunzipSync = function (buffer, opts) {
  return zlibBufferSync(new Gunzip(opts), buffer);
};
exports.inflateRaw = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new InflateRaw(opts), buffer, callback);
};
exports.inflateRawSync = function (buffer, opts) {
  return zlibBufferSync(new InflateRaw(opts), buffer);
};
function zlibBuffer(engine, buffer, callback) {
  var buffers = [];
  var nread = 0;
  engine.on('error', onError);
  engine.on('end', onEnd);
  engine.end(buffer);
  flow();
  function flow() {
    var chunk;
    while (null !== (chunk = engine.read())) {
      buffers.push(chunk);
      nread += chunk.length;
    }
    engine.once('readable', flow);
  }
  function onError(err) {
    engine.removeListener('end', onEnd);
    engine.removeListener('readable', flow);
    console.log(err);
    console.log(callback);
    callback(err);
  }
  function onEnd() {
    var buf;
    var err = null;
    if (nread >= kMaxLength) {
      err = new RangeError(kRangeErrorMessage);
    } else {
      buf = Buffer.concat(buffers, nread);
    }
    buffers = [];
    engine.close();
    callback(err, buf);
  }
}
function zlibBufferSync(engine, buffer) {
  if (typeof buffer === 'string') buffer = Buffer.from(buffer);
  if (!Buffer.isBuffer(buffer)) throw new TypeError('Not a string or buffer');
  var flushFlag = engine._finishFlushFlag;
  return engine._processChunk(buffer, flushFlag);
}
// generic zlib
// minimal 2-byte header
function Deflate(opts) {
  if (!(this instanceof Deflate)) return new Deflate(opts);
  Zlib.call(this, opts, binding.DEFLATE);
}
function Inflate(opts) {
  if (!(this instanceof Inflate)) return new Inflate(opts);
  Zlib.call(this, opts, binding.INFLATE);
}
// gzip - bigger header, same deflate compression
function Gzip(opts) {
  if (!(this instanceof Gzip)) return new Gzip(opts);
  Zlib.call(this, opts, binding.GZIP);
}
function Gunzip(opts) {
  if (!(this instanceof Gunzip)) return new Gunzip(opts);
  Zlib.call(this, opts, binding.GUNZIP);
}
// raw - no header
function DeflateRaw(opts) {
  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
  Zlib.call(this, opts, binding.DEFLATERAW);
}
function InflateRaw(opts) {
  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
  Zlib.call(this, opts, binding.INFLATERAW);
}
// auto-detect header.
function Unzip(opts) {
  if (!(this instanceof Unzip)) return new Unzip(opts);
  Zlib.call(this, opts, binding.UNZIP);
}
function isValidFlushFlag(flag) {
  return flag === binding.Z_NO_FLUSH || flag === binding.Z_PARTIAL_FLUSH || flag === binding.Z_SYNC_FLUSH || flag === binding.Z_FULL_FLUSH || flag === binding.Z_FINISH || flag === binding.Z_BLOCK;
}
// the Zlib class they all inherit from
// This thing manages the queue of requests, and returns
// true or false if there is anything in the queue when
// you call the .write() method.
function Zlib(opts, mode) {
  var _this = this;
  this._opts = opts = opts || {};
  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;
  Transform.call(this, opts);
  if (opts.flush && !isValidFlushFlag(opts.flush)) {
    throw new Error('Invalid flush flag: ' + opts.flush);
  }
  if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) {
    throw new Error('Invalid flush flag: ' + opts.finishFlush);
  }
  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;
  this._finishFlushFlag = typeof opts.finishFlush !== 'undefined' ? opts.finishFlush : binding.Z_FINISH;
  if (opts.chunkSize) {
    if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) {
      throw new Error('Invalid chunk size: ' + opts.chunkSize);
    }
  }
  if (opts.windowBits) {
    if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) {
      throw new Error('Invalid windowBits: ' + opts.windowBits);
    }
  }
  if (opts.level) {
    if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) {
      throw new Error('Invalid compression level: ' + opts.level);
    }
  }
  if (opts.memLevel) {
    if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) {
      throw new Error('Invalid memLevel: ' + opts.memLevel);
    }
  }
  if (opts.strategy) {
    if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) {
      throw new Error('Invalid strategy: ' + opts.strategy);
    }
  }
  if (opts.dictionary) {
    if (!Buffer.isBuffer(opts.dictionary)) {
      throw new Error('Invalid dictionary: it should be a Buffer instance');
    }
  }
  this._handle = new binding.Zlib(mode);
  var self = this;
  this._hadError = false;
  this._handle.onerror = function (message, errno) {
    // there is no way to cleanly recover.
    // continuing only obscures problems.
    _close(self);
    self._hadError = true;
    var error = new Error(message);
    error.errno = errno;
    error.code = exports.codes[errno];
    self.emit('error', error);
  };
  var level = exports.Z_DEFAULT_COMPRESSION;
  if (typeof opts.level === 'number') level = opts.level;
  var strategy = exports.Z_DEFAULT_STRATEGY;
  if (typeof opts.strategy === 'number') strategy = opts.strategy;
  this._handle.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);
  this._buffer = Buffer.allocUnsafe(this._chunkSize);
  this._offset = 0;
  this._level = level;
  this._strategy = strategy;
  this.once('end', this.close);
  Object.defineProperty(this, '_closed', {
    get: function () {
      return !_this._handle;
    },
    configurable: true,
    enumerable: true
  });
}
util.inherits(Zlib, Transform);
Zlib.prototype.params = function (level, strategy, callback) {
  if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) {
    throw new RangeError('Invalid compression level: ' + level);
  }
  if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) {
    throw new TypeError('Invalid strategy: ' + strategy);
  }
  if (this._level !== level || this._strategy !== strategy) {
    var self = this;
    this.flush(binding.Z_SYNC_FLUSH, function () {
      assert(self._handle, 'zlib binding closed');
      self._handle.params(level, strategy);
      if (!self._hadError) {
        self._level = level;
        self._strategy = strategy;
        if (callback) callback();
      }
    });
  } else {
    process.nextTick(callback);
  }
};
Zlib.prototype.reset = function () {
  assert(this._handle, 'zlib binding closed');
  return this._handle.reset();
};
// This is the _flush function called by the transform class,
// internally, when the last chunk has been written.
Zlib.prototype._flush = function (callback) {
  this._transform(Buffer.alloc(0), '', callback);
};
Zlib.prototype.flush = function (kind, callback) {
  var _this2 = this;
  var ws = this._writableState;
  if (typeof kind === 'function' || kind === undefined && !callback) {
    callback = kind;
    kind = binding.Z_FULL_FLUSH;
  }
  if (ws.ended) {
    if (callback) process.nextTick(callback);
  } else if (ws.ending) {
    if (callback) this.once('end', callback);
  } else if (ws.needDrain) {
    if (callback) {
      this.once('drain', function () {
        return _this2.flush(kind, callback);
      });
    }
  } else {
    this._flushFlag = kind;
    this.write(Buffer.alloc(0), '', callback);
  }
};
Zlib.prototype.close = function (callback) {
  _close(this, callback);
  process.nextTick(emitCloseNT, this);
};
function _close(engine, callback) {
  if (callback) process.nextTick(callback);
  // Caller may invoke .close after a zlib error (which will null _handle).
  if (!engine._handle) return;
  engine._handle.close();
  engine._handle = null;
}
function emitCloseNT(self) {
  self.emit('close');
}
Zlib.prototype._transform = function (chunk, encoding, cb) {
  var flushFlag;
  var ws = this._writableState;
  var ending = ws.ending || ws.ended;
  var last = ending && (!chunk || ws.length === chunk.length);
  if (chunk !== null && !Buffer.isBuffer(chunk)) return cb(new Error('invalid input'));
  if (!this._handle) return cb(new Error('zlib binding closed'));
  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag
  // (or whatever flag was provided using opts.finishFlush).
  // If it's explicitly flushing at some other time, then we use
  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
  // goodness.
  if (last) flushFlag = this._finishFlushFlag;else {
    flushFlag = this._flushFlag;
    // once we've flushed the last of the queue, stop flushing and
    // go back to the normal behavior.
    if (chunk.length >= ws.length) {
      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
    }
  }
  this._processChunk(chunk, flushFlag, cb);
};
Zlib.prototype._processChunk = function (chunk, flushFlag, cb) {
  var availInBefore = chunk && chunk.length;
  var availOutBefore = this._chunkSize - this._offset;
  var inOff = 0;
  var self = this;
  var async = typeof cb === 'function';
  if (!async) {
    var buffers = [];
    var nread = 0;
    var error;
    this.on('error', function (er) {
      error = er;
    });
    assert(this._handle, 'zlib binding closed');
    do {
      var res = this._handle.writeSync(flushFlag, chunk, // in
      inOff, // in_off
      availInBefore, // in_len
      this._buffer, // out
      this._offset, //out_off
      availOutBefore); // out_len
    } while (!this._hadError && callback(res[0], res[1]));
    if (this._hadError) {
      throw error;
    }
    if (nread >= kMaxLength) {
      _close(this);
      throw new RangeError(kRangeErrorMessage);
    }
    var buf = Buffer.concat(buffers, nread);
    _close(this);
    return buf;
  }
  assert(this._handle, 'zlib binding closed');
  var req = this._handle.write(flushFlag, chunk, // in
  inOff, // in_off
  availInBefore, // in_len
  this._buffer, // out
  this._offset, //out_off
  availOutBefore); // out_len
  req.buffer = chunk;
  req.callback = callback;
  function callback(availInAfter, availOutAfter) {
    // When the callback is used in an async write, the callback's
    // context is the `req` object that was created. The req object
    // is === this._handle, and that's why it's important to null
    // out the values after they are done being used. `this._handle`
    // can stay in memory longer than the callback and buffer are needed.
    if (this) {
      this.buffer = null;
      this.callback = null;
    }
    if (self._hadError) return;
    var have = availOutBefore - availOutAfter;
    assert(have >= 0, 'have should not go down');
    if (have > 0) {
      var out = self._buffer.slice(self._offset, self._offset + have);
      self._offset += have;
      // serve some output to the consumer.
      if (async) {
        self.push(out);
      } else {
        buffers.push(out);
        nread += out.length;
      }
    }
    // exhausted the output buffer, or used all the input create a new one.
    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
      availOutBefore = self._chunkSize;
      self._offset = 0;
      self._buffer = Buffer.allocUnsafe(self._chunkSize);
    }
    if (availOutAfter === 0) {
      // Not actually done.  Need to reprocess.
      // Also, update the availInBefore to the availInAfter value,
      // so that if we have to hit it a third (fourth, etc.) time,
      // it'll have the correct byte counts.
      inOff += availInBefore - availInAfter;
      availInBefore = availInAfter;
      if (!async) return true;
      var newReq = self._handle.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);
      newReq.callback = callback; // this same function
      newReq.buffer = chunk;
      return;
    }
    if (!async) return false;
    // finished with the chunk.
    cb();
  }
};
util.inherits(Deflate, Zlib);
util.inherits(Inflate, Zlib);
util.inherits(Gzip, Zlib);
util.inherits(Gunzip, Zlib);
util.inherits(DeflateRaw, Zlib);
util.inherits(InflateRaw, Zlib);
util.inherits(Unzip, Zlib);
}).call(this)}).call(this,require('_process'))
},{"./binding":10,"_process":41,"assert":3,"buffer":12,"stream":43,"util":62}],12:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */
'use strict'
var base64 = require('base64-js')
var ieee754 = require('ieee754')
exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}
function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}
Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})
Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})
function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */
function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}
// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}
Buffer.poolSize = 8192 // not used by this implementation
function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }
  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }
  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }
  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }
  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }
  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }
  var b = fromObject(value)
  if (b) return b
  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }
  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array
function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}
function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}
function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}
function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }
  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }
  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)
  var actual = buf.write(string, encoding)
  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }
  return buf
}
function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}
function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }
  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }
  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }
  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}
function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)
    if (buf.length === 0) {
      return buf
    }
    obj.copy(buf, 0, 0, len)
    return buf
  }
  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }
  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}
function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}
function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}
Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}
Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }
  if (a === b) return 0
  var x = a.length
  var y = b.length
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }
  if (x < y) return -1
  if (y < x) return 1
  return 0
}
Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}
Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }
  if (list.length === 0) {
    return Buffer.alloc(0)
  }
  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }
  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}
function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }
  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0
  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength
function slowToString (encoding, start, end) {
  var loweredCase = false
  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }
  if (end === undefined || end > this.length) {
    end = this.length
  }
  if (end <= 0) {
    return ''
  }
  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0
  if (end <= start) {
    return ''
  }
  if (!encoding) encoding = 'utf8'
  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)
      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)
      case 'ascii':
        return asciiSlice(this, start, end)
      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)
      case 'base64':
        return base64Slice(this, start, end)
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)
      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true
function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}
Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}
Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}
Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}
Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}
Buffer.prototype.toLocaleString = Buffer.prototype.toString
Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}
Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }
  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }
  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }
  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }
  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0
  if (this === target) return 0
  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)
  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)
  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }
  if (x < y) return -1
  if (y < x) return 1
  return 0
}
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1
  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }
  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }
  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }
  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }
  throw new TypeError('val must be string, number or Buffer')
}
function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length
  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }
  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }
  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }
  return -1
}
Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}
Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}
Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}
function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  var strLen = string.length
  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}
function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}
function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}
function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}
function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}
function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}
Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }
  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining
  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }
  if (!encoding) encoding = 'utf8'
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)
      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)
      case 'ascii':
        return asciiWrite(this, string, offset, length)
      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)
      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)
      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}
function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}
function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []
  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1
    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint
      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }
    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }
    res.push(codePoint)
    i += bytesPerSequence
  }
  return decodeCodePointsArray(res)
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000
function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }
  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}
function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}
function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}
function hexSlice (buf, start, end) {
  var len = buf.length
  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len
  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}
function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}
Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end
  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }
  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }
  if (end < start) end = start
  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)
  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  return val
}
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }
  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }
  return val
}
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}
Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)
  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80
  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
  return val
}
Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)
  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80
  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
  return val
}
Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}
Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}
Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}
Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}
Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}
Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}
Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}
Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}
Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}
function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }
  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }
  return offset + byteLength
}
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }
  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }
  return offset + byteLength
}
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}
Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)
    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }
  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }
  return offset + byteLength
}
Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)
    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }
  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }
  return offset + byteLength
}
Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}
Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}
Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}
Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}
Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}
function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}
function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}
Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}
Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}
function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}
Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start
  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0
  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')
  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }
  var len = end - start
  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }
  return len
}
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }
  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }
  if (end <= start) {
    return this
  }
  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0
  if (!val) val = 0
  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }
  return this
}
// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g
function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}
function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}
function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []
  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)
    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }
        // valid lead
        leadSurrogate = codePoint
        continue
      }
      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }
      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }
    leadSurrogate = null
    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }
  return bytes
}
function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}
function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }
  return byteArray
}
function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}
function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}
}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":8,"buffer":12,"ieee754":24}],13:[function(require,module,exports){
'use strict';
var GetIntrinsic = require('get-intrinsic');
var callBind = require('./');
var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));
module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};
},{"./":14,"get-intrinsic":20}],14:[function(require,module,exports){
'use strict';
var bind = require('function-bind');
var GetIntrinsic = require('get-intrinsic');
var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);
var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');
if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}
module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};
var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};
if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}
},{"function-bind":19,"get-intrinsic":20}],15:[function(require,module,exports){
'use strict';
var GetIntrinsic = require('get-intrinsic');
var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%');
if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}
module.exports = $gOPD;
},{"get-intrinsic":20}],16:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }
var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}
function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}
function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});
EventEmitter.init = function() {
  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }
  this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};
function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');
  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;
  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }
  var handler = events[type];
  if (handler === undefined)
    return false;
  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }
  return true;
};
function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);
      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }
  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }
    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }
  return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}
function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === undefined)
        return this;
      list = events[type];
      if (list === undefined)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;
        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events[type] = list[0];
        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }
      return this;
    };
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;
      events = this._events;
      if (events === undefined)
        return this;
      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }
      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events[type];
      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }
      return this;
    };
function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined)
    return [];
  var evlistener = events[type];
  if (evlistener === undefined)
    return [];
  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;
  if (events !== undefined) {
    var evlistener = events[type];
    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }
  return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}
function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}
function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}
function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }
    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };
    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}
},{}],17:[function(require,module,exports){
var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;
module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};

},{}],18:[function(require,module,exports){
'use strict';
/* eslint no-invalid-this: 1 */
var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';
module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);
    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };
    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }
    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);
    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }
    return bound;
};
},{}],19:[function(require,module,exports){
'use strict';
var implementation = require('./implementation');
module.exports = Function.prototype.bind || implementation;
},{"./implementation":18}],20:[function(require,module,exports){
'use strict';
var undefined;
var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;
// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};
var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}
var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;
var hasSymbols = require('has-symbols')();
var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto
var needsEval = {};
var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);
var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};
var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}
	INTRINSICS[name] = value;
	return value;
};
var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};
var bind = require('function-bind');
var hasOwn = require('has');
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */
var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}
	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}
		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}
	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};
module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;
	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}
	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}
		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';
		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;
				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}
			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};
},{"function-bind":19,"has":23,"has-symbols":21}],21:[function(require,module,exports){
'use strict';
var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = require('./shams');
module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }
	return hasSymbolSham();
};
},{"./shams":22}],22:[function(require,module,exports){
'use strict';
/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }
	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }
	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }
	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }
	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }
	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }
	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }
	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }
	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}
	return true;
};
},{}],23:[function(require,module,exports){
'use strict';
var bind = require('function-bind');
module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
},{"function-bind":19}],24:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]
  i += d
  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}
  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}
  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}
exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
  value = Math.abs(value)
  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }
    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }
  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
  buffer[offset + i - d] |= s * 128
}
},{}],25:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}
},{}],26:[function(require,module,exports){
'use strict';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
var callBound = require('call-bind/callBound');
var $toString = callBound('Object.prototype.toString');
var isStandardArguments = function isArguments(value) {
	if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return $toString(value) === '[object Arguments]';
};
var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		$toString(value) !== '[object Array]' &&
		$toString(value.callee) === '[object Function]';
};
var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());
isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests
module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
},{"call-bind/callBound":13}],27:[function(require,module,exports){
'use strict';
var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var generatorFunc = getGeneratorFunc();
var GeneratorFunction = getProto && generatorFunc ? getProto(generatorFunc) : false;
module.exports = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr.call(fn))) {
		return true;
	}
	if (!hasToStringTag) {
		var str = toStr.call(fn);
		return str === '[object GeneratorFunction]';
	}
	return getProto && getProto(fn) === GeneratorFunction;
};
},{}],28:[function(require,module,exports){
(function (global){(function (){
'use strict';
var forEach = require('foreach');
var availableTypedArrays = require('available-typed-arrays');
var callBound = require('call-bind/callBound');
var $toString = callBound('Object.prototype.toString');
var hasSymbols = require('has-symbols')();
var hasToStringTag = hasSymbols && typeof Symbol.toStringTag === 'symbol';
var typedArrays = availableTypedArrays();
var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};
var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		var arr = new global[typedArray]();
		if (!(Symbol.toStringTag in arr)) {
			throw new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');
		}
		var proto = getPrototypeOf(arr);
		var descriptor = gOPD(proto, Symbol.toStringTag);
		if (!descriptor) {
			var superProto = getPrototypeOf(proto);
			descriptor = gOPD(superProto, Symbol.toStringTag);
		}
		toStrTags[typedArray] = descriptor.get;
	});
}
var tryTypedArrays = function tryAllTypedArrays(value) {
	var anyTrue = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!anyTrue) {
			try {
				anyTrue = getter.call(value) === typedArray;
			} catch (e) { /**/ }
		}
	});
	return anyTrue;
};
module.exports = function isTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag) {
		var tag = $slice($toString(value), 8, -1);
		return $indexOf(typedArrays, tag) > -1;
	}
	if (!gOPD) { return false; }
	return tryTypedArrays(value);
};
}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"available-typed-arrays":7,"call-bind/callBound":13,"es-abstract/helpers/getOwnPropertyDescriptor":15,"foreach":17,"has-symbols":21}],29:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}
	return Object(val);
}
function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}
		// Detect buggy property enumeration order in older V8 versions.
		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}
		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}
		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}
		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}
module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;
	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);
		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}
		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}
	return to;
};
},{}],30:[function(require,module,exports){
'use strict';

var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');
function _has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }
    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }
    for (var p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }
  return obj;
};

// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};

var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;
    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }
    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }
    return result;
  }
};
var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};

// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};
exports.setTyped(TYPED_OK);
},{}],31:[function(require,module,exports){
'use strict';
// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;
  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;
    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);
    s1 %= 65521;
    s2 %= 65521;
  }
  return (s1 | (s2 << 16)) |0;
}

module.exports = adler32;
},{}],32:[function(require,module,exports){
'use strict';
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
module.exports = {
  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,
  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,
  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,

  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,
  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,
  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};
},{}],33:[function(require,module,exports){
'use strict';
// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];
  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }
  return table;
}
// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();

function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;
  crc ^= -1;
  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }
  return (crc ^ (-1)); // >>> 0;
}

module.exports = crc32;
},{}],34:[function(require,module,exports){
'use strict';
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
var utils   = require('../utils/common');
var trees   = require('./trees');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var msg     = require('./messages');
/* Public constants ==========================================================*/
/* ===========================================================================*/

/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;

/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;

var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;
/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/* The deflate compression method */
var Z_DEFLATED  = 8;
/*============================================================================*/

var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */
var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);
var PRESET_DICT = 0x20;
var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;
var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */
var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.
function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}
function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}
function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;
  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }
  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}

function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}

function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}

/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}

/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;
  if (len > size) { len = size; }
  if (len === 0) { return 0; }
  strm.avail_in -= len;
  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }
  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }
  strm.next_in += len;
  strm.total_in += len;
  return len;
}

/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;
  var _win = s.window; // shortcut
  var wmask = s.w_mask;
  var prev  = s.prev;
  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */
  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];
  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }
  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;
    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */
    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }
    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");
    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);
    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;
    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}

/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;
  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
  do {
    more = s.window_size - s.lookahead - s.strstart;
    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}

    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;
      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */
      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);
      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);
      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }
    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;
    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];
      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */
  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}
/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;
  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }
  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {
      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }
      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");
    s.strstart += s.lookahead;
    s.lookahead = 0;
    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;
    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/

    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_NEED_MORE;
}
/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }
    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }
    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only
      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
      s.lookahead -= s.match_length;
      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}
/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */
  var max_insert;
  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }
    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }
    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;
    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {
        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */
      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);
      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;
      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */
  var _win = s.window;
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }
    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }
    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);
      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);
      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}
/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */
  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }
    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}
/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}
var configuration_table;
configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */
  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];

/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;
  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);
  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;
  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}

function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */
  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */
  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */
  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */
  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */
  this.head = null;   /* Heads of the hash chains or NIL. */
  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */
  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */
  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */
  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */
  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */
  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */
  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */
  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/
  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */
  this.nice_match = 0; /* Stop searching when current match exceeds this */
              /* used by trees.c: */
  /* Didn't use ct_data typedef below to suppress compiler warning */
  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */
  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);
  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */
  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */
  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);
  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */
  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */
  this.l_buf = 0;          /* buffer index for literals or lengths */
  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */
  this.last_lit = 0;      /* running index in l_buf */
  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */
  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */

  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */
  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}

function deflateResetKeep(strm) {
  var s;
  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }
  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;
  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;
  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}

function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}

function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}

function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;
  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }
  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }
  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }

  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }

  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */
  var s = new DeflateState();
  strm.state = s;
  s.strm = strm;
  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;
  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);
  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */
  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */
  s.pending_buf_size = s.lit_bufsize * 4;
  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);
  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;
  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;
  s.level = level;
  s.strategy = strategy;
  s.method = method;
  return deflateReset(strm);
}
function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}

function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only
  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }
  s = strm.state;
  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }
  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;
  /* Write the header */
  if (s.status === INIT_STATE) {
    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;
      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);
      s.status = BUSY_STATE;
      putShortMSB(s, header);
      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }
//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;
      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;
      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif
  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }
    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }
  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }
  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));
    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */
        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);
          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}
  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }
  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }
  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}
function deflateEnd(strm) {
  var status;
  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }
  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }
  strm.state = null;
  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}

/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;
  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;
  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }
  s = strm.state;
  wrap = s.wrap;
  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }
  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }
  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */
  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
      s.prev[str & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}

exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';
/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/
},{"../utils/common":30,"./adler32":31,"./crc32":33,"./messages":38,"./trees":39}],35:[function(require,module,exports){
'use strict';
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.
   Entry assumptions:
        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8
   On return, state.mode is one of:
        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data
   Notes:
    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.
    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;

  var input, output; // JS specific, because we have no pointers
  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;

  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */
  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }
    here = lcode[hold & lmask];
    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];
        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;
          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }
          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }
      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);
  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;
  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};
},{}],36:[function(require,module,exports){
'use strict';
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
var utils         = require('../utils/common');
var adler32       = require('./adler32');
var crc32         = require('./crc32');
var inflate_fast  = require('./inffast');
var inflate_table = require('./inftrees');
var CODES = 0;
var LENS = 1;
var DISTS = 2;
/* Public constants ==========================================================*/
/* ===========================================================================*/

/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;

/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;
/* The deflate compression method */
var Z_DEFLATED  = 8;

/* STATES ====================================================================*/
/* ===========================================================================*/

var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */
/* ===========================================================================*/

var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;

function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}

function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */
  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */
  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */
  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */
  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */
  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */
  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */
  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */
  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}
function inflateResetKeep(strm) {
  var state;
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}
function inflateReset(strm) {
  var state;
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);
}
function inflateReset2(strm, windowBits) {
  var wrap;
  var state;
  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }
  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }
  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}
function inflateInit2(strm, windowBits) {
  var ret;
  var state;
  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */
  state = new InflateState();
  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}
function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}

/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;
var lenfix, distfix; // We have no pointers in JS, so keep tables separate
function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;
    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);
    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }
    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });
    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }
    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });
    /* do this just once */
    virgin = false;
  }
  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}

/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.
 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;
  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;
    state.window = new utils.Buf8(state.wsize);
  }
  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}
function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;
  var n; // temporary var for NEED_BITS
  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];

  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }
  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */

  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---
  _in = have;
  _out = left;
  ret = Z_OK;
  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;           /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              utils.arraySet(
                state.head.extra,
                input,
                next,
                // extra field is limited to 65536 bytes
                // - no need for additional size check
                copy,
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//
        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          utils.arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;
        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;
        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;
            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }
        /* handle error breaks in while */
        if (state.mode === BAD) { break; }
        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }
        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;
        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;
        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }
        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;
        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---
          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;
          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;
            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;
          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;
            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));
          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
    }
  }
  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"
  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */
  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---
  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}
function inflateEnd(strm) {
  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }
  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}
function inflateGetHeader(strm, head) {
  var state;
  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }
  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}
function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;
  var state;
  var dictid;
  var ret;
  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;
  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }
  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}
exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';
/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/
},{"../utils/common":30,"./adler32":31,"./crc32":33,"./inffast":35,"./inftrees":37}],37:[function(require,module,exports){
'use strict';
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
var utils = require('../utils/common');
var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);
var CODES = 0;
var LENS = 1;
var DISTS = 2;
var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];
var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];
var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];
var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];
module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */
  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;
  var here_bits, here_op, here_val;
  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.
   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.
   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.
   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */
  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }
  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;
    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }
  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }
  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }
  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }
  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.
   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.
   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.
   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.
   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */
  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;
  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;
  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }
  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */
  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }
  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }
    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);
    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }
    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }
    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }
      /* increment past last table */
      next += min;            /* here min is 1 << curr */
      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }
      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }
      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }
  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }
  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};
},{"../utils/common":30}],38:[function(require,module,exports){
'use strict';
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};
},{}],39:[function(require,module,exports){
'use strict';
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
/* eslint-disable space-unary-ops */
var utils = require('../utils/common');
/* Public constants ==========================================================*/
/* ===========================================================================*/

//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;
/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;
/*============================================================================*/

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }
// From zutil.h
var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */
var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */
// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */
var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */
var Buf_size      = 16;
/* size of bit buffer in bi_buf */

/* ===========================================================================
 * Constants
 */
var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */
var END_BLOCK   = 256;
/* end of block literal code */
var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */
var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */
var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */
/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];
var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];
var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];
var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */
/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */
/* ===========================================================================
 * Local data. These are initialized only once.
 */
// We pre-fill arrays with 0 to avoid uninitialized gaps
var DIST_CODE_LEN = 512; /* see definition of array dist_code below */
// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */
var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */
var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */
var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */
var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */
var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */

function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */
  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}

var static_l_desc;
var static_d_desc;
var static_bl_desc;

function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}

function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}

/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}

/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}

function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}

/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}

/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;
  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}

/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }
  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */
  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */
    if (n > max_code) { continue; } /* not a leaf node */
    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }
  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */
  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);
  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}

/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */
  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);
    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}

/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */
  // do check in _tr_init()
  //if (static_init_done) return;
  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/
  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;
  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");
  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }
  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);
  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }
  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);
  //static_init_done = true;
}

/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */
  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }
  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}

/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}
/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */
  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}
/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}
/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }
    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;
    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}

// inlined manually
// var SMALLEST = 1;
/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */
  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;
      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");
        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */
      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");
    } while (lx < s.last_lit);
  }
  send_code(s, END_BLOCK, ltree);
}

/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */
  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;
  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;
    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }
  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;
    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;
  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }
  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/
    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */
    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;
    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;
    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);
  } while (s.heap_len >= 2);
  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];
  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);
  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}

/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */
  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */
  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */
  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;
    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;
    } else if (curlen !== 0) {
      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;
    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;
    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }
    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}

/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */
  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */
  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */
  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;
    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);
    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);
    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }
    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}

/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */
  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */
  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));
  return max_blindex;
}

/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */
  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}

/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;
  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }
  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }
  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}

var static_init_done = false;
/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{
  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }
  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
  s.bi_buf = 0;
  s.bi_valid = 0;
  /* Initialize the first block of the first file: */
  init_block(s);
}

/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}

/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}

/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */
  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {
    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }
    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */
    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);
    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;
    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));
    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }
  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }
  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */
    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);
  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);
  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);
  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}
/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;
  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;
  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;
  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");
    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif
  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}
exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;
},{"../utils/common":30}],40:[function(require,module,exports){
'use strict';
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}
module.exports = ZStream;
},{}],41:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }

}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }

}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}
function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function (name) { return [] }
process.binding = function (name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };
},{}],42:[function(require,module,exports){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer
// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}
function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}
SafeBuffer.prototype = Object.create(Buffer.prototype)
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)
SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}
SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}
SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}
SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}
},{"buffer":12}],43:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = Stream;
var EE = require('events').EventEmitter;
var inherits = require('inherits');
inherits(Stream, EE);
Stream.Readable = require('readable-stream/lib/_stream_readable.js');
Stream.Writable = require('readable-stream/lib/_stream_writable.js');
Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
Stream.Transform = require('readable-stream/lib/_stream_transform.js');
Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')
// Backwards-compat with node 0.4.x
Stream.Stream = Stream;

// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function Stream() {
  EE.call(this);
}
Stream.prototype.pipe = function(dest, options) {
  var source = this;
  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }
  source.on('data', ondata);
  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }
  dest.on('drain', ondrain);
  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }
  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;
    dest.end();
  }

  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;
    if (typeof dest.destroy === 'function') dest.destroy();
  }
  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }
  source.on('error', onerror);
  dest.on('error', onerror);
  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);
    source.removeListener('end', onend);
    source.removeListener('close', onclose);
    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);
    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);
    dest.removeListener('close', cleanup);
  }
  source.on('end', cleanup);
  source.on('close', cleanup);
  dest.on('close', cleanup);
  dest.emit('pipe', source);
  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};
},{"events":16,"inherits":25,"readable-stream/lib/_stream_duplex.js":45,"readable-stream/lib/_stream_passthrough.js":46,"readable-stream/lib/_stream_readable.js":47,"readable-stream/lib/_stream_transform.js":48,"readable-stream/lib/_stream_writable.js":49,"readable-stream/lib/internal/streams/end-of-stream.js":53,"readable-stream/lib/internal/streams/pipeline.js":55}],44:[function(require,module,exports){
'use strict';
function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
var codes = {};
function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }
  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }
  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);
    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }
    return NodeError;
  }(Base);
  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js

function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });
    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith

function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith

function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }
  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes

function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }
  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}
createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;
  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }
  var msg;
  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }
  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;
},{}],45:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }
  return keys;
};
/*</replacement>*/

module.exports = Duplex;
var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');
require('inherits')(Duplex, Readable);
{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}
function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;
  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;
    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer
function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(onEndNT, this);
}
function onEndNT(self) {
  self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed

    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this)}).call(this,require('_process'))
},{"./_stream_readable":47,"./_stream_writable":49,"_process":41,"inherits":25}],46:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';
module.exports = PassThrough;
var Transform = require('./_stream_transform');
require('inherits')(PassThrough, Transform);
function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}
PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":48,"inherits":25}],47:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
module.exports = Readable;
/*<replacement>*/
var Duplex;
/*</replacement>*/
Readable.ReadableState = ReadableState;
/*<replacement>*/
var EE = require('events').EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/
/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/

var Buffer = require('buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/

var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/buffer_list');
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.

var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require('inherits')(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}
function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
  this.autoDestroy = !!options.autoDestroy; // has it been destroyed
  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}
function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy
  this.readable = true;
  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }
  Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed

    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.

Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;
  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }
  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()

Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.

  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }
  return er;
}
Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.

Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
  var p = this._readableState.buffer.head;
  var content = '';
  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }
  this._readableState.buffer.clear();
  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB

var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.

function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.

  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
} // you can override either this method, or the async _read(n) below.

Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }
  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.

  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.

  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true; // call internal read method
    this._read(state.highWaterMark);
    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }
  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;
  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }
  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }
  if (ret !== null) this.emit('data', ret);
  return ret;
};
function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;
  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;
    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.

function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}
function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);
  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.

  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.

function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}
function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }
  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.

Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;
  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }
  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.

  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;
  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);
    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }
      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.

  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.

  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);
  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to

  dest.emit('pipe', src); // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }
  return dest;
};
function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}
Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this; // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }
    return this;
  } // try to find the right one.

  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something

Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;
  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused
    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);
      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }
  return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);
  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);
  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;
  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}
function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.

Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()
    state.flowing = !state.readableListening;
    resume(this, state);
  }
  state.paused = false;
  return this;
};
function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}
function resume_(stream, state) {
  debug('resume', state.reading);
  if (!state.reading) {
    stream.read(0);
  }
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  this._readableState.paused = true;
  return this;
};
function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.

Readable.prototype.wrap = function (stream) {
  var _this = this;
  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }
    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.

  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.

  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };
  return this;
};
if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }
    return createReadableStreamAsyncIterator(this);
  };
}
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}
function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);
  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}
function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;
      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}
if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }
    return from(Readable, iterable, opts);
  };
}
function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":44,"./_stream_duplex":45,"./internal/streams/async_iterator":50,"./internal/streams/buffer_list":51,"./internal/streams/destroy":52,"./internal/streams/from":54,"./internal/streams/state":56,"./internal/streams/stream":57,"_process":41,"buffer":12,"events":16,"inherits":25,"string_decoder/":58,"util":9}],48:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';
module.exports = Transform;
var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require('./_stream_duplex');
require('inherits')(Transform, Duplex);
function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;
  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }
  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}
function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;
  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.

  this.on('prefinish', prefinish);
}
function prefinish() {
  var _this = this;
  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}
Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.

Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.

Transform.prototype._read = function (n) {
  var ts = this._transformState;
  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};
Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};
function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":44,"./_stream_duplex":45,"inherits":25}],49:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';
module.exports = Writable;
/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream

function CorkedRequest(state) {
  var _this = this;
  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */
/*<replacement>*/

var Duplex;
/*</replacement>*/
Writable.WritableState = WritableState;
/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/
/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

var Buffer = require('buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require('inherits')(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called
  this.finalCalled = false; // drain event flag.
  this.needDrain = false; // at the start of calling end()
  this.ending = false; // when end() has been called, and returned
  this.ended = false; // when 'finish' is emitted
  this.finished = false; // has it been destroyed
  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0; // a flag to see when we're in the middle of a write.
  this.writing = false; // when true all writes will be buffered until .uncork() call
  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)

  this.writecb = null; // the amount that is being written when _write is called.
  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false; // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
  this.autoDestroy = !!options.autoDestroy; // count buffered requests
  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};
(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.

var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}
function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.
  this.writable = true;
  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }
  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.

Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.

function validChunk(stream, state, chunk, cb) {
  var er;
  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }
  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }
  return true;
}
Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);
  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }
  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};
Writable.prototype.cork = function () {
  this._writableState.corked++;
};
Writable.prototype.uncork = function () {
  var state = this._writableState;
  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};
Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;
  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }
  return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error
    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}
function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}
function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;
    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }
    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}
function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.

function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it

function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;
  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }
    if (entry === null) state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}
Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;
  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.

  if (!state.ending) endWritable(this, state, cb);
  return this;
};
Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});
function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      errorOrDestroy(stream, err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}
function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;
        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }
  return need;
}
function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.

  state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed

    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":44,"./_stream_duplex":45,"./internal/streams/destroy":52,"./internal/streams/state":56,"./internal/streams/stream":57,"_process":41,"buffer":12,"inherits":25,"util-deprecate":59}],50:[function(require,module,exports){
(function (process){(function (){
'use strict';
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
var finished = require('./end-of-stream');
var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');
function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}
function readAndResolve(iter) {
  var resolve = iter[kLastResolve];
  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'
    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}
function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }
      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },
  next: function next() {
    var _this = this;
    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];
    if (error !== null) {
      return Promise.reject(error);
    }
    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }
    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time

    var lastPromise = this[kLastPromise];
    var promise;
    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();
      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }
      promise = new Promise(this[kHandlePromise]);
    }
    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;
  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }
      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;
  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();
      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error
      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }
      iterator[kError] = err;
      return;
    }
    var resolve = iterator[kLastResolve];
    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }
    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};
module.exports = createReadableStreamAsyncIterator;
}).call(this)}).call(this,require('_process'))
},{"./end-of-stream":53,"_process":41}],51:[function(require,module,exports){
'use strict';
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
var _require = require('buffer'),
    Buffer = _require.Buffer;
var _require2 = require('util'),
    inspect = _require2.inspect;
var custom = inspect && inspect.custom || 'inspect';
function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}
module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);
    this.head = null;
    this.tail = null;
    this.length = 0;
  }
  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) {
        ret += s + p.data;
      }
      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.
  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;
      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }
      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.
  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.
  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.
  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);
  return BufferList;
}();
},{"buffer":12,"util":9}],52:[function(require,module,exports){
(function (process){(function (){
'use strict'; // undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;
  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;
  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }
    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well

  if (this._writableState) {
    this._writableState.destroyed = true;
  }
  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });
  return this;
}
function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}
function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}
function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }
  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}
function emitErrorNT(self, err) {
  self.emit('error', err);
}
function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}
module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this)}).call(this,require('_process'))
},{"_process":41}],53:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    callback.apply(this, args);
  };
}
function noop() {}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;
  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };
  var writableEnded = stream._writableState && stream._writableState.finished;
  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };
  var readableEnded = stream._readableState && stream._readableState.endEmitted;
  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };
  var onerror = function onerror(err) {
    callback.call(stream, err);
  };
  var onclose = function onclose() {
    var err;
    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };
  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };
  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }
  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}
module.exports = eos;
},{"../../../errors":44}],54:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};
},{}],55:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var eos;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}
var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want
    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}
function call(fn) {
  fn();
}
function pipe(from, to) {
  return from.pipe(to);
}
function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}
function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }
  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];
  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }
  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}
module.exports = pipeline;
},{"../../../errors":44,"./end-of-stream":53}],56:[function(require,module,exports){
'use strict';
var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }
    return Math.floor(hwm);
  } // Default value

  return state.objectMode ? 16 : 16 * 1024;
}
module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":44}],57:[function(require,module,exports){
module.exports = require('events').EventEmitter;
},{"events":16}],58:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/
var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};
function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}
StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};
StringDecoder.prototype.end = utf8End;
// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}
function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}
function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}
function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":42}],59:[function(require,module,exports){
(function (global){(function (){
/**
 * Module exports.
 */
module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */
function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }
  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }
  return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */
function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}
}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],60:[function(require,module,exports){
arguments[4][5][0].apply(exports,arguments)
},{"dup":5}],61:[function(require,module,exports){
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
'use strict';
var isArgumentsObject = require('is-arguments');
var isGeneratorFunction = require('is-generator-function');
var whichTypedArray = require('which-typed-array');
var isTypedArray = require('is-typed-array');
function uncurryThis(f) {
  return f.call.bind(f);
}
var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';
var ObjectToString = uncurryThis(Object.prototype.toString);
var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);
if (BigIntSupported) {
  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
}
if (SymbolSupported) {
  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
}
function checkBoxedPrimitive(value, prototypeValueOf) {
  if (typeof value !== 'object') {
    return false;
  }
  try {
    prototypeValueOf(value);
    return true;
  } catch(e) {
    return false;
  }
}
exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;
// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
	return (
		(
			typeof Promise !== 'undefined' &&
			input instanceof Promise
		) ||
		(
			input !== null &&
			typeof input === 'object' &&
			typeof input.then === 'function' &&
			typeof input.catch === 'function'
		)
	);
}
exports.isPromise = isPromise;
function isArrayBufferView(value) {
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    return ArrayBuffer.isView(value);
  }
  return (
    isTypedArray(value) ||
    isDataView(value)
  );
}
exports.isArrayBufferView = isArrayBufferView;

function isUint8Array(value) {
  return whichTypedArray(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;
function isUint8ClampedArray(value) {
  return whichTypedArray(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;
function isUint16Array(value) {
  return whichTypedArray(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;
function isUint32Array(value) {
  return whichTypedArray(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;
function isInt8Array(value) {
  return whichTypedArray(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;
function isInt16Array(value) {
  return whichTypedArray(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;
function isInt32Array(value) {
  return whichTypedArray(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;
function isFloat32Array(value) {
  return whichTypedArray(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;
function isFloat64Array(value) {
  return whichTypedArray(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;
function isBigInt64Array(value) {
  return whichTypedArray(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;
function isBigUint64Array(value) {
  return whichTypedArray(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;
function isMapToString(value) {
  return ObjectToString(value) === '[object Map]';
}
isMapToString.working = (
  typeof Map !== 'undefined' &&
  isMapToString(new Map())
);
function isMap(value) {
  if (typeof Map === 'undefined') {
    return false;
  }
  return isMapToString.working
    ? isMapToString(value)
    : value instanceof Map;
}
exports.isMap = isMap;
function isSetToString(value) {
  return ObjectToString(value) === '[object Set]';
}
isSetToString.working = (
  typeof Set !== 'undefined' &&
  isSetToString(new Set())
);
function isSet(value) {
  if (typeof Set === 'undefined') {
    return false;
  }
  return isSetToString.working
    ? isSetToString(value)
    : value instanceof Set;
}
exports.isSet = isSet;
function isWeakMapToString(value) {
  return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = (
  typeof WeakMap !== 'undefined' &&
  isWeakMapToString(new WeakMap())
);
function isWeakMap(value) {
  if (typeof WeakMap === 'undefined') {
    return false;
  }
  return isWeakMapToString.working
    ? isWeakMapToString(value)
    : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;
function isWeakSetToString(value) {
  return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = (
  typeof WeakSet !== 'undefined' &&
  isWeakSetToString(new WeakSet())
);
function isWeakSet(value) {
  return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;
function isArrayBufferToString(value) {
  return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  isArrayBufferToString(new ArrayBuffer())
);
function isArrayBuffer(value) {
  if (typeof ArrayBuffer === 'undefined') {
    return false;
  }
  return isArrayBufferToString.working
    ? isArrayBufferToString(value)
    : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;
function isDataViewToString(value) {
  return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  typeof DataView !== 'undefined' &&
  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
);
function isDataView(value) {
  if (typeof DataView === 'undefined') {
    return false;
  }
  return isDataViewToString.working
    ? isDataViewToString(value)
    : value instanceof DataView;
}
exports.isDataView = isDataView;
function isSharedArrayBufferToString(value) {
  return ObjectToString(value) === '[object SharedArrayBuffer]';
}
isSharedArrayBufferToString.working = (
  typeof SharedArrayBuffer !== 'undefined' &&
  isSharedArrayBufferToString(new SharedArrayBuffer())
);
function isSharedArrayBuffer(value) {
  if (typeof SharedArrayBuffer === 'undefined') {
    return false;
  }
  return isSharedArrayBufferToString.working
    ? isSharedArrayBufferToString(value)
    : value instanceof SharedArrayBuffer;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;
function isAsyncFunction(value) {
  return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;
function isMapIterator(value) {
  return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;
function isSetIterator(value) {
  return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;
function isGeneratorObject(value) {
  return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;
function isWebAssemblyCompiledModule(value) {
  return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
function isNumberObject(value) {
  return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;
function isStringObject(value) {
  return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;
function isBooleanObject(value) {
  return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;
function isBigIntObject(value) {
  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;
function isSymbolObject(value) {
  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;
function isBoxedPrimitive(value) {
  return (
    isNumberObject(value) ||
    isStringObject(value) ||
    isBooleanObject(value) ||
    isBigIntObject(value) ||
    isSymbolObject(value)
  );
}
exports.isBoxedPrimitive = isBoxedPrimitive;
function isAnyArrayBuffer(value) {
  return typeof Uint8Array !== 'undefined' && (
    isArrayBuffer(value) ||
    isSharedArrayBuffer(value)
  );
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;
['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
  Object.defineProperty(exports, method, {
    enumerable: false,
    value: function() {
      throw new Error(method + ' is not supported in userland');
    }
  });
});
},{"is-arguments":26,"is-generator-function":27,"is-typed-array":28,"which-typed-array":63}],62:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };
var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }
  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};

// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }
  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }
  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }
  return deprecated;
};

var debugs = {};
var debugEnvRegex = /^$/;
if (process.env.NODE_DEBUG) {
  var debugEnv = process.env.NODE_DEBUG;
  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
    .replace(/\*/g, '.*')
    .replace(/,/g, '$|^')
    .toUpperCase();
  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
}
exports.debuglog = function(set) {
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (debugEnvRegex.test(set)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;

// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};
// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};

function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];
  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}

function stylizeNoColor(str, styleType) {
  return str;
}

function arrayToHash(array) {
  var hash = {};
  array.forEach(function(val, idx) {
    hash[val] = true;
  });
  return hash;
}

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }
  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }
  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);
  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }
  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }
  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }
  var base = '', array = false, braces = ['{', '}'];
  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }
  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }
  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }
  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }
  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }
  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }
  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }
  ctx.seen.push(value);
  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }
  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}

function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }
  return name + ': ' + str;
}

function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);
  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }
  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = require('./support/types');
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;
function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;
function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;
function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;
function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;
function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;
function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;
function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;
function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;
function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;
function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;
function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;
function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;
exports.isBuffer = require('./support/isBuffer');
function objectToString(o) {
  return Object.prototype.toString.call(o);
}

function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];
// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}

// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};

/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');
exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;
  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;
exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');
  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }
  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });
    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }
    return promise;
  }
  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}
exports.promisify.custom = kCustomPromisifiedSymbol
function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}
function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }
  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },
            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });
  }
  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;
}).call(this)}).call(this,require('_process'))
},{"./support/isBuffer":60,"./support/types":61,"_process":41,"inherits":25}],63:[function(require,module,exports){
(function (global){(function (){
'use strict';
var forEach = require('foreach');
var availableTypedArrays = require('available-typed-arrays');
var callBound = require('call-bind/callBound');
var $toString = callBound('Object.prototype.toString');
var hasSymbols = require('has-symbols')();
var hasToStringTag = hasSymbols && typeof Symbol.toStringTag === 'symbol';
var typedArrays = availableTypedArrays();
var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		if (typeof global[typedArray] === 'function') {
			var arr = new global[typedArray]();
			if (!(Symbol.toStringTag in arr)) {
				throw new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');
			}
			var proto = getPrototypeOf(arr);
			var descriptor = gOPD(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf(proto);
				descriptor = gOPD(superProto, Symbol.toStringTag);
			}
			toStrTags[typedArray] = descriptor.get;
		}
	});
}
var tryTypedArrays = function tryAllTypedArrays(value) {
	var foundName = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!foundName) {
			try {
				var name = getter.call(value);
				if (name === typedArray) {
					foundName = name;
				}
			} catch (e) {}
		}
	});
	return foundName;
};
var isTypedArray = require('is-typed-array');
module.exports = function whichTypedArray(value) {
	if (!isTypedArray(value)) { return false; }
	if (!hasToStringTag) { return $slice($toString(value), 8, -1); }
	return tryTypedArrays(value);
};
}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"available-typed-arrays":7,"call-bind/callBound":13,"es-abstract/helpers/getOwnPropertyDescriptor":15,"foreach":17,"has-symbols":21,"is-typed-array":28}]},{},[1]);

(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// var zlib = require("zlib");
var Buffer = require('buffer').Buffer;
// module.exports = zlib
module.exports = Buffer
// window.zlib = zlib
window.Buffer = Buffer
},{"buffer":3}],2:[function(require,module,exports){
'use strict'
exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray
var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63
function getLens (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }
  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len
  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)
  return [validLen, placeHoldersLen]
}
// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}
function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}
function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))
  var curByte = 0
  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen
  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }
  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }
  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }
  return arr
}
function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}
function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}
function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }
  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }
  return parts.join('')
}
},{}],3:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */
'use strict'
var base64 = require('base64-js')
var ieee754 = require('ieee754')
exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}
function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}
Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})
Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})
function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */
function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}
// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}
Buffer.poolSize = 8192 // not used by this implementation
function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }
  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }
  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }
  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }
  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }
  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }
  var b = fromObject(value)
  if (b) return b
  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }
  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array
function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}
function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}
function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}
function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }
  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }
  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)
  var actual = buf.write(string, encoding)
  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }
  return buf
}
function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}
function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }
  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }
  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }
  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}
function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)
    if (buf.length === 0) {
      return buf
    }
    obj.copy(buf, 0, 0, len)
    return buf
  }
  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }
  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}
function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}
function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}
Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}
Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }
  if (a === b) return 0
  var x = a.length
  var y = b.length
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }
  if (x < y) return -1
  if (y < x) return 1
  return 0
}
Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}
Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }
  if (list.length === 0) {
    return Buffer.alloc(0)
  }
  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }
  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}
function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }
  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0
  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength
function slowToString (encoding, start, end) {
  var loweredCase = false
  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }
  if (end === undefined || end > this.length) {
    end = this.length
  }
  if (end <= 0) {
    return ''
  }
  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0
  if (end <= start) {
    return ''
  }
  if (!encoding) encoding = 'utf8'
  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)
      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)
      case 'ascii':
        return asciiSlice(this, start, end)
      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)
      case 'base64':
        return base64Slice(this, start, end)
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)
      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true
function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}
Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}
Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}
Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}
Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}
Buffer.prototype.toLocaleString = Buffer.prototype.toString
Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}
Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }
  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }
  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }
  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }
  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0
  if (this === target) return 0
  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)
  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)
  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }
  if (x < y) return -1
  if (y < x) return 1
  return 0
}
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1
  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }
  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }
  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }
  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }
  throw new TypeError('val must be string, number or Buffer')
}
function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length
  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }
  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }
  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }
  return -1
}
Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}
Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}
Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}
function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  var strLen = string.length
  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}
function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}
function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}
function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}
function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}
function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}
Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }
  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining
  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }
  if (!encoding) encoding = 'utf8'
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)
      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)
      case 'ascii':
        return asciiWrite(this, string, offset, length)
      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)
      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)
      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}
function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}
function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []
  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1
    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint
      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }
    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }
    res.push(codePoint)
    i += bytesPerSequence
  }
  return decodeCodePointsArray(res)
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000
function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }
  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}
function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}
function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}
function hexSlice (buf, start, end) {
  var len = buf.length
  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len
  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}
function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}
Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end
  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }
  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }
  if (end < start) end = start
  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)
  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  return val
}
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }
  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }
  return val
}
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}
Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)
  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80
  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
  return val
}
Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)
  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80
  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
  return val
}
Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}
Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}
Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}
Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}
Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}
Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}
Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}
Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}
Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}
function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }
  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }
  return offset + byteLength
}
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }
  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }
  return offset + byteLength
}
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}
Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)
    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }
  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }
  return offset + byteLength
}
Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)
    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }
  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }
  return offset + byteLength
}
Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}
Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}
Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}
Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}
Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}
function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}
function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}
Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}
Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}
function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}
Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start
  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0
  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')
  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }
  var len = end - start
  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }
  return len
}
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }
  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }
  if (end <= start) {
    return this
  }
  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0
  if (!val) val = 0
  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }
  return this
}
// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g
function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}
function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}
function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []
  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)
    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }
        // valid lead
        leadSurrogate = codePoint
        continue
      }
      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }
      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }
    leadSurrogate = null
    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }
  return bytes
}
function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}
function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }
  return byteArray
}
function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}
function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}
}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":2,"buffer":3,"ieee754":4}],4:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]
  i += d
  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}
  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}
  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}
exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
  value = Math.abs(value)
  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }
    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }
  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
  buffer[offset + i - d] |= s * 128
}
},{}]},{},[1]);

/*!
 * Signature Pad v4.0.4 | https://github.com/szimek/signature_pad
 * (c) 2022 Szymon Nowak | Released under the MIT license
 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).SignaturePad=e()}(this,(function(){"use strict";class t{constructor(t,e,i,n){if(isNaN(t)||isNaN(e))throw new Error(`Point is invalid: (${t}, ${e})`);this.x=+t,this.y=+e,this.pressure=i||0,this.time=n||Date.now()}distanceTo(t){return Math.sqrt(Math.pow(this.x-t.x,2)+Math.pow(this.y-t.y,2))}equals(t){return this.x===t.x&&this.y===t.y&&this.pressure===t.pressure&&this.time===t.time}velocityFrom(t){return this.time!==t.time?this.distanceTo(t)/(this.time-t.time):0}}class e{constructor(t,e,i,n,s,o){this.startPoint=t,this.control2=e,this.control1=i,this.endPoint=n,this.startWidth=s,this.endWidth=o}static fromPoints(t,i){const n=this.calculateControlPoints(t[0],t[1],t[2]).c2,s=this.calculateControlPoints(t[1],t[2],t[3]).c1;return new e(t[1],n,s,t[2],i.start,i.end)}static calculateControlPoints(e,i,n){const s=e.x-i.x,o=e.y-i.y,h=i.x-n.x,r=i.y-n.y,a=(e.x+i.x)/2,d=(e.y+i.y)/2,c=(i.x+n.x)/2,l=(i.y+n.y)/2,u=Math.sqrt(s*s+o*o),v=Math.sqrt(h*h+r*r),m=v/(u+v),_=c+(a-c)*m,p=l+(d-l)*m,g=i.x-_,w=i.y-p;return{c1:new t(a+g,d+w),c2:new t(c+g,l+w)}}length(){let t,e,i=0;for(let n=0;n<=10;n+=1){const s=n/10,o=this.point(s,this.startPoint.x,this.control1.x,this.control2.x,this.endPoint.x),h=this.point(s,this.startPoint.y,this.control1.y,this.control2.y,this.endPoint.y);if(n>0){const n=o-t,s=h-e;i+=Math.sqrt(n*n+s*s)}t=o,e=h}return i}point(t,e,i,n,s){return e*(1-t)*(1-t)*(1-t)+3*i*(1-t)*(1-t)*t+3*n*(1-t)*t*t+s*t*t*t}}class i extends class{constructor(){try{this._et=new EventTarget}catch(t){this._et=document}}addEventListener(t,e,i){this._et.addEventListener(t,e,i)}dispatchEvent(t){return this._et.dispatchEvent(t)}removeEventListener(t,e,i){this._et.removeEventListener(t,e,i)}}{constructor(t,e={}){super(),this.canvas=t,this._handleMouseDown=t=>{1===t.buttons&&(this._drawningStroke=!0,this._strokeBegin(t))},this._handleMouseMove=t=>{this._drawningStroke&&this._strokeMoveUpdate(t)},this._handleMouseUp=t=>{1===t.buttons&&this._drawningStroke&&(this._drawningStroke=!1,this._strokeEnd(t))},this._handleTouchStart=t=>{if(t.preventDefault(),1===t.targetTouches.length){const e=t.changedTouches[0];this._strokeBegin(e)}},this._handleTouchMove=t=>{t.preventDefault();const e=t.targetTouches[0];this._strokeMoveUpdate(e)},this._handleTouchEnd=t=>{if(t.target===this.canvas){t.preventDefault();const e=t.changedTouches[0];this._strokeEnd(e)}},this._handlePointerStart=t=>{this._drawningStroke=!0,t.preventDefault(),this._strokeBegin(t)},this._handlePointerMove=t=>{this._drawningStroke&&(t.preventDefault(),this._strokeMoveUpdate(t))},this._handlePointerEnd=t=>{this._drawningStroke&&(t.preventDefault(),this._drawningStroke=!1,this._strokeEnd(t))},this.velocityFilterWeight=e.velocityFilterWeight||.7,this.minWidth=e.minWidth||.5,this.maxWidth=e.maxWidth||2.5,this.throttle="throttle"in e?e.throttle:16,this.minDistance="minDistance"in e?e.minDistance:5,this.dotSize=e.dotSize||0,this.penColor=e.penColor||"black",this.backgroundColor=e.backgroundColor||"rgba(0,0,0,0)",this._strokeMoveUpdate=this.throttle?function(t,e=250){let i,n,s,o=0,h=null;const r=()=>{o=Date.now(),h=null,i=t.apply(n,s),h||(n=null,s=[])};return function(...a){const d=Date.now(),c=e-(d-o);return n=this,s=a,c<=0||c>e?(h&&(clearTimeout(h),h=null),o=d,i=t.apply(n,s),h||(n=null,s=[])):h||(h=window.setTimeout(r,c)),i}}(i.prototype._strokeUpdate,this.throttle):i.prototype._strokeUpdate,this._ctx=t.getContext("2d"),this.clear(),this.on()}clear(){const{_ctx:t,canvas:e}=this;t.fillStyle=this.backgroundColor,t.clearRect(0,0,e.width,e.height),t.fillRect(0,0,e.width,e.height),this._data=[],this._reset(),this._isEmpty=!0}fromDataURL(t,e={}){return new Promise((i,n)=>{const s=new Image,o=e.ratio||window.devicePixelRatio||1,h=e.width||this.canvas.width/o,r=e.height||this.canvas.height/o,a=e.xOffset||0,d=e.yOffset||0;this._reset(),s.onload=()=>{this._ctx.drawImage(s,a,d,h,r),i()},s.onerror=t=>{n(t)},s.crossOrigin="anonymous",s.src=t,this._isEmpty=!1})}toDataURL(t="image/png",e){switch(t){case"image/svg+xml":return this._toSVG();default:return this.canvas.toDataURL(t,e)}}on(){this.canvas.style.touchAction="none",this.canvas.style.msTouchAction="none",this.canvas.style.userSelect="none";const t=/Macintosh/.test(navigator.userAgent)&&"ontouchstart"in document;window.PointerEvent&&!t?this._handlePointerEvents():(this._handleMouseEvents(),"ontouchstart"in window&&this._handleTouchEvents())}off(){this.canvas.style.touchAction="auto",this.canvas.style.msTouchAction="auto",this.canvas.style.userSelect="auto",this.canvas.removeEventListener("pointerdown",this._handlePointerStart),this.canvas.removeEventListener("pointermove",this._handlePointerMove),document.removeEventListener("pointerup",this._handlePointerEnd),this.canvas.removeEventListener("mousedown",this._handleMouseDown),this.canvas.removeEventListener("mousemove",this._handleMouseMove),document.removeEventListener("mouseup",this._handleMouseUp),this.canvas.removeEventListener("touchstart",this._handleTouchStart),this.canvas.removeEventListener("touchmove",this._handleTouchMove),this.canvas.removeEventListener("touchend",this._handleTouchEnd)}isEmpty(){return this._isEmpty}fromData(t,{clear:e=!0}={}){e&&this.clear(),this._fromData(t,this._drawCurve.bind(this),this._drawDot.bind(this)),this._data=this._data.concat(t)}toData(){return this._data}_strokeBegin(t){this.dispatchEvent(new CustomEvent("beginStroke",{detail:t}));const e={dotSize:this.dotSize,minWidth:this.minWidth,maxWidth:this.maxWidth,penColor:this.penColor,points:[]};this._data.push(e),this._reset(),this._strokeUpdate(t)}_strokeUpdate(t){if(0===this._data.length)return void this._strokeBegin(t);this.dispatchEvent(new CustomEvent("beforeUpdateStroke",{detail:t}));const e=t.clientX,i=t.clientY,n=void 0!==t.pressure?t.pressure:void 0!==t.force?t.force:0,s=this._createPoint(e,i,n),o=this._data[this._data.length-1],h=o.points,r=h.length>0&&h[h.length-1],a=!!r&&s.distanceTo(r)<=this.minDistance,{penColor:d,dotSize:c,minWidth:l,maxWidth:u}=o;if(!r||!r||!a){const t=this._addPoint(s);r?t&&this._drawCurve(t,{penColor:d,dotSize:c,minWidth:l,maxWidth:u}):this._drawDot(s,{penColor:d,dotSize:c,minWidth:l,maxWidth:u}),h.push({time:s.time,x:s.x,y:s.y,pressure:s.pressure})}this.dispatchEvent(new CustomEvent("afterUpdateStroke",{detail:t}))}_strokeEnd(t){this._strokeUpdate(t),this.dispatchEvent(new CustomEvent("endStroke",{detail:t}))}_handlePointerEvents(){this._drawningStroke=!1,this.canvas.addEventListener("pointerdown",this._handlePointerStart),this.canvas.addEventListener("pointermove",this._handlePointerMove),document.addEventListener("pointerup",this._handlePointerEnd)}_handleMouseEvents(){this._drawningStroke=!1,this.canvas.addEventListener("mousedown",this._handleMouseDown),this.canvas.addEventListener("mousemove",this._handleMouseMove),document.addEventListener("mouseup",this._handleMouseUp)}_handleTouchEvents(){this.canvas.addEventListener("touchstart",this._handleTouchStart),this.canvas.addEventListener("touchmove",this._handleTouchMove),this.canvas.addEventListener("touchend",this._handleTouchEnd)}_reset(){this._lastPoints=[],this._lastVelocity=0,this._lastWidth=(this.minWidth+this.maxWidth)/2,this._ctx.fillStyle=this.penColor}_createPoint(e,i,n){const s=this.canvas.getBoundingClientRect();return new t(e-s.left,i-s.top,n,(new Date).getTime())}_addPoint(t){const{_lastPoints:i}=this;if(i.push(t),i.length>2){3===i.length&&i.unshift(i[0]);const t=this._calculateCurveWidths(i[1],i[2]),n=e.fromPoints(i,t);return i.shift(),n}return null}_calculateCurveWidths(t,e){const i=this.velocityFilterWeight*e.velocityFrom(t)+(1-this.velocityFilterWeight)*this._lastVelocity,n=this._strokeWidth(i),s={end:n,start:this._lastWidth};return this._lastVelocity=i,this._lastWidth=n,s}_strokeWidth(t){return Math.max(this.maxWidth/(t+1),this.minWidth)}_drawCurveSegment(t,e,i){const n=this._ctx;n.moveTo(t,e),n.arc(t,e,i,0,2*Math.PI,!1),this._isEmpty=!1}_drawCurve(t,e){const i=this._ctx,n=t.endWidth-t.startWidth,s=2*Math.ceil(t.length());i.beginPath(),i.fillStyle=e.penColor;for(let i=0;i<s;i+=1){const o=i/s,h=o*o,r=h*o,a=1-o,d=a*a,c=d*a;let l=c*t.startPoint.x;l+=3*d*o*t.control1.x,l+=3*a*h*t.control2.x,l+=r*t.endPoint.x;let u=c*t.startPoint.y;u+=3*d*o*t.control1.y,u+=3*a*h*t.control2.y,u+=r*t.endPoint.y;const v=Math.min(t.startWidth+r*n,e.maxWidth);this._drawCurveSegment(l,u,v)}i.closePath(),i.fill()}_drawDot(t,e){const i=this._ctx,n=e.dotSize>0?e.dotSize:(e.minWidth+e.maxWidth)/2;i.beginPath(),this._drawCurveSegment(t.x,t.y,n),i.closePath(),i.fillStyle=e.penColor,i.fill()}_fromData(e,i,n){for(const s of e){const{penColor:e,dotSize:o,minWidth:h,maxWidth:r,points:a}=s;if(a.length>1)for(let n=0;n<a.length;n+=1){const s=a[n],d=new t(s.x,s.y,s.pressure,s.time);this.penColor=e,0===n&&this._reset();const c=this._addPoint(d);c&&i(c,{penColor:e,dotSize:o,minWidth:h,maxWidth:r})}else this._reset(),n(a[0],{penColor:e,dotSize:o,minWidth:h,maxWidth:r})}}_toSVG(){const t=this._data,e=Math.max(window.devicePixelRatio||1,1),i=this.canvas.width/e,n=this.canvas.height/e,s=document.createElementNS("http://www.w3.org/2000/svg","svg");s.setAttribute("width",this.canvas.width.toString()),s.setAttribute("height",this.canvas.height.toString()),this._fromData(t,(t,{penColor:e})=>{const i=document.createElement("path");if(!(isNaN(t.control1.x)||isNaN(t.control1.y)||isNaN(t.control2.x)||isNaN(t.control2.y))){const n=`M ${t.startPoint.x.toFixed(3)},${t.startPoint.y.toFixed(3)} C ${t.control1.x.toFixed(3)},${t.control1.y.toFixed(3)} ${t.control2.x.toFixed(3)},${t.control2.y.toFixed(3)} ${t.endPoint.x.toFixed(3)},${t.endPoint.y.toFixed(3)}`;i.setAttribute("d",n),i.setAttribute("stroke-width",(2.25*t.endWidth).toFixed(3)),i.setAttribute("stroke",e),i.setAttribute("fill","none"),i.setAttribute("stroke-linecap","round"),s.appendChild(i)}},(t,{penColor:e,dotSize:i,minWidth:n,maxWidth:o})=>{const h=document.createElement("circle"),r=i>0?i:(n+o)/2;h.setAttribute("r",r.toString()),h.setAttribute("cx",t.x.toString()),h.setAttribute("cy",t.y.toString()),h.setAttribute("fill",e),s.appendChild(h)});const o=`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 ${this.canvas.width} ${this.canvas.height}" width="${i}" height="${n}">`;let h=s.innerHTML;if(void 0===h){const t=document.createElement("dummy"),e=s.childNodes;t.innerHTML="";for(let i=0;i<e.length;i+=1)t.appendChild(e[i].cloneNode(!0));h=t.innerHTML}return"data:image/svg+xml;base64,"+btoa(o+h+"</svg>")}}return i}));
//# sourceMappingURL=signature_pad.umd.min.js.map

function Dash () {
    this.width = 0;
    this.height = 0;
    this.html = $("<div></div>");
    this.Context  = DASH_CONTEXT;
    this.Daypart  = "Morning/Afternoon/Evening"; // Managed by Dash.Utils -> 5-minute background update interval.
    // TODO: Mozilla officially/explicitly recommends against userAgent sniffing, we should probably update this...
    //  https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent#mobile_device_detection
    this.IsMobileiOS = /iPhone|iPad|iPod/i.test(navigator.userAgent);
    this.IsMobile = this.IsMobileiOS || /Mobi|Android|webOS|BlackBerry|IEMobile|CriOS|OPiOS|Opera Mini/i.test(navigator.userAgent);
    // Not exclusive to mobile, unless you also check for this.IsMobileiOS.
    // Safari will be present in the userAgent on Apple devices even when using other browsers,
    // so we have to make sure those other browser names aren't present in the userAgent.
    this.IsSafari = /Safari/i.test(navigator.userAgent) && !(/Chrome|Firefox|OP/i.test(navigator.userAgent));
    // Web-app saved to home screen
    this.IsMobileFromHomeScreen = (
        window.navigator.standalone === true  // iOS
        || window.matchMedia("(display-mode: standalone)").matches  // Android
    );
    this.Local = new DashLocal(this.Context);
    this.DarkModeActive = ["true", true].includes(this.Local.Get("dark_mode_active"));
    this.Color = new DashColor(this.DarkModeActive);
    if (this.DarkModeActive) {
        console.warn(
            "*** Dark mode active ***\n\n" +
            "Be sure that to call Dash.Color.SwapIfDarkModeActive() " +
            "after custom colors are set in color spec file."
        );
    }
    this.Animation = new DashAnimation();
    this.DateTime  = new DashDateTime();
    this.File      = new DashFile();
    this.Gui       = new DashGui();
    this.History   = new DashHistory();
    this.Layout    = new DashLayout();
    this.Math      = new DashMath();
    this.RegEx     = new DashRegEx();
    this.Requests  = new DashRequest();
    this.Size      = new DashSize(this.IsMobile);
    this.Temp      = new DashTemp();
    this.User      = new DashUser();
    this.Utils     = new DashUtils();
    this.Validate  = new DashValidate();
    this.View      = new DashView();
    if (this.IsMobile) {
        this.Mobile = {
            Combo:           DashMobileCombo,
            TextBox:         DashMobileTextBox,
            CardStack:       DashMobileCardStack,
            UserProfile:     DashMobileUserProfile,
            SearchableCombo: DashMobileSearchableCombo
        };
    }
    // As of 9/8/22, iOS/Safari don't support regex lookbehind, which is used in DashDocsHelp. For now,
    // going to skip the inclusion of Docs for mobile, because we really don't need it in that case anyway.
    else {
        this.Docs = {
            Box:  DashDocsBox,
            Help: DashDocsHelp,
            View: DashDocsView
        };
    }
    this.GetDeepCopy      = this.Utils.GetDeepCopy.bind(this.Utils);
    this.Logout           = this.User.Logout;
    this.OnAnimationFrame = this.Utils.OnAnimationFrame.bind(this.Utils);
    this.OnHTMLResized    = this.Utils.OnHTMLResized.bind(this.Utils);
    this.OnFrame          = this.Utils.OnFrame.bind(this.Utils);
    this.Request          = this.Requests.Request.bind(this.Requests);
    this.SendEmail        = this.Requests.SendEmail.bind(this.Requests);
    this.SetInterval      = this.Utils.SetTimer.bind(this.Utils);
    this.SetTimer         = this.Utils.SetTimer.bind(this.Utils);
    // |-------------------------------------------------------------------------------------------------------------|
    // | DEPRECATED: These exist to prevent older projects from breaking due to these having been moved/restructured |
    // |-------------------------------------------------------------------------------------------------------------|
    // | Left side is the deprecated, backwards-compatible pointer, right side is the proper/new pointer             |
    // |-------------------------------------------------------------------------------------------------------------|
    this.FormatTime         = this.DateTime.FormatTime.bind(this.DateTime);
    this.IsServerIsoDate    = this.DateTime.IsIsoFormat.bind(this.DateTime);
    this.ReadableDateTime   = this.DateTime.Readable.bind(this.DateTime);
    this.GetFormContainer   = this.Gui.GetFormContainer.bind(this.Gui);
    this.RandomID           = this.Math.RandomID.bind(this.Math);
    this.IsValidEmail       = this.Validate.Email.bind(this.Validate);
    this.IsValidObject      = this.Validate.Object.bind(this.Validate);
    this.ValidateResponse   = this.Validate.Response.bind(this.Validate);
    this.Gui.Layout         = this.Layout;
    this.Gui.PaneSlider     = this.Layout.PaneSlider;
    this.Gui.SearchableList = this.Layout.SearchableList;
    this.Layout.ButtonBar   = this.Gui.ButtonBar;
    // |-------------------------------------------------------------------------------------------------------------|
    this.HardwareAccelerationCSS = {
        "-webkit-transform": "translateZ(0)",
        "-moz-transform":    "translateZ(0)",
        "-ms-transform":     "translateZ(0)",
        "-o-transform":      "translateZ(0)",
        "transform":         "translateZ(0)"
    };
    this.setup_styles = function () {
        $("body").css({
            "overflow": "hidden"
        });
        this.html.css({
            "position": "absolute",
            "left": 0,
            "top": 0,
            "background": this.Color.GetVerticalGradient("#444", "#111", "#111"),
        });
        (function (self) {
            requestAnimationFrame(function () {
                self.draw();
            });
            $(window).on("resize", function () {
                self.draw();
            });
        })(this);
    };
    this.draw = function () {
        this.width = $(window).width();
        this.height = $(window).height();
        this.html.css({
            "width": this.width,
            "height": this.height
        });
    };
    this.extend_array_prototype = function () {
        // *** IMPORTANT NOTE ***
        // To extend Object types, like Array (unlike String), something like:
        //
        // Array.prototype.Last = function () {}
        //
        // will not work effectively. Instead, you must use Object.defineProperty,
        // or defineProperties, as in the example for Array.prototype.Last below.
        // When extending an Object type in the incorrect way above, it
        // technically works, and you can successfully call the new function.
        // However, doing it that way makes the newly created function
        // enumerable, which breaks any and all enumerations of the extended
        // object type. For example, if you loop through an Array like this:
        //
        // var test_array = ["a", "b"];
        //
        // for (var i in test_array) {
        //     console.log(test_array[i])
        //
        // You would see three printouts instead of two:
        //     - "a"
        //     - "b"
        //     - Last
        Object.defineProperties(
            Array.prototype,
            {
                "Last": {
                    "value": function () {
                        try {
                            return this[this.length - 1];
                        }
                        catch {
                            console.warn("Array.prototype.Last() failed:", this);
                            return this;
                        }
                    }
                },
                "SetLast": {
                    "value": function (value) {
                        try {
                            this[this.length - 1] = value;
                        }
                        catch {
                            console.warn("Array.prototype.SetLast() failed:", this);
                            return this;
                        }
                    }
                },
                "Remove": {
                    "value": function (item, return_item=true) {
                        try {
                            var removed = this.Pop(this.indexOf(item), return_item);
                            if (return_item) {
                                return removed;
                            }
                            return this;
                        }
                        catch {
                            console.warn("Array.prototype.Remove() failed:", this);
                            return this;
                        }
                    }
                },
                "Pop": {
                    "value": function (index=null, return_item=true) {
                        try {
                            if (index === null) {
                                index = this.length - 1;  // Last index
                            }
                            index = parseInt(index);
                            if (index > -1) { // -1 means it's not in the array
                                var removed = this.splice(index, 1);
                            }
                            if (return_item) {
                                return removed.length ? removed[0] : null;  // Splice returns an array
                            }
                            return this;
                        }
                        catch {
                            console.warn("Array.prototype.Pop() failed:", this);
                            return this;
                        }
                    }
                }
            }
        );
    };
    this.extend_string_prototype = function () {
        String.prototype.Title = function () {
            try {
                if (this.includes("_")) {
                    var asset_path = this.replaceAll("_", " ").toLowerCase().split(" ");
                    for (var i = 0; i < asset_path.length; i++) {
                        asset_path[i] = asset_path[i].charAt(0).toUpperCase() + asset_path[i].slice(1);
                    }
                    return asset_path.join(" ");
                }
                return this.slice(0, 1).toUpperCase() + this.slice(1, this.length);
            }
            catch {
                console.warn("String.prototype.Title() failed:", typeof this, this);
                return this;
            }
        };
        String.prototype.Trim = function (char) {
            try {
                if (!char) {
                    return this.trim();
                }
                return this.LTrim(char).RTrim(char);
            }
            catch {
                console.warn("String.prototype.Trim() failed:", typeof this, this);
                return this;
            }
        };
        String.prototype.LTrim = function (char) {
            try {
                var trimmed = "";
                if (this.startsWith(char)) {
                    trimmed = this.substring(char.length, this.length);
                }
                if (this.startsWith(char)) {
                    return trimmed.LTrim(char);
                }
                return this;
            }
            catch {
                console.warn("String.prototype.LTrim() failed:", typeof this, this);
                return this;
            }
        };
        String.prototype.RTrim = function (char) {
            try {
                var trimmed = "";
                if (this.endsWith(char)) {
                    trimmed = this.substring(0, this.length - char.length);
                }
                if (this.endsWith(char)) {
                    return trimmed.RTrim(char);
                }
                return this;
            }
            catch {
                console.warn("String.prototype.RTrim() failed:", typeof this, this);
                return this;
            }
        };
        String.prototype.Count = function (char) {
            try {
                return (this.split(char).length - 1);
            }
            catch {
                console.warn("String.prototype.Count() failed:", typeof this, this);
                return this;
            }
        };
        String.prototype.IsDigit = function () {
            try {
                return /^\d+$/.test(this);
            }
            catch {
                console.warn("String.prototype.IsDigit() failed:", typeof this, this);
                return this;
            }
        };
    };
    this.extend_date_prototype = function () {
        // This gets the ISO week number, which is equivalent to calling '.isocalendar().week' on a python datetime object
        Date.prototype.getWeek = function () {
            var date = new Date(this.getTime());
            date.setHours(0, 0, 0, 0);
            // Thursday in current week decides the year
            date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
            // January 4 is always in week 1
            var week1 = new Date(date.getFullYear(), 0, 4);
            // Adjust to Thursday in week 1 and count number of weeks from date to week1
            return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);
        };
    };
    this.extend_js = function () {
        this.extend_array_prototype();
        this.extend_string_prototype();
        this.extend_date_prototype();
    };
    // Called once when document ready
    this.Initialize = function () {
        this.extend_js();
        this.setup_styles();
    };
}
$(document).on("ready", function () {
    $.fn.extend({  // TODO: are these extensions used?
        "animateStep": function (options) {
            return this.each(function () {
                var elementOptions = $.extend({}, options, {step: options.step.bind($(this))});
                $({x: options.from}).animate({x: options.to}, elementOptions);
            });
        },
        "rotate": function (value) {
            return this.css("transform", "rotate(" + value + "deg)");
        }
    });
    if (window.location.href.includes("https://www.") && !window.location.href.includes("file://")) {
        console.warn("Warning: URL Loaded with www -> Redirecting");
        window.location.href = window.location.href.replace("https://www.", "https://");
    }
    // TODO: Do we really need this as a window variable rather than just calling it from Dash.Math?
    window.InverseLerp = function (min, max, val) {
        return (val - min) / (max - min);
    };
    // TODO: Do we really need this as a window variable rather than just calling it from Dash.Math?
    window.Lerp = function (valA, valB, t) {
        if (t > 1) {
            t = 1;
        }
        if (t < 0) {
            t = 0;
        }
        return valA + t * (valB - valA);
    };
    window.Dash = new Dash();
    window.d = window.Dash;  // TODO: deprecate this
    window.Dash.Initialize();
    $("body").empty().append(window.Dash.html);
    if (!window.RunDash) {
        console.log("Dash is initialized, but there is no window.RunDash() function. Create one and reload.");
    }
    else {
        var html = window.RunDash();
        if (!html) {
            console.log("Dash Warning: The window.RunDash() must return an html element to anchor this app.");
        }
        else {
            window.Dash.html.append(html);
        }
    }
});

function DashGui() {
    this.Button                    = DashGuiButton;
    this.ButtonBar                 = DashGuiButtonBar;
    this.ChatBox                   = DashGuiChatBox;
    this.Checkbox                  = DashGuiCheckbox;
    this.Combo                     = DashGuiCombo;
    this.Context2D                 = DashGuiContext2D;
    this.CopyButton                = DashGuiCopyButton;
    this.FileExplorer              = DashGuiFileExplorer;
    this.FileExplorerDesktopLoader = DashGuiFileExplorerDesktopLoader;
    this.Header                    = DashGuiHeader;
    this.Icon                      = DashGuiIcon;
    this.IconButton                = DashGuiIconButton;
    this.Input                     = DashGuiInput;
    this.InputRow                  = DashGuiInputRow;
    this.LoadDots                  = DashGuiLoadDots;
    this.LoadingLabel              = DashGuiLoadingLabel;
    this.LoadingOverlay            = DashGuiLoadingOverlay;
    this.Login                     = DashGuiLogin;
    this.Modal                     = DashGuiModal;
    this.Prompt                    = DashGuiPrompt;
    this.PropertyBox               = DashGuiPropertyBox;
    this.Signature                 = DashGuiSignature;
    this.Slider                    = DashGuiSlider;
    this.TextArea                  = DashGuiTextArea;
    this.ToolRow                   = DashGuiToolRow;
    this.GetHTMLContext = function (optional_label_text="", optional_style_css={}, color=null) {
        if (!color) {
            color = Dash.Color.Light;
        }
        var html = $("<div>" + optional_label_text + "</div>");
        html.css({
            "color": color.Text,
            "font-family": "sans_serif_normal",
            "background": color.Background,
            ...optional_style_css
        });
        return html;
    };
    this.GetHTMLAbsContext = function (optional_label_text="", color=null, optional_style_css={}) {
        if (!color) {
            color = Dash.Color.Light;
        }
        var html = $("<div>" + optional_label_text + "</div>");
        html.css({
            "position": "absolute",
            "inset": 0,
            "overflow-y": "auto",
            "color": color.Text,
            "background": color.Background,
            ...optional_style_css
        });
        return html;
    };
    this.GetHTMLBoxContext = function (optional_style_css={}, color=null) {
        if (!color) {
            color = Dash.Color.Light;
        }
        var html = $("<div></div>");
        html.css({
            "padding": Dash.Size.Padding,
            "margin-bottom": Dash.Size.Padding,
            "color": color.Text,
            "border-radius": Dash.Size.Padding * 0.5,
            "box-shadow": "0px 0px 10px 1px rgba(0, 0, 0, 0.18)",
            "background": color.BackgroundRaised,
            ...optional_style_css
        });
        return html;
    };
    this.HasOverflow = function (html) {
        try {
            return (
                   (html[0].offsetHeight < html[0].scrollHeight)
                || (html[0].offsetWidth < html[0].scrollWidth)
            );
        }
        catch {
            return false;
        }
    };
    this.ScrollToBottom = function (html) {
        html[0].scrollTop = html[0].scrollHeight;
    };
    this.ScrollToElement = function (container_html, element_html) {
        if (!this.HasOverflow(container_html)) {
            return;
        }
        var container_top = container_html.offset().top;
        var container_bottom = container_top + container_html.height();
        var element_top = element_html.offset().top;
        var element_bottom = element_top + element_html.height();
        if (  // Element is partially or fully visible within the container
               (element_top >= container_top && element_top <= container_bottom)
            || (element_bottom >= container_top && element_bottom <= container_bottom)
        ) {
            return;
        }
        element_html[0].scrollIntoView();
    };
    this.GetBottomDivider = function (color=null, width_percent="") {
        var bottom_divider = $("<div></div>");
        if (width_percent) {
            width_percent = parseInt(width_percent);
        }
        bottom_divider.css({
            "height": Dash.Size.Padding * 0.1,
            "margin-left": "auto",
            "margin-right": "auto",
            "margin-top": Dash.Size.Padding * 2,
            "width": width_percent ? width_percent.toString + "%" : "98%",
            "background": color ? color.AccentGood : Dash.Color.Light.AccentGood
        });
        return bottom_divider;
    };
    // A full width box that is meant to display information
    this.GetTipBox = function (code, msg, optional_style_css) {
        var tip = Dash.Gui.GetHTMLBoxContext(optional_style_css);
        var code_html = Dash.Gui.GetHTMLContext(code);
        var msg_html = Dash.Gui.GetHTMLContext(msg);
        code_html.css({
            "font-family": "sans_serif_bold",
        });
        tip.append(code_html);
        tip.append(msg_html);
        return tip;
    };
    // A full width box that is meant to display an error
    this.GetErrorBox = function (code, msg) {
        var css = {};
        css["background"] = "orange";
        var tip = Dash.Gui.GetHTMLBoxContext(css);
        var code_html = Dash.Gui.GetHTMLContext(code);
        var msg_html = Dash.Gui.GetHTMLContext(msg);
        code_html.css({
            "font-family": "sans_serif_bold",
        });
        tip.append(code_html);
        tip.append(msg_html);
        return tip;
    };
    this.GetFormContainer = function () {
        var container = $("<div></div>");
        container.css({
            "background": ContainerColor,  // TODO: What is this meant to be?
            "margin": Dash.Size.Padding,
            "padding": Dash.Size.Padding,
            "box-shadow": "0px 0px 15px 1px rgba(0, 0, 0, 0.2)",
            "color": "rgba(0, 0, 0, 0.8)",
            "border-radius": 6,
        });
        return container;
    };
    this.GetFlexSpacer = function (flex_grow_value=2) {
        var html = $("<div></div>");
        
        html.css({
            "flex-grow": flex_grow_value,
        });
        return html;
    };
    this.GetColorPicker = function (binder, callback, label_text="Color Picker", dash_color=null, default_picker_hex_color="#00ff00") {
        if (!dash_color) {
            dash_color = Dash.Color.Light;
        }
        callback = callback.bind(binder);
        var include_label = label_text && label_text.replace(":", "") !== "none";
        var color_picker = {
            "html": $("<div></div>"),
            "input": $("<input type='color' id='colorpicker' value='" + default_picker_hex_color + "'>")
        };
        if (include_label) {
            color_picker["label"] = $("<label for='colorpicker'>" + label_text + "</label>");
            var line_break = label_text.includes("\n");
            var label_css = {
                "font-family": "sans_serif_bold",
                "font-size": "80%",
                "color": dash_color.Text || "black",
                "top": line_break ? 0 : (-Dash.Size.Padding * 0.5)
            };
            if (line_break) {
                label_css = {
                    ...label_css,
                    "white-space": "pre",
                    "height": Dash.Size.ButtonHeight,
                    "display": "block",
                    "float": "left",
                    "text-align": "right",
                    "line-height": (Dash.Size.ButtonHeight * 0.5) + "px"
                };
            }
            color_picker.label.css(label_css);
        }
        color_picker.input.css({
            "height": Dash.Size.ButtonHeight,
            "margin-left": Dash.Size.Padding * 0.5,
            "background": "none",
            "cursor": "pointer",
            "border": "1px solid " + dash_color.StrokeLight,
            "border-radius": Dash.Size.Padding * 0.3
        });
        if (include_label) {
            color_picker.html.append(color_picker.label);
        }
        color_picker.html.append(color_picker.input);
        (function (input, callback) {
            input.on("change", function () {
                callback(color_picker.input.val());
            });
        })(color_picker.input, callback);
        return color_picker;
    };
    this.GetTopRightIconButton = function (binder, callback, icon_id="trash", data_key=null, additional_data=null, existing_top_right_label=null) {
        callback = callback.bind(binder);
        if (existing_top_right_label) {
            existing_top_right_label.css({
                "right": Dash.Size.Padding * 5
            });
        }
        return (function (self, icon_id, callback, data_key, additional_data, binder) {
            var button = new Dash.Gui.IconButton(
                icon_id,
                function (response) {
                    callback(data_key, additional_data, response);
                },
                binder,
                binder.color || Dash.Color.Dark
            );
            button.html.css({
                "position": "absolute",
                "left": "auto",
                "bottom": "auto",
                "top": Dash.Size.Padding * 0.8,
                "right": Dash.Size.Padding,
                "height": Dash.Size.RowHeight,
                "z-index": 1
            });
            return button;
        })(this, icon_id, callback, data_key, additional_data, binder);
    };
    this.GetTopRightLabel = function (text="", color=null) {
        var label = this.GetHTMLAbsContext(text, color);
        label.css({
            "background": "none",
            "left": "auto",
            "bottom": "auto",
            "right": Dash.Size.Padding,
            "height": Dash.Size.RowHeight,
            "text-align": "right",
            "color": color ? color.Text : Dash.Color.Light.Text,
            "opacity": 0.6,
            "z-index": 1,
            "cursor": "auto"
        });
        return label;
    };
    this.OpenFileURLDownloadDialog = function (url, filename="", callback=null) {
        var dialog_id = "__dash_file_url_download_dialog";
        if (!filename) {
            filename = url.split("/").Last();
            if (filename.includes("?")) {
                filename = filename.split("?")[0];
            }
        }
        Dash.File.URLToBlob(
            url,
            function (blob) {
                var url_pointer = window.URL.createObjectURL(blob);
                // This will only already exist if we don't removeChild at the end of this
                // function - however, using removeChild at the end seems most efficient
                var dialog = document.getElementById(dialog_id);
                if (!dialog) {
                    dialog = document.createElement("a");
                    dialog.setAttribute("id", dialog_id);
                    dialog.style.display = "none";
                }
                dialog.href = url_pointer;
                dialog.download = filename;
                document.body.appendChild(dialog);
                dialog.click();
                window.URL.revokeObjectURL(url_pointer);
                document.body.removeChild(dialog);
                if (callback) {
                    callback();
                }
            },
            callback
        );
    };
    // This is rather quick/dirty and should probably become its own style at some point (will require it to first be visually improved)
    // This can also be taken even further by appending html to the tooltip div after it's returned, rather than supplying text
    this.AddTooltip = function (html, static_text=null, monospaced=true, additional_css={}, delay_ms=1000, override_element=null, text_getter=null) {
        var tooltip = $("<div></div>");
        html.append(tooltip);
        this.set_tooltip_css(tooltip, additional_css, monospaced);
        if (static_text) {
            tooltip.text(static_text);
        }
        tooltip.hide();
        (function (self, html, additional_css, override_element, delay_ms, tooltip, text_getter) {
            var timer;
            html.hover(
                function () {
                    timer = self.tooltip_on_hover_in(html, tooltip, override_element, additional_css, delay_ms, text_getter);
                },
                function () {
                    self.tooltip_on_hover_out(tooltip, override_element, timer);
                }
            );
        })(this, html, additional_css, override_element, delay_ms, tooltip, text_getter);
        return tooltip;
    };
    this.GetImageContainer = function (url, height=100, centered=false, minimizable=false, start_minimized=false) {
        if (start_minimized && !minimizable) {
            minimizable = true;
        }
        var image = $("<div></div>");
        image.css({
            "background-image": "url(" + url + ")",
            "background-repeat": "no-repeat",
            "background-size": "contain",
            "margin": Dash.Size.Padding,
            "height": start_minimized ? height * 0.25 : height,
            "width": start_minimized ? height * 0.25 : height,
            "border-radius": Dash.Size.BorderRadius
        });
        if (centered) {
            image.css({
                "background-position": "center center"
            });
        }
        if (!minimizable) {
            return image;
        }
        this.add_corner_button_to_image_container(image, height, !start_minimized);
        return image;
    };
    // This styles it in the Candy way - this is meant to stay simple and has been
    // propagated throughout a few places in Dash, so be cautious if altering this
    this.Flatten = function (html) {
        html.css({
            "box-shadow": "none",
            "background": "none",
            "border-radius": ""
        });
    };
    this.GetDarkModeToggle = function (color) {
        var container = $("<div></div>");
        container.css({
            "display": "flex",
            "width": "fit-content",
            "height": "fit-content"
        });
        var toggle = new Dash.Gui.Checkbox(
            "dark_mode_active",
            false,
            color,
            "Toggle",
            this,
            function () {
                location.reload();  // Necessary unless we somehow redraw everything relative to the current context
            }
        );
        toggle.html.css({
            "margin-left": Dash.Size.Padding * 0.5,
            "margin-right": Dash.Size.Padding * 1.6
        });
        toggle.SetIconSize(190);
        toggle.SetTrueIconName("toggle_on_light");
        toggle.SetFalseIconName("toggle_off_light");
        var sun_icon = new Dash.Gui.Icon(color, "sun");
        var moon_icon = new Dash.Gui.Icon(color, "moon");
        sun_icon.SetColor(color.AccentGood);
        sun_icon.AddShadow();
        moon_icon.SetColor(color.AccentGood);
        moon_icon.AddShadow();
        sun_icon.html.css({
            "pointer-events": "none"
        });
        moon_icon.html.css({
            "pointer-events": "none"
        });
        container.append(sun_icon.html);
        container.append(toggle.html);
        container.append(moon_icon.html);
        return container;
    };
    this.GetMobileNotificationIcon = function (size=null, parent_is_circle=true, color="red") {
        if (!size) {
            size = (Dash.Size.ButtonHeight - Dash.Size.Padding) * 0.25;  // Default for CardStackFooterButton
        }
        var icon = $("<div></div>");
        var pos = parent_is_circle ? 0 : -(Dash.Size.Padding * 0.5);
        icon.css({
            "background": color,
            "width": size,
            "height": size,
            "border-radius": size,
            "box-shadow": "0px 3px 5px 1px rgba(0, 0, 0, 0.2)",
            "border": "2px solid white",
            "position": "absolute",
            "top": pos,
            "right": pos
        });
        return icon;
    };
    this.add_corner_button_to_image_container = function (image_container, container_height, minimize=true) {
        var opacity = 0.75;
        var color = Dash.Color.Light;
        var button = (function (self) {
            return self.GetTopRightIconButton(
                this,
                function () {
                    // Dummy, will be overwritten
                },
                minimize ? "minimize" : "expand"
            );
        })(this);
        button.SetIconColor(color.Button.Text.Base);
        button.SetHoverHint(minimize ? "Minimize" : "Expand");
        button.icon.icon_html.css({
            "font-size": (container_height * 0.04).toString() + "px",
            "transform": "scale(-1, 1)"
        });
        button.icon.html.css({
            "margin-top": Dash.Size.Padding * 0.2,
            "margin-left": Dash.Size.Padding * 0.2
        });
        button.html.css({
            "background": color.Button.Background.Base,
            "width": container_height * 0.05,
            "height": container_height * 0.05,
            "top": Dash.Size.Padding * 0.7,
            "left": Dash.Size.Padding * 0.7,
            "box-shadow": "0px 0px 2px 1px " + Dash.Color.ParseToRGB(color.Button.Text.Base).replace(")", ", 0.75)"),
            "opacity": opacity
        });
        // Separate closure to override button's default click behavior, while retaining access to it
        (function (self) {
            button.html.on("click", function () {
                image_container.stop().animate(
                    {
                        "width": minimize ? container_height * 0.25 : container_height,
                        "height": minimize ? container_height * 0.25 : container_height
                    },
                    50,
                    function () {  // On animate complete
                        button.html.remove();
                        self.add_corner_button_to_image_container(image_container, container_height, !minimize);
                    }
                );
            });
            button.html.on("mouseenter", function () {
                button.html.stop().animate(
                    {"opacity": 1},
                    25,
                );
            });
            button.html.on("mouseleave", function () {
                button.html.stop().animate(
                    {"opacity": opacity},
                    25,
                );
            });
        })(this);
        image_container.append(button.html);
    };
    this.set_tooltip_css = function (tooltip, additional_css, monospaced) {
        var color = Dash.Color.Dark;
        var padding = Dash.Size.Padding * 0.5;
        tooltip.css({
            "padding": padding,
            "color": color.Text,
            "background": color.Background,
            "border": "2px solid " + color.BackgroundRaised,
            "border-radius": padding,
            "box-shadow": "0px 0px 10px 1px rgba(0, 0, 0, 0.5)",
            "position": "fixed",
            "z-index": 100000,
            "white-space": "pre-wrap",
            "opacity": 0.95,
            "cursor": "auto",
            "width": Dash.Size.ColumnWidth * 3,
            "pointer-events": "none",
            ...additional_css
        });
        if (monospaced) {
            tooltip.css({
                "font-family": "Andale Mono, Monaco, monospace",
                "font-size": "85%"
            });
        }
        else {
            tooltip.css({
                "font-family": "sans_serif_normal",
                "font-size": "90%"
            });
        }
        return tooltip;
    };
    this.tooltip_on_hover_in = function (html, tooltip, override_element, additional_css, delay_ms, text_getter=null) {
        if (override_element) {
            // Override element is intended to NOT show the tooltip under the below defined
            // circumstances. These will be unique depending on the element - expand as needed.
            if (override_element instanceof DashLayoutListRow) {
                if (override_element.IsExpanded()) {
                    return;
                }
            }
        }
        return setTimeout(
            function () {
                var top = html.offset()["top"];
                var left = html.offset()["left"];
                if (additional_css && additional_css["top"]) {
                    top = parseInt(additional_css["top"]);
                }
                if (additional_css && additional_css["left"]) {
                    left = parseInt(additional_css["left"]);
                }
                tooltip.css({
                    ...additional_css,
                    "top": top,
                    "left": left
                });
                tooltip.show();
                if (text_getter) {
                    try {
                        tooltip.text(text_getter());
                    }
                    catch (e) {
                        console.error(e);
                    }
                }
            },
            delay_ms
        );
    };
    this.tooltip_on_hover_out = function (tooltip, override_element, timer) {
        if (override_element && !tooltip.is(":visible")) {
            // Override element is intended to NOT show the tooltip under the below defined
            // circumstances. These will be unique depending on the element - expand as needed.
            if (override_element instanceof DashLayoutListRow) {
                if (override_element.IsExpanded()) {
                    return;
                }
            }
        }
        clearTimeout(timer);
        tooltip.hide();
    };
}

function DashUser () {
    this.__auth_authenticated_cb = null;
    this.__auth_not_authenticated_cb = null;
    this.Data = null;
    this.Init = null;
    this.GetDisplayName = function (user_data=null) {
        if (!user_data) {
            user_data = this.Data;
        }
        return user_data["display_name"] ? user_data["display_name"] :
            user_data["first_name"] ? user_data["first_name"] +
            (user_data["last_name"] ? " " + user_data["last_name"] : "") :
            user_data["email"];
    };
    this.GetByEmail = function (user_email) {
        return Dash.User.Init["team"] ? Dash.User.Init["team"][user_email] : {};
    };
    this.GetImageByEmail = function (user_email) {
        if (!user_email) {
            return this.get_default_image_data();
        }
        if (user_email === Dash.User.Data["email"] && Dash.User.Data["img"]) {
            return Dash.User.Data["img"];
        }
        if (Dash.User.Init["team"][user_email] && Dash.User.Init["team"][user_email]["img"]) {
            return Dash.User.Init["team"][user_email]["img"];
        }
        // TODO: Allow dash to always return a stub for a user
        //  image along with the init data on the auth call
        return this.get_default_image_data();
    };
    this.Authenticate = function (bind, on_user_authenticated, on_user_not_authenticated, optional_params={}) {
        this.__auth_authenticated_cb = on_user_authenticated.bind(bind);
        this.__auth_not_authenticated_cb = on_user_not_authenticated.bind(bind);
        var token = Dash.Local.Get("token");
        var email = Dash.Local.Get("email");
        var user_json = Dash.Local.Get("user_json");
        if (token && email && user_json) {
            var params = {
                "f": "validate",
                "token": token,
                "init": true,
                "gzip": true
            };
            for (var key in optional_params) {
                params[key] = optional_params[key];
            }
            Dash.Request(this, this.on_auth_response, "Users", params);
        }
        else {
            this.__auth_not_authenticated_cb();
        }
    };
    this.SetUserAuthentication = function (email, server_response) {
        if (email && server_response["token"]) {
            this.Data = server_response["user"];
            this.Init = server_response["init"];
            Dash.Local.Set("email", email);
            Dash.Local.Set("token", server_response["token"]);
            Dash.Local.Set("user_json", JSON.stringify(server_response["user"]));
        }
        else {
            this.Data = null;
            this.Init = null;
            Dash.Local.Set("email", "");
            Dash.Local.Set("token", "");
            Dash.Local.Set("user_json", "");
        }
        this.build_init_team_combo();
    };
    this.get_default_image_data = function () {
        return {
            "default": true,
            "aspect": 1,
            "height": 512,
            "width": 512,
            "thumb_url": "https://dash.guide/github/dash/client/full/bin/img/user_default.jpg"
        };
    };
    this.build_init_team_combo = function () {
        this.Init["team_combo"] = [];
        if (!this.Init["team"]) {
            return;
        }
        for (var i in this.Init["team_sort"]) {
            var email = this.Init["team_sort"][i];
            this.Init["team_combo"].push({
                ...Dash.GetDeepCopy(this.Init["team"][email]),  // Deep copy required here
                "label_text": this.Init["team"][email]["display_name"]  // Added for cohesiveness
            });
        }
    };
    this.on_auth_response = function (response) {
        response["token"] = response["token"] || Dash.Local.Get("token");
        if (response["valid_login"] && response["user"]["email"]) {
            this.SetUserAuthentication(response["user"]["email"], response);
            this.__auth_authenticated_cb();
        }
        else {
            console.log("** The user is no longer authenticated **\n", response);
            this.SetUserAuthentication();
            this.__auth_not_authenticated_cb();
        }
    };
    this.Logout = function () {
        if (!window.confirm("Log out?")) {
            return;
        }
        Dash.Local.Set("email", "");
        Dash.Local.Set("token", "");
        Dash.Local.Set("user_json", "");
        location.reload();
    };
}

function DashSize (is_mobile) {
    this.Stroke = is_mobile ? 6 : 3;
    this.Padding = is_mobile ? 20 : 10;
    this.RowHeight = is_mobile ? 40 : 20;
    this.BorderRadius = is_mobile ? 9 : 3; // For containers
    this.ColumnWidth = is_mobile ? 300 : 150;
    this.BorderRadiusInteractive = is_mobile ? 30 : 3; // For interactive elements (buttons, inputs, combos, etc)
    this.ButtonHeight = this.RowHeight + (this.Padding);
    if (is_mobile) {
        // This is special handling for iPhone 13 mini that has "Larger Text" selected for the "Display Zoom" setting (globally-zoomed screen)
        if (/iPhone/i.test(navigator.userAgent) && window.devicePixelRatio === 3 && window.screen.width === 320 && window.screen.height === 693) {
            for (var prop_name in this) {
                this[prop_name] = Math.round(this[prop_name] * 0.9);
            }
        }
        // Add any other special cases here
    }
}

function DashView () {
    this.Admin            = DashAdminView;
    this.PDF              = DashPDFView;
    this.SiteSettings     = DashAdminView;
    this.SiteSettingsTabs = new DashAdminTabs();
    this.Style            = DashStyleView;
    this.User             = DashUserView;
}

function DashMath () {
    this.InverseLerp = function (min, max, val) {
        return (val - min) / (max - min);
    };
    this.Lerp = function (a, b, t) {
        return a + Math.min(Math.max(t, 0), 1) * (b - a);
    };
    // This cannot return multiple unique numbers on the same frame, they'll all be the same - use this.Random instead
    this.RandomNumber = function (min=10000000, max=99999999) {
        return parseInt((min + (((Date.now() * 9301 + 49297) % 233280) / 233280) * (max - min)).toString());
    };
    // Contrary to this.RandomNumber, this will return multiple unique numbers in the same frame
    this.Random = function () {
        return parseInt(Math.random().toString().split(".").Last());
    };
    // Get a random ID in the same format as PyDash Utils GetRandomID
    this.RandomID = function () {
        var random_id = "";
        var date = new Date();
        // Python datetime.datetime.today() format: 2021-08-04 03:48:11.866289
        // Converted to PyDash Utils GetRandomID format: 202108032117088034
        random_id += date.getFullYear().toString();
        random_id += this.ensure_double_digit(date.getMonth() + 1);  // Add one because Date() months start at 0
        random_id += this.ensure_double_digit(date.getDay() + 1);  // Add one because Date() days start at 0
        random_id += this.ensure_double_digit(date.getHours());
        random_id += this.ensure_double_digit(date.getMinutes());
        random_id += this.ensure_double_digit(date.getSeconds());
        random_id += this.ensure_double_digit(date.getMilliseconds()).substring(0, 3);
        random_id += Math.floor(Math.random() * 99).toString();
        return random_id;
    };
    this.Range = function (num) {
        return [...new Array(num).keys()];
    };
    // Can't think of a better name for this, nor do I know how to properly explain it...
    // Ex: Dash.Math.GetPercentageIncrements(5) -> ['0.2', '0.4', '0.6', '0.8']
    this.GetPercentageIncrements = function (divisor, start_with_0=false, end_with_1=false, conform_length=true) {
        var list = [];
        var timeout = 5;
        var percent = 1 / 5;
        var len = conform_length ? percent.toString().length : null;
        for (var index of Dash.Math.Range(timeout)) {
            var num = ((index + 1) * percent);
            if (conform_length) {
                num = parseFloat(num.toString().slice(0, len));
            }
            list.push(num);
        }
        if (start_with_0 && list[0] !== 0) {
            list.unshift(0);
        }
        else if (list[0] === 0) {
            list.shift();
        }
        if (end_with_1 && list.Last() !== 1) {
            list.push(1);
        }
        else if (list.Last() === 1) {
            list.Pop();
        }
        return list;
    };
    this.ensure_double_digit = function (number) {
        number = number.toString();
        if (number.length === 1) {
            number = "0" + number;
        }
        else if (number.length === 0) {
            number = "00";
        }
        return number;
    };
}

function DashTemp () {
    this.last_combo_changed = null;
    this.last_input_submitted = null;
    this.SetLastComboChanged = function (combo) {
        this.last_combo_changed = combo;
    };
    this.SetLastInputSubmitted = function (input) {
        this.last_input_submitted = input;
    };
    this.GetLastComboChanged = function () {
        return this.last_combo_changed;
    };
    this.GetLastInputSubmitted = function () {
        return this.last_input_submitted;
    };
    // This is useful as a quick "undo" on the last modified input in cases like
    // when the server returns a response that says that input value is invalid etc
    this.RevertLastInputText = function (temp_last_input=null, allow_empty_string=false) {
        if (!temp_last_input) {
            temp_last_input = this.last_input_submitted;
        }
        if (!temp_last_input) {
            return;
        }
        var previous = temp_last_input.previous_submitted_text || "";
        if (!allow_empty_string && !previous) {
            return;
        }
        if (previous !== temp_last_input.last_submitted_text) {
            temp_last_input.SetText(previous);
        }
        else if (allow_empty_string && !previous && !temp_last_input.last_submitted_text) {
            temp_last_input.SetText("");
        }
    };
    // This is useful as a quick "undo" on the last modified combo in cases like
    // when the server returns a response that says that combo change is invalid etc
    this.RevertLastComboSelection = function (temp_last_combo=null) {
        if (!temp_last_combo) {
            temp_last_combo = this.last_combo_changed;
        }
        if (!temp_last_combo) {
            return;
        }
        var previous = temp_last_combo.previous_selected_option;
        if (!Dash.Validate.Object(previous)) {
            // Instead of returning, might make sense to set 'previous' to
            // the first combo option in the combo's list of options?
            return;
        }
        if (JSON.stringify(previous) !== JSON.stringify(temp_last_combo.selected_option)) {
            temp_last_combo.Update(null, previous, true);
        }
    };
}

function DashFile () {
    // These have not all been tested for the ability to display a preview
    this.Extensions = {
        "image": [
            "gif",
            "jpeg",
            "jpg",
            "png",
            "svg",
            "webp"
        ],
        "model_viewer": [
            "gltf",
            "glb"
        ],
        // Add to these categories as we become aware of more extensions that are commonly being uploaded
        "video": [
            "mp4",
            "mov"
        ],
        "audio": [
            "mp3",
            "wav"
        ],
        "model": [
            "fbx",
            "obj"
        ],
        "drafting": [
            "cad",
            "pdg",
            "3d"
        ]
    };
    this.abs_center_css = {
        "position": "absolute",
        "top": "50%",
        "left": "50%",
        "transform": "translate(-50%, -50%)"
    };
    this.URLToBlob = function (url, callback, error_callback=null) {
        fetch(
            url
        ).then(
            resp => resp.blob()
        ).then(
            blob => callback(blob)
        ).catch(
            () => {
                if (error_callback) {
                    error_callback();
                }
                console.warn("Inline file download using Dash.File.URLToBlob() failed. The URL will be opened in a new tab instead:\n" + url);
                window.open(url, "_blank");
            }
        );
    };
    this.GetPreview = function (color, file_data, height) {
        var file_url = file_data["url"] || file_data["orig_url"] || "";
        var filename = file_data["filename"] || file_data["orig_filename"];
        if (!file_url) {
            return this.GetPlaceholderPreview(color, filename);
        }
        var file_ext = file_url.split(".").Last();
        if (file_ext === "txt") {
            return this.GetPlainTextPreview(file_url);
        }
        if (this.Extensions["video"].includes(file_ext)) {
            return this.GetVideoPreview(file_url, height);
        }
        if (this.Extensions["audio"].includes(file_ext)) {
            return this.GetAudioPreview(file_url, height);
        }
        if (file_ext === "pdf") {
            return this.GetPDFPreview(file_url, height);
        }
        if (this.Extensions["image"].includes(file_ext) || "aspect" in file_data) {
            return this.GetImagePreview(file_url, height);
        }
        if (this.Extensions["model_viewer"].includes(file_ext)) {
            return this.GetModelPreview(file_data["glb_url"], height);
        }
        if (this.Extensions["model"].includes(file_ext) && "glb_url" in file_data) {
            return this.GetModelPreview(file_data["glb_url"], height);
        }
        if (file_ext === "csv") {
            return this.GetCSVPreview(color, file_url, height);
        }
        if (["doc", "docx", "xls", "xlsx", "ppt", "pptx", "one"].includes(file_ext)) {
            return this.GetMicrosoftPreview(file_url, height);
        }
        return this.GetPlaceholderPreview(color, filename);
    };
    this.set_preview_size = function (html, width=null, height=null) {
        var css = {};
        if (width) {
            css["width"] = width;
        }
        if (height) {
            css["height"] = height;
        }
        html.css(css);
        return html;
    };
    this.GetPDFPreview = function (url, height) {
        return this.set_preview_size(
            $("<iframe src='" + url + "'></iframe>"),
            height,
            "100%"
        );
    };
    this.GetPlainTextPreview = function (url, formatted=true) {
        var preview = $("<iframe src='" + url + "'></iframe>");
        if (!formatted) {
            return preview;
        }
        var html = $("<div></div>");
        html.css({
            "position": "absolute",
            "top": "50%",
            "left": "50%",
            "overflow": "auto",
            "transform": "translate(-50%, -50%)",
            "background": Dash.Color.Light.Background  // This is deliberate
        });
        html.append(preview);
        return this.set_preview_size(html, "77%", "100%");
    };
    this.GetModelPreview = function (glb_url, height) {
        // As we become aware of more model file types that are commonly uploaded, we need to write
        // ways in the back-end to convert them to GLB format - FBX is the only one supported for now
        return this.set_preview_size(
            $("<model-viewer src='" + glb_url + "' alt='' camera-controls></model-viewer>"),
            height,
            "100%"
        );
    };
    this.GetVideoPreview = function (url, height, center_in_parent=true, square=false, controls=true) {
        var html = $("<video src='" + url + "' crossorigin='anonymous'></video>");
        if (center_in_parent) {
            html.css(this.abs_center_css);
        }
        this.check_if_video_exists_in_dom(html, height, square, controls);
        return html;
    };
    this.GetAudioPreview = function (url, height, center_in_parent=true) {
        var html = $("<audio src='" + url + "' crossorigin='anonymous' controls></audio>");
        if (center_in_parent) {
            html.css(this.abs_center_css);
        }
        return this.set_preview_size(html, height - (Dash.Size.Padding * 2), null);
    };
    this.GetMicrosoftPreview = function (url, height) {
        return this.set_preview_size(
            $("<iframe src='https://view.officeapps.live.com/op/embed.aspx?src=" + url + "' ></iframe>"),
            height,
            "100%"
        );
    };
    this.GetCSVPreview = function (color, url, height) {
        var html = $("<div></div>");
        html.css({
            "padding": Dash.Size.Padding,
            "background": color.Background,
            "color": color.Text
        });
        (function () {
            $.get(
                url,
                function (data) {
                    var table = "<table>";
                    var rows = data.split("\n");
                    // This row-by-row display is fairly quick/rough, should be improved once it's more important
                    rows.forEach(function (row) {
                        table += "<tr>";
                        var columns = row.split(",");
                        table += "<td>" + columns[0] + "</td>";
                        table += "<td>" + columns[1] + "</td>";
                        table += "<td>" + columns[2] + "</td>";
                        table += "</tr>";
                    });
                    table += "</table>";
                    html.append(table);
                }
            );
        })();
        return this.set_preview_size(html, height, "100%");
    };
    // Basic version
    this.GetImagePreview = function (url, height, width=null) {
        var html = $("<div></div>");
        var css = {
            "background-image": url ? "url(" + url + ")" : "",
            "background-repeat": "no-repeat",
            "background-size": "contain",
            "background-position": "center center"
        };
        if (!url) {
            css["background-color"] = Dash.Color.Light.StrokeDark;
        }
        html.css(css);
        return this.set_preview_size(html, width ? width : height, width ? height : "100%");
    };
    this.GetPlaceholderPreview = function (color, filename="File Preview") {
        var html = $("<div></div>");
        html.text(filename);
        html.css({
            ...this.abs_center_css,
            "font-family": "sans_serif_bold",
            "color": Dash.Color.GetOpposite(color).Text,
        });
        return html;
    };
    // Doing this on instantiation of the video tag can sometimes cause a conflict between the
    // drawing of the controls vs the drawing of the video tag in the DOM, which can lead to the
    // controls not being scaled properly to match the video tag element. Waiting until the
    // video tag exists in the DOM solves that problem. If the source (URL) is updated
    // while the video is not in view, this problem may reappear. This isn't perfect.
    this.check_if_video_exists_in_dom = function (html, height, square=false, controls=true) {
        (function (self) {
            setTimeout(
                function () {
                    if (!($.contains(document, html[0]))) {
                        self.check_if_video_exists_in_dom(html, height, square, controls);
                        return;
                    }
                    self.set_preview_size(html, square ? height : null, height);
                    if (controls) {
                        html.attr("controls", true);
                    }
                },
                100
            );
        })(this);
    };
}

function DashUtils () {
    this.animation_frame_iter = 0;
    this.animation_frame_workers = [];
    this.animation_frame_manager_running = false;
    this.SetDynamicFont = function (html, font_url, font_display_name, font_original_filename, on_load_cb) {
        var font_name = "";
        for (var char of (font_display_name + font_original_filename.split(".")[0])) {
            if (char.toLowerCase() === char.toUpperCase()) {
                continue;  // Not a letter (FontFace font name can only be letters)
            }
            font_name += char;
        }
        var font_face = new FontFace(font_name, "url(" + font_url + ")");
        // Doesn't look like this is actually finding already-loaded fonts, but not a big deal. We should
        // really be using documents.fonts.check(font_name), but it's failing and I can't get it to work.
        if (document.fonts.has(font_face)) {
            html.css({
                "font-family": font_name
            });
            return;
        }
        // Create a new font-face dynamically and update the preview to use it
        (function () {
            font_face.load().then(function (loaded_font) {
                document.fonts.add(loaded_font);
                if (on_load_cb) {
                    on_load_cb();
                }
                html.css({
                    "font-family": font_name
                });
            }).catch(function (error) {
                alert("Failed to load font for preview\n\nError:\n" + error);
                console.error(error);
            });
        })();
    };
    this.NormalizeSearchText = function (text="") {
        if (!text) {
            return text;
        }
        text = text.trim().toLowerCase().replaceAll(".", "").replaceAll("-", "");
        return text.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    };
    this.GetDeepCopy = function (obj) {
        if (!Dash.Validate.Object(obj)) {
            console.warn("Warning: Failed to produce deepcopy, invalid/empty object:", typeof obj, obj);
            return obj;
        }
        return JSON.parse(JSON.stringify(obj));
    };
    this.GetClassName = function (class_instance) {
        return class_instance.constructor.toString().split("(")[0].replace("function", "").trim();
    };
    this.SetTimer = function (binder, callback, ms, source=null) {
        var timer = {
            "callback": callback.bind(binder),
            "source": source || binder,
            "iterations": 0
        };
        (function (self, timer) {
            var iterations = 0;
            timer["timer_id"] = setInterval(
                function () {
                    timer["iterations"] = iterations;
                    self.manage_timer(timer);
                    iterations += 1;
                },
                ms
            );
        })(this, timer);
        this.manage_timer(timer);
        return timer["timer_id"];
    };
    // Very similar to OnFrame, except we capture the size of binder.html and only fire the callback if the size changes
    this.OnHTMLResized = function (binder, callback) {
        this.register_anim_frame_worker({
            "callback": callback.bind(binder),
            "source": binder,
            "width": binder.html.width(),
            "height": binder.html.height(),
            "on_resize": true
        });
    };
    // Store a tiny bit of information about this request
    this.OnFrame = function (binder, callback) {
        this.register_anim_frame_worker({
            "callback": callback.bind(binder),
            "source": binder
        });
    };
    // Should this live in DashAnimation?
    this.OnAnimationFrame = function (binder, callback, html_key=null) {
        var anim_frame = {
            "callback": callback.bind(binder),
            "source": binder,
            "iterations": 0,
            "html": html_key ? binder[html_key] : binder.html
        };
        (function (self, anim_frame, binder, callback, html_key) {
            anim_frame["anim_frame_id"] = requestAnimationFrame(
                function () {
                    self.OnAnimationFrame(binder, callback, html_key);
                }
            );
        })(this, anim_frame, binder, callback, html_key);
        this.manage_animation_frame(anim_frame);
    };
    this.manage_animation_frame = function (anim_frame) {
        if (anim_frame["html"] && !anim_frame["html"].is(":visible")) {
            window.cancelAnimationFrame(anim_frame["anim_frame_id"]);
            return;
        }
        anim_frame["callback"]();
    };
    // This function is called when this class is instantiated. It calls a
    // few global update functions that keep certain time elements current.
    this.start_background_update_loop = function () {
        (function (self) {
            setInterval(
                function () {
                    self.manage_background_update_loop_5_min();
                },
                1000
            );
        })(this);
        this.manage_background_update_loop_5_min();
    };
    // Called once every 5 minutes, and upon instantiation of Dash
    this.manage_background_update_loop_5_min = function () {
        Dash.Daypart = "Day";
        var hrs = new Date().getHours();
        if (hrs < 12) {
            Dash.Daypart = "Morning";
        }
        else if (hrs >= 12 && hrs <= 17) {
            Dash.Daypart = "Afternoon";
        }
        else if (hrs >= 17 && hrs <= 24) {
            Dash.Daypart = "Evening";
        }
        else {
            console.error("Error - Unknown hour set");
        }
    };
    this.manage_timer = function (timer) {
        var still_active = true;
        if (timer.iterations && timer.iterations >= 1) {
            if (timer.source && timer.source.html && !timer.source.html.is(":visible")) {
                still_active = false;
            }
        }
        if (!still_active) {
            clearInterval(timer["timer_id"]);
            return;
        }
        timer["callback"]();
    };
    this.register_anim_frame_worker = function (anim_frame_worker) {
        if (!this.animation_frame_manager_running) {
            // This only needs to be started once, and it will run forever
            this.animation_frame_manager_running = true;
            this.draw_anim_frame_workers();
        }
        // This is intentionally called after we start the worker so that
        // the behavior of Dash.OnFrame is similar to Window.RequestAnimationFrame in that
        // you would not expect the callback to fire until the next frame...
        this.animation_frame_workers.push(anim_frame_worker);
    };
    this.draw_anim_frame_workers = function () {
        this.animation_frame_iter += 1;
        // Coarse timeout
        if (this.animation_frame_iter >= 30) {
            this.animation_frame_iter = 0;
            this.manage_anim_frame_workers();
        }
        // Actually fire each callback
        for (var x in this.animation_frame_workers) {
            if (this.animation_frame_workers[x]["on_resize"]) {
                this.manage_on_resize_worker(x);
            }
            else {
                this.animation_frame_workers[x]["callback"]();
            }
        }
        (function (self) {
            // Call this function again
            requestAnimationFrame(function () {
                self.draw_anim_frame_workers();
            });
        })(this);
    };
    this.manage_on_resize_worker = function (index) {
        var width = this.animation_frame_workers[index]["source"].html.width();
        var height = this.animation_frame_workers[index]["source"].html.height();
        if (parseInt(width) === parseInt(this.animation_frame_workers[index]["width"])) {
            if (parseInt(height) === parseInt(this.animation_frame_workers[index]["height"])) {
                return;  // Nothing to do, height and width are the same
            }
        }
        this.animation_frame_workers[index]["width"] = width;
        this.animation_frame_workers[index]["height"] = height;
        this.animation_frame_workers[index]["callback"](width, height);
    };
    this.manage_anim_frame_workers = function () {
        // This breakout function is not called on every frame, but on
        // approximately every 30 frames. This is so we're not doing anything
        // too heavy on each frame. Check each worker to see if we should
        // still be processing frame updates
        // console.log("Manage them all....");
        // console.log(this.animation_frame_workers.length);
        // TODO: Round out this function to clean up stale html objects
    };
    // This is called on the next frame because window.Dash.<> is
    // not the correct instance / valid until the next frame
    (function (self) {
        requestAnimationFrame(function () {
            self.start_background_update_loop();
        });
    })(this);
}

function DashLocal (context) {
    this.context = context;
    this.Set = function (key, value, session=false) {
        if (key.indexOf(this.context["asset_path"] + "_") !== 0) {
            key = this.context["asset_path"] + "_" + key;
        }
        return session ? sessionStorage.setItem(key, value) : localStorage.setItem(key, value);
    };
    // If bool_default is provided, the value will be
    // parsed as a bool and default to the value provided
    this.Get = function (key, bool_default=null, session=false) {
        if (key.indexOf(this.context["asset_path"] + "_") !== 0) {
            key = this.context["asset_path"] + "_" + key;
        }
        var value = session ? sessionStorage.getItem(key) : localStorage.getItem(key);
        if (bool_default === true) {
            return ["true", true, null, ""].includes(value);
        }
        if (bool_default === false) {
            return ["true", true].includes(value);
        }
        return value;
    };
}

function DashRegEx () {
    this.date = null;
    this.time = null;
    this.space = null;
    this.meridiem = null;
    this.readable_date_time = null;
    // Important:
    // - Since regex need to be compiled, don't generate them until they're needed (by using the flow below)
    // - As of 2/27/23, iOS/Safari still don't support regex lookbehinds (?<!). Do not
    //   use them! Even having them in the code unused will cause the site to not load!
    // MM/DD/YYYY (month and/or day can be 1 or 2 digits each, year can be 2 or 4 digits)
    this.Date = function () {
        if (!this.date) {
            this.date = /((([01])\d)|[1-9])\/((([012])\d)|[1-9]|3[01])\/(((19|20)\d{2})|\d{2}(?!\d))/;
        }
        return this.date;
    };
    // HH:MM (hour can be 1 or 2 digits)
    this.Time = function () {
        if (!this.time) {
            this.time = /\d{1,2}:\d{2}/;
        }
        return this.time;
    };
    // This accounts for a standard space, as well as &nbsp; and &nnbsp; (add to this as needed)
    this.Space = function () {
        if (!this.space) {
            this.space = /([ \u00a0\u202f])/;
        }
        return this.space;
    };
    this.Meridiem = function () {
        if (!this.meridiem) {
            this.meridiem = /(am|pm)/i;
        }
        return this.meridiem;
    };
    // Matches format of Dash.DateTime.Readable (MM/DD/YYYY at HH:MM AM/PM)
    this.ReadableDateTime = function () {
        if (!this.readable_date_time) {
            this.readable_date_time = new RegExp(
                [
                    this.Date().source,
                    this.Space().source,
                    "at",
                    this.Space().source,
                    this.Time().source,
                    this.Space().source,
                    this.Meridiem().source
                ].join(""),
                "i"
            );
        }
        return this.readable_date_time;
    };
    this.Date.toString = function () {
        return "MM/DD/YYYY";
    };
    this.Time.toString = function () {
        return "HH:MM";
    };
    this.ReadableDateTime.toString = function () {
        return "MM/DD/YYYY at HH:MM AM";
    };
}

function DashGuiPrompt (
    bound_cb, width=null, height=null, message="", header_text="Alert", continue_text="Continue",
    cancel_text="Cancel", color=null, include_bg=true, bg_opacity=0.1, use_esc_and_enter_shortcuts=true
) {
    /**
     * DashGuiPrompt
     * -------------
     *
     * This a replacement for `window.confirm`.
     *
     * Once instantiated and configured as desired (using `AddButton`, `AddHTML`, etc), simply call `Show` as a last step.
     *
     * @param {function} bound_cb - Once a selection is made, this will receive the selected button index
     *                              (pre-bound because we have no use for a `binder` param)
     * @param {number} width - Modal width (passed to `Dash.Gui.Modal`)
     * @param {number} height - Modal height (passed to `Dash.Gui.Modal`)
     * @param {string} message - Text to display if a basic message prompt is desired (not using custom HTML via `AddHTML`)
     * @param {string} header_text - Label text for header
     * @param {string} continue_text - Label text for default `Continue` button
     * @param {string} cancel_text - Label text for default `Cancel` button
     * @param {DashColorSet} color - `DashColorSet` instance (ideally, opposite to the primary color set of the site)
     * @param {boolean} include_bg - Use impenetrable full-screen background behind modal (passed to `Dash.Gui.Modal`)
     * @param {number} bg_opacity - Opacity for background (passed to `Dash.Gui.Modal`)
     * @param {boolean} use_esc_and_enter_shortcuts - Add an `Esc` key shortcut that maps to the default `Cancel` button
     *                                                and an `Enter` key shortcut that maps to the default `Continue` button
     *                                                (applicable only when using the default two buttons)
     */
    this.bound_cb = bound_cb;
    this.message = message;
    this.header_text = header_text;
    this.continue_text = continue_text;
    this.cancel_text = cancel_text;
    this.use_esc_and_enter_shortcuts = use_esc_and_enter_shortcuts;
    Dash.Gui.Modal.call(
        this,
        color || Dash.Color.Dark,
        $("body"),  // Window
        width || height || (Math.min(window.innerWidth, window.innerHeight) * 0.25),
        height || width || (Math.min(window.innerWidth, window.innerHeight) * 0.25),
        include_bg,
        bg_opacity,
        false
    );
    this.header = null;
    this.button_bar = null;
    this.cancel_button = null;
    this.remove = this.Remove;  // Remap this to not be public
    this.continue_button = null;
    this.shortcuts_active = false;
    this.content_area = $("<div></div>");
    this.message_css = {
        "white-space": "pre-line",
        "color": this.color.StrokeDark,
        "font-family": "sans_serif_normal"
    };
    // Delete inapplicable public functions from Dash.Gui.Modal to keep things clear
    delete this.Hide;
    delete this.Remove;
    delete this.UpdateSize;
    delete this.SetParentHTML;
    delete this.IncreaseZIndex;
    delete this.SetOnCloseCallback;
    this.setup_styles = function () {
        this.modal.css({
            "border-radius": Dash.Size.BorderRadius,
            "box-sizing": "border-box",
            "border": "2px solid " + this.color.Background
        });
        this.add_header();
        this.modal.append(this.content_area);
        this.add_button_bar();
        this.add_shortcuts();
        (function (self) {
            requestAnimationFrame(function () {
                self.content_area.css({
                    "position": "absolute",
                    "inset": 0,
                    "top": self.header.html.outerHeight(),
                    "bottom": self.button_bar.html.outerHeight(),
                    "padding": Dash.Size.Padding * 2,
                    "overflow": "auto",
                    "font-size": "105%",
                    ...self.message_css
                });
                if (self.message) {
                    self.content_area.text(self.message);
                }
            });
        })(this);
    };
    this.AddButton = function (label_text, prepend=false) {
        var button = (function (self) {
            return self.button_bar.AddButton(
                label_text,
                function (button) {
                    self.on_selection(self.button_bar.GetIndex(button));
                },
                prepend
            );
        })(this);
        button.label.css({
            "font-family": "sans_serif_bold"
        });
        if (prepend) {
            button.StyleAsBorderButton();
        }
        // Shortcut is only applicable when using default two buttons
        if (this.shortcuts_active) {
            $(document).off("keydown." + this.identifier);
        }
        return button;
    };
    this.AddHTML = function (html, add_message_css=false) {
        this.set_message("");  // One or the other
        if (add_message_css) {
            html.css({
                // For some reason, this is required for the text size to match the default message size,
                // even though that uses 105%. I'm suspicious it's because the message text is being set
                // directly on the content area itself, which has padding, causing a discrepancy in this case.
                "font-size": "100%",
                ...this.message_css
            });
        }
        this.content_area.append(html);
    };
    this.SetMessage = function (message) {
        this.content_area.empty();  // One or the other
        this.set_message(message);
    };
    this.RemoveContinueButton = function () {
        this.button_bar.Remove(this.continue_button);
        this.continue_button = null;
    };
    this.RemoveCancelButton = function () {
        this.button_bar.Remove(this.cancel_button);
        this.cancel_button = null;
    };
    this.on_selection = function (index) {
        // Because there can be more than the two default buttons, returning an
        // index makes more sense than returning true/false. Even when using only
        // the two default buttons, you can still treat the response like true and
        // false, since the values are 0 for cancel (false) and 1 for continue (true).
        this.bound_cb(index);
        this.remove();  // Single-use
    };
    this.add_header = function () {
        this.header = new Dash.Gui.Header(this.header_text, this.color);
        this.header.ReplaceBorderWithIcon("alert_square").SetSize(165);
        this.header.html.css({
            "user-select": "none",
            "pointer-events": "none",
            "border-top-left-radius": Dash.Size.BorderRadius,
            "border-top-right-radius": Dash.Size.BorderRadius,
            "background": this.color.Background,
            "position": "absolute",
            "top": 0,
            "left": 0,
            "right": 0,
            "padding": Dash.Size.Padding,
            "margin": 0
        });
        this.header.label.css({
            "font-size": "120%",
            "padding-left": Dash.Size.Padding * 1.1
        });
        this.modal.append(this.header.html);
    };
    this.add_button_bar = function () {
        this.button_bar = new Dash.Gui.ButtonBar(this);
        this.button_bar.html.css({
            "background": this.color.Background,
            "position": "absolute",
            "left": 0,
            "right": 0,
            "bottom": 0,
            "padding": Dash.Size.Padding
        });
        this.continue_button = this.AddButton(this.continue_text);
        this.cancel_button = this.AddButton(this.cancel_text, true);
        this.modal.append(this.button_bar.html);
    };
    this.set_message = function (message) {
        if (this.message === message) {
            return;
        }
        this.message = message;
        this.content_area.text(this.message);
    };
    this.add_shortcuts = function () {
        if (!this.use_esc_and_enter_shortcuts) {
            return;
        }
        (function (self) {
            $(document).on(
                "keydown." + self.identifier,  // Adding an ID to the event listener allows us to kill this specific listener
                function (e) {
                    if (self.modal && !self.modal.is(":visible")) {
                        $(document).off("keydown." + self.identifier);
                        self.shortcuts_active = false;
                        return;
                    }
                    if (e.key === "Escape") {
                        console.log("(Esc key pressed) Cancel");
                        self.on_selection(0);
                    }
                    else if (e.key === "Enter") {
                        console.log("(Enter key pressed) Continue");
                        self.on_selection(1);
                    }
                }
            );
        })(this);
        this.shortcuts_active = true;
    };
    this.setup_styles();
}

function DashRequest () {
    this.requests = [];
    this.request_failures = {};
    this.Request = function (binder, callback, endpoint, params, domain="") {
        if (endpoint.includes("/")) {
            endpoint = endpoint.split("/").Last();
        }
        var url = "https://" + (domain || Dash.Context["domain"]) + "/" + endpoint;
        this.requests.push(new DashRequestThread(this, url, params, binder, callback));
    };
    function DashRequestThread (dash_requests, url, params, binder, callback) {
        this.url = url;
        this.binder = binder;
        this.callback = callback;
        this.params = params || {};
        this.dash_requests = dash_requests;
        this.params["token"] = Dash.Local.Get("token");
        this.id = Math.random() * (999999 - 100000) + 100000;
        this.post = function () {
            (function (self) {
                $.post(
                    self.url,
                    self.params,
                    function (response) {
                        self.dash_requests.on_response(self, response);
                    }
                ).fail(function (request, status, error) {
                    var response = request.responseJSON || request.responseText;
                    if (response) {
                        self.dash_requests.on_response(self, response);
                        return;
                    }
                    console.warn(
                        "Dash Request Warning: A request failed (status ", status, "), but callback " +
                        "will be triggered regardless." + (error ? " Error:\n" + error.toString() : "")
                    );
                    self.dash_requests.on_response(self, response);
                });
            })(this);
        };
        this.post();
    }
    // This sends to Andrew/Ryan by default
    this.SendEmail = function (message, subject="", endpoint="Api", f="send_email", binder=null, callback=null) {
        if (!message) {
            return;
        }
        var tag = Dash.Context["display_name"] + " Front-End Alert";
        if (subject) {
            subject = "(" + tag + ") " + subject;
        }
        else {
            subject = tag;
        }
        this.Request(
            binder || this,
            callback || function () {},
            endpoint,
            {
                "f": f,
                "message": message,
                "subject": subject
            }
        );
    };
    this.TrackRequestFailureForID = function (req_id, max_allowed) {
        /**
         * This system (not in use by default) is a basic tracker for interval request failures, but it doesn't fully solve
         * the problem of the portal knowing when updates have been pushed to the server and then needing to reload.
         *
         * Example usage:
         *     if (!Dash.Validate.Response(response, false)) {  // Second param is "show_alert" (setting to false is key to this system)
         *
         *        // In this example, the requests are made every 5 seconds, so reload if still not resolved after 20 seconds (4 failures)
         *        Dash.Requests.TrackRequestFailureForID(request_failure_id, 4)   // 'request_failure_id' is similar to a local storage key
         *
         *        return;
         *     }
         *
         *     // If the request was successful, reset the failure tally
         *     Dash.Requests.ResetRequestFailuresForID(request_failure_id);
         */
        if (!req_id in this.request_failures) {
            this.request_failures[req_id] = 0;
        }
        this.request_failures[req_id] += 1;
        if (this.request_failures[req_id] >= max_allowed) {
            alert("The page must reload, sorry for the inconvenience.");
            console.log(
                "(Dash Interval Request Failure Manager) Max failures reached for '" + req_id +
                "', reloading:", this.request_failures[req_id] + "/" + max_allowed
            );
            window.location.reload();
        }
        console.log(
            "(Dash Interval Request Failure Manager) Request failure for '" + req_id +
            "' has been tracked:", this.request_failures[req_id] + "/" + max_allowed
        );
        return this.request_failures[req_id];
    };
    // See docstring for TrackRequestFailureForID
    this.ResetRequestFailuresForID = function (req_id) {
        this.request_failures[req_id] = 0;
    };
    this.on_no_further_requests_pending = function () {
        // Called when a request finishes, and there are no more requests queued
        // console.log(">> on_no_further_requests_pending <<");
    };
    this.decompress_response = function (request, response) {
        // This is called immediately before returning a response that has been compressed with gzip
        var gzip_bytes = Buffer.from(response["gzip"], "base64");
        (function (self, gzip_bytes, request, response) {
            zlib.unzip(gzip_bytes, function (_, decompressed_data) {
                delete response["gzip"];
                response["dash_decompressed"] = true;
                if (decompressed_data) {
                    var gzip_str = new TextDecoder("utf-8").decode(decompressed_data);
                    var gzipped_data = JSON.parse(gzip_str);
                    for (var key in gzipped_data) {
                        response[key] = gzipped_data[key];
                    }
                }
                else {
                    console.log("Dash failed to decompress gzip content", response);
                    if (!response["error"]) {
                        response["error"] = "Failed to decompress gzip data from server!";
                    }
                    else {
                        response["error_gzip"] = "Failed to decompress gzip data from server!";
                    }
                }
                self.on_response(request, response);
            });
        })(this, gzip_bytes, request, response);
    };
    this.on_response = function (request, response) {
        if (response && response["gzip"]) {
            this.decompress_response(request, response);
            return;
        }
        var callback = request.callback.bind(request.binder);
        var requests = [];
        for (var i in this.requests) {
            if (this.requests[i] == request) {
                continue;
            }
            requests.push(this.requests[i]);
        }
        this.requests = requests;
        if (this.requests.length === 0) {
            this.on_no_further_requests_pending();
        }
        callback(response);
    };
}

function DashHistory () {
    this.url_hashes = {};
    this.listening = false;
    this.last_old_url = null;
    this.last_new_url = null;
    this.last_added_hash_text = "";
    this.skip_hash_change_event = false;
    // TODO: At some point, extra consideration should be added for "inactive" tabs
    // Use for any GUI elements that are explicitly loaded/instantiated by a specific function/callback
    // (This is also useful when you have a tab layout within a tab layout, like a top tab in the content
    // area of a side tab, and you need to first load the side tab index before loading the top tab index)
    this.LoaderAdd = function (hash_text, loader_cb, binder=null, ...loader_params) {
        if (!hash_text || !loader_cb) {
            return;
        }
        this.set_hash_text(hash_text);
        this.url_hashes[hash_text] = {
            "loader_cb": binder ? loader_cb.bind(binder) : loader_cb,
            "loader_params": [...loader_params]
        };
    };
    // Use for any GUI element managed by DashLayoutTabs
    // (This is uniquely required so that the proper tab button gets selected when navigating)
    this.TabAdd = function (hash_text, layout_tabs_instance, tab_index) {
        if (!hash_text || !layout_tabs_instance) {
            return;
        }
        tab_index = parseInt(tab_index);
        if (isNaN(tab_index)) {
            return;
        }
        if (!layout_tabs_instance instanceof DashLayoutTabs) {
            console.error("Error: TabAdd is only for GUI elements managed by DashLayoutTabs");
            return;
        }
        this.set_hash_text(hash_text);
        this.url_hashes[hash_text] = {
            "layout_tabs_instance": layout_tabs_instance,
            "tab_index": tab_index
        };
    };
    // Use for any GUI element not managed by DashLayoutTabs and not explicitly loaded/instantiated
    // (It's likely that LoaderAdd will be the better choice over this one that majority of the time)
    this.ClassAdd = function (hash_text, view_parent_html, view_class, empty_parent=false, ...view_instantiation_params) {
        if (!hash_text || !view_parent_html || !view_class) {
            return;
        }
        this.set_hash_text(hash_text);
        this.url_hashes[hash_text] = {
            "view_class": view_class,
            "empty_parent": empty_parent,
            "view_parent_html": view_parent_html,
            "view_instantiation_params": [...view_instantiation_params]
        };
    };
    this.set_hash_text = function (hash_text) {
        if (this.last_added_hash_text === hash_text) {
            return;
        }
        if (!this.listening) {
            this.add_listener();
        }
        this.skip_hash_change_event = true;
        window.location.hash = hash_text;
        this.last_added_hash_text = hash_text;
    };
    this.add_listener = function () {
        (function (self) {
            window.addEventListener(
                "hashchange",
                function (event) {  // Don't break out this function, this particular code must stay here
                    var hash = self.get_hash_from_url(event.newURL);
                    if (!hash) {
                        if (self.skip_hash_change_event) {
                            self.skip_hash_change_event = false;
                        }
                        return;
                    }
                    var previous_old_url = self.last_old_url;
                    var previous_new_url = self.last_new_url;
                    self.last_old_url = event.oldURL;
                    self.last_new_url = event.newURL;
                    if (self.skip_hash_change_event) {
                        self.skip_hash_change_event = false;
                        return;
                    }
                    if (previous_old_url === self.last_old_url || previous_new_url === self.last_new_url) {
                        return;  // Duplicate event
                    }
                    console.log("Loading URL hash from history:", hash);
                    self.on_hash_change(event);
                },
                false
            );
        })(this);
    };
    this.get_hash_from_url = function (url) {
        if (!url.includes("#")) {
            return "";
        }
        return url.split("#").Last() || "";
    };
    this.on_failed_hash_change = function (original_hash_text, detail="", error="") {
        var msg = "Error: URL hash change failed";
        if (detail) {
            msg += " - " + detail;
        }
        if (error) {
            msg += "\n" + error;
        }
        console.error(msg);
        if (original_hash_text) {  // Reset the url hash
            this.skip_hash_change_event = true;
            window.location.hash = original_hash_text;
        }
        return false;
    };
    this.on_hash_change = function (event) {
        var data = this.url_hashes[this.get_hash_from_url(event.newURL)];
        this.process_hash_change(event, data);
    };
    this.process_hash_change = function (event, data) {
        if (!Dash.Validate.Object(data)) {
            return false;
        }
        if (data["layout_tabs_instance"]) {
            return this.handle_tab_add_change(event, data);
        }
        if (data["loader_cb"]) {
            return this.handle_loader_add_change(event, data);
        }
        return this.handle_add_change(event, data);
    };
    this.handle_loader_add_change = function (event, data) {
        try {
            data["loader_cb"](...data["loader_params"]);
            return true;
        }
        catch (e) {
            return this.on_failed_hash_change(
                event ? this.get_hash_from_url(event.oldURL) : null,
                "Failed to load content with the loader callback",
                e
            );
        }
    };
    this.handle_tab_add_change = function (event, data) {
        try {
            data["layout_tabs_instance"].LoadIndex(data["tab_index"]);
            return true;
        }
        catch (e) {
            return this.on_failed_hash_change(
                event ? this.get_hash_from_url(event.oldURL) : null,
                "Failed to load index " + data["tab_index"].toString() + " from layout tabs instance",
                e
            );
        }
    };
    this.handle_add_change = function (event, data) {
        try {
            data["view_parent_html"].empty();
        }
        catch (e) {
            return this.on_failed_hash_change(
                event ? this.get_hash_from_url(event.oldURL) : null,
                "Failed to empty the view class' parent's html"
            );
        }
        try {
            var instantiated_class = new data["view_class"](...data["view_instantiation_params"]);
        }
        catch (e) {
            return this.on_failed_hash_change(
                event ? this.get_hash_from_url(event.oldURL) : null,
                "Failed to instantiate the view class",
                e
            );
        }
        if (!instantiated_class.hasOwnProperty("html")) {
            return this.on_failed_hash_change(
                event ? this.get_hash_from_url(event.oldURL) : null,
                "View class doesn't have an 'html' property to append to the view class' parent's html"
            );
        }
        try {
            if (data["empty_parent"]) {
                data["view_parent_html"].empty();
            }
            data["view_parent_html"].append(instantiated_class.html);
        }
        catch (e) {
            return this.on_failed_hash_change(
                event ? this.get_hash_from_url(event.oldURL) : null,
                "Failed to append the instantiated view class' html to its parent's html",
                e
            );
        }
        return true;
    };
}

function DashValidate () {
    this.Response = function (response, show_alert=true) {
        // Setting show_alert to false is best utilized for interval functions that may not need
        // to alert when a single interval fails (from server updates, or any other reason) -
        // in addition, you can track those interval failures in Dash.Requests (see TrackRequestFailureForID docstring)
        if (response && !response["error"]) {
            return response;
        }
        // This stops duplicate callbacks from being triggered after an alert window pops up
        this.handle_duplicate_callbacks_on_invalid_input();
        if (!response) {
            if (show_alert) {
                console.error("(Dash.Validate.Response) No response received:", response);
                alert("There was a server problem with this request:\nNo response received");
            }
            else {
                console.warn("(Dash.Validate.Response) No response received:", response);
            }
        }
        else if (response["error"]) {
            if (show_alert) {
                console.error("There was a server problem with this request:", response);
                alert(response["error"]);
            }
            else {
                console.warn("There was a server problem with this request:", response);
            }
        }
        return null;
    };
    this.Object = function (data_object) {
        return (data_object && typeof data_object === "object" && !jQuery.isEmptyObject(data_object));
    };
    this.Email = function (str) {
        if (typeof str !== "string") {
            return false;
        }
        var username = str.split("@")[0];
        var domain = str.split("@").Last();
        var domain_split = domain.split(".");
        var domain_start = domain_split[0];
        var domain_end = domain_split.Last();
        var at_sign_count = (str.match(/@/g) || []).length;
        if (str.length > 0 && (at_sign_count !== 1 || !(domain.includes(".")))) {
            return false;
        }
        return !(domain_start.length < 1 || domain_end.length < 1 || username.length < 1);
    };
    this.handle_duplicate_callbacks_on_invalid_input = function () {
        var temp_last_input = Dash.Temp.GetLastInputSubmitted();
        if (!temp_last_input || !(temp_last_input instanceof DashGuiInput)) {
            return;
        }
        temp_last_input.SkipNextBlur();
        if (!temp_last_input.submit_called_from_autosave) {
            temp_last_input.SkipNextAutosave();
        }
        Dash.Temp.RevertLastInputText(temp_last_input);
    };
}

function DashDateTime () {
    this.Readable = function (iso_string, include_tz_label=true, raw=false, include_seconds=false, include_time=true, include_date=true) {
        var date;
        var dt_obj;
        var timezone;
        var is_static_date = false;
        if (raw) {
            dt_obj = new Date(Date.parse(iso_string));
        }
        else {
            timezone = Dash.Context["timezone"] ? Dash.Context["timezone"] : "UTC";
            [dt_obj, is_static_date] = this.GetDateObjectFromISO(iso_string, timezone, true);
        }
        if (include_date) {
            if (Dash.Context["ignore_locale_for_readable_dates"]) {
                date = [dt_obj.getMonth() + 1, dt_obj.getDate(), dt_obj.getFullYear()].join("/");
            }
            else {
                // The above "ignore_locale_for_readable_dates" was implemented as a quick addition at
                // an earlier date, that I wanted to later add to DashContext, but I'm now of the
                // opinion that en-US should be enforced globally to ensure our code works as expected.
                date = dt_obj.toLocaleDateString("en-US");
            }
            if (is_static_date || !include_time) {
                return date;
            }
        }
        var colon_count = 0;
        var time = dt_obj.toLocaleTimeString("en-US");
        var readable = include_date ? (date + " at " + time) : time;
        // Get index of seconds
        for (var i in readable) {
            var char = readable[i];
            if (char !== ":") {
                continue;
            }
            colon_count += 1;
            if (colon_count === 2) {
                break;
            }
        }
        if (!include_seconds) {
            readable = readable.slice(0, parseInt(i)) + readable.slice(parseInt(i) + 3, readable.length);
        }
        if (include_tz_label && timezone) {
            return readable + " " + timezone;
        }
        return readable;
    };
    this.GetDateObjectFromISO = function (iso_string, timezone="EST", check_static=false, account_for_dst=true, offset_hours=0) {
        iso_string = iso_string.replace("Z", "");
        var included_offset_hours;
        // Check for included offset hours at end of the ISO string (ex: -04:00)
        if (iso_string[iso_string.length - 6] === "-") {
            included_offset_hours = parseInt(iso_string.substring(iso_string.length - 5, iso_string.length));  // Grab the offset before removing it
            iso_string = iso_string.substring(0, iso_string.length - 6);  // Remove the offset from the original
        }
        var is_static_date = false;
        var dt_obj = new Date(Date.parse(iso_string));
        if (dt_obj.getHours() === 0 && dt_obj.getMinutes() === 0 && dt_obj.getSeconds() === 0) {
            // The time information is 00:00:00
            //
            // This could be an ISO stamp from the server that just so happened to land on 00:00:00 (extremely uncommon, but certainly possible)
            // - OR -
            // It could be a static date only, which was parsed into an ISO stamp, which would default its time info to 00:00:00
            //
            // There doesn't appear to be a way to programmatically tell the difference
            // between the two, but they each need to be handled differently...
            //
            // For now, we won't alter the date object, until we can find a way to differentiate the two
            is_static_date = true;
        }
        else if (included_offset_hours) {
            // If the ISO string has offset hours included within it, we don't need to
            // manually determine and adjust for the offset hours, so do nothing here
        }
        else {
            dt_obj.setHours(dt_obj.getHours() - (offset_hours || this.get_server_offset_hours(dt_obj, timezone, account_for_dst)));
        }
        if (check_static) {
            return [dt_obj, is_static_date];
        }
        return dt_obj;
    };
    this.GetDifferenceSec = function (start_iso_or_dt, end_iso_or_dt) {
        var start_ms = (start_iso_or_dt instanceof Date ? start_iso_or_dt : Dash.DateTime.GetDateObjectFromISO(start_iso_or_dt)).getTime();
        var end_ms = (end_iso_or_dt instanceof Date ? end_iso_or_dt : Dash.DateTime.GetDateObjectFromISO(end_iso_or_dt)).getTime();
        return Math.floor((end_ms - start_ms) / 1000);
    };
    this.GetReadableDifference = function (start_iso_or_dt, end_iso_or_dt, include_secs=false, sec_mod=0) {
        var secs = this.GetDifferenceSec(start_iso_or_dt, end_iso_or_dt);
        if (sec_mod !== 0) {
            secs += sec_mod;
        }
        return this.GetReadableHoursMins(secs, include_secs);
    };
    this.GetReadableHoursMins = function (secs, include_secs=false) {
        var mins = Math.floor(secs / 60);
        var hours = Math.floor(mins / 60);
        secs = secs % 60;
        mins = mins % 60;
        if (secs < 0) {
            secs = 0;
        }
        if (mins < 0) {
            mins = 0;
        }
        if (hours < 0) {
            hours = 0;
        }
        if (!include_secs) {
            if (secs >= 30) {
                mins += 1;
            }
            if (mins === 0 && secs) {
                mins += 1;
            }
        }
        var readable = hours + "h " + mins + "m";
        if (include_secs) {
            readable += " " + secs + "s";
        }
        return readable;
    };
    this.GetUTCDateObject = function () {
        return this.GetDateObjectFromISO(new Date().toISOString(), "UTC");
    };
    this.GetISOAgeMs = function (iso_string, return_objects=false) {
        var now = this.GetNewRelativeDateObject("UTC");
        var dt_obj = this.GetDateObjectFromISO(iso_string, "UTC", false, false);
        if (return_objects) {
            return [now - dt_obj, now, dt_obj];
        }
        return now - dt_obj;
    };
    this.GetNewRelativeDateObject = function (timezone="EST", account_for_dst=true) {
        var now = new Date();
        now.setHours(now.getHours() + ((now.getTimezoneOffset() / 60) - this.get_server_offset_hours(null, timezone, account_for_dst)));
        return now;
    };
    this.IsIsoFormat = function (value) {
        if (!value) {
            return false;
        }
        if (typeof value === "object") {
            return false;
        }
        try {
            if (typeof JSON.parse(value) === "object") {
                return false;
            }
        }
        catch {
            // Ignore
        }
        value = value.toString();
        if (value.length > 36) {
            return false;
        }
        var test = /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{6}/.test(value);
        if (!test) {
            test = /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/.test(value);
        }
        return test;
    };
    this.DSTInEffect = function (dt_obj) {
        var jan = new Date(dt_obj.getFullYear(), 0, 1).getTimezoneOffset();
        var jul = new Date(dt_obj.getFullYear(), 6, 1).getTimezoneOffset();
        return Math.max(jan, jul) !== dt_obj.getTimezoneOffset();
    };
    // Timeago library: /bin/src/timeago.js
    this.FormatTime = function (iso_string) {
        return timeago.format(this.GetDateObjectFromISO(
            iso_string,
            "EST",
            false,
            true,
            (new Date().getTimezoneOffset() / 60))  // Ensure the timeago representation is always relevant to the user's timezone
        );
    };
    // Get a date object of the start of a given week/year (defaults to Sunday, but ISO weeks start on Monday)
    this.GetDateObjectForWeek = function (week_num, year, start_on_monday=false) {
        var dt_obj = new Date(year, 0, 1 + (week_num - 1) * 7);
        dt_obj.setDate((dt_obj.getDay() <= 4 ? (dt_obj.getDate() - dt_obj.getDay() + 1) : (dt_obj.getDate() + 8 - dt_obj.getDay())) - 1);
        if (start_on_monday) {
            dt_obj.setDate(dt_obj.getDate() + 1);
        }
        return dt_obj;
    };
    this.GetDayOrdinalSuffix = function (day_num) {
        var j = day_num % 10;
        var k = day_num % 100;
        if (j === 1 && k !== 11) {
            return "st";
        }
        if (j === 2 && k !== 12) {
            return "nd";
        }
        if (j === 3 && k !== 13) {
            return "rd";
        }
        return "th";
    };
    this.get_server_offset_hours = function (dt_obj=null, timezone="EST", account_for_dst=true) {
        timezone = timezone.toLowerCase();
        if (timezone === "utc" || timezone === "gmt") {
            return 0;
        }
        // Baseline (only worrying about US timezones)
        var est_to_utc_offset_hours = dt_obj && (account_for_dst && this.DSTInEffect(dt_obj)) ? 4 : 5;
        // Eastern time
        if (timezone === "est" || timezone === "edt") {
            return est_to_utc_offset_hours;
        }
        // Central time
        if (timezone === "cst" || timezone === "cdt") {
            return est_to_utc_offset_hours + 1;
        }
        // Mountain time (not accounting for about AZ's exclusion)
        if (timezone === "mst" || timezone === "mdt") {
            return est_to_utc_offset_hours + 2;
        }
        // Pacific time
        if (timezone === "pst" || timezone === "pdt") {
            return est_to_utc_offset_hours + 3;
        }
        console.warn("Unhandled timezone, server offset hours not calculated:", timezone);
        return 0;
    };
}

function DashAdminTabs () {
    // This tiny class allows us to add overrides to the tabs in the Dash Admin page
    this.user_tabs = [];
    this.Add = function (label_text, html_obj) {
        this.user_tabs.push({
            "label_text": label_text,
            "html_obj": html_obj
        });
    };
}

function DashAdminView (users_class_override=null) {
    this.users_class_override = users_class_override;
    this.layout = new Dash.Layout.Tabs.Top(this);
    this.html = this.layout.html;
    this.setup_styles = function () {
        this.layout.Append(
            "Users",
            this.users_class_override ? this.users_class_override : DashAdminSettings,
            [this],
            {"unpack_params": true}
        );
        // this.layout.Append("Color", DashAdminColor);
        for (var tab_settings of Dash.View.SiteSettingsTabs.user_tabs) {
            this.layout.Append(tab_settings["label_text"] || tab_settings["display_name"], tab_settings["html_obj"]);
        }
    };
    this.AddTab = function () {
        console.log("Adding tab");
    };
    this.setup_styles();
}

function DashAdminColor () {
    // this.html = Dash.Gui.GetHTMLContext("", {"margin": Dash.Size.Padding});
    this.html = Dash.Gui.GetHTMLContext("");
    this.property_box = null;
    this.data = null;
    this.display_theme = Dash.Local.Get("dash_admin_color_style") || "light";
    this.color = null; // ex. Dash.Color.Light
    ////// Objects
    this.header = null;
    this.property_box = null;
    this.setup_styles = function () {
        this.html.css({
            "position": "absolute",
            "inset": 0,
            "padding": Dash.Size.Padding,
        });
        this.draw_all();
    };
    this.draw_all = function () {
        if (this.display_theme == "light") {
            this.color = Dash.Color.Light;
        }
        else {
            this.color = Dash.Color.Dark;
        }
        this.html.empty();
        this.html.css({
            "background": this.color.Background,
            // "background": Dash.Color.Light.Background,
        });
        this.draw_header();
        this.draw_property_box();
        // COLOR INTERFACE - BUTTON
        //
        //           ▽ - Color of the page/element background
        //           |
        // Dash.Color.Dark.Button.Background.Main
        // Dash.Color.Dark.Button.Background.Hover
        // Dash.Color.Dark.Button.Background.Selected
        // Dash.Color.Dark.Button.Background.SelectedHover
        // console.log(color_set);
        // console.log(color_set.Background);
        // console.log(color_set.Text);
        // console.log(color_set.Button);
        // console.log(color_set.Tab); // DashColorButtonSet
        // console.log(color_set.Tab.Background); // DashColorStateSet
        // console.log(color_set.Tab.Text); // DashColorStateSet
        // for (var color_set_name in color_root) {
        //     console.log(color_set_name + ":");
        //     console.log(color_root[color_set_name]);
        // };
    };
    this.draw_header = function (color_set) {
        var label = "Header - " + this.display_theme.Title() + " Style (Switch to Dark)";
        if (this.display_theme != "light") {
            label = "Header - " + this.display_theme.Title() + " Style (Switch to Light)";
        }
        this.header = new Dash.Gui.Header(label, this.color);
        this.html.append(this.header.html);
        this.header.html.css({
            "cursor": "pointer",
        });
        (function (self) {
            self.header.html.on("click", function () {
                if (self.display_theme == "light") {
                    self.display_theme = "dark";
                }
                else {
                    self.display_theme = "light";
                }
                Dash.Local.Set("dash_admin_color_style", self.display_theme);
                console.log("switch to " + self.display_theme);
                self.draw_all();
            });
        })(this);
        var doc = new DashAdminColorDoc(this.color);
        this.html.append(doc.html);
    };
    this.draw_property_box = function (color_set) {
        console.log("Adding property box");
        this.property_box = new Dash.Gui.PropertyBox(
            this,           // For binding
            this.get_data,  // Function to return live data
            this.set_data,  // Function to set saved data locally
            null,           // Endpoint
            null,           // Dash obj_id (unique for users)
            {"color": this.color}
        );
        this.html.append(this.property_box.html);
        var header_title = "Property Box";
        this.property_box.AddHeader(header_title, this.color);
        this.property_box.AddInput("email",       "E-mail Address", "", null, false);
        this.property_box.AddInput("first_name",  "First Name",     "", null, true);
        this.new_password_row = new Dash.Gui.InputRow("Password", "", "Password", "Update", this.dummy_cb, this, this.color);
        this.new_password_row.html.css("margin-left", Dash.Size.Padding * 2);
        this.property_box.AddHTML(this.new_password_row.html);
        this.property_box.AddButton("Property Box Button", this.dummy_cb);
    };
    this.get_data = function () {
        return "";
    };
    this.set_data = function () {
        return "";
    };
    this.dummy_cb = function () {
        return "";
    };
    this.setup_styles();
}

function DashAdminSettings (admin_view) {
    this.admin_view = admin_view;
    this.data = null;
    this.property_box = null;
    this.html = Dash.Gui.GetHTMLContext("Loading Admin View...", {"margin": Dash.Size.Padding});
    this.setup_styles = function () {
        this.reload_data();
    };
    this.SetData = function (response) {
        if (!Dash.Validate.Response(response)) {
            return;
        }
        this.html.empty();
        this.data = response;
        // this.add_site_settings_box();
        // this.add_user_groups_box();
        this.add_users_box();
        // console.log(response);
    };
    this.add_users_box = function () {
        // this.users_box = Dash.Gui.GetHTMLBoxContext({});
        this.users_box = Dash.Gui.GetHTMLContext();
        this.html.append(this.users_box);
        // var users_header = new Dash.Gui.Header("Users").html;
        // this.users_box.append(users_header);
        for (var i in this.data["users"]["order"]) {
            var email = this.data["users"]["order"][i];
            var user_data = this.data["users"]["data"][email];
            var user_box = new Dash.Layout.UserProfile(user_data);
            this.users_box.append(user_box.html);
            // user_box.html.css({
            //     "margin": Dash.Size.Padding * 2,
            // });
        }
    };
    this.reload_data = function () {
        Dash.Request(this, this.SetData, "Admin", {"f": "get"});
    };
    // this.create_group = function () {
    //     console.log("Create Group");
    // };
    // this.add_site_settings_box = function () {
    //     this.property_box = new Dash.Gui.PropertyBox(
    //         this,           // For binding
    //         null,  // Function to return live data
    //         null,  // Function to set saved data locally
    //         "Properties",   // Endpoint
    //         "site_settings" // Dash object ID
    //     );
    //
    //     this.html.append(this.property_box.html);
    //
    //     this.property_box.AddHeader("Admin Settings");
    //     this.property_box.AddInput("created_by", "Created By", "", null, false);
    //     this.property_box.AddInput("open_account_creation_bool", "Open Account Creation", "", null, true);
    //
    //     // this.property_box.Load();
    // };
    // this.add_user_groups_box = function () {
    //     this.user_groups_box = new Dash.Gui.PropertyBox(
    //         this,           // For binding
    //         null,           // Function to return live data
    //         null,           // Function to set saved data locally
    //         "Properties",   // Endpoint
    //         "user_groups"    // Dash object ID
    //     );
    //
    //     this.html.append(this.user_groups_box.html);
    //
    //     this.user_groups_box.AddHeader("User Groups");
    //     this.user_groups_box.AddInput("admin", "Admin", "", null, false);
    //
    //     this.user_groups_box.AddButton("Create Group", this.create_group);
    //
    //     // this.user_groups_box.Load();
    // };
    this.setup_styles();
}

function DashAdminColorDoc (color=null) {
    this.html = Dash.Gui.GetHTMLContext("--");
    this.color = color || Dash.Color.Light;
    this.setup_styles = function () {
        this.html.css({
            "background": this.color.BackgroundRaised,
            "color": this.color.Text,
            "margin-bottom": Dash.Size.Padding,
            "padding": Dash.Size.Padding,
            "border": "2px solid " + this.color.AccentGood,
            "border-radius": 5
        });
    };
    this.setup_styles();
}

function DashAnimation () {
    this.Curves = new DashAnimationCurves();
    this.Eval = function (curve, t) {
        return curve(t);
    };
    this.Start = function (duration_ms, callback, curve=null) {
        var animation_set = new DashAnimationSet(duration_ms, callback, curve);
        animation_set.Start();
        return animation_set;
    };
}

function DashAnimationSet (duration_ms, callback, curve) {
    this.duration_ms = duration_ms;
    this.callback = callback;
    this.curve = curve;
    this.start_time = null;
    this.playback_ms = 0;
    this.norm_t = 0;
    this.active = false;
    this.Start = function () {
        this.start_time = new Date();
        this.playback_ms = 0;
        this.norm_t = 0;
        this.active = true;
        this.update();
    };
    this.update = function () {
        if (!this.active) {
            delete this;
            return;
        }
        (function (self) {
            requestAnimationFrame(function () {
                self.update();
            });
        })(this);
        this.playback_ms = new Date()-this.start_time;
        this.norm_t = this.playback_ms / this.duration_ms;
        if (this.norm_t > 1.0) {
            this.norm_t = 1.0;
        }
        if (this.curve) {
            this.callback(this.curve(this.norm_t));
        }
        else {
            this.callback(this.norm_t);
        }
        if (this.norm_t >= 1.0) {
            this.active = false;
        }
    };
}

function DashAnimationCurves() {
    this.EaseInOut = function (t) {
        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
    };
    this.EaseIn = function (t) {
        return t * t;
    };
    this.EaseOut = function (t) {
        return t * (2 - t);
    };
    this.EaseOutBounce = function (t) {
        var b1 = 4 / 11;
        var b2 = 6 / 11;
        var b3 = 8 / 11;
        var b4 = 3 / 4;
        var b5 = 9 / 11;
        var b6 = 10 / 11;
        var b7 = 15 / 16;
        var b8 = 21 / 22;
        var b9 = 63 / 64;
        var b0 = 1 / b1 / b1;
        // Is (t = +t) supposed to be (t += t)?
        return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
    };
}

function DashColor (dark_mode_active=false) {
    this.dark_mode_active = dark_mode_active;
    this.Dark = null;
    this.Light = null;
    this.Primary = "#95ae6c";
    this.Warning = "#fab964";
    this.parsed_color_data = {};
    this.SaveHighlight = "rgb(255, 255, 255, 0.5)";
    
    // This is a temporary way to centralize the orange palette
    // that was originally defined and used throughout the mobile code
    this.Mobile = {
        AccentPrimary: "#ff684c",    // Orange
        AccentSecondary: "#ffae4c",  // Yellow
        BannerButton: "white"
    };
    this.setup_color_sets = function () {
        this.Mobile.BackgroundGradient = this.GetVerticalGradient(this.Mobile.AccentSecondary, this.Mobile.AccentPrimary);
        this.Mobile.ButtonGradient = this.GetHorizontalGradient(this.Mobile.AccentSecondary, this.Mobile.AccentPrimary);
        var dark_bg_text = "rgb(245, 245, 245)";
        var light_bg_text = "rgb(30, 30, 30)";
        var button_color = "#4d505f";
        var button_hover_color = this.Lighten(button_color);
        var button_text_color = "rgb(230, 230, 230)";
        var button_selected = "#95ae6c";
        var button_selected_hover = this.Lighten(button_selected);
        var dark_input_background = "rgba(255, 255, 255, 0.8)";
        var light_input_background = "rgba(0, 0, 0, 0)";
        var dark_input_text = "rgba(255, 255, 255, 0.8)";
        var light_input_text = "rgba(0, 0, 0, 0.8)";
        var light = new DashSiteColors(
            {
                // TODO: "background" and "background_raised" need to be different
                //  - "background" should be something like "#d7dcde", or "background_raised" should be "white"
                //  - changing one breaks a lot of stuff because BackgroundRaised is used in many places where Background should've been used instead
                "background": "#e3e8ea",
                "background_raised": "#e3e8ea",
                "button": "#659cba",
                "button_text": "rgb(234, 239, 255)",
                "accent_good": "#f2c96c",
                "accent_bad": "#f9663c",
                "text_header": "#2b323c",
                "tab_area_background": "#333",
            },
            this
        );
        var dark = new DashSiteColors(
            {
                "background": "#23262b",
                "background_raised": "#444b54",
                "button": "#5c9fb7",
                "button_text": "rgb(234, 239, 255)",
                "accent_good": "#ffc74d",
                "accent_bad": "#ff624c",
                "text_header": "#c4d4dd",
                "tab_area_background": "#333",
            },
            this
        );
        this.Light = new DashColorSet(
            light.Background,       // Background color
            light.BackgroundRaised, // Background color for raised boxes
            light_bg_text,          // Text color
            light.TextHeader,       // Text header color
            light.AccentGood,
            light.AccentBad,
            new DashColorButtonSet( // Button
                "none",                    // The color of the area behind a set of buttons, if applicable
                new DashColorStateSet(
                    light.Button,          // Button.Background.Base
                    button_selected,       // Button.Background.Selected
                    button_hover_color,    // Button.Background.BaseHover
                    button_selected_hover, // Button.Background.SelectedHover
                ),
                new DashColorStateSet(
                    light.ButtonText,   // Button.Text.Base
                    button_text_color,  // Button.Text.Selected
                    button_text_color,  // Button.Text.BaseHover
                    button_text_color,  // Button.Text.SelectedHover
                ),
            ),
            new DashColorButtonSet(     // Tab
                // light.TabAreaBackground,
                "none",
                new DashColorStateSet(  // Tab Background
                    "rgba(0, 0, 0, 0)", // Tab.Background.Base
                    "rgba(0, 0, 0, 0)", // Tab.Background.Selected
                    "rgba(0, 0, 0, 0)",  // Tab.Background.BaseHover
                    light.AccentGood,      // Tab.Background.SelectedHover
                ),
                new DashColorStateSet(    // Tab Text
                    "rgba(255, 255, 255, 0.6)", // Tab.Text.Base
                    "rgba(255, 255, 255, 0.9)", // Tab.Text.Selected
                    "rgba(255, 255, 255, 0.7)",     // Tab.Text.BaseHover
                    "rgba(255, 255, 255, 1.0)",     // Tab.Text.SelectedHover
                ),
            ),
            new DashColorButtonSet(     // Input
                light.TabAreaBackground, // area background
                new DashColorStateSet(  // Input Background
                    light_input_background, // Input.Background.Base
                    light_input_background, // Input.Background.Selected
                    light_input_background,  // Input.Background.BaseHover
                    light_input_background,      // Input.Background.SelectedHover
                ),
                new DashColorStateSet(    // Input Text
                    light_input_text, // Input.Text.Base
                    light_input_text, // Input.Text.Selected
                    light_input_text,     // Input.Text.BaseHover
                    light_input_text,     // Input.Text.SelectedHover
                ),
            ),
        );
        this.Dark = new DashColorSet(
            dark.Background, // Background color
            dark.BackgroundRaised, // Background color for raised boxes
            dark_bg_text, // Text color
            dark.TextHeader, // Text header color
            dark.AccentGood,
            dark.AccentBad,
            new DashColorButtonSet( // Button
                "none", // The color of the area behind a set of buttons, if applicable
                new DashColorStateSet(
                    dark.Button, // Button.Background.Base
                    button_selected, // Button.Background.Selected
                    button_hover_color, // Button.Background.BaseHover
                    button_selected_hover, // Button.Background.SelectedHover
                ),
                new DashColorStateSet( // Button Text
                    dark.ButtonText, // Button.Text.Base
                    dark.ButtonText, // Button.Text.Selected
                    dark.ButtonText, // Button.Text.BaseHover
                    dark.ButtonText, // Button.Text.SelectedHover
                ),
            ),
            new DashColorButtonSet(    // Tab
                dark.TabAreaBackground, // The color of the area behind a set of tabs, if applicable
                new DashColorStateSet( // Tab Background
                    dark.Button,    // Tab.Background.Base
                    button_selected,    // Tab.Background.Selected
                    button_hover_color, // Tab.Background.BaseHover
                    button_selected_hover, // Tab.Background.SelectedHover
                ),
                new DashColorStateSet( // Tab Text
                    dark.ButtonText,   // Tab.Text.Base
                    dark.ButtonText,  // Tab.Text.Selected
                    dark.ButtonText,  // Tab.Text.BaseHover
                    dark.ButtonText, // Tab.Text.SelectedHover
                ),
            ),
            new DashColorButtonSet(     // Input
                light.TabAreaBackground, // area background
                new DashColorStateSet(  // Input Background
                    dark_input_background, // Input.Background.Base
                    dark_input_background, // Input.Background.Selected
                    dark_input_background,  // Input.Background.BaseHover
                    dark_input_background,      // Input.Background.SelectedHover
                ),
                new DashColorStateSet(    // Input Text
                    dark_input_text, // Input.Text.Base
                    dark_input_text, // Input.Text.Selected
                    dark_input_text,     // Input.Text.BaseHover
                    dark_input_text,     // Input.Text.SelectedHover
                ),
            ),
        );
        this.Light.SetPlaceholderClass("placeholder_light");
        this.Dark.SetPlaceholderClass("placeholder_dark");
    };
    this.SwapIfDarkModeActive = function () {
        if (!this.dark_mode_active) {
            return;
        }
        var light = this.Light;
        this.Light = this.Dark;
        this.Dark = light;
    };
    this.IsDark = function (color) {
        if (this.dark_mode_active) {
            return color === this.Light;
        }
        return color === this.Dark;
    };
    this.GetOpposite = function (dash_color_instance) {
        if (!dash_color_instance instanceof DashColorSet) {
            return dash_color_instance;
        }
        return dash_color_instance === this.Light ? this.Dark : this.Light;
    };
    this.GetTransparent = function (cstr, opacity) {
        if (!this.parsed_color_data[cstr]) {
            this.parsed_color_data[cstr] = this.Parse(cstr);
        }
        return this.ToRGBA([
            this.parsed_color_data[cstr][0], // Red
            this.parsed_color_data[cstr][1], // Green
            this.parsed_color_data[cstr][2], // Blue
            opacity
        ]);
    };
    // What is this?
    this.Raise = function (cstr, raise_steps) {
        raise_steps = raise_steps || 1;
        return cstr;
    };
    this.Random = function (include_grayscales=false) {
        var keys;
        if (include_grayscales) {
            keys = Object.keys(this.Names);
        }
        else {
            var grayscale_kws = ["white", "gray", "grey", "black"];
            keys = [];
            for (var key of Object.keys(this.Names)) {
                var include = true;
                for (var kw of grayscale_kws) {
                    if (key.includes(kw)) {
                        include = false;
                        break;
                    }
                }
                if (!include) {
                    continue;
                }
                keys.push(key);
            }
        }
        return keys[Math.floor(keys.length * Math.random())];
    };
    this.GetHorizontalGradient = function (color_1, color_2, color_3, color_4) {
        return this.GetGradient(90, color_1, color_2, color_3, color_4);
    };
    this.GetVerticalGradient = function (color_1, color_2, color_3, color_4) {
        return this.GetGradient(0, color_1, color_2, color_3, color_4);
    };
    this.GetGradient = function (degrees, color_1, color_2, color_3, color_4) {
        var colors = "";
        if (color_1 && color_2 && color_3 && color_4) {
            colors = this.ParseToRGB(color_4) + " 0%, " + this.ParseToRGB(color_3) + " 25%, ";
            colors += this.ParseToRGB(color_2) + " 75%, " + this.ParseToRGB(color_1) + " 100%";
        }
        else if (color_1 && color_2 && color_3) {
            colors = this.ParseToRGB(color_3) + " 0%, " + this.ParseToRGB(color_2) + " 50%, ";
            colors += this.ParseToRGB(color_1) + " 100%";
        }
        else if (color_1 && color_2) {
            colors = this.ParseToRGB(color_2) + " 0%, " + this.ParseToRGB(color_1) + " 100%";
        }
        else {
            console.error("Error: At least 2 colors are required for a gradient");
            return "red";
        }
        return "linear-gradient(" + degrees + "deg, " + colors + ")";
    };
    this.ToRGBA = function (color_data) {
        return this.to_rgba(color_data);
    };
    this.to_rgba = function (color_data) {
        return "rgba(" + color_data[0] + ", " + color_data[1] + ", " + color_data[2] + ", " + color_data[3] + ")";
    };
    this.to_rgb = function (color_data) {
        return "rgb(" + color_data[0] + ", " + color_data[1] + ", " + color_data[2] + ")";
    };
    this.ParseToRGB = function (cstr) {
        return this.to_rgb(this.Parse(cstr));
    };
    this.IsLightColor = function (color) {
        var r;
        var g;
        var b;
        if (color.match(/^rgb/)) {
            color = color.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/);
            r = color[1];
            g = color[2];
            b = color[3];
        }
        else {
            color = +("0x" + color.slice(1).replace(color.length < 5 && /./g, '$&$&'));
            r = color >> 16;
            g = color >> 8 & 255;
            b = color & 255;
        }
        return Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b)) > 127.5;
    };
    this.ParseToRGBA = function (cstr) {
        return this.to_rgba(this.Parse(cstr));
    };
    this.Lighten = function (cstr, lighten_rgb=15) {  // How many units to add to r/g/b
        var pcolor = this.Parse(cstr);
        pcolor[0] += lighten_rgb;
        pcolor[1] += lighten_rgb;
        pcolor[2] += lighten_rgb;
        return this.to_rgb(pcolor);
    };
    this.Darken = function (cstr, darken_rgb=15) {  // How many units to subtract to r/g/b
        var pcolor = this.Parse(cstr);
        pcolor[0] -= darken_rgb;
        pcolor[1] -= darken_rgb;
        pcolor[2] -= darken_rgb;
        return this.to_rgb(pcolor);
    };
    // TODO: break this up
    this.Parse = function (cstr) {
        if (this.parsed_color_data[cstr]) {
            return JSON.parse(JSON.stringify(this.parsed_color_data[cstr]));
        }
        var base;
        var size;
        var m = null;
        var alpha = 1;
        var parts = [];
        var space = null;
        if (typeof cstr === "string") {  // keyword
            if (this.Names[cstr]) {
                parts = this.Names[cstr].slice();
                space = "rgb";
            }
            else if (cstr === "transparent") {  // reserved words
                alpha = 0;
                space = "rgb";
                parts = [0,0,0];
            }
            else if (/^#[A-Fa-f0-9]+$/.test(cstr)) {  // hex
                alpha = 1;
                base = cstr.slice(1);
                size = base.length;
                var is_short = size <= 4;
                if (is_short) {
                    parts = [
                        parseInt(base[0] + base[0], 16),
                        parseInt(base[1] + base[1], 16),
                        parseInt(base[2] + base[2], 16)
                    ];
                    if (size === 4) {
                        alpha = parseInt(base[3] + base[3], 16) / 255;
                    }
                }
                else {
                    parts = [
                        parseInt(base[0] + base[1], 16),
                        parseInt(base[2] + base[3], 16),
                        parseInt(base[4] + base[5], 16)
                    ];
                    if (size === 8) {
                        alpha = parseInt(base[6] + base[7], 16) / 255;
                    }
                }
                if (!parts[0]) {
                    parts[0] = 0;
                }
                if (!parts[1]) {
                    parts[1] = 0;
                }
                if (!parts[2]) {
                    parts[2] = 0;
                }
                space = "rgb";
            }
            // TODO: What is happening in this conditional? m = regex? Mistaken single equal sign?
            else if (m = /^((?:rgb|hs[lvb]|hwb|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms)a?)\s*\(([^\)]*)\)/.exec(cstr)) {  // color space
                var name = m[1];
                var isRGB = name === "rgb";
                base = name.replace(/a$/, "");
                space = base;
                size = base === "cmyk" ? 4 : base === "gray" ? 1 : 3;
                parts = m[2].trim()
                    .split(/\s*[,\/]\s*|\s+/)
                    .map(function (x, i) {
                        if (/%$/.test(x)) {  // <percentage>
                            if (i === size) {  // alpha
                                return parseFloat(x) / 100;
                            }
                            if (base === "rgb") {  // rgb
                                return parseFloat(x) * 255 / 100;
                            }
                            return parseFloat(x);
                        }
                        else if (base[i] === "h") {  // hue
                            if (/deg$/.test(x)) {  // <deg>
                                return parseFloat(x);
                            }
                            // TODO: What is baseHues supposed to be? It's not defined anywhere
                            else if (baseHues[x] !== undefined) {  // <base-hue>
                                return baseHues[x];
                            }
                        }
                        return parseFloat(x);
                    });
                if (name === base) {
                    parts.push(1);
                }
                alpha = (isRGB) ? 1 : (parts[size] === undefined) ? 1 : parts[size];
                parts = parts.slice(0, size);
            }
            else if (cstr.length > 10 && /[0-9](?:\s|\/)/.test(cstr)) {  // named channels case
                parts = cstr.match(/([0-9]+)/g).map(function (value) {
                    return parseFloat(value);
                });
                space = cstr.match(/([a-z])/ig).join('').toLowerCase();
            }
        }
        else if (!isNaN(cstr)) {  // numeric case
            space = "rgb";
            parts = [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff];
        }
        else if (Array.isArray(cstr) || cstr.length) {  // array-like
            parts = [cstr[0], cstr[1], cstr[2]];
            space = "rgb";
            alpha = cstr.length === 4 ? cstr[3] : 1;
        }
        else if (cstr instanceof Object) {  // object case - detects css cases of rgb and hsl
            if (cstr.r != null || cstr.red != null || cstr.R != null) {
                space = "rgb";
                parts = [
                    cstr.r || cstr.red || cstr.R || 0,
                    cstr.g || cstr.green || cstr.G || 0,
                    cstr.b || cstr.blue || cstr.B || 0
                ];
            }
            else {
                space = "hsl";
                parts = [
                    cstr.h || cstr.hue || cstr.H || 0,
                    cstr.s || cstr.saturation || cstr.S || 0,
                    cstr.l || cstr.lightness || cstr.L || cstr.b || cstr.brightness
                ];
            }
            alpha = cstr.a || cstr.alpha || cstr.opacity || 1;
            if (cstr.opacity != null) {
                alpha /= 100;
            }
        }
        else {
            console.warn("Warning: Dash.Color.Parse failed to parse color!", cstr);
        }
        this.parsed_color_data[cstr] = [parts[0], parts[1], parts[2], alpha, space];
        return JSON.parse(JSON.stringify(this.parsed_color_data[cstr]));
    };
    // This function will set the placeholder text for an input element
    this.SetPlaceholderColor = function (input_html, placeholder_color) {
        var class_name = "placeholder_inline_style_" + (Math.random() * 1000000).toString();
        var style_str = "." + class_name + "::placeholder {color: " + placeholder_color + "}";
        var node = document.createElement("style");
        node.innerHTML = style_str;
        document.body.appendChild(node);
        input_html.addClass(class_name);
        return input_html;
    };
    this.Names = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
    };
    this._get_background_raised = function (color) {
        return this.Lighten(color, Dash.Color.IsLightColor(color) ? 10: 40);
    };
    this.setup_color_sets();
}

class DashColorSet {
    constructor(background, background_raised, text, text_header, accent_good, accent_bad, button, tab, input) {
        this._background  = background;               // HTML Color
        this._background_raised  = background_raised; // HTML Color
        this._text        = text;                     // HTML Color
        this._text_header = text_header;              // HTML Color
        this._accent_good = accent_good;              // HTML Color
        this._accent_bad  = accent_bad;               // HTML Color
        this._button      = button;                   // DashColorButtonSet()
        this._tab         = tab;                      // DashColorButtonSet()
        this._input       = input;                    // DashColorButtonSet()
        this._placeholder_class = "";                 // String
    };
    get Background () {
        return this._background;
    };
    get BackgroundRaised () {
        return this._background_raised;
    };
    get Text () {
        return this._text;
    };
    get TextHeader () {
        return this._text_header;
    };
    get AccentGood () {
        return this._accent_good;
    };
    get AccentBad () {
        return this._accent_bad;
    };
    get Button () {
        return this._button;
    };
    get Tab () {
        return this._tab;
    };
    get Input () {
        return this._input;
    };
    get PlaceholderClass() {
        return this._placeholder_class;
    };
    ///////////// PROGRAMMATIC START ////////////
    get TextColorData () {
        if (this._text_color_data == null) {
            // Cache this once since parsing can be expensive
            this._text_color_data = Dash.Color.Parse(this._text);
        }
        return this._text_color_data;
    };
    get StrokeDark () {
        if (this._stroke_dark == null) {
            this._stroke_dark = Dash.Color.ToRGBA([
                this.TextColorData[0], // Red
                this.TextColorData[1], // Green
                this.TextColorData[2], // Blue
                0.85
            ]);
        }
        return this._stroke_dark;
    };
    // Use to draw lines and boxes that compliment the interface
    // Think of this color as a lighter version of Text
    get Stroke () {
        if (this._stroke == null) {
            this._stroke = Dash.Color.ToRGBA([
                this.TextColorData[0], // Red
                this.TextColorData[1], // Green
                this.TextColorData[2], // Blue
                0.65
            ]);
        }
        return this._stroke;
    };
    get StrokeLight () {
        if (this._stroke_light == null) {
            this._stroke_light = Dash.Color.ToRGBA([
                this.TextColorData[0], // Red
                this.TextColorData[1], // Green
                this.TextColorData[2], // Blue
                0.4
            ]);
        }
        return this._stroke_light;
    };
    get PinstripeDark () {
        if (this._pinstripe_dark == null) {
            this._pinstripe_dark = Dash.Color.ToRGBA([
                this.TextColorData[0], // Red
                this.TextColorData[1], // Green
                this.TextColorData[2], // Blue
                0.25                    // Opacity
            ]);
        }
        return this._pinstripe_dark;
    };
    // Use to draw very fine lines to suggest depth / shadow
    get Pinstripe () {
        if (this._pinstripe == null) {
            this._pinstripe = Dash.Color.ToRGBA([
                this.TextColorData[0], // Red
                this.TextColorData[1], // Green
                this.TextColorData[2], // Blue
                0.1                    // Opacity
            ]);
        }
        return this._pinstripe;
    };
    ///////////// PROGRAMMATIC END ////////////
    /////////////////////////
    set Background (color) {
        this._background = color;
        // Since we don't allow BackgroundRaised to be set anymore, but it
        // is still referenced in the code, auto-update BackgroundRaised when
        // Background is updated - otherwise, the new Background will not work
        // well with the default, hard-coded BackgroundRaised.
        this._background_raised = Dash.Color._get_background_raised(color);
    };
    set Text (color) {
        this._text = color;
    };
    set TextHeader (color) {
        this._text_header = color;
    };
    set AccentGood (color) {
        this._accent_good = color;
    };
    set AccentBad (color) {
        this._accent_bad = color;
    };
    set Button (color_button_set) {
        this._button = color_button_set;
    };
    set Tab (color_button_set) {
        this._tab = color_button_set;
    };
    set Input (color_button_set) {
        this._input = color_button_set;
    };
    SetPlaceholderClass (placeholder_class_name) {
        this._placeholder_class = placeholder_class_name;
    };
}

class DashSiteColors {
    constructor(color_obj, dash_color) {
        this._col  = color_obj;
        this._dash_color = dash_color;
    };
    get Background() {
        return this._col["background"] || "orange";
    };
    get BackgroundRaised() {
        return this._col["background_raised"] || this._dash_color._get_background_raised(this._col["background"]);
    };
    get Button() {
        return this._col["button"] || "orange";
    };
    get ButtonText() {
        return this._col["button_text"] || "orange";
    };
    get AccentGood() {
        return this._col["accent_good"] || "orange";
    };
    get AccentBad() {
        return this._col["accent_bad"] || "orange";
    };
    get TabAreaBackground() {
        return this._col["tab_area_background"] || this._col["background"] || "orange";
    };
    get TextHeader() {
        return this._col["text_header"] || this._col["text"] || "red";
    };
}

class DashColorButtonSet {
    constructor(area_background, background, text) {
        this._area_background = area_background; // HTML Color
        this._background = background; // DashColorStateSet()
        this._text       = text;       // DashColorStateSet()
    };
    get AreaBackground() {
        return this._area_background;
    };
    get Background() {
        return this._background;
    };
    get Text() {
        return this._text;
    };
    //////////////////////////
    set AreaBackground(state_set) {
        this._area_background = state_set;
    };
    set Background(state_set) {
        this._background = state_set;
        this._background.FillStates();
    };
    set Text(state_set) {
        this._text = state_set;
        this._text.FillStates();
    };
    AssertButtonSet() {
        // DOC: This is a dummy function to force an
        // error if an object does not have this method
        return this._selected_hover;
    };
}

class DashColorStateSet {
    constructor(base, selected, base_hover, selected_hover) {
        this._base           = base;
        this._selected       = selected;
        this._base_hover     = base_hover;
        this._selected_hover = selected_hover;
    };
    get Base() {
        return this._base;
    };
    get BaseHover() {
        return this._base_hover;
    };
    get Selected() {
        return this._selected;
    };
    get SelectedHover() {
        return this._selected_hover;
    };
    FillStates() {
        // Doc: Since it's possible to only use one color, this function
        //makes sure to autofill missing colors
        if (!this._base) {
            console.error("Error: DashColorStateSet() Requires at least one color");
            return;
        }
        if (!this._selected) {
            console.warn("Warning: Set a color for the 'Selected' property");
            this._selected = "red";
        }
        this._base_hover = this._base_hover || Dash.Color.Lighten(this._base, 50);
        this._selected_hover = this._selected_hover || Dash.Color.Lighten(this._selected, 50);
    };
}

function DashDocsBox (docs_view, name, data) {
    this.name = name;
    this.data = data;
    this.ext = docs_view.ext;
    this.is_py = this.ext === "py";
    this.is_js = this.ext === "js";
    if (!this.is_py && !this.is_js) {
        console.error("Invalid extension for docs:", this.ext);
        this.html = $("<div>ERROR: See console</div>");
        return;
    }
    this.html = $("<div></div>");
    this.color = Dash.Color.Light;
    this.type_label_color = docs_view.type_label_color || this.color.AccentGood;
    this.default_label_color = docs_view.default_label_color || this.color.Button.Background.Base;
    this.description_css = {
        "color": this.color.Stroke,
        "white-space": "pre-wrap",
        "font-family": "sans_serif_italic"
    };
    this.setup_styles = function () {
        console.log("Data:", this.data);
        this.html.css({
            "position": "absolute",
            "inset": 0,
            "overflow-y": "auto",
            "padding": Dash.Size.Padding
        });
        this.add_comment_and_docstring();
        this.add_classes();
        this.add_functions();
    };
    this.add_comment_and_docstring = function () {
        var container = this.get_header_container(this.name, "275%");
        container.append(this.get_comment_docstring_box(this.data));
        this.html.append(container);
    };
    // Format certain bits of text in place so we don't need to create new divs for each little thing while keeping the arrangement intact
    this.format_text = function (text) {
        var replace = {
            "TODO": (
                "<i style='font-family: sans_serif_italic, sans-serif; white-space: " +
                "pre-wrap; color: " + this.color.AccentBad + "'>TODO</i>"
            )
        };
        for (var value in replace) {
            text = text.replaceAll(value, replace[value]);
        }
        for (var type of ["str", "float", "int", "bool", "list", "dict", "tuple"]) {
            text = text.replaceAll(
                "(" + type + ")",
                (
                    "(<i style='font-family: sans_serif_bold, sans-serif; white-space: " +
                    "pre-wrap; color: " + this.type_label_color + "'>" + type + "</i>)"
                )
            );
        }
        if (text.includes("default=")) {
            var split = text.split("default=");
            var start = split[0] + "default=";
            split = split.Last().split(")");
            var default_value = (
                "<i style='font-family: sans_serif_bold, sans-serif; white-space: pre-wrap; " +
                "color: " + this.default_label_color + "'>" + split.shift() + "</i>"
            );
            for (var def of ['"', "true", "false", "[", "]", "(", ")", "{", "}"]) {
                default_value = default_value.replaceAll(
                    def,
                    (
                        "<i style='font-family: sans_serif_bold, sans-serif; white-space: " +
                        "pre-wrap; color: " + this.default_label_color + "'>" + def + "</i>"
                    )
                );
            }
            default_value += ")";
            var end = split.join(")");
            text = start + default_value + end;
        }
        return text;
    };
    this.get_class_box = function (name, data) {
        var [container, header] = this.get_header_container(name, "140%", true, true);
        if (this.is_js) {
            this.setup_js_class(data, container);
        }
        this.add_attributes(data, container);
        if (this.is_py) {
            this.add_properties(data, container);
        }
        var boxes = this.add_functions(container, data, "160%", data["inherits_from"]);
        var init_box = boxes["private"]["boxes"]["__init__"];
        if (!init_box) {
            return container;
        }
        init_box.detach();
        init_box.css({
            "margin-left": 0
        });
        header.detach();
        container.prepend(init_box);
        container.prepend(header);
        return container;
    };
    this.setup_js_class = function (data, container) {
        var comment_box = this.get_comment_docstring_box(data);  // TODO: JS isn't tracking class docstrings, but probably should... another time.
        comment_box.css({
            "margin-bottom": Dash.Size.Padding
        });
        if (data["inherits_from"]) {
            var inherits = $("<div><b>Inherits from:</b> " + data["inherits_from"].join(", ") + "</div>");
            inherits.css({
                ...this.description_css,
                "margin-bottom": Dash.Size.Padding
            });
            comment_box.prepend(inherits);
        }
        container.append(comment_box);
        this.add_params(data, container);
    };
    this.add_attributes = function (data, container) {
        for (var key of ["public", "private"]) {
            if (!Dash.Validate.Object(data["attributes"][key])) {
                continue;
            }
            var box = this.get_header_container("Attributes (" + key.Title() + ")", "160%", true);
            this.add_params(data["attributes"], box, key);
            container.append(box);
        }
    };
    this.add_properties = function (data, container) {
        for (var key of ["public", "private"]) {
            if (!Dash.Validate.Object(data["properties"][key])) {
                continue;
            }
            var box = this.get_header_container("Properties (" + key.Title() + ")", "160%", true);
            for (var name of Object.keys(data["properties"][key]).sort()) {
                var prop_data = data["properties"][key][name];
                var prop_container = this.get_header_container(name + " (" + (prop_data["type"] || "Missing type") + ")", "120%");
                prop_container.css({
                    "margin-bottom": Dash.Size.Padding * 1.5,
                    "margin-left": Dash.Size.Padding * 2
                });
                prop_container.append(this.get_comment_docstring_box(prop_data));
                box.append(prop_container);
            }
            container.append(box);
        }
    };
    this.get_function_box = function (name, data, add_auth_label=false, class_inherits=null) {
        var container = this.get_header_container(name, "140%", true);
        if (name !== "__init__") {
            container.css({
                "border-left": "1px solid " + this.color.Pinstripe,
                "padding-left": Dash.Size.Padding
            });
        }
        var comment_box = this.get_comment_docstring_box(data);
        comment_box.css({
            "margin-bottom": Dash.Size.Padding
        });
        container.append(comment_box);
        if (add_auth_label) {
            var label = $("<div>Requires Authorization</div>");
            label.css({
                ...this.description_css,
                "color": this.color.Button.Background.Base,
                "font-family": "sans_serif_bold",
                "margin-bottom": Dash.Size.Padding
            });
            comment_box.prepend(label);
        }
        else if (name === "__init__" && class_inherits) {
            var inherits = $("<div><b>Inherits from:</b> " + class_inherits.join(", ") + "</div>");
            inherits.css({
                ...this.description_css,
                "margin-bottom": Dash.Size.Padding
            });
            comment_box.prepend(inherits);
        }
        this.add_params(data, container, "params", 1.5);
        return container;
    };
    this.add_params = function (data, container, key="params", pad_mult=2) {
        var box = null;
        var order = (key === "params" ? Object.keys(data[key]) : Object.keys(data[key]).sort());
        for (var param_name of order) {
            box = this.get_param_box(param_name, data[key][param_name]);
            box.css({
                "margin-left": Dash.Size.Padding * pad_mult
            });
            container.append(box);
        }
        if (box) {
            box.css({
                "margin-bottom": 0  // Last box
            });
        }
    };
    this.get_param_box = function (name, data) {
        var container = this.get_header_container(name + " (" + (data["type"] || "Missing type") + ")", "110%");
        container.css({
            "margin-bottom": Dash.Size.Padding * 1.5
        });
        var text = "";
        if (data["default"] !== "") {
            if (typeof data["default"] === "object") {
                data["default"] = JSON.stringify(data["default"]);
            }
            var default_value = ("(default=" + data["default"] + ") ").replaceAll("<", "&lt;");
            text += "<i style='font-family: sans_serif_bold, sans-serif; white-space: pre-wrap; color: " + this.color.StrokeLight + "'>" + default_value + "</i>";
        }
        text += (data["description"] || "Missing description");
        var box = $("<div>" + this.format_text(text) + "</div>");
        box.css({
            ...this.description_css,
            "margin-top": Dash.Size.Padding * 0.25,
            "margin-left": Dash.Size.Padding * 2
        });
        container.append(box);
        return container;
    };
    this.add_classes = function () {
        var container = this.get_header_container("Classes", "200%", true);
        for (var name of Object.keys(this.data["classes"]).sort()) {
            var box = this.get_class_box(name, this.data["classes"][name]);
            box.css({
                "margin-left": Dash.Size.Padding * 2,
                "border-left": "1px solid " + this.color.Pinstripe,
                "padding-left": Dash.Size.Padding
            });
            container.append(box);
        }
        this.html.append(container);
    };
    this.add_functions = function (append_to_html=null, data=null, font_size="200%", class_inherits=null) {
        if (append_to_html === null) {
            append_to_html = this.html;
        }
        if (data === null) {
            data = this.data;
        }
        var boxes = this.get_function_boxes(data, font_size, class_inherits);
        for (var key of ["endpoints", "public", "private"]) {
            if (!Dash.Validate.Object(boxes[key]) || !Dash.Validate.Object(boxes[key]["boxes"])) {
                continue;
            }
            append_to_html.append(boxes[key]["container"]);
        }
        return boxes;
    };
    this.get_function_boxes = function (data, font_size="200%", class_inherits=null) {
        var boxes = {};
        for (var key in data["functions"]) {
            if (!(key in boxes)) {
                boxes[key] = {};
            }
            var name;
            var container = this.get_header_container("Functions (" + key.Title() + ")", font_size, true);
            boxes[key]["container"] = container;
            boxes[key]["boxes"] = {};
            for (name of Object.keys(data["functions"][key]).sort()) {
                var box = this.get_function_box(name, data["functions"][key][name], key === "endpoints", class_inherits);
                box.css({
                    "margin-left": Dash.Size.Padding * 2
                });
                container.append(box);
                boxes[key]["boxes"][name] = box;
            }
        }
        return boxes;
    };
    this.get_comment_docstring_box = function (data) {
        var box = $("<div></div>");
        box.css({
            "margin-left": Dash.Size.Padding * 0.25,
            "padding-left": Dash.Size.Padding,
            "padding-top": Dash.Size.Padding * 0.5,
            "padding-bottom": Dash.Size.Padding * 0.5,
            "border-left": "2px solid " + this.color.StrokeLight
        });
        var ds_css = {
            ...this.description_css,
            "margin-bottom": Dash.Size.Padding
        };
        var ds_is_obj = typeof data["docstring"] === "object";
        var ds_description = (ds_is_obj ? data["docstring"]["description"] : data["docstring"]) || "Missing docstring";
        var docstring = $("<div>" + this.format_text("<b>Docstring:</b> " + ds_description) + "</div>");
        docstring.css(ds_is_obj || data["comment"] ? ds_css : this.description_css);
        box.append(docstring);
        if (ds_is_obj) {
            var return_data = data["docstring"]["return"] || {};
            var rt_type = return_data["type"] || "Missing type";
            var rt_description = return_data["description"] || "Missing description";
            var return_details = $("<div>" + this.format_text("<b>Return (" + rt_type + "):</b> " + rt_description) + "</div>");
            return_details.css(data["comment"] ? ds_css : this.description_css);
            box.append(return_details);
        }
        if (data["comment"]) {
            var comment = $("<div>" + this.format_text("<b>Comment:</b> " + data["comment"]) + "</div>");
            comment.css(this.description_css);
            box.append(comment);
        }
        return box;
    };
    this.get_header_container = function (text, font_size="100%", include_dropdown=false, return_header=false) {
        var container = $("<div></div>");
        container.css({
            "margin-bottom": Dash.Size.Padding * (font_size === "275%" ? 3 : (font_size === "200%" || text === "__init__") ? 2 : 1),
            "overflow": "hidden",
            "height": "auto"
        });
        if (text === "__init__") {
            return container;
        }
        var header = $("<div>" + this.format_text(text) + "</div>");
        var header_css = {
            "color": font_size === "160%" ? this.color.Stroke : this.color.Text,
            "font-family": "sans_serif_bold",
            "font-size": font_size,
            "display": "flex"
        };
        // Function
        if (font_size === "140%") {
            header_css = {
                ...header_css,
                "border-radius": Dash.Size.Padding * 2,
                "padding-left": Dash.Size.Padding,
                "padding-right": Dash.Size.Padding,
                "margin-top": Dash.Size.Padding * 0.5,
                "margin-bottom": Dash.Size.Padding * 0.5,
                "background": this.color.Pinstripe,
                "border": "1px solid " + this.color.AccentGood,
                "width": "fit-content"
            };
        }
        // Param
        else if (font_size === "110%") {
            header_css = {
                ...header_css,
                "border-radius": Dash.Size.BorderRadius,
                "padding-left": Dash.Size.Padding * 0.1,
                "padding-right": Dash.Size.Padding * 0.1,
                "height": "fit-content",
                "background": this.color.Pinstripe,
                "width": "fit-content"
            };
        }
        header.css(header_css);
        container.append(header);
        if (include_dropdown) {
            this.add_dropdown_icon(container, header);
        }
        if (return_header) {
            return [container, header];
        }
        return container;
    };
    this.add_dropdown_icon = function (container, header) {
        (function (self) {
            requestAnimationFrame(function () {
                var icon = new Dash.Gui.IconButton(
                    "caret_up",
                    function (event, button) {
                        if (!button._og_container_height) {
                            button._og_container_height = container.outerHeight();
                        }
                        try {
                            container.parent().css({
                                "height": "auto"
                            });
                        }
                        catch {
                            // Pass
                        }
                        container.stop().animate(
                            {"height": button.icon_name === "caret_up" ? header.outerHeight(Boolean(header.css("border"))) : button._og_container_height},
                            200,
                            function () {
                                button.SetIcon(button.icon_name === "caret_up" ? "caret_down" : "caret_up");
                            }
                        );
                    },
                    self,
                    self.color,
                    {
                        "container_size": header.outerHeight(),
                        "size_mult": 0.75
                    }
                );
                header.append(icon.html);
            });
        })(this);
    };
    this.setup_styles();
}

function DashDocsHelp (color=null) {
    this.color = color || Dash.Color.Light;
    this.html = $("<div></div>");
    this.opposite_color = Dash.Color.GetOpposite(this.color);
    this.setup_styles = function () {
        this.html.css({
            "position": "absolute",
            "inset": 0,
            "overflow-y": "auto",
            "padding": Dash.Size.Padding * 2
        });
        this.add_py();
        this.add_js();
    };
    this.add_py = function () {
        this.html.append(this.get_header("Python (Back End)", "python_logo"));
        var container = this.get_type_container();
        container.append(this.get_url_label(
            "Docstring should follow reStructuredText syntax. Example:",
            "https://docutils.sourceforge.io/docs/user/rst/cheatsheet.txt",
            "reStructuredText"
        ));
        container.append(this.get_code_block(
            this.parse_py_code(
                "# A comment placed directly above a function will be associated with that function\n" +
                'def Test(req_param1, req_param2: str, opt_param1="", opt_param2={}, opt_param3=[1, 2], opt_param4=False):\n' +
                '    """\n' +
                "    Description of the function.\n" +
                "    \n" +
                "    | Use a bar at the beginning of a description line to force a new line.\n" +
                "    \n" +
                "    :param str  req_param1: If a param doesn't have a default value, it's important to include its type in the docstring\n" +
                "    :param str  req_param2: And/or, use a type hint when declaring the param\n" +
                "    :param str  opt_param1: If a param does have a default value, include it at the end of the param's description, using the below syntax\n" +
                "    :param dict opt_param2: Description of opt_param2 (default={})\n" +
                "    :param list opt_param3: Description of opt_param3 (default=[1, 2])\n" +
                "    :param bool opt_param4: Description of opt_param3 (default=False)\n" +
                "    \n" +
                "    :return: Description of what is being returned\n" +
                "    :rtype:  str\n" +
                '    """\n' +
                "    \n" +
                '    return "Test"'
            ),
            "#75715E"
        ));
        this.html.append(container);
    };
    this.add_js = function () {
        this.html.append(this.get_header("JavaScript (Front End)", "javascript_logo"));
        var container = this.get_type_container();
        container.append(this.get_url_label(
            "Docstring should follow JSDoc syntax. Example:",
            "https://jsdoc.app",
            "JSDoc"
        ));
        container.append(this.get_code_block(
            this.parse_js_code(
                "// A comment placed directly above a function will be associated with that function\n" +
                'function Test (param1, param2, def_param1="", def_param2={}, def_param3=[1, 2], def_param4=false) {\n' +
                "    /**\n" +
                "     * Underline titles/headers with hyphens\n" +
                "     * -------------------------------------\n" +
                "     *\n" +
                "     * Description of the function.\n" +
                "     *\n" +
                "     * HTML tags, such as &lt;br&gt;, can be used in the description and will affect the way the docstring is rendered in IDEs, etc.\n" +
                "     *\n" +
                "     * - Use a hyphen in the description to render a bullet line.\n" +
                "     *\n" +
                "     * @param {string}  param1     - If a param doesn't have a default value, it's important to include its type in the docstring\n" +
                "     * @param {string}  param2     - Description of param2\n" +
                "     * @param {string}  def_param1 - If a param does have a default value, include it at the end of the param's description, using the below syntax\n" +
                "     * @param {object}  def_param2 - Description of def_param2 (default={})\n" +
                "     * @param {Array}   def_param3 - Description of def_param3 (default=[1, 2])\n" +
                "     * @param {boolean} def_param4 - Description of def_param3 (default=false)\n" +
                "     *\n" +
                "     * @returns {string} Description of what is being returned\n" +
                "     */\n" +
                "\n" +
                '    return "Test";\n' +
                "}"
            ),
            "#727072"
        ));
        var label = this.get_label(
            "If one script inherits from another (via <b>.call()</b>), add the <b>@member</b> tag to the top of the script that gets inherited.",
            "125%",
            "italic",
            this.color.Stroke
        );
        label.css({
            "margin-top": Dash.Size.Padding * 3,
            "margin-bottom": Dash.Size.Padding * 2
        });
        container.append(label);
        container.append(this.get_code_block(
            this.parse_js_code(
                "/**@member OtherClassThatInheritsThis*/"
            ),
            "#727072"
        ));
        this.html.append(container);
    };
    this.get_code_block = function (text, text_color="") {
        var container = $("<div></div>");
        container.css({
            "border-radius": Dash.Size.Padding,
            "background": this.opposite_color.Background,
            "padding": Dash.Size.Padding * 2
        });
        container.append(this.get_label(
            text,
            "100%",
            "Andale Mono, Monaco, monospace",
            text_color
        ));
        return container;
    };
    // Update this text color parsing if the example changes
    this.parse_js_code = function (text) {
        var type_color = "#63ECC8";
        var param_color = "#F59B6A";
        var number_color = "#AE90F5";
        var string_color = "#FFDE7F";
        var keyword_color = "#FF668B";
        var function_color = "#78DCE8";
        var operator_color = "#DD5FAE";
        var doc_syntax_color = "#C8BFF1";
        var style = "font-size: 100%; font-family: Andale Mono, Monaco, monospace; ";
        var equals = "<i style='" + style + "color: " + operator_color + "'>=</i>";
        // This has to come first
        // As of 9/8/22, iOS/Safari don't support regex lookbehind, and keeping this
        // prevents pages from loading at all in those contexts. Since I couldn't
        // figure out an alternative, I'm going to disable this for now.
        // Update: According to ChatGPT, an alternative is: (?:^|[^s])W*
        // text = text.replaceAll(/W*(?<!style)=/g, equals);
        text = text.replaceAll("[1", "[<i style='" + style + "color: " + number_color + "'>1</i>");
        text = text.replaceAll("2]", "<i style='" + style + "color: " + number_color + "'>2</i>]");
        text = text.replaceAll("false", "<i style='" + style + "color: " + keyword_color + "'>false</i>");
        text = text.replaceAll('"",', '<i style="' + style + 'color: ' + string_color + '">""</i>,');
        text = text.replaceAll("default" + equals, "<i style='" + style + "color: " + doc_syntax_color + "'>default</i>" + equals);
        text = text.replaceAll(/\bstring\b/g, "<i style='" + style + "color: " + type_color + "'>string</i>");
        for (var func of ["OtherClassThatInheritsThis", "call"]) {
            text = text.replaceAll(func, "<i style='" + style + "color: " + function_color + "'>" + func + "</i>");
        }
        text = text.replaceAll(
            'return "Test"',
            '<i style="' + style + 'color: ' + keyword_color + '">return</i> <i style="' + style + 'color: ' + string_color + '">"Test"</i>'
        );
        text = text.replaceAll(
            "function Test",
            "<i style='" + style + "color: " + keyword_color + "'>function</i> <i style='" + style + "color: " + function_color + "'>Test</i>"
        );
        for (var type of ["object", "Array", "boolean"]) {
            text = text.replaceAll(type, "<i style='" + style + "color: " + type_color + "'>" + type + "</i>");
        }
        for (var symbol of ["[", "]", "{", "}", "(", ")"]) {
            text = text.replaceAll(
                symbol,
                "<i style='" + style + "color: " + this.opposite_color.Text + "'>" + symbol + "</i>"
            );
        }
        for (var param of ["param1", "param2", "param3", "param4", "def_"]) {
            text = text.replaceAll(param, "<i style='" + style + "color: " + param_color + "'>" + param + "</i>");
        }
        for (var doc_syntax of ["@param", "@returns", "@member"]) {
            text = text.replaceAll(
                doc_syntax,
                "<i style='" + style + "color: " + doc_syntax_color + "'>" + doc_syntax + "</i>"
            );
        }
        return text;
    };
    // Update this text color parsing if the example changes
    this.parse_py_code = function (text) {
        var type_color = "#63ECC8";
        var param_color = "#F89769";
        var number_color = "#BF9AFF";
        var string_color = "#E6DB74";
        var comment_color = "#706F6A";
        var keyword_color = "#6BDCF1";
        var function_color = "#A0E767";
        var operator_color = "#F56188";
        var doc_syntax_color = "#7B7B54";
        var comment_text = text.split("\n")[0];
        var style = "font-size: 100%; font-family: Andale Mono, Monaco, monospace; ";
        var colon = "<i style='" + style + "color: " + operator_color + "'>:</i>";
        var equals = "<i style='" + style + "color: " + operator_color + "'>=</i>";
        // These two have to come first
        text = text.replaceAll(":", colon);
        // As of 9/8/22, iOS/Safari don't support regex lookbehind, and keeping this
        // prevents pages from loading at all in those contexts. Since I couldn't
        // figure out an alternative, I'm going to disable this for now.
        // Update: According to ChatGPT, an alternative is: (?:^|[^s])W*
        // text = text.replaceAll(/W*(?<!style)=/g, equals);
        text = text.replaceAll("[1", "[<i style='" + style + "color: " + number_color + "'>1</i>");
        text = text.replaceAll("2]", "<i style='" + style + "color: " + number_color + "'>2</i>]");
        text = text.replaceAll("False", "<i style='" + style + "color: " + keyword_color + "'>False</i>");
        text = text.replaceAll('"""', '<i style="' + style + 'color: ' + string_color + '">"""</i>');
        text = text.replaceAll('"",', '<i style="' + style + 'color: ' + string_color + '">""</i>,');
        text = text.replaceAll("default" + equals, "<i style='" + style + "color: " + doc_syntax_color + "'>default</i>" + equals);
        text = text.replaceAll(
            'return "Test"',
            '<i style="' + style + 'color: ' + keyword_color + '">return</i> <i style="' + style + 'color: ' + string_color + '">"Test"</i>'
        );
        text = text.replaceAll(
            comment_text,
            "<i style='" + style + "color: " + comment_color + "'>" + comment_text + "</i>"
        );
        text = text.replaceAll(
            "def Test",
            "<i style='" + style + "color: " + keyword_color + "'>def</i> <i style='" + style + "color: " + function_color + "'>Test</i>"
        );
        for (var type of ["str", "dict", "list", "bool"]) {
            text = text.replaceAll(" " + type, "<i style='" + style + "color: " + type_color + "'> " + type + "</i>");
        }
        for (var symbol of ["[", "]", "{", "}", "(", ")"]) {
            text = text.replaceAll(
                symbol,
                "<i style='" + style + "color: " + this.opposite_color.Text + "'>" + symbol + "</i>"
            );
        }
        for (var param of ["req_param1", "req_param2", "opt_param1", "opt_param2", "opt_param3", "opt_param4"]) {
            text = text.replaceAll(param, "<i style='" + style + "color: " + param_color + "'>" + param + "</i>");
        }
        for (var doc_syntax of ["param", "return", "rtype"]) {
            text = text.replaceAll(
                colon + doc_syntax,
                colon + "<i style='" + style + "color: " + doc_syntax_color + "'>" + doc_syntax + "</i>"
            );
        }
        return text;
    };
    this.get_type_container = function () {
        var container = $("<div></div>");
        container.css({
            "border-left": "2px solid " + this.color.Pinstripe,
            "margin-left": Dash.Size.Padding * 1.5,
            "padding-left": Dash.Size.Padding,
            "margin-bottom": Dash.Size.Padding * 4,
            "padding-bottom": Dash.Size.Padding
        });
        return container;
    };
    this.get_url_label = function (full_text, url, text_segment_to_link) {
        var container = $("<div></div>");
        container.css({
            "display": "flex"
        });
        var font_size = "125%";
        var url_label = $("<a href='" + url + "'>" + text_segment_to_link + "</a>");
        url_label.css({
            "text-decoration": "underline",
            "color": this.color.Button.Background.Base,
            "font-family": "sans_serif_bold",
            "font-size": font_size,
            "padding-left": Dash.Size.Padding * 0.4,
            "padding-right": Dash.Size.Padding * 0.4,
            "margin-bottom": Dash.Size.Padding * 2
        });
        var split = full_text.split(text_segment_to_link);
        var start = this.get_label(split[0], font_size, "italic", this.color.Stroke);
        var end = this.get_label(split.Last(), font_size, "italic", this.color.Stroke);
        container.append(start);
        container.append(url_label);
        container.append(end);
        return container;
    };
    this.get_label = function (text, font_size="100%", font_family="normal", color="") {
        var label = $("<div>" + text + "</div>");
        label.css({
            "font-size": font_size,
            "color": color || this.color.Text,
            "font-family": "sans_serif_" + font_family,
            "white-space": "pre-wrap"
        });
        return label;
    };
    this.get_header = function (label_text, icon_name) {
        var container = $("<div></div>");
        container.css({
            "display": "flex",
            "margin-bottom": Dash.Size.Padding
        });
        container.append(this.get_label(label_text, "200%", "bold"));
        (function (self) {
            requestAnimationFrame(function () {
                var icon = new Dash.Gui.Icon(
                    self.color,
                    icon_name,
                    container.height(),
                    0.9,
                    self.color.AccentGood
                );
                icon.html.css({
                    "margin-right": Dash.Size.Padding * 0.5
                });
                container.prepend(icon.html);
            });
        })(this);
        return container;
    };
    this.setup_styles();
}

function DashDocsView (package_id, ext, color_options={}) {
    this.package_id = package_id;
    this.ext = ext;
    this.is_py = this.ext === "py";
    this.is_js = this.ext === "js";
    if (!this.is_py && !this.is_js) {
        console.error("Invalid extension for docs:", this.ext);
        this.html = $("<div>ERROR: See console</div>");
        return;
    }
    this.data = null;
    this.list = null;
    this.html = $("<div></div>");
    this.left = $("<div></div>");
    this.right = $("<div></div>");
    this.color = Dash.Color.Light;
    this.list_width = Dash.Size.ColumnWidth * 2;
    this.type_label_color = color_options["type"] || null;
    this.default_label_color = color_options["default"] || null;
    this.setup_styles = function () {
        this.html.css({
            "position": "absolute",
            "inset": 0,
            "overflow": "hidden"
        });
        this.left.css({
            "position": "absolute",
            "left": 0,
            "top": 0,
            "bottom": 0,
            "border-right": "1px solid " + this.color.Button.Background.Base,
            "border-top": "1px solid " + this.color.StrokeLight,
            "box-sizing": "border-box",
            "overflow-y": "auto",
            "width": this.list_width
        });
        this.right.css({
            "position": "absolute",
            "overflow-y": "auto",
            "right": 0,
            "top": 0,
            "bottom": 0,
            "left": this.list_width
        });
        this.html.append(this.left);
        this.html.append(this.right);
        this.get_documentation();
        this.add_list();
    };
    this.add_list = function () {
        if (!this.list) {
            this.list = new Dash.Layout.List(this, this.on_row_selected, this.get_column_config(), this.color, null, Dash.Size.RowHeight * 1.25);
            this.list.html.css({
                "position": "absolute",
                "inset": 0
            });
            this.list.AddHeaderRow(
                {},
                {"background": this.color.Pinstripe}
            );
            this.list.EnableActiveRowHighlighting();
            this.left.append(this.list.html);
        }
        if (this.data) {
            this.add_list_rows();
        }
    };
    this.add_list_rows = function (data=null, list=null, sublist_row=null) {
        if (!list) {
            list = this.list;
        }
        if (list === this.list) {
            list.Clear();
        }
        if (data === null) {
            data = this.data;
        }
        for (var name in data) {
            if (name.endsWith("." + this.ext)) {
                if (list === this.list) {
                    list.AddRow(name);
                }
                else if (sublist_row) {
                    sublist_row.AddToSublistQueue(name);
                }
            }
            else {
                var row = list.GetRow(name, true);
                if (!row) {
                    row = list.AddSubList(name, this.color.Pinstripe, true);
                    // This might break things if we start updating this list. As of writing, this list
                    // doesn't update once it's generated, but once search is implemented etc, it will.
                    // This line enabled the nested sublists to work, so removing it may also require more work.
                    row.DisableSublistClearOnUpdate();
                }
                this.add_list_rows(data[name], row.GetCachedPreview(), row);
            }
        }
        if (list === this.list) {
            list.Update();
            if (list.rows) {
                for (row of list.rows) {
                    if (!row.is_sublist) {
                        list.SetSelection(row);
                        break;
                    }
                }
            }
        }
    };
    this.on_row_selected = function (row_id, is_selected, row) {
        if (!is_selected) {
            return;
        }
        var parents = this.get_parent_folder_names(row).reverse();
        var data = this.get_data_by_parents(parents)[row_id];
        this.right.empty();
        this.right.append((new Dash.Docs.Box(this, row_id, data)).html);
    };
    this.get_data_by_parents = function (parents=[], data=null) {
        if (data === null) {
            data = this.data;
        }
        if (!parents.length) {
            return data;
        }
        var parent = parents.shift();
        return this.get_data_by_parents(parents, data[parent]);
    };
    // This needs to be reversed once the final result is received,
    // it just can't happen within this function since it's recursive
    this.get_parent_folder_names = function (row, parents=[]) {
        if (!row || !row.list || !row.list.parent_row || !row.list.parent_row.id) {
            return parents;
        }
        parents.push(row.list.parent_row.id.toString().replace(row.list.sublist_row_tag, ""));
        return this.get_parent_folder_names(row.list.parent_row, parents);
    };
    this.get_column_config = function () {
        var config = new Dash.Layout.List.ColumnConfig();
        config.AddFlexText("Documentation");  // Data key not required, but this will populate the header row
        return config;
    };
    this.get_documentation = function () {
        var params = {
            "f": "get",
            "package_id": this.package_id
        };
        // To properly authenticate the user's token across contexts
        if (Dash.Context["asset_path"] !== "dash_guide") {
            params["dash_context_auth_asset_path"] = Dash.Context["asset_path"];
        }
        if (this.is_py) {
            params["front_end"] = false;
        }
        else if (this.is_js) {
            params["back_end"] = false;
        }
        Dash.Request(this, this.on_documentation, "Documentation", params, "dash.guide");
    };
    this.on_documentation = function (response) {
        console.log("Documentation:", response);
        if (!Dash.Validate.Response(response)) {
            return;
        }
        if (this.is_py) {
            this.data = response["back_end"];
        }
        else if (this.is_js) {
            this.data = response["front_end"];
        }
        if (this.list) {
            this.add_list_rows();
        }
    };
    this.GetDataForKey = function (row_id) {
        return row_id.replace("." + this.ext, "");
    };
    this.setup_styles();
}

function DashGuiLogin (on_login_binder=null, on_login_callback=null, color=null, optional_params={}) {
    this.on_login_callback = on_login_binder && on_login_callback ? on_login_callback.bind(on_login_binder) : null;
    this.color = color || (on_login_binder && on_login_binder.color ? on_login_binder.color : Dash.Color.Dark);
    this.optional_params = optional_params;
    this.html = $("<div></div>");
    this.login_box = $("<div></div>");
    this.header_label = $("<div>" + Dash.Context["display_name"] + "</div>");
    this.email_row = $("<div></div>");
    this.password_row = $("<div></div>");
    this.button_bar = $("<div></div>");
    this.setup_styles = function () {
        this.login_button = new Dash.Gui.Button("Login", this.Login, this, this.color);
        this.reset_button = new Dash.Gui.Button("Create / Reset Login", this.ResetLogin, this, this.color);
        this.email_input = new Dash.Gui.Input("email@" + Dash.Context["domain"], this.color);
        this.password_input = new Dash.Gui.Input("Password", this.color);
        this.email_input.html.css({
            "padding": Dash.Size.Padding * 0.5,
            "background": this.color.Background
        });
        this.password_input.html.css({
            "padding": Dash.Size.Padding * 0.5,
            "background": this.color.Background
        });
        // Any and all submissions on this page should be deliberate
        this.password_input.DisableAutosave();
        this.password_input.DisableBlurSubmit();
        this.email_input.DisableAutosave();
        this.email_input.DisableBlurSubmit();
        this.email_input.SetOnSubmit(this.Submit, this);
        this.password_input.SetOnSubmit(this.Submit, this);
        this.email_input.SetOnChange(this.store_input, this);
        this.password_input.SetOnChange(this.store_input, this);
        this.email_row.append(this.email_input.html);
        this.password_row.append(this.password_input.html);
        this.html.append(this.login_box);
        this.login_box.append(this.header_label);
        this.login_box.append(this.email_row);
        this.login_box.append(this.password_row);
        this.login_box.append(this.button_bar);
        this.button_bar.append(this.reset_button.html);
        this.button_bar.append(this.login_button.html);
        if (Dash.IsMobile) {
            this.setup_mobile_sizing();
        }
        else {
            this.setup_desktop_sizing();
        }
        this.email_input.SetText(Dash.Local.Get("email") || "");
        this.show_login_box();
    };
    this.Submit = function () {
        var email = this.get_email();
        var pass = this.password_input.Text();
        if (email && pass) {
            this.Login();
        }
    };
    this.Login = function () {
        var email = this.get_email();
        var pass = this.password_input.Text();
        if (!Dash.Validate.Email(email)) {
            alert("Please enter a valid email");
            return;
        }
        if (!pass) {
            alert("Please enter a valid password");
            return;
        }
        var params = {
            "f": "login",
            "email": email,
            "pass": pass
        };
        for (var key in this.optional_params) {
            params[key] = this.optional_params[key];
        }
        this.login_button.Request(
            "Users",
            params,
            this.on_login_response,
            this
        );
    };
    this.ResetLogin = function () {
        var email = this.get_email();
        if (!Dash.Validate.Email(email)) {
            alert("Please enter a valid email");
            return;
        }
        this.reset_button.Request(
            "Users",
            {
                "f": "reset",
                "email": email
            },
            this.on_reset_response,
            this
        );
    };
    this.get_email = function () {
        return this.email_input.Text().trim().toLowerCase();
    };
    this.setup_desktop_sizing = function () {
        var login_box_width = window.outerWidth * 0.5;
        if (login_box_width > 350) {
            login_box_width = 350;
        }
        this.html.css({
            "inset": 0,
            "text-align": "center",
        });
        this.login_box.css({
            "width": login_box_width,
            "height": "auto",
            "margin-left": "auto",
            "margin-right": "auto",
            "margin-top": Dash.Size.Padding * 2,
            "padding-bottom": Dash.Size.Padding * 2,
            "background": this.color.BackgroundRaised,
            "border-radius": 4,
            "box-shadow": "0px 0px 20px 1px rgba(0, 0, 0, 0.2)",
            "opacity": 0,
        });
        this.header_label.css({
            "text-align": "center",
            "font-family": "sans_serif_bold",
            "height": Dash.Size.RowHeight,
            "line-height": Dash.Size.RowHeight + "px",
            "padding": Dash.Size.Padding,
        });
        this.button_bar.css({
            "display": "flex",
            "height": Dash.Size.RowHeight,
        });
        this.email_row.css({
            "margin": Dash.Size.Padding,
            "margin-top": 0,
        });
        this.password_row.css({
            "margin": Dash.Size.Padding,
            "margin-top": 0,
        });
        this.login_button.html.css({
            "margin-left": Dash.Size.Padding,
            "width": (login_box_width * 0.5) - Dash.Size.Padding * 1.5,
        });
        this.reset_button.html.css({
            "margin-left": Dash.Size.Padding,
            "width": (login_box_width * 0.5) - Dash.Size.Padding * 1.5,
        });
    };
    this.setup_mobile_sizing = function () {
        var login_box_width = window.outerWidth - (Dash.Size.Padding * 2);
        this.html.css({
            "inset": 0,
            "text-align": "center",
            "background": "none",
        });
        this.login_box.css({
            "width": login_box_width,
            "height": "auto",
            "margin-left": "auto",
            "margin-right": "auto",
            "margin-top": Dash.Size.Padding,
            "padding-bottom": Dash.Size.Padding * 2,
            "background": this.color.BackgroundRaised,
            "border-radius": Dash.Size.BorderRadius,
            "box-shadow": "0px 0px 20px 1px rgba(0, 0, 0, 0.2)",
            "opacity": 0,
        });
        this.header_label.css({
            "text-align": "center",
            "font-family": "sans_serif_bold",
            "height": Dash.Size.RowHeight,
            "line-height": Dash.Size.RowHeight + "px",
            "padding": Dash.Size.Padding,
        });
        this.button_bar.css({
            "display": "flex",
            "height": Dash.Size.RowHeight,
        });
        this.email_row.css({
            "margin": Dash.Size.Padding,
            "margin-top": 0,
        });
        this.password_row.css({
            "margin": Dash.Size.Padding,
            "margin-top": 0,
        });
        this.login_button.html.css({
            "margin-left": Dash.Size.Padding,
            "width": (login_box_width * 0.5) - Dash.Size.Padding * 1.5,
        });
        this.reset_button.html.css({
            "margin-left": Dash.Size.Padding,
            "width": (login_box_width * 0.5) - Dash.Size.Padding * 1.5,
        });
    };
    this.show_login_box = function () {
        this.login_box.css({"opacity": 1});
    };
    this.store_input = function () {
        Dash.Local.Set("email", this.get_email());
    };
    this.on_reset_response = function (response) {
        if (!Dash.Validate.Response(response)) {
            return;
        }
        if (response["success"]) {
            alert("Your password link has been sent to " + response["email"] + ". Click that link to receive a new temporary password and log in");
        }
    };
    this.on_login_response = function (response) {
        if (!Dash.Validate.Response(response)) {
            return;
        }
        console.log("******* LOG IN *******", response);
        Dash.User.SetUserAuthentication(this.get_email(), response);
        (function (self) {
            self.html.animate({"opacity": 0}, 150, function () {
                self.html.remove();
                self.on_login_callback();
            });
        })(this);
    };
    this.setup_styles();
}

/**@member DashGuiPrompt*/
function DashGuiModal (color=null, parent_html=null, width=null, height=null, include_bg=true, bg_opacity=0.6, include_close_button=true) {
    this.parent_html = parent_html;
    this.width = width;
    this.height = height;
    this.include_bg = include_bg;
    this.bg_opacity = bg_opacity;
    this.color = color || Dash.Color.Light;
    this.include_close_button = include_close_button;
    // Not using 'this.html' is unconventional, but it's not appropriate in
    // this context, since the modal consists of two individual elements with
    // 'this.parent_html' essentially being the equivalent of the usual 'this.html'.
    // It's also important to note that these elements automatically get appended
    // to 'this.parent_html' to ensure the elements get appended appropriately.
    this.modal = null;
    this.background = null;
    this.close_button = null;
    this.on_close_callback = null;
    this.esc_shortcut_active = false;
    this.identifier = "dash_gui_modal_esc_" + Dash.Math.Random();
    this.setup_styles = function () {
        if (!this.parent_html && !this.width && !this.height) {
            console.error("If 'parent_html' is not provided, 'width' and 'height' must be");
            return;
        }
        this.add_background();
        this.add_modal();
        this.add_close_button();
        this.add_esc_shortcut();
    };
    this.SetOnCloseCallback = function (binder, callback) {
        if (!this.include_close_button) {
            return;
        }
        this.on_close_callback = callback.bind(binder);
    };
    this.SetParentHTML = function (parent_html) {
        if (this.parent_html) {
            this.modal.detach();
            if (this.include_bg) {
                this.background.detach();
            }
        }
        this.parent_html = parent_html;
        this.parent_html.append(this.modal);
        this.parent_html.append(this.background);
    };
    this.AddHTML = function (html) {
        this.modal.append(html);
    };
    this.Hide = function () {
        this.modal.hide();
        if (this.background) {
            this.background.hide();
        }
    };
    this.Show = function () {
        this.modal.show();
        if (this.background) {
            this.background.show();
        }
        this.add_esc_shortcut();
    };
    this.Remove = function () {
        this.modal.remove();
        if (this.background) {
            this.background.remove();
        }
    };
    // If you have multiple modals, or a modal alongside other elements that use
    // modals or modal backgrounds, such as loading labels and loading overlays,
    // you'll need to use this function to prioritize each one from top to bottom
    this.IncreaseZIndex = function (num) {
        var z_index = this.background.css("z-index") + num;
        if (this.include_bg) {
            this.background.css({
                "z-index": z_index
            });
        }
        this.modal.css({
            "z-index": z_index + 1
        });
        if (this.include_close_button) {
            this.close_button.html.css({
                "z-index": z_index + 2
            });
        }
    };
    this.UpdateSize = function (width=null, height=null) {
        if (!width && !height) {
            return;
        }
        var update_margin = false;
        if (width) {
            this.width = width;
            update_margin = true;
        }
        if (height) {
            this.height = height;
        }
        var css = {
            "width": this.width,
            "height": this.height
        };
        if (update_margin) {
            css["margin-left"] = this.parent_html ? this.get_left_margin(this.width) : 0;
        }
        this.modal.css(css);
    };
    this.add_modal = function () {
        var parent_width = this.get_parent_width();
        var parent_height = this.get_parent_height();
        if (!this.width) {
            this.width = (parent_width ? parent_width * 0.9 : null);
        }
        if (!this.height) {
            this.height = (parent_height ? parent_height * 0.9 : null);
        }
        // This shouldn't happen
        if (!this.width && !this.height) {
            console.warn("Failed to get modal width and height");
            return;
        }
        this.modal = Dash.Gui.GetHTMLBoxContext(
            {
                "z-index": this.background.css("z-index") + 1,
                "position": "fixed",
                "padding-bottom": 0,
                "margin-left": this.parent_html ? this.get_left_margin(this.width, parent_width) : 0,
                "margin-top": 0,
                "left": "50%",
                "top": "50%",
                "transform": "translate(-50%, -50%)",
                "width": this.width,
                "height": this.height
            },
            this.color
        );
        if (this.parent_html) {
            // We can't append this to this.background because the background has transparency
            this.parent_html.append(this.modal);
        }
    };
    this.get_parent_width = function () {
        return (this.parent_html ? (this.parent_html.outerWidth() || this.parent_html.innerWidth() || this.parent_html.width()) : null);
    };
    this.get_parent_height = function () {
        return (this.parent_html ? (this.parent_html.outerHeight() || this.parent_html.innerHeight() || this.parent_html.height()) : null);
    };
    // Logic to make sure the modal gets centered within the background, which isn't necessarily in the center of the window
    this.get_left_margin = function (modal_width, parent_width=null) {
        if (!parent_width) {
            parent_width = this.get_parent_width();
            if (!parent_width) {
                console.error("Failed to get parent width for left margin");
                return null;
            }
        }
        var left = this.parent_html.offset().left;
        var right = window.innerWidth - (parent_width + left);
        var begin_dif = ((window.innerWidth / 2) - (modal_width / 2)) - left;
        var end_dif = (window.innerWidth - right) - ((window.innerWidth / 2) + (modal_width / 2));
        var median = (begin_dif + end_dif) / 2;
        return (begin_dif > end_dif ? - (begin_dif - median) : end_dif - median);
    };
    this.add_close_button = function () {
        if (!this.include_close_button) {
            return;
        }
        this.close_button = (function (self) {
            return new Dash.Gui.IconButton(
                "close",
                function () {
                    self.Hide();
                    if (self.on_close_callback) {
                        self.on_close_callback();
                    }
                },
                self,
                self.color,
                {
                    "container_size": Dash.Size.Padding * 3,
                    "size_mult": 0.85
                }
            );
        })(this);
        this.close_button.html.css({
            "position": "absolute",
            "top": Dash.Size.Padding * 0.5,
            "right": Dash.Size.Padding * 0.25,
            "z-index": this.background.css("z-index") + 2
        });
        this.close_button.SetHoverHint("Close window (esc)");
        this.modal.append(this.close_button.html);
    };
    this.add_background = function () {
        if (!this.include_bg) {
            return;
        }
        var height = "100%";
        if (this.parent_html) {
            try {
                var scroll_height = this.parent_html.scrollHeight || this.parent_html.prop("scrollHeight");
                if (scroll_height) {
                    height = scroll_height;
                }
            }
            catch {
                // Ignore
            }
        }
        this.background = Dash.Gui.GetHTMLAbsContext(
            "",
            this.color,
            {
                "z-index": this.parent_html && this.parent_html["selector"] === "body" ? 1000000 : 100000,
                "background": this.color.BackgroundRaised,
                "opacity": this.bg_opacity,
                "height": height
            }
        );
        // Block any elements behind this from being clicked
        this.background.on("click", function (event) {
            event.stopPropagation();
        });
        if (this.parent_html) {
            this.parent_html.append(this.background);
        }
    };
    this.add_esc_shortcut = function () {
        if (!this.include_close_button || this.esc_shortcut_active) {
            return;
        }
        (function (self) {
            $(document).on(
                "keydown." + self.identifier,  // Adding an ID to the event listener allows us to kill this specific listener
                function (e) {
                    if (self.modal && !self.modal.is(":visible")) {
                        $(document).off("keydown." + self.identifier);
                        self.esc_shortcut_active = false;
                        return;
                    }
                    if (e.key === "Escape") {
                        console.log("(Esc key pressed) Close modal");
                        self.Hide();
                    }
                }
            );
        })(this);
        this.esc_shortcut_active = true;
    };
    this.setup_styles();
}

function DashGuiSlider (color, label_text, callback, start_range, end_range, current_value, width=null, height=null) {
    this.color = color;
    this.label_text = label_text;
    this.callback = callback;
    this.start_range = start_range;
    this.end_range = end_range;
    this.width = width;
    this.height = height;
    this.value = Dash.Math.InverseLerp(this.start_range, this.end_range, current_value);
    this.fire_callback_on_up_instead_of_move = false;
    this.callback_delay_ms = 0;
    this.callback_timer = null;
    this.initial_value = this.value;
    this.html = Dash.Gui.GetHTMLContext();
    this.label = $("<div></div>");
    this.value_label = $("<div></div>");
    this.slider = $("<div></div>");
    this.bar = $("<div></div>");
    this.bar_fill = $("<div></div>");
    this.thumb = $("<div></div>");
    this.thumb_inner = $("<div></div>");
    this.thumb_outer = $("<div></div>");
    this.mark = $("<div></div>");
    this.max_value_label_length = 4;
    this.reset_button = null;
    this.extra_slider_left_padding = 0;
    this.outline_size = 1;
    this.border_size = 3;
    this.value_label_visible = true;
    this.on_change_callback = null;
    this.is_active = false;
    this.setup_complete = false;
    this.initial_mark_value = 0;
    this.extra_data = {};
    this.touch_start = 0;
    this.animate_initial_value = false;
    this.slider_pos = 0; // 0-1
    this.slider_pos_touch_start = 0; // PX
    this.locked = false;
    this.value = null;
    this.manual_value = true;
    this.track_width = false;
    this.value_label_editable = false;
    this.setup_styles = function () {
        this.thumb_outer.append(this.thumb_inner);
        this.thumb.append(this.thumb_outer);
        this.slider.append(this.thumb);
        this.bar.append(this.bar_fill);
        this.slider.append(this.bar);
        this.html.append(this.slider);
        this.html.css({
            "display": "flex",
            "height": Dash.Size.RowHeight
        });
        this.label.css({
            "position": "absolute",
            "top": 0,
            "white-space": "nowrap",
            "overflow": "hidden",
            "text-overflow": "ellipsis",
            "font-size": "90%",
            "padding-left": Dash.Size.Padding * 0.5,
            "padding-right": Dash.Size.Padding * 0.5
        });
        this.value_label.css({
            "position": "absolute",
            "bottom": 0,
            "right": 0,
            "text-align": "center",
            "white-space": "nowrap",
            "overflow": "hidden",
            "text-overflow": "ellipsis",
            "padding-left": Dash.Size.Padding * 0.5,
            "padding-right": Dash.Size.Padding * 0.5,
            "font-size": "90%"
        });
        this.slider.css({
            "position": "absolute",
            "bottom": 0
        });
        this.bar.css({
            "background": "rgba(0,0,0,0.2)",
            "position": "absolute"
        });
        this.bar_fill.css({
            "position": "absolute"
        });
        this.thumb.css({
            "position": "absolute",
            "cursor": "pointer",
            "left": 0
        });
        this.thumb_inner.css({
            "position": "absolute"
        });
        this.mark.css({
            "position": "absolute"
        });
        this.setup_connections();
        (function (self) {
            requestAnimationFrame(function () {
                self.SetValue(self.initial_value);
            });
        })(this);
    };
    this.SetSize = function (width, height) {
        this.width = width;
        this.height = height;
        this.setup_sizing();
    };
    this.SetLabel = function (label) {
        this.label_text = label;
    };
    // When true, sliders can't be MANUALLY moved
    this.SetLock = function (locked) {
        this.locked = locked;
        if (this.locked) {
            this.slider.stop().animate({"opacity": 0.6});
        }
        else {
            this.slider.stop().animate({"opacity": 1});
        }
    };
    // The value is manually set, externally
    this.SetValue = function (value) {
        var value_px = Dash.Math.Lerp(0, this.slider_width, value);
        this.value = value;
        this.manual_value = true;
        this.set_thumb(value_px, false);
        this.update_value_label();
    };
    this.GetValue = function () {
        return Dash.Math.Lerp(this.start_range, this.end_range, this.value);
    };
    this.SetExtraData = function (data) {
        this.extra_data = data;
    };
    this.OnChange = function (on_change_callback) {
        this.on_change_callback = on_change_callback;
    };
    this.SetAnimate = function (animate) {
        this.animate_initial_value = animate;
    };
    this.SetValueLabelVisibility = function (visible) {
        this.value_label_visible = visible;
    };
    // This is a much more flexible approach and should be the default, but don't want to break any pre-existing usages
    // TODO: This is not fully worked out, need to figure out how the slider and all of its components will flex and redraw on resize
    // this.FlexInsteadOfAbsolute = function () {
    //     this.html.css({
    //         "width": "calc(100% - " + (Dash.Size.Padding * 2) + "px)"
    //     });
    //
    //     this.label.detach();
    //
    //     this.label.css({
    //         "position": "",
    //         "inset": "",
    //         "padding-left": 0
    //     });
    //
    //     this.html.append(this.label);
    //
    //     this.slider.detach();
    //
    //     this.slider.css({
    //         "position": "",
    //         "inset": "",
    //         "width": "auto",
    //         "flex": 2,
    //         "background": "red"
    //     });
    //
    //     this.html.append(this.slider);
    //
    //     if (this.value_label_editable) {
    //         this.value_label.html.detach();
    //
    //         this.value_label.html.css({
    //             "position": "",
    //             "inset": "",
    //             "margin-left": Dash.Size.Padding
    //         });
    //
    //         this.html.append(this.value_label.html);
    //     }
    //
    //     else {
    //         this.value_label.detach();
    //
    //         this.value_label.css({
    //             "position": "",
    //             "inset": ""
    //         });
    //
    //         this.html.append(this.value_label);
    //     }
    //
    //     if (this.reset_button) {
    //         this.reset_button.html.detach();
    //
    //         this.reset_button.html.css({
    //             "position": "",
    //             "inset": "",
    //             "margin-left": Dash.Size.Padding * 0.5
    //         });
    //
    //         this.html.append(this.reset_button.html);
    //     }
    // };
    this.StyleForPropertyBox = function (extra_slider_left_padding=0, value_label_editable=true) {
        this.extra_slider_left_padding = extra_slider_left_padding;
        this.label.css({
            "font-family": "sans_serif_bold",
            "font-size": "80%",
            "width": "",
            "white-space": "",
            "overflow": "",
            "text-overflow": "",
            "text-align": "",
            "background": "none",
            "box-shadow": ""
        });
        this.label_width = this.label.width();
        this.html.css({
            "margin-left": Dash.Size.Padding,
            "margin-bottom": Dash.Size.Padding * 0.5,
            "width": this.width + (this.label_width * 1.5)
        });
        var slider_left = this.label_width + this.extra_slider_left_padding + Dash.Size.Padding;
        this.slider.css({
            "left": slider_left
        });
        if (value_label_editable) {
            this.MakeValueLabelEditable();
        }
        else {
            this.value_label.css({
                "width": Dash.Size.ColumnWidth * 0.25,
                "background": "none",
                "box-shadow": "",
                "border": "1px solid " + this.color.StrokeLight,
                "height": this.height - 2,
                "left": slider_left + this.slider_width + Dash.Size.Padding
            });
        }
    };
    this.MakeValueLabelEditable = function () {
        this.value_label_editable = true;
        this.make_value_label_editable();
    };
    this.SetCallbackDelayMS = function (ms) {
        this.callback_delay_ms = ms;
    };
    this.SetMaxValueLabelLength = function (len) {
        this.max_value_label_length = len;
        this.update_value_label();
    };
    this.AddResetToDefaultButton = function (default_value=0.0, label_text="Reset To Default") {
        if (this.reset_button) {
            return;
        }
        this.reset_button = (function (self) {
            return new Dash.Gui.Button(
                label_text,
                function () {
                    self.SetValue(default_value);
                    self.fire_callback(true);
                },
                self,
                self.color,
                {"style": "toolbar"}
            );
        })(this);
        var value_label_width = this.value_label_editable ? this.value_label.html.width() : this.value_label.width();
        this.reset_button.html.css({
            "position": "absolute",
            "top": 0,
            "margin": 0,
            "left": this.label_width + this.extra_slider_left_padding + this.slider_width + value_label_width + (Dash.Size.Padding * 4)
        });
        this.html.append(this.reset_button.html);
    };
    this.FireCallbackOnUpInsteadOfMove = function (enabled=true) {
        this.fire_callback_on_up_instead_of_move = enabled;
    };
    this.Disable = function () {
        this.slider.css({
            "user-select": "none",
            "pointer-events": "none"
        });
        if (this.value_label_editable) {
            this.value_label.SetLocked(true);
        }
        if (this.reset_button) {
            this.reset_button.Disable();
        }
    };
    this.Enable = function () {
        this.slider.css({
            "user-select": "auto",
            "pointer-events": "auto"
        });
        if (this.value_label_editable) {
            this.value_label.SetLocked(false);
        }
        if (this.reset_button) {
            this.reset_button.Enable();
        }
    };
    this.make_value_label_editable = function () {
        this.value_label.remove();
        this.value_label = new Dash.Gui.Input("", this.color);
        var width = Dash.Size.ColumnWidth * 0.3;
        this.value_label.html.css({
            "width": width,
            "position": "absolute",
            "bottom": 0,
            "right": 0,
            "box-shadow": "",
            "box-sizing": "border-box",
            "border": "1px solid " + this.color.StrokeLight,
            "left": this.label_width + this.extra_slider_left_padding + this.slider_width + (Dash.Size.Padding * 2.5)
        });
        this.value_label.input.css({
            "padding-left": Dash.Size.Padding * 0.5,
            "padding-right": Dash.Size.Padding * 0.5,
            "width": width - Dash.Size.Padding,
            "white-space": "",
            "overflow": "",
            "text-overflow": ""
        });
        this.html.append(this.value_label.html);
        this.update_value_label();
        (function (self) {
            self.value_label.SetOnSubmit(
                function () {
                    self.SetValue(parseFloat(self.value_label.Text()));
                    self.fire_callback(true);
                },
                self
            );
        })(this);
    };
    this.setup_sizing = function () {
        this.track_width = true;
        this.height = this.height || Dash.Size.RowHeight;
        this.label_width = Dash.Size.ColumnWidth * 0.75;
        this.width = this.width || (Dash.Size.ColumnWidth * 2);
        this.slider_width = this.width;
        this.slider_height = this.height;
        this.html.append(this.label);
        this.label.text(this.label_text);
        this.slider_width = this.width - this.slider_height;
        this.html.append(this.value_label);
        this.slider_max_px = this.slider_width - (this.slider_height); // PX
        this.thumb_size = this.slider_height - (this.outline_size * 2);
        this.thumb_outer_size = this.thumb_size - (this.border_size * 2);
        this.thumb_inner_size = this.thumb_outer_size - (this.border_size * 2);
        this.bar_width = this.slider_width;
        this.bar_height = this.slider_height * 0.5;
        this.bar_fill_height = (this.bar_height * 0.4) - (this.outline_size * 2);
        this.bar_fill_width = (this.bar_width - (this.thumb_size * 0.5)) - (this.outline_size * 2);
        this.mark_height = this.slider_height * 0.9;
        this.mark_width = this.mark_height * 0.08;
        this.initial_value_px = Dash.Math.Lerp(0, this.slider_width, this.initial_value);
        this.set_thumb(this.initial_value_px, this.animate_initial_value);
        this.initial_mark_value_px = Dash.Math.Lerp(0, this.slider_width, this.initial_mark_value);
        this.set_mark(this.initial_mark_value_px, this.animate_initial_value);
        this.setup_complete = true;
        if (this.track_width && !this.monitoring_width) {
            this.monitoring_width = true;
            this.last_width = -1;
        }
    };
    this.draw = function (interactive_update) {
        if (interactive_update) {
            this.width = null;
            this.height = null;
        }
        this.setup_sizing();
        this.html.css({
            "height": this.height,
            "width": this.width + (this.label_width * 1.5),
        });
        this.label.css({
            "width": this.label_width - Dash.Size.Padding,
            "height": this.height,
            "line-height": this.height + "px",
            "color": this.color.Text,
            "text-align": "center",
            "border-radius": Dash.Size.BorderRadius,
            "background": "rgba(255, 255, 255, 0.9)",
            "box-shadow": "0px 0px 10px 1px rgba(0, 0, 0, 0.2)"
        });
        this.value_label.css({
            "width": (this.label_width * 0.5) - Dash.Size.Padding,
            "height": this.height,
            "line-height": this.height + "px",
            "color": this.color.Text,
            "text-align": "center",
            "border-radius": Dash.Size.BorderRadius,
            "background": "rgba(255, 255, 255, 0.9)",
            "box-shadow": "0px 0px 10px 1px rgba(0, 0, 0, 0.2)",
            "right": 0,
            "left": "auto"
        });
        this.slider.css({
            "width": this.slider_width,
            "height": this.slider_height,
            "left": this.label_width + Dash.Size.Padding
        });
        this.bar.css({
            "height": this.bar_height,
            "width": this.bar_width,
            "top": (this.slider_height * 0.5) - (this.bar_height * 0.5),
            "border-radius": this.bar_height
        });
        this.bar_fill.css({
            "background": "rgba(255,255,255,1)",
            "width": this.bar_fill_width,
            "height": this.bar_fill_height,
            "position": "absolute",
            "top": (this.bar_height * 0.5) - (this.bar_fill_height * 0.5) - this.outline_size,
            "left": (this.bar_width * 0.5) - (this.bar_fill_width * 0.5) - this.outline_size,
            "border-radius": this.bar_fill_height,
            "border": this.outline_size + "px solid rgba(0, 0, 0, 0.5)"
        });
        this.thumb.css({
            "width": this.thumb_size,
            "height": this.thumb_size,
            "border-radius": this.thumb_size,
            "border": this.outline_size + "px solid rgba(0, 0, 0, 0.5)"
        });
        this.thumb_outer.css({
            "width": this.thumb_outer_size,
            "height": this.thumb_outer_size,
            "border-radius": this.thumb_outer_size,
            "border": this.border_size + "px solid rgba(255, 255, 255, 1)"
        });
        this.thumb_inner.css({
            "background": "rgba(255,255,255,1)",
            "width": this.bar_height,
            "height": this.bar_height,
            "top": (this.thumb_outer_size - this.bar_height) * 0.5,
            "left": (this.thumb_outer_size - this.bar_height) * 0.5,
            "border-radius": this.bar_height
        });
        this.mark.css({
            "height": this.mark_height,
            "width": this.mark_width,
            "background": "rgba(255,255,255,0.8)",
            "top": (this.container_height * 0.5) - (this.mark_height * 0.5)  // TODO: this.container_height is undefined...
        });
    };
    this.update_value_label = function () {
        var label_text = Dash.Math.Lerp(this.start_range, this.end_range, this.value).toString();
        if (label_text.length > this.max_value_label_length) {
            label_text = label_text.slice(0, this.max_value_label_length);
        }
        if (this.value_label_editable) {
            this.value_label.SetText(label_text);
        }
        else {
            this.value_label.text(label_text);
        }
    };
    this.on_mouse_up = function (event) {
        if (!this.is_active) {
            return;
        }
        this.is_active = false;
        if (this.fire_callback_on_up_instead_of_move) {
            this.fire_callback();
            this.update_value_label();
        }
    };
    this.get_touch_w_offset = function (event) {
        return event.pageX - $(this.slider).parent().offset().left - (this.label_width + Dash.Size.Padding) - this.extra_slider_left_padding;
    };
    this.on_mouse_down = function (event) {
        if (this.is_active) {
            return;
        }
        this.touch_start = this.get_touch_w_offset(event);
        this.slider_pos_touch_start = this.set_thumb(this.touch_start);
        this.is_active = true;
    };
    this.on_mouse_move = function (event) {
        if (!this.is_active) {
            return;
        }
        var now_pos = this.get_touch_w_offset(event) + (this.height * 0.5);
        this.slider_pos = this.set_thumb(this.slider_pos_touch_start + (now_pos - this.touch_start));
        this.update_value_label();
        if (!this.fire_callback_on_up_instead_of_move) {
            this.fire_callback();
        }
    };
    this.fire_callback = function (ignore_delay=false) {
        if (!this.callback_delay_ms || ignore_delay) {
            this.callback(this.GetValue());
            return;
        }
        if (this.callback_timer) {
            clearTimeout(this.callback_timer);
        }
        this.callback_timer = (function (self) {
            return setTimeout(
                function () {
                    if (self.callback_timer) {
                        clearTimeout(self.callback_timer);
                    }
                    self.callback(self.GetValue());
                },
                self.callback_delay_ms
            );
        })(this);
    };
    // Safely set the position of the slider. Returns a clamped value if provided value extends slider bounds
    this.set_thumb = function (x_pos_px, animate) {
        animate = false;
        x_pos_px = x_pos_px - (this.slider_height * 0.5);
        if (x_pos_px < 0) {
            x_pos_px = 0;
        }
        if (x_pos_px > this.slider_max_px) {
            x_pos_px = this.slider_max_px;
        }
        if (animate) {
            this.thumb.stop().animate({"left": x_pos_px}, 500);
            this.bar_fill.stop().animate({"width": x_pos_px + (this.thumb_size * 0.5)}, 500);
        }
        else {
            this.thumb.css({"left": x_pos_px});
            this.bar_fill.css({"width": x_pos_px + (this.thumb_size * 0.5)});
        }
        if (this.setup_complete) {
            var value = Dash.Math.InverseLerp(0, this.slider_max_px, x_pos_px);
            if (this.manual_value) {
                value = this.value;
            }
            if (!animate) {
                this.value = value;
            }
            if (this.on_change_callback) {
                this.on_change_callback(value, this.slider, this.extra_data, animate);
            }
        }
        return x_pos_px;
    };
    this.set_mark = function (x_pos_px, animate) {
        x_pos_px = x_pos_px - (this.slider_height * 0.5);
        if (x_pos_px < 0) {
            x_pos_px = 0;
        }
        if (x_pos_px > this.slider_max_px) {
            x_pos_px = this.slider_max_px;
        }
        animate = false;  // Why?
        if (animate) {
            this.mark.stop().animate({"left": x_pos_px + (this.thumb_size * 0.5)}, 500);
        }
        else {
            this.mark.css({"left": x_pos_px + (this.thumb_size * 0.5)});
        }
    };
    this.setup_connections = function () {
        (function (self) {
            self.slider.on("mousedown", function (event) {
                if (self.locked) {
                    return;
                }
                self.manual_value = false;
                self.on_mouse_down(event);
                self.thumb.stop();
                self.bar_fill.stop();
                event.preventDefault();
            });
            $(document).on("mousemove", self.slider, function (event) {
                self.on_mouse_move(event);
                event.preventDefault();
            });
            $(document).on("mouseup", self.slider, function (event) {
                self.on_mouse_up(event);
            });
            requestAnimationFrame(function () {
                self.draw();
            });
        })(this);
    };
    this.setup_styles();
}

function DashGuiHeader (label_text, color=null, include_border=true) {
    this.label_text = label_text;
    this.color = color || Dash.Color.Light;
    this.include_border = include_border;
    this.icon = null;
    this.line = null;
    this.border = null;
    this.html = $("<div></div>");
    this.label = $("<div>" + this.label_text + "</div>");
    this.setup_styles = function () {
        this.html.css({
            "height": Dash.Size.RowHeight,
            "margin-bottom": Dash.Size.Padding,
            "cursor": "auto"
        });
        this.label.css({
            "text-align": "left",
            "color": this.color.TextHeader,
            "padding-left": Dash.Size.Padding,
            "line-height": Dash.Size.RowHeight + "px",
            "font-family": "sans_serif_bold",
            "white-space": "nowrap",
            "overflow": "hidden",
            "text-overflow": "ellipsis"
        });
        this.html.append(this.label);
        if (this.include_border) {
            this.border = $("<div></div>");
            this.border.css({
                "position": "absolute",
                "left": -Dash.Size.Padding * 0.25,
                "top": 0,
                "bottom": 0,
                "width": Dash.Size.Padding * 0.5,
                "background": this.color.AccentGood,
            });
            this.html.append(this.border);
        }
    };
    this.Text = function () {
        return this.label.text();
    };
    this.SetText = function (label_text) {
        this.label.text(label_text);
    };
    this.ReplaceBorderWithIcon = function (icon_name, icon_color=null, icon_html_css={}, icon_container_size=null) {
        if (!icon_name) {
            return;
        }
        this.html.empty();
        this.html.css({
            "display": "flex",
            "margin-left": -Dash.Size.Padding * 0.25
        });
        this.icon = new Dash.Gui.Icon(this.color, icon_name, icon_container_size);
        this.icon.html.css({
            ...icon_html_css,
            "cursor": "auto"
        });
        this.icon.SetColor(icon_color || this.color.AccentGood);
        this.label.css({
            "padding-left": Dash.Size.Padding * 0.75,
            "margin-top": "auto",
            "margin-bottom": "auto",
            "margin-right": Dash.Size.Padding
        });
        this.html.append(this.icon.html);
        this.html.append(this.label);
        return this.icon;
    };
    this.AddLine = function (height=0, color="", additional_css={}) {
        if (this.line) {
            return this.line;
        }
        this.line = Dash.Gui.GetFlexSpacer();
        if (!height) {
            height = Dash.Size.Padding * 0.1;
        }
        this.line.css({
            "background": color || this.color.Pinstripe,
            "height": height,
            "margin-top": (this.html.height() * 0.5) - height,
            ...additional_css
        });
        this.html.append(this.line);
        return this.line;
    };
    this.setup_styles();
}

function DashGuiCheckbox (
    local_storage_key="", default_state=true, color=null, hover_hint="Toggle", binder=null,
    callback=null, label_text="", label_first=true, include_border=false
) {
    this.local_storage_key = local_storage_key;
    this.default_state = default_state === "true" ? true : default_state === "false" ? false : default_state;
    this.color = color || (binder && binder.color ? binder.color : Dash.Color.Light);
    this.hover_hint = hover_hint === "none" ? "" : hover_hint;  // Leave the default as "Toggle" with a way to still allow a "" value
    this.binder = binder;
    this.callback = callback && binder ? callback.bind(binder) : callback;
    this.label_text = label_text;
    this.label_first = label_first;
    this.include_border = include_border;
    this.html = null;
    this.label = null;
    this.can_click = true;
    this._hover_hint = "";
    this.icon_size = null;
    this.disabled = false;
    this.icon_color = null;
    this.true_color = null;
    this.false_color = null;
    this.icon_shadow = null;
    this.icon_button = null;
    this.is_read_only = false;
    this.static_icon_name = null;
    this.able_to_toggle_cb = null;
    this.include_highlight = false;
    this.checked = this.default_state;
    this.toggle_confirmation_msg = null;
    this.true_icon_name = "checked_box";
    this.false_icon_name = "unchecked_box";
    this.icon_button_redraw_styling = null;
    this.setup_styles = function () {
        this.checked = this.get_checked_state();
        this.html = $("<div></div>");
        this.html.css({
            "display": "flex",
            "height": Dash.Size.RowHeight
        });
        this.draw_label();
        this.redraw();
    };
    this.IsChecked = function () {
        return this.checked;
    };
    this.LocalStorageKey = function () {
        return this.local_storage_key;
    };
    this.SetIconColor = function (color) {
        this.icon_color = color;
        this.icon_button.SetIconColor(color);
        return this;
    };
    this.SetIconShadow = function (shadow) {
        this.icon_shadow = shadow;
        this.icon_button.AddIconShadow(shadow);
        return this;
    };
    this.SetIconSize = function (percentage_number) {
        this.icon_size = percentage_number;
        this.icon_button.SetIconSize(percentage_number);
        return this;
    };
    this.SetAbleToToggleCallback = function (callback_with_bool_return, binder=null) {
        this.able_to_toggle_cb = binder || this.binder ?
            callback_with_bool_return.bind(binder ? binder : this.binder) :
            callback_with_bool_return;
    };
    this.SetChecked = function (is_checked=true, skip_callback=true, hover_hint="") {
        if (is_checked === this.checked) {
            return;
        }
        if (hover_hint) {
            this.hover_hint = hover_hint;
        }
        this.Toggle(skip_callback);
    };
    this.SetConfirmationMsg = function (msg) {
        this.toggle_confirmation_msg = msg;
    };
    // This turns this style into more a DashGuiIconToggle than a DashGuiCheckbox, but no need to abstract it - at least, not yet
    this.SetTrueIconName = function (icon_name) {
        this.true_icon_name = icon_name;
        if (this.checked) {
            this.redraw();
        }
    };
    // This turns this style into more a DashGuiIconToggle than a DashGuiCheckbox, but no need to abstract it - at least, not yet
    this.SetFalseIconName = function (icon_name) {
        this.false_icon_name = icon_name;
        if (!this.checked) {
            this.redraw();
        }
    };
    this.SetReadOnly = function (is_read_only=true) {
        var pointer_events;
        if (is_read_only) {
            this._hover_hint = this.hover_hint;
            this.hover_hint = "";
            pointer_events = "none";
        }
        else {
            this.hover_hint = this._hover_hint;
            this._hover_hint = "";
            pointer_events = "pointer";
        }
        this.icon_button.SetHoverHint(this.hover_hint);
        this.icon_button.html.css({
            "pointer-events": pointer_events
        });
        if (is_read_only) {
            this.DisableClick();
        }
        else {
            // TODO: the inverse of DisableClick
        }
        this.is_read_only = is_read_only;
    };
    this.DisableClick = function () {
        this.can_click = false;
        this.html.off("click");
        this.icon_button.html.off("click");
    };
    this.Toggle = function (skip_callback=false, ignore_able_to_toggle_check=false) {
        if (this.toggle_confirmation_msg) {
            if (!window.confirm(this.toggle_confirmation_msg)) {
                return;
            }
        }
        if (!ignore_able_to_toggle_check && this.able_to_toggle_cb && !this.able_to_toggle_cb(this)) {
            return;
        }
        this.checked = !this.checked;
        if (this.local_storage_key) {
            if (this.checked) {
                Dash.Local.Set(this.local_storage_key, "true");
            }
            else {
                Dash.Local.Set(this.local_storage_key, "false");
            }
        }
        this.redraw();
        if (skip_callback || !this.callback) {
            return;
        }
        this.callback(this);
    };
    this.AddIconButtonRedrawStyling = function (button_container_css=null, icon_container_css=null, icon_css=null) {
        this.icon_button_redraw_styling = {};
        if (Dash.Validate.Object(button_container_css)) {
            this.icon_button_redraw_styling["button_container_css"] = button_container_css;
        }
        if (Dash.Validate.Object(icon_container_css)) {
            this.icon_button_redraw_styling["icon_container_css"] = icon_container_css;
        }
        if (Dash.Validate.Object(icon_css)) {
            this.icon_button_redraw_styling["icon_css"] = icon_css;
        }
        this.restyle_icon_button();
    };
    // Should this just be the default?
    this.AddHighlight = function (bottom=null) {
        this.include_highlight = true;
        this.icon_button.AddHighlight();
        this.icon_button.highlight.css({
            "bottom": bottom !== null ? bottom : -(Dash.Size.Padding * 0.5)
        });
    };
    this.ToggleColorNotIcon = function (static_icon_name, true_color, false_color) {
        this.static_icon_name = static_icon_name;
        this.true_color = true_color;
        this.false_color = false_color;
        this.redraw();
    };
    this.Disable = function () {
        if (this.disabled) {
            return;
        }
        this.icon_button.Disable();
        if (this.label) {
            this.label.label.css({
                "opacity": 0.5,
                "pointer-events": "none",
                "user-select": "none"
            });
        }
        this.disabled = true;
    };
    this.Enable = function () {
        if (!this.disabled) {
            return;
        }
        this.icon_button.Enable();
        if (this.label) {
            this.label.label.css({
                "opacity": 1,
                "pointer-events": "auto",
                "user-select": "auto"
            });
        }
        this.disabled = false;
    };
    this.SetLoading = function (loading) {
        this.icon_button.SetLoading(loading, 2, false);
    };
    this.RevertToDefaultState = function (skip_callback=false, ignore_able_to_toggle_check=false) {
        if (this.IsChecked() !== this.default_state) {
            this.Toggle(skip_callback, ignore_able_to_toggle_check);
        }
    };
    this.redraw = function () {
        this.html.empty();
        (function (self) {
            self.icon_button = new Dash.Gui.IconButton(
                self.static_icon_name ? self.static_icon_name : self.checked ? self.true_icon_name : self.false_icon_name,
                function () {
                    // We don't want the args from IconButton's callback
                    self.Toggle();
                },
                self,
                self.color,
                {"container_size": Dash.Size.RowHeight}
            );
        })(this);
        this.icon_button.SetHoverHint(this.hover_hint);
        if (this.static_icon_name) {
            this.icon_button.SetIconColor(this.checked ? this.true_color : this.false_color);
        }
        else if (this.icon_color) {
            this.icon_button.SetIconColor(this.icon_color);
        }
        if (this.icon_shadow) {
            this.icon_button.SetIconShadow(this.icon_shadow);
        }
        if (this.icon_size) {
            this.icon_button.SetIconSize(this.icon_size);
        }
        if (this.include_highlight) {
            this.AddHighlight();
        }
        if (this.label_first) {
            if (this.label) {
                this.html.append(this.label.html);
            }
            this.html.append(this.icon_button.html);
        }
        else {
            this.html.append(this.icon_button.html);
            if (this.label) {
                this.html.append(this.label.html);
            }
        }
        this.restyle_icon_button();
        if (this.is_read_only) {
            this.SetReadOnly();
        }
        else if (!this.can_click) {
            this.DisableClick();
        }
    };
    this.restyle_icon_button = function () {
        if (!Dash.Validate.Object(this.icon_button_redraw_styling)) {
            return;
        }
        if (Dash.Validate.Object(this.icon_button_redraw_styling["button_container_css"])) {
            this.icon_button.html.css(this.icon_button_redraw_styling["button_container_css"]);
        }
        if (Dash.Validate.Object(this.icon_button_redraw_styling["icon_container_css"])) {
            this.icon_button.icon.html.css(this.icon_button_redraw_styling["icon_container_css"]);
        }
        if (Dash.Validate.Object(this.icon_button_redraw_styling["icon_css"])) {
            this.icon_button.icon.icon_html.css(this.icon_button_redraw_styling["icon_css"]);
        }
    };
    this.draw_label = function () {
        if (!this.label_text) {
            return;
        }
        this.label = new Dash.Gui.Header(this.label_text, this.color, this.include_border);
        this.label.label.css({
            "font-family": "sans_serif_normal",
            "padding-left": 0,
            "white-space": "nowrap",
            "overflow": "hidden",
            "text-overflow": "ellipsis"
        });
        var padding_to_icon = Dash.Size.Padding * 0.5;
        if (this.label_first) {
            this.label.label.css({
                "margin-right": padding_to_icon
            });
        }
        else {
            this.label.label.css({
                "margin-left": padding_to_icon
            });
        }
    };
    this.get_checked_state = function () {
        if (!this.local_storage_key) {
            return this.default_state;
        }
        return Dash.Local.Get(this.local_storage_key, this.default_state);
    };
    this.setup_styles();
}

function DashGuiToolRow (binder, get_data_cb=null, set_data_cb=null, color=null) {
    this.binder = binder;
    this.get_data_cb = get_data_cb ? get_data_cb.bind(binder) : null;
    this.set_data_cb = set_data_cb ? set_data_cb.bind(binder) : null;
    this.color = color || (binder && binder.color ? binder.color : Dash.Color.Light);
    this.html = null;
    this.elements = [];
    this.toolbar = null;
    this.height = Dash.Size.RowHeight;
    this.get_formatted_data_cb = null;
    this.setup_styles = function () {
        this.toolbar = new Dash.Layout.Toolbar(this, this.color);
        this.toolbar.DisablePaddingRefactoring();
        this.toolbar.stroke_sep.remove();
        this.toolbar.html.css({
            "background": "none",
            "padding-left": 0,
            "padding-right": 0,
            "height": this.height,
            "margin-left": Dash.Size.Padding * 2,
            "border-bottom": "1px dotted rgba(0, 0, 0, 0.2)"
        });
        this.html = this.toolbar.html;
    };
    this.InputInFocus = function () {
        for (var element of this.elements) {
            if ((element instanceof DashGuiInput || element instanceof DashGuiInputRow) && element.InFocus()) {
                return true;
            }
            if (element instanceof DashGuiCombo && element.InFocus(true)) {
                return true;
            }
        }
        return false;
    };
    this.AddExpander = function () {
        return this.toolbar.AddExpander();
    };
    this.AddDivider = function () {
        var divider = this.toolbar.AddDivider();
        divider.html.css({
            "height": this.height * 0.9,
            "margin-top": Dash.Size.Padding * 0.1,
            "padding-top": Dash.Size.Padding * 0.1
        });
        return divider;
    };
    this.AddComboRow = function (label_text, combo_options, default_value, callback, additional_data={}, extra_options={}, add_highlight=true) {
        if (!label_text.endsWith(":")) {
            label_text += ":";
        }
        var container = $("<div></div>");
        var css = {"display": "flex"};
        if (this.elements.length) {
            css["margin-left"] = Dash.Size.Padding;
        }
        container.css(css);
        if (add_highlight) {
            var highlight = $("<div></div>");
            highlight.css({
                "position": "absolute",
                "inset": 0,
                "background": this.color.AccentGood,
                "border-radius": Dash.Size.BorderRadius,
                "opacity": 0
            });
            container.on("mouseenter", function () {
                highlight.stop().animate({"opacity": 0.5}, 50);
            });
            container.on("mouseleave", function () {
                highlight.stop().animate({"opacity": 0}, 250);
            });
            container.append(highlight);
        }
        var label = this.AddLabel(label_text, Dash.Size.Padding * 0.5, "", null, false);
        label.html.css({
            "padding-left": 0
        });
        label.label.css({
            "padding-left": 0
        });
        label.html.detach();
        container.append(label.html);
        var combo = this.AddCombo(combo_options, default_value, callback, additional_data, extra_options);
        combo.html.detach();
        container.append(combo.html);
        this.AddHTML(container);
        container.label = label;
        container.combo = combo;
        return container;
    };
    this.AddInputRow = function (data_key, label_text="", default_value=null, width=null, on_submit_cb=null, placeholder_text="", can_edit=true) {
        if (!this.get_data_cb) {
            console.error("Error: AddInputRow requires ToolRow to have been provided a 'get_data_cb'");
            return;
        }
        var html_css = {
            "border-bottom": "",
            "margin-top": Dash.Size.Padding * 0.1
        };
        var value = this.get_formatted_data_cb ? this.get_formatted_data_cb(data_key) : this.get_data_cb()[data_key];
        var input_row = (function (self) {
            return new Dash.Gui.InputRow(
                label_text,
                value !== null && value !== undefined ? value : default_value,  // Keep 'false' intact
                placeholder_text || default_value || label_text,
                "Save",
                on_submit_cb ? function (input_row) {
                    on_submit_cb.bind(self.binder)(data_key, input_row.Text(), input_row);
                } : function (input_row) {
                    self.on_input_submit(input_row.Text(), null, {"data_key": data_key});
                },
                self,
                self.color,
                data_key
            );
        })(this);
        input_row.RemoveSaveButton();
        input_row.invalid_input_highlight.css({
            "left": 0
        });
        input_row.flash_save.css({
            "left": 0
        });
        if (width) {
            html_css["width"] = width;
        }
        else {
            html_css["flex-grow"] = 2;
            input_row.input.input.css({
                "flex-grow": 2,
                "width": "100%"
            });
        }
        if (this.elements.length) {
            html_css["margin-left"] = Dash.Size.Padding;
        }
        input_row.html.css(html_css);
        if (!can_edit) {
            input_row.SetLocked(true);
        }
        this.elements.push(input_row);
        this.AddHTML(input_row.html);
        return input_row;
    };
    this.AddIconButton = function (icon_name, callback, hover_hint="", additional_data=null, icon_size=null, size_mult=1.0, for_uploader=false) {
        var button = this.toolbar.AddIconButton(icon_name, callback.bind(this.binder), icon_size, additional_data, this.height, size_mult, for_uploader);
        button.html.css({
            "margin-top": 0
        });
        if (hover_hint) {
            button.SetHoverHint(hover_hint);
        }
        this.elements.push(button);
        return button;
    };
    this.AddCheckbox = function (
        label_text, default_state, callback, identifier, hover_hint="Toggle", checkbox_redraw_styling=null, label_border=true, strict_identifier=false
    ) {
        var checkbox = this.toolbar.AddCheckbox(
            label_text,
            default_state,
            callback ? callback.bind(this.binder) : callback,
            identifier,
            hover_hint,
            checkbox_redraw_styling,
            label_border,
            strict_identifier
        );
        checkbox.SetIconSize(125).AddHighlight(0);
        checkbox.html.css({
            "margin-top": 0
        });
        // May need to add this to the other public functions as well
        if (this.elements.length > 0 && label_border) {
            checkbox.html.css({
                "margin-left": Dash.Size.Padding
            });
        }
        // TODO: The margins applied here need to be re-evaluated, but it may break the look of a few things
        if (checkbox.label) {
            checkbox.label.html.css({
                "margin-left": Dash.Size.Padding * 0.1
            });
            checkbox.label.label.css({
                "margin-left": this.elements.length > 0 ? Dash.Size.Padding * 1.5 : 0,
                "font-size": "80%",
                "font-family": "sans_serif_bold"
            });
            if (label_border) {
                checkbox.label.border.css({
                    "background": this.color.Button.Background.Base,
                    "height": this.height * 0.9,
                    "margin-top": Dash.Size.Padding * 0.1
                });
            }
        }
        this.elements.push(checkbox);
        return checkbox;
    };
    this.AddText = function (text, color=null) {
        var label = this.toolbar.AddText(text, color);
        this.elements.push(label);
        return label;
    };
    this.AddHTML = function (html) {
        this.toolbar.AddHTML(html);
        this.elements.push(html);
        return html;
    };
    // This is intended to nicely format a prop box that only uses locked rows for displaying data, therefore,
    // it's only been implemented in input-related areas for now (there may be other areas it should be added)
    this.SetGetFormattedDataCallback = function (callback, binder=null) {
        this.get_formatted_data_cb = binder || this.binder ? callback.bind(binder ? binder : this.binder) : callback;
    };
    // this.AddComboRow is a better option when combining this with a label
    this.AddCombo = function (combo_options, default_value, callback, additional_data={}, extra_options={}) {
        var combo = this.toolbar.AddCombo(
            "",
            combo_options,
            default_value,
            callback.bind(this.binder),
            true,
            additional_data,
            extra_options
        );
        combo.html.css({
            "line-height": this.height,
            "margin-top": 0
        });
        this.elements.push(combo);
        return combo;
    };
    // TODO: These params are a mess, fix it (globally)
    this.AddLabel = function (text, right_margin=null, icon_name="", left_label_margin=null, border=true) {
        var label = this.toolbar.AddLabel(text, false, this.color);
        if (right_margin !== null) {
            label.html.css({
                "margin-right": right_margin
            });
        }
        label.html.css({
            "line-height": this.height,
            "margin-top": 0,
            "margin-bottom": 0,
            "margin-left": left_label_margin !== null ? left_label_margin : 0  // Dash.Size.Padding * 0.1
        });
        label.label.css({
            "white-space": "nowrap",
            "font-size": "80%",
            "font-family": "sans_serif_bold"
        });
        if (border) {
            if (icon_name) {
                label.ReplaceBorderWithIcon(
                    icon_name,
                    null,
                    {"margin-top": Dash.Size.Padding * 0.2},
                    this.height * 0.8
                );
                label.html.css({
                    "padding-left": 0
                });
            }
            else {
                label.border.css({
                    "background": this.color.Button.Background.Base,
                    "height": this.height * 0.9,
                    "margin-top": Dash.Size.Padding * 0.1
                });
            }
            if (this.elements.length < 1) {
                this.html.css({
                    "padding-left": Dash.Size.Padding * 0.1
                });
            }
        }
        else {
            label.border.remove();
            label.label.css({
                "margin-left": 0
            });
            if (this.elements.length < 1) {
                label.html.css({
                    "padding-left": 0
                });
                label.label.css({
                    "padding-left": 0
                });
            }
        }
        this.elements.push(label);
        return label;
    };
    // this.AddInputRow is a better option when combining this with a label
    // TODO: These params are a mess, fix it (globally)
    this.AddInput = function (
        placeholder_text, data_key, width=null, flex=false, on_submit_cb=null, on_change_cb=null,
        can_edit=true, include_label=false, label_text="", double_click_clear=true, transparent=true, allow_update=true
    ) {
        if (!this.get_data_cb) {
            console.error("Error: AddInput requires ToolRow to have been provided a 'get_data_cb'");
            return;
        }
        if (include_label) {
            var label = this.AddLabel(label_text || placeholder_text, Dash.Size.Padding * 0.5, null, null, false);
            label.html.css({
                "margin-top": Dash.Size.Padding * 0.1
            });
        }
        var input = this.toolbar.AddTransparentInput(
            placeholder_text,
            on_change_cb ? on_change_cb.bind(this.binder) : this.on_input_keystroke,
            {
                "width": width || Dash.Size.ColumnWidth * 0.6,
                "on_enter": on_submit_cb ? on_submit_cb.bind(this.binder) : this.on_input_submit
            },
            {
                "data_key": data_key
            },
            double_click_clear
        );
        if (include_label) {
            input.label = label;
        }
        // Hack so that property boxes can update these
        if (allow_update) {
            input.data_key = data_key;
        }
        var html_css = {
            "margin-right": 0,
            "height": this.height * (transparent ? 0.65 : 0.75),
            "margin-top": Dash.Size.Padding * (transparent ? 0.25 : 0.15)
        };
        var input_css = {
            "top": 0,
            "height": this.height * (transparent ? 0.8 : 0.85)
        };
        if (transparent) {
            html_css["border-bottom"] = "";
        }
        else {
            html_css["border-radius"] = Dash.Size.BorderRadius;
            html_css["margin-top"] = Dash.Size.Padding * 0.1;
            html_css["padding-bottom"] = Dash.Size.Padding * 0.1;
            html_css["padding-left"] = Dash.Size.Padding * 0.5;
            html_css["padding-right"] = Dash.Size.Padding * 0.5;
            html_css["border"] = "1px solid " + this.color.PinstripeDark;
        }
        if (flex) {
            html_css["flex-grow"] = 2;
            input_css["flex-grow"] = 2;
            input_css["width"] = "100%";
        }
        input.html.css(html_css);
        input.input.css(input_css);
        var value = this.get_formatted_data_cb ? this.get_formatted_data_cb(data_key) : this.get_data_cb()[data_key];
        if (value) {
            input.SetText(value);
        }
        if (!can_edit) {
            input.SetLocked(true);
        }
        this.elements.push(input);
        return input;
    };
    this.on_input_keystroke = function () {
        // Placeholder
    };
    this.on_input_submit = function (submitted_value, input_obj, additional_data) {
        if (!this.set_data_cb) {
            return;
        }
        this.set_data_cb(additional_data["data_key"], submitted_value);
    };
    this.setup_styles();
}

function DashGuiTextArea (color=null, placeholder_text="", binder=null, on_change_cb=null, delay_change_cb=false) {
    // For now, this file is no more than a wrapper when desiring a textarea element outside of mobile.
    // We can add to or modify this is as needed, or eventually just write this out as its own class.
    // This actually isn't exclusive to mobile for any reason. It's just the only textarea
    // element that exists in Dash and was created with the 'Mobile' name because I thought
    // it was going to be specific to mobile, but that ended up not being the case.
    DashMobileTextBox.call(this, color, placeholder_text, binder, on_change_cb, delay_change_cb);
    this.textarea.css({
        "line-height": Dash.Size.RowHeight + "px"
    });
}

function DashGuiLoadDots (size=null, color=null) {
    this.size = size || Dash.Size.RowHeight;
    this.color = color || Dash.Color.Light;
    this.html = $("<div></div>");
    this.layout = "horizontal";
    this.num_dots = 3;
    this.dots = [];
    this.iteration = 0;
    this.t = 0;
    this.cycle_duration = 1000;
    this.is_active = false;
    this.show_t = 0;
    this.IsActive = function () {
        return this.is_active;
    };
    this.Start = function () {
        if (this.is_active) {
            return;
        }
        this.is_active = true;
        this.activation_t = this.t;
        this.show_t = 0;
        this.stop_requested = false;
        for (var x in this.dots) {
            this.dots[x].Start();
        }
    };
    this.Stop = function (callback, binder) {
        if (!this.is_active) {
            return;
        }
        if (callback && binder) {
            callback = callback.bind(binder);
        }
        if (callback) {
            this.on_stopped_callback = callback;
        }
        this.is_active = false;
        this.stop_requested = true;
        for (var x in this.dots) {
            this.dots[x].Stop();
        }
        if (this.on_stopped_callback) {
            // TODO: This is wrong. Obviously. But I don't have time to hook up firing the callback correctly rn
            (function (self) {
                setTimeout(
                    function () {
                        self.on_stopped_callback();
                        self.on_stopped_callback = null;
                    },
                    500
                );
            })(this);
        }
    };
    this.SetOrientation = function (horizontal_or_vertical) {
        this.layout = horizontal_or_vertical;
        for (var x in this.dots) {
            this.dots[x].SetOrientation();
        }
    };
    this.SetColor = function (color) {
        for (var x in this.dots) {
            this.dots[x].SetColor(color);
        }
    };
    this.setup_styles = function () {
        for (var i = 0; i < this.num_dots; i++) {
            this.dots.push(new LoadDot(this));
        }
        this.html.css({
            "width": this.size,
            "height": this.size
        });
    };
    this.update = function (t) {
        if (this.stop_requested) {
            return;
        }
        (function (self) {
            requestAnimationFrame(function (t) {
                self.update(t);
            });
        })(this);
        if (this.t >= 1) {
            this.iteration += 1;
        }
        this.t = Dash.Math.InverseLerp(0, this.cycle_duration, t - (this.iteration*this.cycle_duration));
        if (this.t > 1) {
            this.t = 1;
        }
        if (!this.is_active) {
            return;
        }
        this.show_t += 0.05;
        if (this.show_t > 1) {
            this.show_t = 1;
        }
        for (var x in this.dots) {
            this.dots[x].Update(this.t);
        }
    };
    this.setup_styles();
    this.update(0);
}
function LoadDot (dots) {
    this.dots = dots;
    this.color = this.dots.color;
    this.html = $("<div></div>");
    this.index = this.dots.dots.length;
    this.hold_t = 0.25;
    this.Update = function (cycle_t) {
        var t;
        var cycle_offset = Dash.Math.Lerp(0, 0.5, 1 - Dash.Math.InverseLerp(0, this.dots.dots.length, this.index));
        cycle_t += cycle_offset;
        if (cycle_t > 1) {
            cycle_t = cycle_t - 1;
        }
        if (cycle_t < this.hold_t) {
            t = Dash.Math.InverseLerp(0, this.hold_t, cycle_t);
        }
        else if (cycle_t > 1 - this.hold_t) {
            t = 1 - Dash.Math.InverseLerp(1 - this.hold_t, 1, cycle_t);
        }
        else {
            t = 1;
        }
        t = t * this.dots.show_t;
        this.html.css({
            "opacity": t
        });
    };
    this.Start = function (cycle_t) {
        this.html.stop().css({
            "left": (this.dots.size * 0.5) - (this.size * 0.5),
            "top": (this.dots.size * 0.5) - (this.size * 0.5),
        });
        this.html.animate(
            {
                "left": this.left,
                "top": this.top,
            },
            300
        );
    };
    this.Stop = function (cycle_t) {
        this.html.stop().animate(
            {
                "left": (this.dots.size * 0.5) - (this.size * 0.5),
                "top": (this.dots.size * 0.5) - (this.size * 0.5),
                "opacity": 0
            },
            300
        );
    };
    this.SetOrientation = function () {
        this.size = this.dots.size / (this.dots.num_dots + 1.5);
        this.padding = (this.dots.size - ((this.size * this.dots.num_dots))) / ((this.dots.num_dots - 1) + 1);
        this.left = (this.padding * 0.5) + (this.index * this.size) + (this.index * this.padding);
        this.top = (this.dots.size * 0.5) - (this.size * 0.5);
        if (this.dots.layout !== "horizontal") {
            this.left = (this.dots.size * 0.5) - (this.size * 0.5);
            this.top = (this.padding * 0.5) + (this.index * this.size) + (this.index * this.padding);
        }
    };
    this.SetColor = function (color) {
        this.html.css({
            "background": color
        });
    };
    this.setup_styles = function () {
        this.SetOrientation();
        this.html.css({
            "position": "absolute",
            "left": this.left,
            "top": this.top,
            "background": Dash.IsMobile ? Dash.Color.Mobile.AccentPrimary : this.color.Text,
            "width": this.size,
            "height": this.size,
            "border-radius": this.size * 0.5,
            "opacity": 0
        });
        this.dots.html.append(this.html);
    };
    this.setup_styles();
}

function DashGuiSignature (width=null, height=null, binder=null, on_save_cb=null, on_clear_cb=null, color=null) {
    this.width = width;
    this.height = height || (width ? width * 0.5 : height);
    this.binder = binder;
    this.on_save_cb = binder && on_save_cb ? on_save_cb.bind(binder) : on_save_cb;
    this.on_clear_cb = binder && on_clear_cb ? on_clear_cb.bind(binder) : on_clear_cb;
    this.color = color || (binder && binder.color ? binder.color : Dash.Color.Light);
    this.last_url = "";
    this.signature = null;
    this.save_button = null;
    this.clear_button = null;
    this.initialized = false;
    this.size_doubled = false;
    this.html = $("<div></div>");
    // this.device_dimensions = null;  // For mobile
    this.initial_width_margin = null;
    this.canvas = $("<canvas></canvas>");
    this.initial_height_to_width_ratio = null;
    this.setup_styles = function () {
        this.html.append(this.canvas);
        this.canvas.css({
            "border": "1px solid " + this.color.Stroke,
            "border-radius": Dash.Size.BorderRadius * 0.5
        });
        if (this.width) {
            this.SetWidth(this.width);
        }
        if (this.height) {
            this.SetHeight(this.height);
        }
        // This must be instantiated after the canvas size has initially been set, if applicable
        this.signature = new SignaturePad(this.canvas[0]);
        (function (self) {
            requestAnimationFrame(function () {
                if (Dash.IsMobile) {
                    if (window.navigator.standalone === true) {  // iOS - as of writing, doesn't support latest methods
                        window.addEventListener("orientationchange", self.ensure_proper_size.bind(self));
                    }
                    else {
                        screen.orientation.addEventListener("change", self.ensure_proper_size.bind(self));
                    }
                }
                else {
                    window.addEventListener("resize", self.ensure_proper_size.bind(self));
                }
                self.ensure_proper_size();
                self.add_button_bar();
                self.add_icon();
                self.initialized = true;
            });
        })(this);
    };
    this.Clear = function () {
        this.signature.clear();
    };
    this.IsEmpty = function () {
        return this.signature.isEmpty();
    };
    this.Disable = function () {
        this.signature.off();
        this.save_button.Disable();
        this.clear_button.Disable();
    };
    this.Enable = function () {
        this.signature.on();
        this.save_button.Enable();
        this.clear_button.Enable();
    };
    this.GetPNGDataURL = function () {
        return this.signature.toDataURL();
    };
    this.GetJPEGDataURL = function (quality=1.0) {
        return this.signature.toDataURL("image/jpeg", quality);
    };
    this.RestoreFromDataURL = function (data_url, disabled=false) {
        if (!this.initialized) {
            (function (self) {
                setTimeout(
                    function () {
                        self.RestoreFromDataURL(data_url);
                    },
                    250
                );
            })(this);
            return;
        }
        this.signature.fromDataURL(data_url);
        this.last_url = data_url;
        if (disabled) {
            this.Disable();
        }
    };
    this.SetWidth = function (width, ratio=null) {
        this.width = width;
        // This is the only way it will work without breaking the canvas (jQuery.css doesn't work properly)
        this.canvas[0].style.width = width + "px";
        this.canvas[0].width = width * (ratio || window.devicePixelRatio || 1);
    };
    this.SetHeight = function (height, ratio=null) {
        this.height = height;
        // This is the only way it will work without breaking the canvas (jQuery.css doesn't work properly)
        this.canvas[0].style.height = height + "px";
        this.canvas[0].height = height * (ratio || window.devicePixelRatio || 1);
    };
    this.SetLineColor = function (color="black") {
        this.signature.penColor = color;
    };
    this.SetBackgroundColor = function (color="rgba(0, 0, 0, 0)") {
        // Use a non-transparent color to be able to save signatures as JPEG images without transparency.
        this.signature.backgroundColor = color;
    };
    this.SetMinLineWidth = function (width=0.5) {
        this.signature.minWidth = width;
    };
    this.SetMaxLineWidth = function (width=2.5) {
        this.signature.maxWidth = width;
    };
    this.SetDotRadius = function (size=1.0) {
        this.signature.dotSize = size;
    };
    this.SetOnBeginStroke = function (callback, binder=null) {
        this.signature.addEventListener("beginStroke", binder ? callback.bind(binder) : callback);
    };
    this.SetOnEndStroke = function (callback, binder=null) {
        this.signature.addEventListener("endStroke", binder ? callback.bind(binder) : callback);
    };
    this.add_icon = function () {
        var icon = new Dash.Gui.Icon(this.color, "signature", Dash.Size.Padding);
        icon.SetColor(this.color.StrokeLight);
        icon.html.css({
            "pointer-events": "none",
            "user-select": "none",
            "z-index": 10,
            "position": "absolute",
            "top": Dash.Size.Padding * 0.25,
            "left": Dash.Size.Padding * 0.25
        });
        this.html.append(icon.html);
    };
    this.add_button_bar = function () {
        var button_bar = new Dash.Gui.ButtonBar(this, this.color, "toolbar");
        button_bar.html.css({
            "height": Dash.IsMobile ? Dash.Size.RowHeight : "fit-content",
            "padding-top": Dash.Size.Padding * (Dash.IsMobile ? 0.25 : 0.5),
            "padding-left": Dash.Size.Padding * (Dash.IsMobile ? 0.5 : 1),
            "padding-right": Dash.Size.Padding * (Dash.IsMobile ? 0.5 : 1)
        });
        (function (self) {
            self.clear_button = button_bar.AddButton(
                "Clear",
                function () {
                    self.Clear();
                    if (self.on_clear_cb) {
                        self.on_clear_cb();  // Return anything?
                    }
                }
            );
            self.save_button = button_bar.AddButton(
                "Save",
                function () {
                    if (self.IsEmpty()) {
                        alert("The signature box is empty.\nPlease sign first, then try again.");
                        return;
                    }
                    self.last_url = self.GetPNGDataURL();
                    if (self.on_save_cb) {
                        self.on_save_cb(self.last_url);
                    }
                }
            );
        })(this);
        this.html.append(button_bar.html);
    };
    // This ensures a correctly-handled canvas on both high and low DPI screens, as well as mobile device rotation
    this.ensure_proper_size = function () {
        var width = this.canvas[0].offsetWidth;
        var height = this.canvas[0].offsetHeight;
        var ratio = window.devicePixelRatio || 1;
        // window.orientation is deprecated in favor of screen.orientation.type, but as of writing, iOS Safari still doesn't support the latter
        var landscape = screen.orientation && screen.orientation.type ? screen.orientation.type.includes("landscape") : [90, -90].includes(window.orientation);
        if (!this.initialized) {
            if (window.innerWidth > width) {
                this.initial_width_margin = window.innerWidth - width;
            }
            else {
                this.initial_width_margin = width - window.innerWidth;
            }
            this.initial_height_to_width_ratio = height / width;
        }
        // On mobile, the width > height check doesn't seem to work, so attempt the extra orientation check as a backup
        else if (window.innerWidth > window.innerHeight || landscape) {
            width = width * 2;
            height = height * 2;
            this.size_doubled = true;
        }
        else if (window.innerWidth <= this.width || this.size_doubled) {
            width = width * 0.5;
            height = height * 0.5;
            this.size_doubled = false;
        }
        if (Dash.IsMobile) {
            var width_margin;
            if (window.innerWidth > width) {
                width_margin = window.innerWidth - width;
            }
            else {
                width_margin = width - window.innerWidth;
            }
            if (width_margin !== this.initial_width_margin) {
                width = window.innerWidth - this.initial_width_margin;
                height = width * this.initial_height_to_width_ratio;
            }
        }
        this.SetWidth(width, ratio);
        this.SetHeight(height, ratio);
        this.canvas[0].getContext("2d").scale(ratio, ratio);
        this.signature.clear(); // Otherwise this.signature.isEmpty() might return incorrect value
        // In case this listener is called while the signature is still being viewed/used
        if (this.last_url) {
            this.RestoreFromDataURL(this.last_url);
        }
    };
    this.setup_styles();
}

function DashGuiCopyButton (binder, getter_cb, size_mult=1, container_size=null, style="default", icon_name="copy", color=null) {
    this.binder = binder;
    this.getter_cb = getter_cb.bind(binder);
    this.size_mult = size_mult;
    this.container_size = container_size || Dash.Size.RowHeight;
    this.style = style;
    this.icon_name = icon_name;
    this.color = color || binder.color || Dash.Color.Light;
    this.button = null;
    this.icon_color = null;
    this.html = $("<div></div>");
    this.label = $("<div>Copied!</div>");
    this.opposite_color = Dash.Color.GetOpposite(this.color);
    this.setup_styles = function () {
        this.add_button();
        this.add_label();
    };
    this.add_button = function () {
        this.button = new Dash.Gui.IconButton(
            this.icon_name,
            this.on_click,
            this,
            this.color,
            {
                "container_size": this.container_size,
                "size_mult": this.size_mult
            }
        );
        this.html.append(this.button.html);
    };
    this.SetIconColor = function (color) {
        this.button.SetIconColor(color);
        this.icon_color = color;
    };
    this.add_label = function () {
        this.label.css({
            "z-index": 10000,
            "font_family": "sans_serif_normal",
            "color": this.opposite_color.Text,
            "background": this.opposite_color.BackgroundRaised,
            "padding-left": Dash.Size.Padding * 0.25,
            "padding-right": Dash.Size.Padding * 0.25,
            "padding-bottom": Dash.Size.Padding * 0.5,
            "padding-top": Dash.Size.Padding * 0.1,
            "border-radius": Dash.Size.BorderRadius,
            "font-size": (85 * this.size_mult) + "%",
            "pointer-events": "none",
            "user-select": "none",
            "width": "fit-content",
            "clip-path": "polygon(" +
                "0% 0%, " +     // Top left corner of bubble
                "100% 0%, " +   // Top right corner of bubble
                "100% 85%, " +  // Bottom right corner of bubble
                "60% 85%, " +   // Right point of triangle
                "50% 100%, " +  // Tip of triangle
                "40% 85%, " +   // Left point of triangle
                "0% 85%" +      // Bottom left corner of bubble
            ")"
        });
        this.html.append(this.label);
        this.label.hide();
        (function (self) {
            setTimeout(
                function () {
                    self.label.css({
                        "position": "absolute",
                        "top": -self.label.innerHeight() - ((Dash.Size.Padding * 0.25) * self.size_mult),
                        "left": -((self.label.innerWidth() * 0.5) - (self.button.html.innerWidth() * 0.5))
                    });
                },
                500
            );
        })(this);
    };
    this.on_click = function () {
        var text = this.getter_cb();
        this.button.SetIconColor(this.color.Button.Background.Selected);
        (function (self) {
            navigator.clipboard.writeText(text).then(function () {
                console.log("Copied '" + text + "' to clipboard");
                self.label.stop().fadeIn(
                    "fast",
                    function () {
                        self.button.SetIconColor(self.icon_color || self.color.Button.Background.Base);
                        setTimeout(
                            function () {
                                self.label.stop().fadeOut("slow");
                            },
                            1250
                        );
                    }
                );
            });
        })(this);
    };
    this.setup_styles();
}

function DashGuiButton (label, callback, binder, color=null, options={}) {
    this.label = label;
    this.callback = callback;
    this.bind = binder;
    this.color = color || (binder && binder.color ? binder.color : Dash.Color.Light);
    this.options = options;
    this.disabled = false;
    this.load_dots = null;
    this.color_set = null;
    this.right_label = null;
    this.label_shown = null;
    this.is_selected = false;
    this.html = $("<div></div>");
    this.load_bar = $("<div></div>");
    this.base_color_override = null;
    this.highlight = $("<div></div>");
    this.label_color_override = null;
    this.last_right_label_text = null;
    this.load_bar_color_override = null;
    this.highlight_color_override = null;
    this.change_text_color_on_hover = true;
    this.click_highlight = $("<div></div>");
    this.click_highlight_color_override = null;
    this.label = $("<div>" + this.label + "</div>");
    this.style = this.options["style"] || "default";
    DashGuiButtonInterface.call(this);
    this.initialize_style = function () {
        // Toss a warning if this isn't a known style, so we don't fail silently
        this.styles = ["default", "toolbar", "tab_top", "tab_side"];
        if (!this.styles.includes(this.style)) {
            console.error("Error: Unknown Dash Button Style: " + this.style);
            this.style = "default";
        }
        if (this.style === "toolbar") {
            this.color_set = this.color.Button;
            DashGuiButtonStyleToolbar.call(this);
        }
        else if (this.style === "tab_top") {
            this.color_set = this.color.Tab;
            DashGuiButtonStyleTabTop.call(this);
        }
        else if (this.style === "tab_side") {
            this.color_set = this.color.Tab;
            DashGuiButtonStyleTabSide.call(this);
        }
        else {
            this.color_set = this.color.Button;
            DashGuiButtonStyleDefault.call(this);
        }
        if (!this.color instanceof DashColorSet) {
            console.warn("Warning: DashGuiButton() now accepts a DashColorSet, but you are using DashColorButtonSet");
        }
        this.setup_styles();
    };
    this.reset_colors = function () {
        this.html.css({
            "background": this.default_html_background
        });
        this.highlight.css({
            "background": this.default_highlight_background
        });
        this.load_bar.css({
            "background": this.default_load_bar_background
        });
        this.click_highlight.css({
            "background": this.default_click_highlight_background
        });
        this.label.css({
            "color": this.default_label_color
        });
        this.base_color_override = null;
        this.label_color_override = null;
        this.load_bar_color_override = null;
        this.highlight_color_override = null;
        this.click_highlight_color_override = null;
    };
    this.on_hover_in = function () {
        this.highlight.stop().animate({"opacity": 1}, 50);
        if (!this.change_text_color_on_hover) {
            return;
        }
        if (this.is_selected) {
            this.label.css("color", this.label_color_override || this.color_set.Text.SelectedHover);
        }
        else {
            this.label.css("color", this.label_color_override || this.color_set.Text.BaseHover);
        }
    };
    this.on_hover_out = function () {
        this.highlight.stop().animate({"opacity": 0}, 100);
        if (!this.change_text_color_on_hover) {
            return;
        }
        if (this.is_selected) {
            this.label.css("color", this.label_color_override || this.color_set.Text.Selected);
        }
        else {
            this.label.css("color", this.label_color_override || this.color_set.Text.Base);
        }
    };
    this.on_file_upload_response = function (response, return_button=false) {
        if (this.file_uploader.html) {
            this.file_uploader.html.remove();
        }
        if (this.file_upload_api) {
            this.SetFileUploader(this.file_upload_api, this.file_upload_params);
        }
        if (this.callback && this.bind) {
            if (return_button) {
                this.callback.bind(this.bind)(response, this);
            }
            else {
                this.callback.bind(this.bind)(response);
            }
        }
    };
    this.on_click = function (event) {
        if (this.callback && this.bind) {
            if (this.file_uploader && event.timeStamp) {
                return;
            }
            this.callback.bind(this.bind)(event, this);
        }
    };
    this.setup_connections = function () {
        (function (self) {
            self.html.on("mouseenter", function () {
                self.on_hover_in();
            });
            self.html.on("mouseleave", function () {
                self.on_hover_out();
            });
            self.html.on("click", function (event) {
                self.manage_style_on_click();
                self.on_click(event);
            });
        })(this);
    };
    this.manage_style_on_click = function () {
        // Overridden in DashGuiButtonStyleTabTop
        this.highlight.stop().animate({"opacity": 0}, 50);
        this.click_highlight.stop().css({"opacity": 1});
        this.click_highlight.stop().animate({"opacity": 0}, 150);
    };
    this.set_right_label_text = function (label_text) {
        // Called when the icon is not visible
        if (!label_text && label_text != 0 || label_text === this.last_right_label_text) {
            return;
        }
        this.right_label.text(label_text);
        this.last_right_label_text = label_text;
    };
    this.setup_right_label = function () {
        this.right_label = $("<div>--</div>");
        this.html.append(this.right_label);
        var size = Math.round(Dash.Size.RowHeight - Dash.Size.Padding);
        this.right_label.css({
            "position": "absolute",
            "right": Dash.Size.Padding * 0.5,
            "top": Dash.Size.Padding * 0.5,
            "width": size,
            "height": size,
            "line-height": size + "px",
            "background": Dash.Color.Dark,
            "border-radius": Dash.Size.BorderRadiusInteractive,
            "font-size": (size * 0.5) + "px",
            "text-align": "center",
            "opacity": 0
        });
    };
    this.set_file_uploader_size = function () {
        var width = this.html.width();
        var height = this.html.height();
        if (!height || !width) {
            (function (self) {
                setTimeout(
                    function () {
                        self.set_file_uploader_size();
                    },
                    10
                );
            })(this);
            return;
        }
        this.file_uploader.html.css({
            "height": height,
            "width": width
        });
    };
    this.initialize_style();
    this.setup_connections();
}

function DashGuiButtonBar (binder, color=null, button_style="default") {
    this.binder = binder;
    this.color = color || (binder && binder.color ? binder.color : Dash.Color.Light);
    this.style = button_style;
    this.buttons = [];
    this.disabled = false;
    this.html = $("<div></div>");
    this.auto_spacing_enabled = true;
    this.setup_styles = function () {
        this.html.css({
            "display": "flex",
            "height": this.style === "toolbar" ? Dash.Size.RowHeight : Dash.Size.ButtonHeight
        });
    };
    this.SetHeight = function (height) {
        this.html.css({
            "height": height
        });
    };
    this.FitContent = function () {
        this.html.css({
            "height": "fit-content",
            "width": "fit-content"
        });
    };
    this.DisableAutoSpacing = function () {
        this.auto_spacing_enabled = false;
    };
    this.Disable = function () {
        for (var button of this.buttons) {
            this.buttons.Disable();
        }
        this.disabled = true;
    };
    this.Enable = function () {
        for (var button of this.buttons) {
            this.buttons.Enable();
        }
        this.disabled = false;
    };
    this.Remove = function (button) {
        button.html.remove();
        this.buttons.Remove(button);
        this.update_spacing();
    };
    this.GetIndex = function (button) {
        return this.buttons.indexOf(button);
    };
    this.AddButton = function (label_text, callback, prepend=false) {
        callback = callback.bind(this.binder);
        var button = (function (self, callback) {
            return new Dash.Gui.Button(
                label_text,
                function () {
                    callback(button);
                },
                self,
                self.color,
                {"style": self.style}
            );
        })(this, callback);
        button.html.css({
            "margin": 0,
            "flex-grow": 1
        });
        if (prepend) {
            this.html.prepend(button.html);
            this.buttons.unshift(button);
        }
        else {
            this.html.append(button.html);
            this.buttons.push(button);
        }
        this.update_spacing();
        if (this.disabled) {
            button.Disable();
        }
        return button;
    };
    // TODO: Make this more efficient - we don't need to hit this multiple times on the same frame
    this.update_spacing = function () {
        if (!this.auto_spacing_enabled) {
            return;
        }
        for (var i in this.buttons) {
            var button = this.buttons[i];
            var right_padding = Dash.Size.Padding * (Dash.IsMobile ? 0.5 : 1);
            if (parseInt(i) === this.buttons.length - 1) {
                right_padding = 0;
            }
            button.html.css({
                "margin": 0,
                "flex-grow": 1,
                "margin-right": right_padding,
            });
        }
    };
    this.setup_styles();
}

function DashGuiIconButton (icon_name, callback, binder, color, options={}) {
    this.icon = null;
    this.icon_height = options["container_size"] || null;
    this.icon_name = icon_name;
    this.icon_default_opacity = 1;
    this.icon_size_mult = options["size_mult"] || 1.0;
    this.style = options["style"] || "default";
    this.additional_data = options["additional_data"] || null;
    DashGuiButton.call(this, "", callback, binder, color, options);
    this.SetIconColor = function (color) {
        this.icon.SetColor(color);
        return this;
    };
    this.SetIconSize = function (percentage_number) {
        this.icon.SetSize(percentage_number);
        this.update_container_size();
        return this;
    };
    this.AddIconShadow = function (value="0px 0px 0px rgba(0, 0, 0, 0.2)") {
        this.icon.AddShadow(value);
        return this;
    };
    this.AddIconStroke = function (color="black") {
        this.icon.AddStroke(color);
        return this;
    };
    this.MirrorIcon = function () {
        this.icon.Mirror();
        return this;
    };
    this.SetIcon = function (icon_name) {
        this.icon_name = icon_name;
        this.icon.SetIcon(icon_name);
        return this;
    };
    this.SetHoverHint = function (hint) {
        this.html.attr("title", hint);
        return this;
    };
    this.AddHighlight = function (force_in_container=false) {
        var height = 3;
        this.highlight.css({
            "background": this.color.AccentGood,
            "top": force_in_container && this.icon_height ? (this.icon_height - height) : "auto",
            "height": height,
            "bottom": -height
        });
        return this;
    };
    this.setup_icon = function () {
        if (this.style === "toolbar") {
            if (!this.icon_height) {
                this.icon_height = Dash.Size.RowHeight;
            }
            // This is old and not great, but removing it will break stuff - ugh
            if (this.icon_size_mult === 1.0) {
                this.icon_size_mult = 0.75;
            }
            this.setup_toolbar_icon();
        }
        else if (this.style === "default") {
            if (!this.icon_height) {
                this.icon_height = this.html.height() - (Dash.Size.Padding * 1.2);
            }
            this.setup_default_icon();
        }
        else {
            if (!this.icon_height) {
                this.icon_height = this.html.height() - (Dash.Size.Padding * 1.2);
            }
            console.warn("Warning: Unhandled button / icon style: " + this.style);
            this.setup_default_icon();
        }
        this.update_container_size();
        if (this.icon_name.startsWith("trash")) {
            this.SetHoverHint("Delete");
        }
    };
    this.update_container_size = function () {
        this.html.css({
            "height": this.icon.html.height(),
            "width": this.icon.html.width()
        });
    };
    this.setup_toolbar_icon = function () {
        this.icon = this.get_icon();
        // Should this just be the default regardless of style?
        this.AddHighlight();
        this.html.css({
            "background": "rgba(0, 0, 0, 0)",
        });
        this.icon.html.css({
            "opacity": this.icon_default_opacity,
        });
        this.html.append(this.icon.html);
    };
    this.setup_default_icon = function () {
        this.icon = this.get_icon();
        this.highlight.css({
            "background": "rgba(0, 0, 0, 0)",
        });
        this.html.css({
            "background": "rgba(0, 0, 0, 0)",
        });
        this.icon.html.css({
            "opacity": this.icon_default_opacity,
        });
        this.html.append(this.icon.html);
    };
    this.get_icon = function () {
        return new Dash.Gui.Icon(
            this.color,          // Dash Color
            this.icon_name,      // Icon name / FA asset path
            this.icon_height,    // Container size
            this.icon_size_mult, // Size mult for the icon, within the container
        );
    };
    this.setup_icon();
}

/**@member DashGuiButton*/
function DashGuiButtonInterface () {
    this.SetText = function (label_text, width=null) {
        this.label.text(label_text);
        if (width) {
            this.html.css({"width": width});
        }
    };
    this.FitContent = function () {
        this.html.css({
            "padding-left": Dash.Size.Padding * 0.5,
            "padding-right": Dash.Size.Padding * 0.5,
            "width": "fit-content"
        });
    };
    this.DisableHoverTextColorChange = function () {
        this.change_text_color_on_hover = false;
    };
    this.Text = function () {
        return this.label.text();
    };
    this.IsSelected = function () {
        return this.is_selected;
    };
    // Deprecated
    this.ChangeLabel = function (label_text, width=null) {
        this.SetText(label_text, width);
    };
    this.StyleAsDeleteButton = function (width=null, faint=true) {
        if (faint) {
            this.html.css({
                "background": this.color.PinstripeDark
            });
        }
        this.html.css({
            "width": width || "auto"
        });
        this.highlight.css({
            "background": this.color.AccentBad
        });
    };
    this.StyleAsBorderButton = function (border_size=1, border_type="solid", border_color="", background="", highlight_color="") {
        this.html.css({
            "border": border_size + "px " + border_type + " " + (
                   border_color
                || background
                || this.html.css("background-color")
                || this.color_set.Background.Base
            ),
            "box-sizing": "border-box",
            "background": background || "none",
        });
        this.highlight.css({
            "margin": -border_size,
            "background": highlight_color || Dash.Color.GetTransparent(
                this.highlight.css("background-color") || this.color_set.Background.BaseHover,
                0.75
            )
        });
        this.label.css({
            "margin-top": -border_size
        });
    };
    this.SetColor = function (base=null, highlight=null, load_bar=null, click_highlight=null, label=null) {
        if (!base && !highlight && !load_bar && !click_highlight && !label) {
            this.reset_colors();
            return;
        }
        if (base) {
            this.base_color_override = base;
            this.html.css({
                "background": base
            });
        }
        if (highlight) {
            this.highlight_color_override = highlight;
            this.highlight.css({
                "background": highlight
            });
        }
        if (load_bar) {
            this.load_bar_color_override = load_bar;
            this.load_bar.css({
                "background": load_bar
            });
        }
        if (click_highlight) {
            this.click_highlight_color_override = click_highlight;
            this.click_highlight.css({
                "background": click_highlight
            });
        }
        if (label) {
            this.label_color_override = label;
            this.label.css({
                "color": label
            });
        }
    };
    this.Disable = function () {
        if (this.disabled) {
            return;
        }
        this.disabled = true;
        this.html.css({
            "opacity": 0.5,
            "pointer-events": "none",
            "user-select": "none"
        });
    };
    this.Enable = function () {
        if (!this.disabled) {
            return;
        }
        this.disabled = false;
        this.html.css({
            "opacity": 1,
            "pointer-events": "auto",
            "user-select": "auto"
        });
    };
    this.SetBorderRadius = function (border_radius) {
        this.html.css({
            "border-radius": border_radius,
        });
        this.highlight.css({
            "border-radius": border_radius,
        });
        this.load_bar.css({
            "border-radius": border_radius,
        });
        this.click_highlight.css({
            "border-radius": border_radius,
        });
    };
    this.SetTextAlign = function (text_alignment) {
        this.label.css({
            "text-align": text_alignment,
        });
    };
    this.SetFontSize = function (font_size) {
        this.label.css({
            "font-size": font_size,
        });
    };
    this.SetSelected = function (is_selected) {
        if (is_selected === this.is_selected) {
            return;
        }
        this.is_selected = is_selected;
        if (this.is_selected) {
            this.html.css({"background": this.color_set.Background.Selected});
            this.highlight.css({"background": this.color_set.Background.SelectedHover});
        }
        else {
            this.html.css({"background": this.color_set.Background.Base});
            this.highlight.css({"background": this.color_set.Background.BaseHover});
        }
        this.on_hover_out();
    };
    this.SetButtonVisibility = function (button_visible) {
        if (button_visible) {
            this.html.css({"opacity": 1, "pointer-events": "auto"});
        }
        else {
            this.html.css({"opacity": 0, "pointer-events": "none"});
        }
    };
    this.SetLoadBar = function (t) {
        this.load_bar.css({"width": this.html.width()*t});
    };
    this.IsLoading = function () {
        return !!this.load_dots; // If this.load_dots, return true - else, return false
    };
    this.SetHoverHint = function (hint) {
        this.html.attr("title", hint);
    };
    this.SetLoading = function (is_loading, size_mult=1, vertical=true, color=null, css={}) {
        if (is_loading && this.load_dots) {
            return;
        }
        if (!is_loading && !this.load_dots) {
            return;
        }
        if (!is_loading && this.load_dots) {
            this.load_dots.Stop();
            this.load_dots = null;
            return;
        }
        this.load_dots = new Dash.Gui.LoadDots(
            (this.html.outerHeight() - Dash.Size.Padding) * size_mult,
            color || this.color
        );
        if (vertical) {
            this.load_dots.SetOrientation("vertical");
        }
        if (!color) {
            // (Only if 'color' is not already provided, since that's likely the opposite Dash color instance to combat this issue)
            // It seemed like virtually every time I added loading dots to a button with this function,
            // I was having to restyle it this way, so I'm finally adding it here. It seems sensible,
            // since the text color will obviously be something that's visible against the button
            // background, but there's of course a chance that this will break the visuals somewhere.
            this.load_dots.SetColor(this.icon ? this.color.Text : this.color.Button.Text.Base);
        }
        this.load_dots.html.css({
            "position": "absolute",
            "top": Dash.Size.Padding * 0.5,
            "bottom": 0,
            "right": 0,
            ...css
        });
        this.html.append(this.load_dots.html);
        this.load_dots.Start();
    };
    this.SetFileUploader = function (api, params, optional_on_start_callback=null, optional_css={}, return_button=false) {
        if (!params["token"]) {
            var token = Dash.Local.Get("token");
            if (token) {
                params["token"] = token;
            }
        }
        this.file_upload_type = "file";
        this.file_upload_api = api;
        this.file_upload_params = params;
        if (this.file_uploader) {
            this.file_uploader.html.remove();
        }
        if (optional_on_start_callback) {
            this.on_file_upload_start_callback = optional_on_start_callback.bind(this.bind);
        }
        else {
            this.on_file_upload_start_callback = null;
        }
        this.file_uploader = (function (self) {
            return new DashGuiButtonFileUploader(
                self,
                api,
                params,
                function (response) {
                    self.on_file_upload_response(response, return_button);
                },
                function () {
                    if (self.on_file_upload_start_callback) {
                        self.on_file_upload_start_callback();
                    }
                }
            );
        })(this);
        if (Dash.Validate.Object(optional_css)) {
            this.file_uploader.html.css(optional_css);
        }
        else {
            this.set_file_uploader_size();
        }
        this.html.append(this.file_uploader.html);
    };
    this.Request = function (endpoint, params, callback, binder=null) {
        if (this.load_dots) {
            return;
        }
        this.on_request_response_callback = null;
        binder = binder || this.bind;
        if (binder && callback) {
            this.on_request_response_callback = callback.bind(binder);
        }
        this.SetLoading(true);
        (function (self, endpoint, params) {
            Dash.Request(
                binder,
                function (response) {
                    self.SetLoading(false);
                    if (self.on_request_response_callback) {
                        self.on_request_response_callback(response);
                    }
                },
                endpoint,
                params
            );
        })(this, endpoint, params);
    };
    // This may be necessary in certain cases when the parent html is
    // emptied and then this button is then re-appended to that parent.
    this.RefreshConnections = function () {
        this.html.off("mouseenter");
        this.html.off("mouseleave");
        this.html.off("click");
        this.setup_connections();
    };
    this.SetRightLabelText = function (label_text) {
        if (!this.right_label) {
            this.setup_right_label();
        }
        if (label_text === this.last_right_label_text && this.label_shown) {
            return;
        }
        if (this.label_shown) {
            // Was visible
            (function (self) {
                self.right_label.animate({"opacity": 0}, 200, function () {
                    self.set_right_label_text(label_text);
                    self.right_label.animate({"opacity": 1}, 600);
                });
            })(this);
        }
        else {
            // Was never visible
            this.set_right_label_text(label_text);
            this.right_label.animate({"opacity": 1}, 200, function () {
            });
        }
        this.label_shown = true;
    };
}

function DashGuiButtonFileUploader (button, api, params, callback, on_start_callback) {
    this.button = button;
    this.api = api;
    this.params = params;
    this.callback = callback;
    this.on_start_callback = on_start_callback.bind(button);
    this.filename = "unknown";
    this.html = $("<div></div>");
    this.dropzone_visible = false;
    this.dropzone_box = $("<div></div>");
    this.type = this.button.file_upload_type;
    this.upload_backing_bar = $("<div></div>");
    this.upload_progress_bar = $("<div></div>");
    this.dropzone_label = $("<div>" + this.dropzone_label_text + "</div>");
    this.dropzone_label_text = "Drop " + this.type.charAt(0).toUpperCase() + this.type.slice(1);
    this.SetCallback = function (callback, bind_to) {
        if (!bind_to) {
            this.callback = callback;
        }
        else {
            this.callback = callback.bind(bind_to);
        }
    };
    this.SetDropzone = function (dropzone_visible) {
        this.dropzone_visible = dropzone_visible;
        this.draw();
    };
    this.SetDropzoneLabel = function (label) {
        this.dropzone_label_text = label;
        this.dropzone_label.text(this.dropzone_label_text);
    };
    this.setup_styles = function () {
        this.dropzone_box.append(this.dropzone_label);
        this.html.append(this.dropzone_box);
        this.html.append(this.upload_backing_bar);
        this.html.append(this.upload_progress_bar);
        this.dropzone_box.hide();
        this.draw();
        this.draw_dropzone();
    };
    this.draw = function () {
        this.width = this.button.width;
        this.height = Dash.Size.ButtonHeight;
        var margin_top = "";
        var border_width = 2;
        var dropzone_box_width = this.width - (border_width * 2);
        var dropzone_box_height = Dash.Size.ButtonHeight;
        if (this.dropzone_visible) {
            this.dropzone_box.show();
            margin_top = Dash.Size.ButtonHeight;
        }
        this.upload_bar_css = {
            "height": 5,
            "width": this.width,
            "position": "absolute",
            "bottom": 0,
            "left": 0,
            "background": "rgba(255, 255, 255, 0)"
        };
        this.html.css({
            "padding": 0,
            "height": this.height,
            "width": this.width,
            "margin-top": margin_top,
            "position": "absolute",
            "inset": 0
        });
        this.dropzone_box.css({
            "background": "red",
            "width": dropzone_box_width,
            "height": dropzone_box_height,
            "bottom": margin_top,
            "border": border_width + "px dashed rgba(0, 0, 0, 0.5)"
        });
        this.dropzone_label.css({
            "color": "rgba(0, 0, 0, 0.5)",
            "height": Dash.Size.ButtonHeight,
            "width": dropzone_box_width,
            "text-align": "center",
            "top": (dropzone_box_height * 0.5) - (Dash.Size.ButtonHeight * 0.5)
        });
        this.upload_backing_bar.css(this.upload_bar_css);
        this.upload_progress_bar.css(this.upload_bar_css);
        this.upload_progress_bar.css({
            "background": "rgba(255, 255, 255, 0.8)",
            "width": 0
        });
    };
    this.added_file = function () {
        this.html.hide();
    };
    this.error_uploading = function (file, error) {
        console.error("Error uploading", error);
        alert(error["error"] || error);
    };
    this.processing_upload = function () {
        this.on_start_callback();
    };
    this.upload_progress = function (file, progress) {
        var progress_t = parseInt(progress) * 0.01;
        this.button.SetLoadBar(progress_t);
        this.upload_backing_bar.css({
            "background": "rgba(255, 255, 255, 0.2)",
            "opacity": 1
        });
        this.upload_progress_bar.css({
            "width": this.width * progress_t,
            "opacity": 1
        });
    };
    this.upload_success = function (file, result) {
        this.button.SetLoadBar(0);
        this.upload_backing_bar.animate({"opacity": 0});
        this.upload_progress_bar.animate({"opacity": 0});
        this.callback(result);
    };
    this.draw_dropzone = function () {
        (function (self) {
            self.dropzone_options = {
                "init": function () {
                    this.on(
                        "addedfile",
                        function (file) {
                            self.added_file(file);
                        }
                    );
                    this.on(
                        "error",
                        function (file, error) {
                            self.error_uploading(file, error);
                        }
                    );
                    this.on(
                        "processing",
                        function (file) {
                            self.processing_upload(file);
                        }
                    );
                    this.on(
                        "uploadprogress",
                        function (file, progress) {
                            self.upload_progress(file, progress);
                        }
                    );
                    this.on(
                        "success",
                        function (file, result) {
                            self.upload_success(file, result);
                        }
                    );
                },
                "url": self.api,
                "uploadMultiple": false,
                "addRemoveLinks": false,
                "createImageThumbnails": false,
                "params": self.params
            };
            self.html.dropzone(self.dropzone_options);
        })(this);
    };
    this.setup_styles();
}

/**@member DashGuiButton*/
function DashGuiButtonStyleDefault () {
    this.setup_styles = function () {
        this.html.append(this.highlight);
        this.html.append(this.load_bar);
        this.html.append(this.click_highlight);
        this.html.append(this.label);
        this.default_html_background = Dash.IsMobile ? Dash.Color.Mobile.AccentPrimary : this.color_set.Background.Base;
        this.default_highlight_background = this.color_set.Background.BaseHover;
        this.default_load_bar_background = Dash.Color.Primary;
        this.default_click_highlight_background = "rgba(255, 255, 255, 0.5)";
        this.default_label_color = this.color_set.Text.Base;
        this.html.css({
            "background": this.default_html_background,
            "cursor": "pointer",
            "height": Dash.Size.ButtonHeight,
            "border-radius": Dash.Size.BorderRadiusInteractive,
            "padding-left": Dash.Size.Padding,
            "padding-right": Dash.Size.Padding,
            "padding": 0,
            "margin": 0,
        });
        this.highlight.css({
            "position": "absolute",
            "inset": 0,
            "background": this.default_highlight_background,
            "opacity": 0,
            "border-radius": Dash.Size.BorderRadiusInteractive,
        });
        this.load_bar.css({
            "position": "absolute",
            "left": 0,
            "top": 0,
            "bottom": 0,
            "width": 0,
            "background": this.default_load_bar_background,
            "border-radius": Dash.Size.BorderRadiusInteractive,
        });
        this.click_highlight.css({
            "position": "absolute",
            "inset": 0,
            "background": this.default_click_highlight_background,
            "opacity": 0,
            "border-radius": Dash.Size.BorderRadiusInteractive,
        });
        this.label.css({
            "line-height": (Dash.Size.ButtonHeight) + "px",
            "white-space": "nowrap",
            "overflow": "hidden",
            "text-overflow": "ellipsis",
            "text-align": "center",
            "color": this.color_set.Text.Base
        });
    };
}

/**@member DashGuiButton*/
function DashGuiButtonStyleTabTop () {
    this.setup_styles = function () {
        this.html.append(this.highlight);
        this.html.append(this.load_bar);
        this.html.append(this.click_highlight);
        this.html.append(this.label);
        this.default_html_background = this.color_set.Background.Base;
        this.default_highlight_background = this.color_set.Background.BaseHover;
        this.default_load_bar_background = Dash.Color.Primary;
        this.default_click_highlight_background = "rgba(255, 255, 255, 0.5)";
        this.default_label_color = this.color_set.Text.Base;
        this.html.css({
            "background": this.default_html_background,
            "cursor": "pointer",
            "height": Dash.Size.ButtonHeight,
            "padding": 0,
            "margin": 0,
            "padding-left": Dash.Size.Padding * 0.5,
            "padding-right": Dash.Size.Padding * 0.5,
        });
        this.highlight.css({
            "position": "absolute",
            "left": Dash.Size.Padding,
            "bottom": 0,
            "right": Dash.Size.Padding,
            "height": Dash.Size.Stroke,
            "background": this.default_highlight_background,
            "border-radius": Dash.Size.BorderRadius,
        });
        this.load_bar.css({
            "position": "absolute",
            "left": 0,
            "top": 0,
            "bottom": 0,
            "width": 0,
            "background": this.default_load_bar_background,
            "border-radius": Dash.Size.BorderRadius,
        });
        this.click_highlight.css({
            "position": "absolute",
            "inset": 0,
            "background": this.default_click_highlight_background,
            "opacity": 0,
            "border-radius": Dash.Size.BorderRadius,
        });
        this.label.css({
            "bottom": 0,
            "line-height": (Dash.Size.ButtonHeight) + "px",
            "white-space": "nowrap",
            "overflow": "hidden",
            "text-overflow": "ellipsis",
            "text-align": "center",
            "color": this.color_set.Text.Base,
            "font-family": "sans_serif_bold",
            "padding-left": Dash.Size.Padding * 0.5,
            "padding-right": Dash.Size.Padding * 0.5,
            "font-size": "80%",
        });
    };
    this.on_hover_in = function () {
        if (this.is_selected) {
            this.label.css("color", this.color_set.Text.SelectedHover);
        }
        else {
            this.label.css("color", this.color_set.Text.BaseHover);
        }
    };
    this.on_hover_out = function () {
        if (this.is_selected) {
            this.label.css("color", this.color_set.Text.Selected);
        }
        else {
            this.label.css("color", this.color_set.Text.Base);
        }
    };
    this.manage_style_on_click = function () {
        this.click_highlight.stop().css({"opacity": 1});
        this.click_highlight.stop().animate({"opacity": 0}, 150);
    };
}

/**@member DashGuiButton*/
function DashGuiButtonStyleToolbar () {
    this.setup_styles = function () {
        this.html.append(this.highlight);
        this.html.append(this.load_bar);
        this.html.append(this.click_highlight);
        this.html.append(this.label);
        this.default_html_background = Dash.IsMobile ? Dash.Color.Mobile.AccentPrimary : this.color_set.Background.Base;
        this.default_highlight_background = this.color_set.Background.BaseHover;
        this.default_load_bar_background = Dash.Color.Primary;
        this.default_click_highlight_background = "rgba(255, 255, 255, 0.5)";
        this.default_label_color = this.color_set.Text.Base;
        this.html.css({
            "background": this.default_html_background,
            "cursor": "pointer",
            "border-radius": Dash.Size.BorderRadius,
            "padding-left": Dash.Size.Padding,
            "padding-right": Dash.Size.Padding,
            "padding": 0,
            "margin": 0,
            "margin-top": Dash.Size.Padding * 0.5,
            "height": Dash.Size.RowHeight,
            "margin-right": Dash.Size.Padding * 0.5
        });
        this.highlight.css({
            "position": "absolute",
            "inset": 0,
            "background": this.default_highlight_background,
            "opacity": 0,
            "border-radius": Dash.Size.BorderRadius,
        });
        this.load_bar.css({
            "position": "absolute",
            "left": 0,
            "top": 0,
            "bottom": 0,
            "width": 0,
            "background": this.default_load_bar_background,
            "border-radius": Dash.Size.BorderRadius,
        });
        this.click_highlight.css({
            "position": "absolute",
            "inset": 0,
            "background": this.default_click_highlight_background,
            "opacity": 0,
            "border-radius": Dash.Size.BorderRadius,
        });
        this.label.css({
            "white-space": "nowrap",
            "overflow": "hidden",
            "text-overflow": "ellipsis",
            "color": this.color_set.Text.Base,
            "text-align": "center",
            "line-height": Dash.Size.RowHeight + "px",
            "padding-left": Dash.Size.Padding,
            "padding-right": Dash.Size.Padding,
        });
    };
}

/**@member DashGuiButton*/
function DashGuiButtonStyleTabSide () {
    this.setup_styles = function () {
        this.html.append(this.highlight);
        this.html.append(this.load_bar);
        this.html.append(this.click_highlight);
        this.html.append(this.label);
        this.default_html_background = this.color_set.Background.Base;
        this.default_highlight_background = this.color_set.Background.BaseHover;
        this.default_load_bar_background = Dash.Color.Primary;
        this.default_click_highlight_background = "rgba(255, 255, 255, 0.5)";
        this.default_label_color = this.color_set.Text.Base;
        this.html.css({
            "background": this.default_html_background,
            "cursor": "pointer",
            "height": Dash.Size.ButtonHeight,
            "padding-left": Dash.Size.Padding,
            "padding-right": Dash.Size.Padding,
            "padding": 0,
            "margin": 0,
            "margin-bottom": 1,
        });
        this.highlight.css({
            "position": "absolute",
            "inset": 0,
            "background": this.default_highlight_background,
            "opacity": 0,
        });
        this.load_bar.css({
            "position": "absolute",
            "left": 0,
            "top": 0,
            "bottom": 0,
            "width": 0,
            "background": this.default_load_bar_background,
        });
        this.click_highlight.css({
            "position": "absolute",
            "inset": 0,
            "background": this.default_click_highlight_background,
            "opacity": 0,
        });
        this.label.css({
            "position": "absolute",
            "left": Dash.Size.Padding,
            "top": 0,
            "right": Dash.Size.Padding,
            "bottom": 0,
            "line-height": (Dash.Size.ButtonHeight) + "px",
            "white-space": "nowrap",
            "overflow": "hidden",
            "text-overflow": "ellipsis",
            "text-align": "left",
            "color": this.color_set.Text.Base,
        });
    };
}

function DashGuiChatBox (binder, header_text="Messages", add_msg_cb=null, del_msg_cb=null, mention_cb=null, at_combo_options=[], color=null, dual_sided=true) {
    this.binder = binder;
    this.header_text = header_text;
    this.add_msg_callback = binder && add_msg_cb ? add_msg_cb.bind(binder) : add_msg_cb;
    this.del_msg_callback = binder && del_msg_cb ? del_msg_cb.bind(binder) : del_msg_cb;
    this.mention_callback = binder && mention_cb ? mention_cb.bind(binder) : mention_cb;
    this.at_combo_options = at_combo_options;  // When mobile, this expects the mobile combo options structure
    this.color = color || (binder && binder.color ? binder.color : Dash.Color.Dark);
    this.dual_sided = dual_sided;
    this.html = null;
    this.messages = [];
    this.header = null;
    this.header_area = null;
    this.message_area = null;
    this.message_input = null;
    this.valid_mentions = null;
    this.callback_mentions = [];
    this.toggle_hide_side = null;
    this.toggle_hide_button = null;
    this.secondary_css_color = null;
    this.toggle_local_storage_key = null;
    this.dark_mode = Dash.Color.IsDark(this.color);
    this.read_only = !this.add_msg_callback && !this.del_msg_callback && !this.mention_callback;
    // This element is set up to work as a vertical, column-style box. It may not work in a
    //  horizontal, row-style placement and may need alternate styling options for that type of use.
    this.setup_styles = function () {
        if (this.dark_mode) {
            this.secondary_css_color = Dash.Color.Darken(this.color.Text, 90);
        }
        else {
            this.secondary_css_color = Dash.Color.Lighten(this.color.Text, 90);
        }
        this.html = Dash.Gui.GetHTMLBoxContext(
            {
                "background": this.color.Background,
                "display": "flex",
                "flex-direction": "column",
                "overflow": "hidden"
            },
            this.color
        );
        this.set_valid_mentions();
        this.SetHeaderText();
        this.add_message_area();
        this.add_message_input();
    };
    this.SetHeaderText = function (label_text) {
        if (label_text) {
            this.header_text = label_text;
        }
        if (this.header) {
            this.header.SetText(this.header_text);
        }
        else {
            this.add_header_area();
        }
        return this.header;
    };
    // If it needs to be different than the default, which is "comments_square"
    this.SetHeaderIcon = function (icon_name) {
        if (!icon_name) {
            return;
        }
        if (!this.header) {
            this.add_header_area();
        }
        this.header.ReplaceBorderWithIcon(icon_name);
    };
    this.AddMessage = function (text, user_email=null, iso_ts=null, align_right=false, fire_callback=false, delete_button=false, id=null, track_mentions=false) {
        text = text.trim();
        if (!text || text.length < 1) {
            if (user_email || iso_ts) {
                console.error("Error: AddMessage() requires a 'text' param");
            }
            return;
        }
        if (align_right && !this.dual_sided) {
            console.log(
                "Warning: ChatBox.dual_sided has been changed to 'true' to accommodate " +
                "an AddMessage() call with the 'align_right' param set to 'true'"
            );
            this.dual_sided = true;
        }
        if (!iso_ts) {
            iso_ts = new Date().toISOString();
        }
        if (!user_email && fire_callback) {
            user_email = Dash.User.Data["email"];
        }
        var message = new DashGuiChatBoxMessage(
            this,
            this.bold_mentions(text, track_mentions),
            user_email,
            iso_ts,
            align_right,
            delete_button,
            this.messages.length,
            this.color,
            id
        );
        if (fire_callback) {
            if (this.add_msg_callback) {
                this.add_msg_callback(text, message.ID(), user_email);
            }
            this.handle_mentions(text, message);
        }
        if (this.dual_sided) {
            var side_margin = Dash.Size.Padding * 4.2;
            if (align_right) {
                message.html.css({
                    "margin-left": side_margin
                });
            }
            else {
                message.html.css({
                    "margin-right": side_margin
                });
            }
        }
        if (this.check_to_show_message(align_right)) {
            this.message_area.append(message.html);
        }
        this.scroll_to_bottom_on_overflow();
        this.messages.push(message);
        return message;
    };
    this.ScrollToBottom = function () {
        Dash.Gui.ScrollToBottom(this.message_area);
    };
    this.ClearMessages = function () {
        this.message_area.empty();
    };
    this.AddToggleHideButton = function (local_storage_key, default_state=true, toggle_right_side=true, include_border=false) {
        if (this.toggle_hide_button) {
            console.warn("Warning: Toggle button already added to ChatBox, can't add another at this time.");
            return;
        }
        this.toggle_local_storage_key = local_storage_key;
        if (toggle_right_side) {
            this.toggle_hide_side = "right";
        }
        else {
            this.toggle_hide_side = "left";
        }

        this.toggle_hide_button = new Dash.Gui.Checkbox(
            this.toggle_local_storage_key,  // Local storage key
            default_state,                  // Default state
            this.color,                     // Color
            "Toggle Activity Feed",         // Hover hint text
            this,                           // Binder
            this.on_checkbox_toggled,       // Callback
            "Activity",                     // Label text
            true,                           // Label first
            include_border                  // Include border
        );
        this.toggle_hide_button.html.css({
            "position": "absolute",
            "top": 0,
            "right": 0
        });
        this.toggle_hide_button.label.label.css({
            "font-family": "sans_serif_bold"
        });
        if (!this.header_area) {
            this.add_header_area();
        }
        this.header_area.append(this.toggle_hide_button.html);
    };
    this.handle_mentions = function (text, message_obj) {
        if (this.callback_mentions.length < 1) {
            return;
        }
        var option;
        var ids = [];
        for (var mention of this.callback_mentions) {
            if (Dash.IsMobile) {
                for (option in this.at_combo_options) {
                    if (this.at_combo_options[option] === mention) {
                        if (!(ids.includes(option))) {
                            ids.push(option);
                        }
                        break;
                    }
                }
            }
            else {
                for (option of this.at_combo_options) {
                    if ((option["label_text"] || option["display_name"]) === mention) {
                        if (!(ids.includes(option["id"]))) {
                            ids.push(option["id"]);
                        }
                        break;
                    }
                }
            }
        }
        if (this.mention_callback) {
            this.mention_callback(ids, text, message_obj.ID(), message_obj.IsoTimestamp(), message_obj.UserEmail());
        }
    };
    this.bold_mentions = function (text, track=false) {
        if (!text.includes("@")) {
            return text;
        }
        if (Dash.Validate.Object(this.valid_mentions)) {
            for (var label_text of this.valid_mentions) {
                text = this.process_mention(label_text, text, track);
            }
        }
        return text;
    };
    this.process_mention = function (label_text, text, track=false) {
        var label_text_lower = label_text.toLowerCase();
        var color = Dash.IsMobile ? Dash.Color.Mobile.AccentPrimary : this.color.AccentGood;
        if (!text.includes("@" + label_text) && !text.includes("@" + label_text_lower)) {
            if (!label_text.includes(" ")) {
                return text;
            }
            var first = label_text.split(" ")[0];
            var first_lower = first.toLowerCase();
            if (!text.includes("@" + first) && !text.includes("@" + first_lower)) {
                return text;
            }
            var occurrences = 0;
            for (var label of this.valid_mentions) {
                if (label.startsWith(first)) {
                    occurrences += 1;
                }
            }
            if (occurrences !== 1) {
                return text;
            }
            text = text.replaceAll(
                text.includes("@" + first) ? "@" + first : "@" + first_lower,
                "@" + label_text
            );
        }
        text = text.replaceAll(
            text.includes("@" + label_text) ? "@" + label_text : "@" + label_text_lower,
            "<b style='color: " + color + "'>@" + label_text + "</b>"
        );
        if (track && !this.callback_mentions.includes(label_text)) {
            this.callback_mentions.push(label_text);
        }
        return text;
    };
    this.set_valid_mentions = function () {
        if (!Dash.Validate.Object(this.at_combo_options)) {
            return;
        }
        this.valid_mentions = [];
        if (Dash.IsMobile) {
            for (var option in this.at_combo_options) {
                this.valid_mentions.push(this.at_combo_options[option]);
            }
        }
        else {
            for (var combo_option of this.at_combo_options) {
                this.valid_mentions.push(combo_option["label_text"] || combo_option["display_name"]);
            }
        }
    };
    this.on_checkbox_toggled = function () {
        this.message_area.empty();
        for (var message of this.messages) {
            if (!this.check_to_show_message(message.RightAligned())) {
                continue;
            }
            this.message_area.append(message.html);
            if (!message.delete_button) {
                continue;
            }
            message.delete_button.RefreshConnections();
        }
        this.scroll_to_bottom_on_overflow();
    };
    this.check_to_show_message = function (align_right) {
        if (!this.toggle_hide_button) {
            return true;
        }
        if (this.toggle_hide_button.IsChecked()) {
            return true;
        }
        else {
            if (this.toggle_hide_side === "right" && !align_right) {
                return true;
            }
            if (this.toggle_hide_side === "left" && align_right) {
                return true;
            }
        }
        return false;
    };
    this.add_header_area = function () {
        if (this.header_text === "none") {
            return;
        }
        this.header_area = Dash.Gui.GetHTMLContext(
            "",
            {
                "margin-bottom": Dash.Size.Padding,
                "margin-left": Dash.Size.Padding * 0.25,
                "height": Dash.Size.RowHeight,
                "flex": "none"
            },
            this.color
        );
        this.header = new Dash.Gui.Header(this.header_text, this.color);
        this.header.html.css({
            "position": "absolute",
            "top": 0,
            "left": 0
        });
        this.header.ReplaceBorderWithIcon("comments_square");
        this.header_area.append(this.header.html);
        this.html.append(this.header_area);
    };
    this.scroll_to_bottom_on_overflow = function () {
        if (Dash.Gui.HasOverflow(this.message_area)) {
            this.ScrollToBottom();
        }
    };
    this.add_message_area = function () {
        var css = {
            "padding": 0,
            "padding-right": Dash.Size.Padding * (Dash.IsMobile ? 0.6 : 0.5),  // Room for scroll bar
            "box-shadow": "none",
            "background": "none",
            "flex-grow": 2,
            "flex-shrink": 2,
            "margin-top": Dash.Size.Padding * (Dash.IsMobile ? -0.5 : 1),
            "margin-bottom": (this.read_only || Dash.IsMobile) ? 0 : Dash.Size.Padding * 2,
            "overflow-y": "auto"
        };
        if (Dash.IsMobile) {
            css["border-radius"] = 0;
            css["padding-left"] = Dash.Size.Padding * 0.6;
            css["margin-left"] = -(Dash.Size.Padding * 0.5);
            css["margin-right"] = -(Dash.Size.Padding * 0.5);
            css["padding-bottom"] = Dash.Size.Padding * 0.5;
        }
        this.message_area = Dash.Gui.GetHTMLBoxContext(css, this.color);
        this.html.append(this.message_area);
    };
    this.delete_message = function (message) {
        this.messages.Pop(message.Index());
        // Update indexes of remaining messages
        for (var i in this.messages) {
            var msg = this.messages[i];
            if (msg.Index() !== i) {
                msg.SetIndex(i);
            }
        }
        if (this.del_msg_callback) {
            this.del_msg_callback(message);
        }
    };
    this.add_message_from_input = function () {
        if (!this.message_input) {
            return;
        }
        var text = this.message_input.Text();
        // Wait for the user to make a mention selection or finish typing it out
        if (text.endsWith("@")) {
            (function (self) {
                setTimeout(
                    function () {
                        self.add_message_from_input();
                    },
                    100
                );
            })(this);
            return;
        }
        if (!Dash.IsMobile && this.message_input.at_button.enter_key_event_fired) {
            this.message_input.at_button.enter_key_event_fired = false;
            return;
        }
        this.AddMessage(
            text,
            null,
            null,
            Dash.IsMobile,  // Align right on mobile, left on desktop
            true,
            true,
            null,
            true
        );
        this.message_input.SetText("");
        this.callback_mentions = [];
    };
    this.add_message_input = function () {
        if (this.read_only) {
            return;
        }
        this.message_input = new DashGuiChatBoxInput(
            this,
            this.add_message_from_input,
            this.at_combo_options,
            this.color
        );
        this.html.append(this.message_input.html);
    };
    this.setup_styles();
}

function DashGuiChatBoxInput (chat_box, msg_submit_callback, at_combo_options=null, color=null) {
    this.chat_box = chat_box;  // Also acts as binder
    this.msg_submit_callback = msg_submit_callback.bind(this.chat_box);
    this.at_combo_options = at_combo_options;
    this.color = color || chat_box.color || Dash.Color.Light;
    
    this.html = null;
    this.input = null;
    this.pen_icon = null;
    this.at_button = null;
    this.submit_button = null;
    this.dark_mode = this.chat_box.dark_mode;
    this.secondary_css_color = this.chat_box.secondary_css_color;
    this.setup_styles = function () {
        var css = {
            "display": "flex",
            "height": Dash.Size.RowHeight,
            "background": Dash.IsMobile ? Dash.Color.GetVerticalGradient("white", this.color.Background) : "none",
            "flex": "none"  // Don't allow this.html to flex in its parent container
        };
        if (Dash.IsMobile) {
            css["padding-top"] = Dash.Size.Padding * 0.5;
            css["margin-left"] = -Dash.Size.Padding * 0.5;
            css["margin-right"] = -Dash.Size.Padding * 0.5;
            css["box-shadow"] = "0px 0px 20px 1px rgba(0, 0, 0, 0.2)";
        }
        this.html = Dash.Gui.GetHTMLContext("", css, this.color);
        this.add_pen_icon();
        this.add_input();
        if (this.at_combo_options) {
            if (Dash.IsMobile) {
                this.add_mobile_at_icon();
                this.add_mobile_at_combo();
            }
            else {
                this.add_desktop_at_button();
            }
        }
        this.add_submit_button();
    };
    
    this.Text = function () {
        return this.input.Text();
    };
    this.SetText = function (text) {
        return this.input.SetText(text);
    };
    this.Focus = function () {
        this.input.Focus();
    };
    this.add_input = function () {
        this.input = new Dash.Gui.Input("Leave a note...", this.color);
        var padding = Dash.Size.Padding * (Dash.IsMobile ? 0.75 : 0.5);
        var html_css = {
            "box-shadow": this.dark_mode ? "0px 5px 0px -4px rgba(245, 245, 245, 0.4)" : "0px 5px 0px -4px rgba(0, 0, 0, 0.2)",
            "flex-grow": 2,
            "background": "none"
        };
        var input_css = {
            "width": "calc(100% - " + (Dash.Size.Padding + (Dash.IsMobile ? padding : 0)) + "px)",
            "padding-left": padding,
            "padding-right": padding
        };
        if (Dash.IsMobile) {
            html_css["height"] = Dash.Size.RowHeight * 0.75;
            input_css["line-height"] = (Dash.Size.RowHeight * 0.75) + "px";
        }
        this.input.html.css(html_css);
        this.input.input.css(input_css);
        this.input.DisableBlurSubmit();
        if (!Dash.IsMobile) {
            this.input.SetOnSubmit(this.msg_submit_callback, this.chat_box);
            this.input.SetOnChange(this.on_input, this);
        }

        this.html.append(this.input.html);
    };
    // Expand the combo if user typed "@", but hide it if they keep typing or backspace
    this.on_input = function () {
        if (this.Text().endsWith("@")) {
            this.at_button.ShowTray();
        }
        else {
            if (this.input.InFocus()) {
                this.at_button.HideTray();
            }
        }
    };
    this.add_desktop_at_button = function () {
        var labels = [];
        for (var option of this.at_combo_options) {
            var label_text = option["label_text"] || option["display_name"];
            if (labels.includes(label_text)) {
                console.error("Error: ChatBox 'at_combo_options' cannot have items with identical 'label_text' values");
                return;
            }
            labels.push(label_text);
        }
        this.at_button = new Dash.Gui.Combo(
            "",
            this.on_combo_changed,
            this,
            this.at_combo_options,
            null,
            this.color,
            {"is_user_list": true}
        );
        this.at_button.UseAsIconButtonCombo(
            "at_sign",
            Dash.IsMobile ? 0.7 : 1,
            Dash.IsMobile ? Dash.Color.Mobile.AccentPrimary : null
        );
        this.at_button.DisableFlash();
        this.at_button.SetListVerticalOffset(-(this.at_button.html.height() + Dash.Size.Padding));
        this.at_button.html.attr("title", "Mention");
        this.html.append(this.at_button.html);
    };
    this.add_mobile_at_icon = function () {
        var icon = new Dash.Gui.Icon(this.color, "at_sign", Dash.Size.RowHeight * 0.68, 1, Dash.Color.Mobile.AccentPrimary);
        icon.html.css({
            "position": "absolute",
            "top": Dash.Size.Padding * 0.6,
            "right": Dash.Size.Padding * 3.25
        });
        this.html.append(icon.html);
    };
    this.add_mobile_at_combo = function () {
        this.mobile_at_combo = new Dash.Mobile.Combo(
            this.color,
            {"none": " ", ...this.at_combo_options},
            this,
            this.on_combo_changed
        );
        var size = Dash.Size.RowHeight;
        this.mobile_at_combo.select.css({
            "width": size,
            "height": size,
            // "line-height": size + "px",
            "min-width": size,
            "max-width": size,
            "appearance": "none",
            "outline": "none",
            "margin-top": -(Dash.Size.Padding * 0.3),
            "margin-left": -(Dash.Size.Padding * 0.3),
            "border": "none"
        });
        this.html.append(this.mobile_at_combo.html);
    };
    this.on_combo_changed = function (selection) {
        if (Dash.IsMobile) {
            if (selection === "none") {
                return;
            }
            this.mobile_at_combo.SetSelection("none");
        }
        var label;
        var new_text = "";
        var old_text = this.Text();
        if (Dash.IsMobile) {
            label = this.at_combo_options[selection];
        }
        else {
            label = selection["label_text"] || selection["display_name"];
        }
        if (old_text.endsWith("@")) {
            old_text = old_text.substring(0, old_text.length - 1);
        }
        new_text += old_text;
        if (old_text && old_text.length > 0 && !old_text.endsWith(" ")) {
            new_text += " ";
        }
        new_text += "@" + (label) + " ";
        this.SetText(new_text);
        this.Focus();
    };
    this.add_submit_button = function () {
        this.submit_button = new Dash.Gui.IconButton(
            "share",
            this.msg_submit_callback,
            this,
            this.color,
            {"size_mult": Dash.IsMobile ? 0.7 : 1}
        );
        var css = {
            "height": Dash.Size.RowHeight,
            "margin-left": Dash.Size.Padding * (Dash.IsMobile ? 0.25 : 1),
            "margin-right": Dash.Size.Padding * (Dash.IsMobile ? 0.8 : 0.3)
        };
        if (Dash.IsMobile) {
            css["margin-top"] = -(Dash.Size.Padding * 0.15);
            this.submit_button.SetIconColor(Dash.Color.Mobile.AccentPrimary);
        }
        this.submit_button.html.css(css);
        this.submit_button.SetHoverHint("Submit");
        this.html.append(this.submit_button.html);
    };
    this.add_pen_icon = function () {
        this.pen_icon = new Dash.Gui.Icon(
            this.color,
            "pen",
            null,
            Dash.IsMobile ? 0.65 : 0.9,
            this.secondary_css_color
        );
        var css = {
            "height": Dash.Size.RowHeight,
            "margin-left": Dash.IsMobile ? Dash.Size.Padding * 0.5 : Dash.Size.Padding * 0.25,
            "margin-right": Dash.Size.Padding * (Dash.IsMobile ? -0.5 : 0),
            "pointer-events": "none",
            "transform": "scale(-1, 1)"  // Flip the icon horizontally
        };
        if (Dash.IsMobile) {
            css["margin-top"] = -(Dash.Size.Padding * 0.25);
        }
        this.pen_icon.html.css(css);
        this.html.append(this.pen_icon.html);
    };

    this.setup_styles();
}

function DashGuiChatBoxMessage (chat_box, text, user_email, iso_ts, align_right=false, include_delete_button=false, index=0, color=null, id=null) {
    this.chat_box = chat_box;
    this.text = text;
    this.user_email = user_email;
    this.iso_ts = iso_ts;
    this.align_right = align_right;
    this.include_delete_button = include_delete_button;
    this.index = index;
    this.color = color || chat_box.color || Dash.Color.Light;
    this.id = id || Dash.Math.RandomID();
    this.html = null;
    this.user_icon = null;
    this.text_label = null;
    this.text_bubble = null;
    this.iso_ts_label = null;
    this.delete_button = null;
    this.text_bubble_container = null;
    this.dark_mode = this.chat_box.dark_mode;
    this.secondary_css_color = this.chat_box.secondary_css_color;
    this.iso_label_height = Dash.Size.RowHeight * (Dash.IsMobile ? 0.35 : 0.7);
    this.setup_styles = function () {
        this.html = Dash.Gui.GetHTMLContext(
            "",
            {
                "margin-top": Dash.Size.Padding * (Dash.IsMobile ? 0.5 : 1),
                "padding": 0,
                "display": "flex",
                "background": "none"
            },
            this.color
        );
        if (this.align_right) {
            this.html.css({
                "flex-direction": "row-reverse"
            });
        }
        this.add_user_icon();
        this.add_text_bubble_container();
        this.add_iso_ts_label();
        if (this.include_delete_button) {
            this.add_delete_button();
        }
    };
    this.RightAligned = function () {
        return this.align_right;
    };
    this.Index = function () {
        return this.index;
    };
    this.Text = function () {
        return this.text;
    };
    this.ID = function () {
        return this.id;
    };
    this.UserEmail = function () {
        return this.user_email;
    };
    this.IsoTimestamp = function () {
        return this.iso_ts;
    };
    this.SetIndex = function (index) {
        index = parseInt(index);
        
        if (!Number.isInteger(index)) {
            console.error("Error: SetIndex() requires an integer:", index, typeof index);
            return;
        }
        this.index = index;
    };
    this.SetText = function (text) {
        if (typeof text !== "string") {
            console.error("Error: SetText() requires a string");
            return;
        }
        this.text = text;
        this.text_label.text(this.text);
    };
    this.add_user_icon = function () {
        this.user_icon = $("<div></div>");
        var border_color = Dash.IsMobile ? Dash.Color.Mobile.AccentSecondary : this.color.Button.Background.Base;
        var icon_size = Dash.IsMobile ? (Dash.Size.RowHeight - (Dash.Size.Stroke * 0.5)) : (Dash.Size.ButtonHeight + (Dash.Size.Padding * 0.25));
        var img = Dash.User.GetImageByEmail(user_email);
        this.user_icon.css({
            "position": "absolute",
            "top": Dash.Size.RowHeight * (Dash.IsMobile ? 0.33 : 0.65),
            "width": icon_size,
            "height": icon_size,
            "margin": Dash.Size.Padding * 0.25,
            "padding": 0,
            "border-radius": icon_size * 0.75,
            "border": (Dash.Size.Stroke * (Dash.IsMobile ? 0.4 : 0.75)) + "px solid " + border_color,
            "background-image": "url(" + img["thumb_url"] + ")",
            "background-size": "cover"
        });
        if (this.align_right) {
            this.user_icon.css({
                "right": 0
            });
        }
        else {
            this.user_icon.css({
                "left": 0
            });
        }
        
        this.html.append(this.user_icon);
    };
    this.add_text_bubble_container = function () {
        var corner_radius = Dash.Size.Padding * 0.05;
        var side_margin = (Dash.Size.ButtonHeight + (Dash.Size.Padding * 1.5)) * (Dash.IsMobile ? 0.67 : 1);
        this.text_bubble_container = Dash.Gui.GetHTMLContext(
            "",
            {
                "margin": 0,
                "padding": 0,
                "margin-top": this.iso_label_height,
                "display": "flex",
                "background": "none"
            },
            this.color
        );
        this.text_bubble = Dash.Gui.GetHTMLBoxContext(
            {
                "margin": Dash.Size.Padding * 0.2,
                "padding": Dash.Size.Padding * (Dash.IsMobile ? 0.75 : 1),
                "border-radius": Dash.Size.Padding,
                "box-shadow": Dash.IsMobile ? "0px 6px 10px 1px rgba(0, 0, 0, 0.1), inset 0px 1px 1px 0px rgba(255, 255, 255, 0.5)" : "none",
                "display": "flex",
                // Workaround for the current discrepancy of Light.BackgroundRaised not being unique,
                // which can't simply be fixed by making it different, because too many things would break.
                // It would be a big re-work of a bunch of code. Remove this call if/when that is resolved.
                "background": !Dash.Color.IsDark(this.color) ?
                    (Dash.IsMobile ? "white" : Dash.Color.Darken(this.color.Background, 20)) :
                    this.color.BackgroundRaised
            },
            this.color
        );
        this.text_label = Dash.Gui.GetHTMLContext(
            this.text,
            {
                "background": "none",
                "word-break": "break-word",
                "text-align": "left"
            },
            this.color
        );
        if (this.align_right) {
            this.text_bubble_container.css({
                "margin-right": side_margin
            });
            this.text_bubble.css({
                "border-top-right-radius": corner_radius
            });
        }
        else {
            this.text_bubble_container.css({
                "margin-left": side_margin
            });
            this.text_bubble.css({
                "border-top-left-radius": corner_radius
            });
        }
        this.text_bubble.append(this.text_label);
        this.text_bubble_container.append(this.text_bubble);
        
        this.html.append(this.text_bubble_container);
    };
    this.add_iso_ts_label = function () {
        var side_padding = Dash.Size.Padding * (Dash.IsMobile ? 3.25 : 4.9);
        var user = Dash.User.GetByEmail(this.user_email);
        var name = user ? user["first_name"] : (this.user_email && !(this.user_email.includes("@"))) ? this.user_email.Title() : "Unknown";
        var iso_ts_css = {
            "color": this.secondary_css_color,
            "font-family": "sans_serif_italic",
            "background": "none",
            "position": "absolute",
            "top": 0,
            // "height": this.iso_label_height,
            "font-size": "85%"
        };
        var timestamp = this.iso_ts;
        if (Dash.DateTime.IsIsoFormat(timestamp)) {
            timestamp = Dash.DateTime.Readable(timestamp, false);
        }
        if (this.align_right) {
            this.iso_ts_label = Dash.Gui.GetHTMLContext(
                timestamp + " - " + name,
                {
                    ...iso_ts_css,
                    "right": side_padding,
                    "text-align": "right",
                },
                this.color
            );
        }
        else {
            this.iso_ts_label = Dash.Gui.GetHTMLContext(
                name + " - " + timestamp,
                {
                    ...iso_ts_css,
                    "left": side_padding,
                    "text-align": "left",
                },
                this.color
            );
        }
        this.html.append(this.iso_ts_label);
    };
    this.add_delete_button = function () {
        var side_padding = Dash.Size.Padding * (Dash.IsMobile ? 2.25 : 3.2);
        this.delete_button = new Dash.Gui.IconButton(
            this.dark_mode ? "trash_solid" : "trash",
            this.delete,
            this,
            this.color,
            {"container_size": this.iso_label_height, "size_mult": Dash.IsMobile ? 0.95 : 0.75}
        );
        this.delete_button.html.css({
            "position": "absolute",
            "top": 0,
            "height": this.iso_label_height
        });
        this.delete_button.icon.icon_html.css({
            "color": this.secondary_css_color
        });
        if (this.align_right) {
            this.delete_button.html.css({
                "right": side_padding
            });
        }
        else {
            this.delete_button.html.css({
                "left": side_padding
            });
        }
        this.html.append(this.delete_button.html);
    };
    this.delete = function () {
        if (!window.confirm("Are you sure you want to delete this message? This cannot be undone.")) {
            return;
        }
        this.chat_box.delete_message(this);
        this.html.remove();
    };
    this.setup_styles();
}

function DashGuiCombo (label, callback, binder, option_list, selected_option_id, color=null, options={}, bool=false) {
    this.name = label;  // Unused (except in multi-select mode, for which it's now been repurposed)
    this.callback = callback.bind(binder);
    this.binder = binder;
    this.option_list = option_list;
    this.selected_option_id = selected_option_id;
    this.color = color || (binder && binder.color ? binder.color : Dash.Color.Light);
    this.options = options;
    this.bool = bool;
    this.disabled = false;
    this.color_set = null;
    this.row_buttons = [];
    this.click_skirt = null;
    this.on_click_cb = null;
    this.auto_gravity = true;
    this.searchable_min = 20;
    this.initialized = false;
    this.dropdown_icon = null;
    this.flash_enabled = true;
    this.gravity_vertical = 0;
    this.skirt_overrides = {};  // See draw_click_skirt on usage
    this.is_searchable = false;
    this.search_set_up = false;
    this.selected_option = null;
    this.combo_option_index = 0;
    this.gravity_horizontal = 0;
    this.static_label_text = "";
    this.as_button_combo = false;
    this.on_rows_drawn_cb = null;
    this.list_offset_vertical = 0;
    this.highlighted_button = null;
    this.init_labels_drawn = false;
    this.gravity_width_override = null;
    this.gravity_value_override = null;
    this.gravity_height_override = null;
    this.previous_selected_option = null;
    this.show_rows_on_empty_search = true;
    this.default_search_submit_combo = null;
    this.html = $("<div class='Combo'></div>");
    this.rows = $("<div class='Combo'></div>");
    this.click = $("<div class='Combo'></div>");
    this.highlight = $("<div class='Combo'></div>");
    this.style = this.options["style"] || "default";
    this.read_only = this.options["read_only"] || false;
    this.label = $("<div class='ComboLabel Combo'></div>");
    this.multi_select = this.options["multi_select"] || false;
    this.additional_data = this.options["additional_data"] || {};
    this.label_container = $("<div class='ComboLabel Combo'></div>");
    // Originally wrote this to check programmatically for every combo, but
    // got concerned that it was inefficient to check any and every combo
    this.is_user_list = this.options["is_user_list"] || false;
    // This is managed in this.handle_arrow_input(), but should ideally also
    // be set back to false in whatever code is referencing this attribute
    this.enter_key_event_fired = false;
    this.random_id = (
        "combo_" + Dash.Math.RandomID() + "_" +
        (this.option_list[0]["label_text"] || this.option_list[0]["display_name"]) +
        "_" + this.option_list[0]["id"]
    );
    DashGuiComboInterface.call(this);
    this.initialize_style = function () {
        this.styles = ["default", "row", "default_bubbled"];
        // Toss a warning if this isn't a known style, so we don't fail silently
        if (!this.styles.includes(this.style)) {
            console.error("Error: Unknown Dash Combo Style: " + this.style);
            this.style = "default";
        }
        if (this.style === "row") {
            this.color_set  = this.color.Button;
            DashGuiComboStyleRow.call(this);
        }
        else {
            this.color_set  = this.color.Button;
            DashGuiComboStyleDefault.call(this);
        }
        this.setup_styles();
        if (this.read_only) {
            this.html.css({
                "cursor": "auto"
            });
        }
        this.initialize_rows();
    };
    this.hide_skirt = function () {
        if (!this.click_skirt) {
            return;
        }
        for (var i in this.click_skirt) {
            this.click_skirt[i].remove();
        }
        this.click_skirt = null;
    };
    this.add_dropdown_icon = function (icon_size_mult=0.75, icon_name="arrow_down") {
        if (this.read_only) {
            return;
        }
        this.dropdown_icon = new Dash.Gui.Icon(
            this.color,
            icon_name,
            Dash.Size.RowHeight,
            icon_size_mult,
            this.style.includes("default") ? this.color.Button.Text.Base : null
        );
        this.dropdown_icon.html.addClass("ComboLabel");
        this.dropdown_icon.html.addClass("Combo");
        this.dropdown_icon.html.css(this.dropdown_icon_css);
        this.label_container.append(this.dropdown_icon.html);
    };
    this.draw_click_skirt = function (height, width) {
        this.hide_skirt();
        if (this.is_searchable) {
            height = this.html.height();
        }
        this.click_skirt = [
            $("<div class='ComboClickSkirt Combo'></div>"),
            $("<div class='ComboClickSkirt Combo'></div>"),
            $("<div class='ComboClickSkirt Combo'></div>"),
            $("<div class='ComboClickSkirt Combo'></div>")
        ];
        var skirt_thickness = Dash.Size.ColumnWidth * 1.2;
        var skirt_top = skirt_thickness;
        var bottom_top = height;
        if (this.gravity_vertical > 0) {
            skirt_top += this.gravity_vertical;
            bottom_top = this.html.height();
        }
        // top -> right -> bottom -> left
        var set_left = [
            "top_left" in this.skirt_overrides ? this.skirt_overrides["top_left"] : 0,
            "right_left" in this.skirt_overrides ? this.skirt_overrides["right_left"] : width,
            "bottom_left" in this.skirt_overrides ? this.skirt_overrides["bottom_left"] : 0,
            "left_left" in this.skirt_overrides ? this.skirt_overrides["left_left"] : -skirt_thickness
        ];
        // top -> right -> bottom -> left
        var set_top = [
            "top_top" in this.skirt_overrides ? this.skirt_overrides["top_top"] : -skirt_top,
            "right_top" in this.skirt_overrides ? this.skirt_overrides["right_top"] : -skirt_top,
            "bottom_top" in this.skirt_overrides ? this.skirt_overrides["bottom_top"] : bottom_top,
            "left_top" in this.skirt_overrides ? this.skirt_overrides["left_top"] : -skirt_top
        ];
        // top -> right -> bottom -> left
        var set_width = [
            "top_width" in this.skirt_overrides ? this.skirt_overrides["top_width"] : width,
            "right_width" in this.skirt_overrides ? this.skirt_overrides["right_width"] : skirt_thickness,
            "bottom_width" in this.skirt_overrides ? this.skirt_overrides["bottom_width"] : width,
            "left_width" in this.skirt_overrides ? this.skirt_overrides["left_width"] : skirt_thickness
        ];
        var top_height = "top_height" in this.skirt_overrides ? this.skirt_overrides["top_height"] : skirt_thickness;
        var bottom_height = "bottom_height" in this.skirt_overrides ? this.skirt_overrides["bottom_height"] : skirt_thickness;
        // top -> right -> bottom -> left
        var set_height = [
            top_height,
            "right_height" in this.skirt_overrides ? this.skirt_overrides["right_height"] : height + top_height + bottom_height,
            bottom_height,
            "left_height" in this.skirt_overrides ? this.skirt_overrides["left_height"] : height + top_height + bottom_height
        ];

        for (var i in this.click_skirt) {
            var panel = this.click_skirt[i];
            panel.css({
                "position": "absolute",
                "left": set_left[i] - this.gravity_horizontal,
                "top": set_top[i] + this.list_offset_vertical,
                "width": set_width[i],
                "height": set_height[i],
                "z-index": 1000,
                "cursor": "pointer"
            });
            this.html.append(panel);
            this.trim_skirt_panel(panel);
        }
    };
    // Trim the skirts if they extend beyond the window size (for divs that don't manage their overflow)
    this.trim_skirt_panel = function (panel) {
        if ((panel.offset().left + panel.width()) > window.innerWidth) {
            panel.css({
                // Remaining space - the rough width of a scrollbar in case there is one
                "width": Math.floor(window.innerWidth - panel.offset().left) - (Dash.Size.Padding * 2)
            });
        }
        if ((panel.offset().top + panel.height()) > window.innerHeight) {
            panel.css({
                "height": Math.floor(window.innerHeight - panel.offset().top)
            });
        }
    };
    this.initialize_rows = function () {
        if (this.multi_select) {
            this.update_label_for_multi_select();
            this.initialized = true;
            return;
        }
        var selected_obj = null;
        if (this.option_list.length > 0) {
            selected_obj = this.option_list[0];
        }
        if (this.selected_option_id || this.selected_option_id === 0) {
            for (var option of this.option_list) {
                if (option["id"].toString() === this.selected_option_id.toString()) {
                    selected_obj = option;
                    break;
                }
            }
        }
        if (selected_obj) {
            this.on_selection(selected_obj);
        }
        else {
            // It appears that, in this case, this.initialized doesn't get set to true - is that deliberate?
            this.label.text("No Options");
        }
    };
    this.setup_load_dots = function (align_right=false) {
        this.load_dots = new Dash.Gui.LoadDots(this.style === "row" ? Dash.Size.RowHeight - (Dash.Size.Padding * 0.5) : Dash.Size.ButtonHeight - Dash.Size.Padding);
        this.load_dots.SetOrientation("vertical");
        this.load_dots.SetColor("rgba(0, 0, 0, 0.7)");
        this.html.append(this.load_dots.html);
        if (align_right || this.text_alignment.toString() === "right") {
            this.load_dots.html.css({
                "position": "absolute",
                "top": Dash.Size.Padding * 0.5,
                "right": -(Dash.Size.ButtonHeight - Dash.Size.Padding * 1.5),
            });
        }
        else {
            this.load_dots.html.css({
                "position": "absolute",
                "top": Dash.Size.Padding * 0.5,
                "left": -(Dash.Size.ButtonHeight - Dash.Size.Padding * 1.5),
            });
        }
    };
    this.setup_label_list = function () {
        this.rows.css({
            "background": this.color_set.Background.Base,
            "box-shadow": "0px 0px 100px 1px rgba(0, 0, 0, 0.4)",
            "opacity": 1,
            "left": 0,
            "top": 0,
            "width": "auto"  // This is important so it can auto-size
        });
        // TODO: Make this.rows grab focus while active?
        this.rows.empty();
        this.row_buttons = [];
        for (var i in this.option_list) {
            var button = new DashGuiComboRow(this, this.option_list[i]);
            this.rows.append(button.html);
            this.row_buttons.push(button);
        }
        if (this.on_rows_drawn_cb) {
            this.on_rows_drawn_cb();
        }
        this.init_labels_drawn = true;
    };
    this.on_click = function (skirt_clicked=false) {
        if (this.read_only) {
            return;
        }
        if (!skirt_clicked && this.initialized && this.multi_select) {
            if (!this.expanded) {
                this.show();
            }
            // The user may still be making selections, let them click out when done (or hit the escape key)
            return;
        }
        if (this.flash_enabled) {
            this.flash();
        }
        if (this.is_searchable && this.search_active) {
            this.hide_searchable();
        }
        if (this.expanded) {
            this.hide();
        }
        else {
            this.show();
        }
        if (this.on_click_cb) {
            this.on_click_cb();
        }
    };
    this.flash = function () {
        this.click.stop().css({"opacity": 1});
        this.click.stop().animate({"opacity": 0}, 2000);
    };
    // Called when a selection in the combo is made
    this.on_selection = function (selected_option, ignore_callback=false, search_text=null) {
        if (this.multi_select) {
            this.update_label_for_multi_select();
        }
        else {
            this._on_selection(selected_option, ignore_callback, search_text);
        }
        this.initialized = true;
        Dash.Temp.SetLastComboChanged(this);
    };
    this._on_selection = function (selected_option, ignore_callback=false, search_text=null) {
        var label_text = this.static_label_text || selected_option["label_text"] || selected_option["display_name"];
        if (!label_text) {
            this.label.text("ERROR");
            return;
        }
        this.hide();
        this.label.text(label_text);
        this.previous_selected_option = this.selected_option;
        this.selected_option = selected_option;
        this.selected_option_id = selected_option["id"];
        if (this.initialized && !ignore_callback && this.callback) {
            this.callback(selected_option, this.previous_selected_option, this.additional_data, search_text);
        }
    };
    this.update_label_for_multi_select = function () {
        if (!this.multi_select) {
            return;
        }
        this.label.text(this.get_multi_select_label());
    };
    this.get_multi_select_label = function () {
        if (!this.multi_select) {
            return "";
        }
        if (!this.row_buttons.length) {
            return (this.name || "Multiple Options");
        }
        var selections = this.GetMultiSelections(false);
        if (selections.length === 1) {
            return (selections[0]["label_text"] || selections[0]["display_name"] || this.name || "Nothing Selected");
        }
        if (selections.length > 1) {
            return "Multiple Selections";
        }
        return (this.name || "Nothing Selected");
    };
    // Prior to showing, set the width of rows (this is all important, so it can auto-size)
    this.pre_show_size_set = function () {
        this.setup_label_list();
        var i;
        var label_width = 0;
        this.rows.css({
            "width": "fit-content"
        });
        for (i in this.row_buttons) {
            var scroll_width = this.row_buttons[i].html[0]["scrollWidth"];
            if (scroll_width <= label_width) {
                continue;
            }
            label_width = scroll_width;
        }
        for (i in this.row_buttons) {
            this.row_buttons[i].SetWidthToFit(label_width);
        }
        var html_width = this.inner_html ? this.inner_html.width() : this.html.width();
        if (html_width > this.rows.width()) {
            this.rows.css({
                "width": html_width
            });
            for (i in this.row_buttons) {
                this.row_buttons[i].SetWidthToFit(html_width);
            }
        }
    };
    this.determine_gravity = function (end_height) {
        var gravity = null;
        var offset_added = false;
        var total_height = this.html.offset().top + this.html.height() + end_height;
        this.gravity_vertical = 0;
        this.gravity_horizontal = 0;
        // Expand the combo upwards if not enough room below
        if (this.auto_gravity && total_height > (this.gravity_height_override || window.innerHeight)) {
            // As long as there's enough room above
            if (end_height < this.html.offset().top) {
                gravity = this.html.height() - end_height;
            }
            // Otherwise, if there's enough room on screen, raise it up enough to not cause overflow
            else {
                if (end_height < (this.gravity_height_override || window.innerHeight)) {
                    gravity = -(Math.floor(total_height - this.html.height() - (this.gravity_height_override || window.innerHeight)));
                }
            }
            if (gravity !== null) {
                this.gravity_vertical = Math.abs(gravity);
                this.rows.css({
                    "top": this.gravity_value_override || (gravity + this.list_offset_vertical)
                });
                offset_added = true;
            }
        }
        // If the row list width is wider than this.html (assuming this.html is deliberately placed/contained on the page)
        if (this.auto_gravity && this.rows.width() > this.html.width()) {
            // Expand the combo to the left if not enough room on the right
            if ((this.html.offset().left + this.html.width() + this.rows.width()) > (this.gravity_width_override || window.innerWidth)) {
                // As long as there's enough room to the left
                if (this.rows.width() < this.html.offset().left) {
                    gravity = this.html.width() - this.rows.width();
                    this.gravity_horizontal = Math.abs(gravity);
                    this.rows.css({
                        "left": this.gravity_value_override || gravity
                    });
                }
            }
        }
        if (this.list_offset_vertical && !offset_added) {
            this.rows.css({
                "top": (parseInt(this.rows.css("top")) || 0) + this.list_offset_vertical
            });
        }
    };
    this.show = function () {
        this.pre_show_size_set();
        // This is an extra safety check in case the combo was updated after setup
        // (very unlikely to be triggered, but just in case)
        if (!this.is_searchable && this.option_list.length > this.searchable_min) {
            this.EnableSearchSelection();
        }
        if (this.is_searchable && this.option_list.length < this.searchable_min) {
            // TODO: DisableSearchSelection() - function needs to be written
            // This is important for cases where the combo option list changes after setup
        }
        if (this.is_searchable) {
            this.activate_search();
        }
        this.rows.detach();
        this.html.append(this.rows);
        this.expanded = true;
        this.rows.stop();
        var start_height = this.rows.height();
        this.rows.css({
            "height": "auto",
        });
        var end_height = this.rows.height();
        this.determine_gravity(end_height);
        this.draw_click_skirt(end_height, this.rows.width());
        this.rows.css({
            "height": start_height,
            "z-index": 2000
        });
        this.rows.animate({"height": end_height}, 150);
        if (this.is_searchable) {
            this.rows.css({
                "top": this.html.height() + this.list_offset_vertical
            });
            this.manage_search_list();
        }
        if (!this.is_searchable) {
            (function (self) {
                $(window).on(
                    "keydown." + self.random_id,
                    function (event) {
                        self.handle_arrow_input(self, event);
                    }
                );
            })(this);
        }
    };
    this.hide = function () {
        this.expanded = false;
        this.highlighted_button = null;
        this.hide_skirt();
        this.rows.stop();
        this.rows.animate({"height": 0, "opacity": 0}, 250, function () {$(this).css({"z-index": 10});});
        if (this.is_searchable && this.search_active) {
            this.hide_searchable();
        }
        if (!this.is_searchable) {
            $(window).off("keydown." + this.random_id);
        }
        if (this.initialized && this.multi_select && this.callback) {
            var selections = this.GetMultiSelections();
            this.update_label_for_multi_select();
            this.callback(selections, this.additional_data);
            Dash.Temp.SetLastComboChanged(this);
        }
    };
    this.setup_connections = function (refresh=false) {
        if (this.read_only) {
            return;
        }
        (function (self) {
            if (!refresh) {
                $(window).on("click." + self.random_id, function (event) {
                    if (!self.html.is(":visible")) {
                        $(window).off("click." + self.random_id);  // Kill this when leaving the page
                        return;
                    }
                    if (!self.expanded) {
                        return;
                    }
                    if (!$(event.target).hasClass("Combo")) {
                        self.hide();
                        event.preventDefault();
                        if (event.originalEvent) {
                            event.originalEvent.preventDefault();
                        }
                        return false;
                    }
                });
            }
            self.html.on("mouseenter", function () {
                self.highlight.stop().css({"opacity": 1});
            });
            self.html.on("mouseleave", function () {
                self.highlight.stop().animate({"opacity": 0}, 200);
            });
            self.html.on("click", function (e) {
                if ($(e.target).hasClass("ComboLabel")) {
                    self.on_click();
                    e.preventDefault();
                    return false;
                }
                if ($(e.target).hasClass("ComboClickSkirt")) {
                    self.on_click(true);
                    e.preventDefault();
                    return false;
                }
            });
            if (!refresh) {
                // This delayed check is important because the option_list size may have changed after the first frame
                setTimeout(
                    function () {
                        if (!self.is_searchable && self.option_list.length > self.searchable_min) {
                            self.EnableSearchSelection();
                        }
                    },
                    300
                );
            }
        })(this);
    };
    this.handle_arrow_input = function (self, event) {
        if (!self.html.is(":visible")) {
            $(window).off("keydown." + self.random_id);  // Kill this when leaving the page
            return;
        }
        if (event.defaultPrevented) {
            return; // Do nothing if the event was already processed
        }
        if (self.is_searchable) {
            if (self.search_result_ids.length < 1) {
                return;  // No search results
            }
        }
        else {
            if (!self.expanded) {
                return;  // No combo option rows
            }
        }
        var i;
        var draw = false;
        var buttons = self.row_buttons;
        if (self.is_searchable) {
            buttons = self.search_result_rows;
        }
        self.enter_key_event_fired = false;
        if (event.key === "Down" || event.key === "ArrowDown") {
            var new_index = self.combo_option_index + 1;
            if (new_index > buttons.length - 1) {
                return;
            }
            self.combo_option_index = new_index;
            draw = true;
        }
        else if (event.key === "Up" || event.key === "ArrowUp") {
            if (self.combo_option_index === 0) {
                return;
            }
            self.combo_option_index -= 1;
            draw = true;
        }
        else if (event.key === "Escape") {
            self.hide();
            return;
        }
        else if (event.key === "Enter" && self.highlighted_button) {
            self.enter_key_event_fired = true;
            if (self.multi_select && self.highlighted_button.checkbox) {
                self.highlighted_button.checkbox.Toggle();
                self.update_label_for_multi_select();
            }
            else if (!this.is_searchable) {
                for (i in self.option_list) {
                    var option = self.option_list[i];
                    if (parseInt(i) === self.combo_option_index) {
                        self.on_selection(option);
                        break;
                    }
                }
            }
        }
        else {
            return;
        }
        if (draw) {
            for (i in buttons) {
                var button = buttons[i];
                if (parseInt(i) === parseInt(self.combo_option_index.toString())) {
                    self.highlighted_button = button;
                    button.SetSearchResultActive(true);
                }
                else {
                    button.SetSearchResultActive(false);
                }
            }
        }
        event.preventDefault();
    };
    this.initialize_style();
    this.setup_connections();
}

/**@member DashGuiCombo*/
function DashGuiComboSearch () {
    this.search_input = null;
    this.search_results = [];
    this.is_searchable = true;
    this.search_active = false;
    this.search_result_ids = [];
    this.search_container = null;
    this.search_max_results = 10;
    this.search_result_rows = [];
    this.setup_search_selection = function () {
        this.html.css({
            "cursor": "text",
        });
        if (this.highlight) {
            this.highlight.css({
                "cursor": "text",
            });
        }
        if (this.inner_html) {
            this.inner_html.css({
                "cursor": "text",
            });
        }
        (function (self) {
            self.html.on(
                "keydown." + self.random_id,
                function (event) {
                    self.handle_arrow_input(self, event);
                }
            );
        })(this);
        this.search_set_up = true;
    };
    this.activate_search = function () {
        this.search_active = true;
        if (!this.search_input) {
            this.create_search_input();
        }
        this.label_container.css({
            "opacity": 0,
        });
    };
    this.hide_searchable = function () {
        this.hide_skirt();
        this.search_active = false;
        if (this.search_container) {
            this.search_container.remove();
            this.search_container = null;
        }
        if (this.search_input) {
            this.search_input.html.remove();
            this.search_input = null;
        }
        this.search_results = [];
        this.search_result_ids = [];
        this.search_result_rows = [];
        this.combo_option_index = 0;
        this.label_container.css({
            "opacity": 1,
        });
    };
    this.create_search_input = function () {
        this.search_container = $("<div></div>");
        this.html.append(this.search_container);
        this.search_container.css({
            "position": "absolute",
            "left": 0,
            "top": 0,
            "width": this.rows.width(),
            "height": this.html.height()
        });
        this.search_input = new Dash.Gui.Input("Type to search...", this.color);
        this.search_input.SetText(this.multi_select ? this.get_multi_select_label() : (this.selected_option["label_text"] || this.selected_option["display_name"]));
        this.search_input.SetOnChange(this.on_search_text_changed, this);
        this.search_input.SetOnSubmit(this.on_search_text_submitted, this);
        this.search_input.DisableBlurSubmit();
        this.search_container.append(this.search_input.html);
        this.search_input.Flatten();
        if (this.style === "row") {
            this.search_input.html.css({
                "left": -Dash.Size.Padding
            });
            this.search_input.input.css({
                "position": "absolute",
                "inset": 0
            });
        }
        else {
            this.search_input.html.css({
                "top": Dash.Size.Padding * 0.5
            });
            this.search_input.input.css({
                "color": this.color_set.Text.Base
            });
        }
        (function (self) {
            requestAnimationFrame(function () {
                self.search_input.input.select();
                self.manage_search_list(self.show_rows_on_empty_search);
            });
        })(this);
    };
    this.on_search_text_changed = function () {
        this.search_results = [];
        var search = this.search_input.Text().toLocaleLowerCase("en-US");
        if (search.length === 0) {
            this.manage_search_list(this.show_rows_on_empty_search);
            return;
        }
        for (var i in this.option_list) {
            var label = this.option_list[i]["label_text"] || this.option_list[i]["display_name"];
            var opt = label.toLocaleLowerCase("en-US");
            if (search.length < 3) {
                // For a short search, only match the beginning
                if (opt.startsWith(search)) {
                    this.search_results.push(this.option_list[i]["id"]);
                }
            }
            else {
                if (opt.includes(search)) {
                    this.search_results.push(this.option_list[i]["id"]);
                }
            }
            if (this.search_results.length >= this.search_max_results) {
                break;
            }
        }
        this.manage_search_list();
    };
    this.on_search_text_submitted = function () {
        if (this.multi_select) {
            return;
        }
        var search = this.search_input.Text();
        if (search.length < 1) {
            this.on_click();
            return;
        }
        var selected_id = this.search_result_ids[this.combo_option_index];
        var selected_option = null;
        for (var i in this.option_list) {
            var content = this.option_list[i];
            if (content["id"] === selected_id) {
                selected_option = content;
                break;
            }
        }
        if (selected_option) {
            this.on_selection(selected_option, false, search);
        }
    };
    this.manage_search_list = function (show_all=false) {
        this.rows.stop().css({"height": "auto"});
        this.search_result_rows = [];
        this.search_result_ids = [];
        this.combo_option_index = 0;
        for (var i in this.option_list) {
            var content = this.option_list[i];
            var button = this.row_buttons[i];
            var include_default = this.default_search_submit_combo && this.default_search_submit_combo["id"] === content["id"];
            button.SetSearchResultActive(false);
            if (show_all || this.search_results.includes(content["id"]) || include_default) {
                if (show_all && !this.search_results.includes(content["id"])) {
                    this.search_results.push(content["id"]);
                }
                if (!this.search_result_ids.includes(content["id"])) {
                    this.search_result_ids.push(content["id"]);
                }
                if (!this.search_result_rows.includes(button)) {
                    this.search_result_rows.push(button);
                }
                button.html.css({
                    "display": "block",
                });
            }
            else {
                button.html.css({
                    "display": "none",
                });
            }
        }
        if (this.search_result_rows.length === 0 && this.default_search_submit_combo) {
        }
        if (this.search_result_rows.length > 0) {
            this.search_result_rows[0].SetSearchResultActive(true);
        }
    };
}

function DashGuiComboRow (combo, option) {
    this.combo = combo;
    this.option = option;
    this.checkbox = null;
    this.user_icon = null;
    this.id = this.option["id"];
    this.color = this.combo.color;
    this.color_set = this.combo.color_set;
    this.is_user_list = this.combo.is_user_list;
    this.multi_select = this.combo.multi_select;
    this.height = this.combo.height || Dash.Size.ButtonHeight;
    this.label_text = this.option["label_text"] || this.option["display_name"];
    this.html = $("<div class='Combo'></div>");
    this.highlight = $("<div class='Combo'></div>");
    this.label = $("<div class='Combo'>" + this.label_text + "</div>");
    this.setup_styles = function () {
        this.html.css({
            "border-bottom": this.multi_select ? "1px solid rgba(255, 255, 255, 0.1)" : "none",
            "height": this.height
        });
        this.highlight.css({
            "position": "absolute",
            "inset": 0,
            "background": "rgba(255, 255, 255, 0.2)",
            "opacity": 0
        });
        this.label.css({
            "border-bottom": this.multi_select ? "none" : "1px solid rgba(255, 255, 255, 0.1)",
            "text-align": this.combo.text_alignment,
            "height": this.height,
            "line-height": this.height + "px",
            "white-space": "nowrap",
            "color": this.color_set.Text.Base
        });
        this.html.append(this.highlight);
        this.html.append(this.label);
        this.add_user_icon();
        this.add_checkbox();
        this.setup_connections();
    };
    this.IsMultiSelected = function () {
        if (!this.multi_select || !this.checkbox) {
            return false;
        }
        return this.checkbox.IsChecked();
    };
    // Prior to showing, set the width of rows to fit the content
    this.SetWidthToFit = function (label_width=null) {
        if (!label_width) {
            label_width = "fit-content";
        }
        else if (!isNaN(parseInt(label_width))) {
            if (this.multi_select) {
                label_width -= this.height;
            }
            if (this.is_user_list) {
                label_width -= this.height;
            }
        }
        this.html.css({
            "width": "fit-content"
        });
        this.label.css({
            "width": label_width,
            "padding-left": Dash.Size.Padding * 0.5,
            "padding-right": Dash.Size.Padding * 0.6
        });
    };
    // Prior to showing, set the width of rows
    this.SetWidth = function (width) {
        this.html.css({
            "width": width
        });
        this.label.css({
            "width": width - Dash.Size.Padding,
            "padding-left": Dash.Size.Padding * 0.5,
            "padding-right": Dash.Size.Padding * 0.5
        });
    };
    this.SetSearchResultActive = function (is_active) {
        this.set_highlight_active(is_active);
    };
    this.add_user_icon = function () {
        if (!this.is_user_list) {
            return;
        }
        this.html.css({
            "padding-left": this.height
        });
        this.label.css({
            "text-align": "left"
        });
        if (!this.option["id"] || this.option["id"] === "none") {
            return;
        }
        this.user_icon = $("<div></div>");
        var icon_size = (this.height * 0.9) - (Dash.Size.Stroke * 1.5);
        var img = Dash.User.GetImageByEmail(this.option["id"]);
        this.user_icon.css({
            "position": "absolute",
            "top": this.height * 0.1,
            "left": this.height * 0.1,
            "width": icon_size,
            "height": icon_size,
            "border-radius": icon_size * 0.75,
            "border": (Dash.Size.Stroke * 0.25) + "px solid " + this.color.AccentGood,
            "background-image": "url(" + img["thumb_url"] + ")",
            "background-size": "cover"
        });
        this.html.append(this.user_icon);
    };
    this.add_checkbox = function () {
        if (!this.multi_select) {
            return;
        }
        this.html.css({
            "padding-right": this.height
        });
        this.checkbox = new Dash.Gui.Checkbox(
            "dash_gui_combo_row_" + this.id + "_" + this.label_text + "_checkbox",
            false,
            this.color
        );
        // Always start unchecked
        if (!this.combo.init_labels_drawn) {
            this.checkbox.SetChecked(false);
        }
        // Make sure the tray doesn't close when selecting a checkbox
        this.checkbox.html.on("click", function (event) {
            event.stopPropagation();
        });
        (function (self) {
            self.checkbox.html.on("mouseenter", function () {
                self.set_highlight_active(true);
            });
        })(this);
        this.checkbox.html.css({
            "position": "absolute",
            "top": this.height * 0.2,
            "right": this.height * 0.2,
            "z-index": this.combo.rows.css("z-index") + 1
        });
        this.checkbox.SetIconColor(this.color_set.Text.Base);
        this.html.append(this.checkbox.html);
    };
    this.set_highlight_active = function (is_active) {
        if (is_active) {
            this.highlight.stop().animate({"opacity": 1}, 50);
        }
        else {
            this.highlight.stop().animate({"opacity": 0}, 100);
        }
    };
    this.setup_connections = function () {
        (function (self) {
            self.label.on("mouseenter", function () {
                self.set_highlight_active(true);
            });
            self.html.on("mouseleave", function () {
                self.set_highlight_active(false);
            });
            self.label.on("click", function (e) {
                if (self.multi_select) {
                    self.checkbox.Toggle();
                }
                else {
                    self.combo.on_selection(self.option);
                }
                e.preventDefault();
                return false;
            });
        })(this);
    };
    this.setup_styles();
}

/**@member DashGuiCombo*/
function DashGuiComboInterface () {
    this.SetReadOnly = function (read_only=false) {
        this.read_only = read_only;
    };
    this.DisableShowRowsOnEmptySearch = function () {
        // This is for ludicrously long lists, but really
        // should display a certain max of rows, or recent
        // rows, etc - but this is needed for a quick thing,
        // no time right now to fully work out a better version.
        this.show_rows_on_empty_search = false;
    };
    this.SetHoverHint = function (hint) {
        this.label_container.attr("title", hint);
    };
    this.GetMultiSelections = function (ids_only=true) {
        if (!this.multi_select) {
            return;
        }
        var selections = [];  // Selected option(s)
        for (var row of this.row_buttons) {
            if (row.IsMultiSelected()) {
                selections.push(ids_only ? row.option["id"] : row.option);
            }
        }
        return selections;
    };
    this.ClearAllMultiSelections = function () {
        if (!this.multi_select) {
            return;
        }
        for (var row of this.row_buttons) {
            if (row.IsMultiSelected()) {
                row.checkbox.Toggle(true);
            }
        }
        this.update_label_for_multi_select();
    };
    // See draw_click_skirt for override keys
    this.UpdateSkirtOverrides = function (overrides={}) {
        this.skirt_overrides = {
            ...this.skirt_overrides,
            ...overrides
        };
    };
    this.SetDefaultSearchSubmitCombo = function (combo_option) {
        // If the user has entered text in the search bar and has no results,
        // but hits enter/submits the entry anyway, this combo will be the result
        if (!Dash.Validate.Object(combo_option) || !combo_option["id"] || !(combo_option["label_text"] || combo_option["display_name"])) {
            console.log("Invalid combo option, cannot set default search submit combo:", combo_option);
            return;
        }
        this.default_search_submit_combo = combo_option;
    };
    this.EnableSearchSelection = function () {
        if (this.search_set_up) {
            return;
        }
        DashGuiComboSearch.call(this);
        this.setup_search_selection();
    };
    this.InFocus = function (check_search_only=false) {
        if (check_search_only) {
            return (this.search_input && this.search_input.InFocus());
        }
        if (this.search_input) {
            return this.search_input.InFocus();
        }
        return this.IsExpanded();
    };
    // TODO: Function to disable search selection if option list is reduced below this.searchable_min
    this.ShowTray = function () {
        if (!this.expanded) {
            this.show();
        }
    };
    this.HideTray = function () {
        if (this.expanded) {
            this.hide();
        }
    };
    this.IsExpanded = function () {
        return this.expanded;
    };
    // Only tested using the Default style
    this.UseAsIconButtonCombo = function (icon_name=null, icon_size_mult=null, icon_color=null) {
        if (icon_name || icon_size_mult) {
            this.dropdown_icon.html.remove();
            this.add_dropdown_icon(icon_size_mult || 0.75, icon_name);
        }
        this.html.css({
            "margin-left": Dash.Size.Padding * 0.5
        });
        this.inner_html.css({
            "background": "none"
        });
        this.dropdown_icon.html.css({
            "margin-left": 0,
            "inset": 0
        });
        this.label.remove();
        this.highlight.remove();
        this.dropdown_icon.SetColor(icon_color || this.color_set.Background.Base);
    };
    // Only tested using the Row style
    this.UseAsButtonCombo = function (label_text) {
        this.html.css({
            "background": this.color.Button.Background.Base,
            "padding-left": Dash.Size.Padding * 0.5
        });
        this.label.css({
            "color": this.color.Button.Text.Base,
            "padding-right": Dash.Size.Padding * 0.25
        });
        this.dropdown_icon.html.remove();
        this.add_dropdown_icon(0.7, "caret_down");
        this.dropdown_icon.SetColor(this.color.Button.Text.Base);
        var highlight_color = Dash.Color.GetTransparent(this.color.Button.Background.Base, 0.1);
        (function (self) {
            self.SetOnRowsDrawnCallback(function () {
                self.rows.css({
                    "background": self.color.Button.Text.Base,
                    "box-sizing": "border-box",
                    "border": "1px solid " + self.color.Button.Background.Base,
                    "box-shadow": "0px 0px 10px 1px rgba(0, 0, 0, 0.07)",
                });
                for (var button of self.row_buttons) {
                    button.label.css({
                        "color": self.color.Button.Background.Base,
                        "border-bottom": "1px solid " + self.color.Button.Background.Base
                    });
                    button.highlight.css({
                        "background": highlight_color
                    });
                }
            });
        })(this);
        this.SetStaticLabelText(label_text);
        this.as_button_combo = true;
    };
    this.DisableFlash = function () {
        this.flash_enabled = false;
    };
    this.SetStaticLabelText = function (value) {
        this.static_label_text = value;
        this.label.text(this.static_label_text);
    };
    this.SetOnRowsDrawnCallback = function (callback) {
        this.on_rows_drawn_cb = callback.bind(this.binder);
    };
    this.SetOnClickCallback = function (callback) {
        this.on_click_cb = callback.bind(this.binder);
    };
    this.SetGravityHeightOverride = function (value) {
        this.gravity_height_override = value;
    };
    this.SetGravityWidthOverride = function (value) {
        this.gravity_width_override = value;
    };
    this.SetGravityValueOverride = function (value) {
        this.gravity_value_override = value;
    };
    this.DisableAutoGravity = function () {
        this.auto_gravity = false;
    };
    this.SetListVerticalOffset = function (offset) {
        offset = parseInt(offset);
        if (!Number.isInteger(offset)) {
            console.error("Error: SetListVerticalOffset() requires an integer:", offset, typeof offset);
            return;
        }
        this.list_offset_vertical = offset;
    };
    this.Disable = function (fade=true, hide_icon=false) {
        if (this.disabled) {
            return;
        }
        this.disabled = true;
        var css = {
            "pointer-events": "none"
        };
        if (fade) {
            css["opacity"] = 0.5;
        }
        this.html.css(css);
        if (hide_icon && this.dropdown_icon) {
            this.dropdown_icon.html.hide();
        }
    };
    this.Enable = function () {
        if (!this.disabled) {
            return;
        }
        this.disabled = false;
        this.html.css({
            "opacity": 1,
            "pointer-events": "auto",
            "user-select": "auto"
        });
    };
    this.ActiveID = function () {
        return this.selected_option_id;
    };
    this.ActiveLabel = function () {
        return this.selected_option["label_text"] || this.selected_option["display_name"];
    };
    // Deprecated
    this.GetActiveOption = function () {
        return this.ActiveOption();
    };
    this.ActiveOption = function () {
        return this.selected_option;
    };
    this.Text = function () {
        return this.label.text();
    };
    this.SetLabel = function (content) {
        this.label.text(content["label"]);
    };
    this.SetWidth = function (width) {
        this.html.css({"width": width});
        this.rows.css({"width": width});
    };
    this.OptionList = function () {
        return this.option_list;
    };
    this.RefreshConnections = function () {
        this.html.off("mouseenter");
        this.html.off("mouseleave");
        this.html.off("click");
        this.setup_connections(true);
    };
    this.SetLoading = function (is_loading, align_right=false) {
        if (is_loading && this.load_dots) {
            return;
        }
        if (!is_loading && !this.load_dots) {
            return;
        }
        if (!is_loading && this.load_dots) {
            this.load_dots.Stop();
            this.load_dots.html.remove();
            this.load_dots = null;
            if (this.as_button_combo) {
                this.dropdown_icon.html.css({
                    "opacity": 1
                });
            }
            return;
        }
        if (!this.load_dots) {
            this.setup_load_dots(align_right || this.read_only || Boolean(this.as_button_combo));
            if (this.as_button_combo) {
                this.load_dots.SetColor(this.color.Button.Text.Base);
                this.load_dots.html.css({
                    "top": Dash.Size.Padding * 0.25,
                    "right": Dash.Size.Padding * 0.25
                });
                this.dropdown_icon.html.css({
                    "opacity": 0
                });
            }
        }
        this.load_dots.Start();
    };
    this.Request = function (endpoint, params, callback, binder=null) {
        if (!this.load_dots) {
            this.setup_load_dots();
        }
        if (this.load_dots.IsActive()) {
            console.log("Request already active...");
            return;
        }
        this.load_dots.Start();
        this.on_request_response_callback = null;
        binder = binder || this.binder;
        if (binder && callback) {
            this.on_request_response_callback = callback.bind(binder);
        }
        (function (self, endpoint, params) {
            Dash.Request(
                binder,
                function (response) {
                    self.load_dots.Stop();
                    if (self.on_request_response_callback) {
                        self.on_request_response_callback(response);
                    }
                },
                endpoint,
                params
            );
        })(this, endpoint, params);
    };
    // If the same item is selected, don't fire the callback on updating the list
    this.Update = function (combo_list=null, selected=null, ignore_callback=false) {
        if (this.multi_select) {
            this.update_label_for_multi_select();
            // Do we need to do more here?
            return;
        }
        if (selected !== null && typeof selected !== "object") {
            if (combo_list || this.option_list) {
                var combo;
                for (combo of (combo_list || this.option_list)) {
                    if (combo["id"].toString() === selected.toString()) {
                        selected = combo;
                        break;
                    }
                }
                // Some old code uses "none" for the default key, instead of "",
                // so this can help catch those old cases on a more broad level
                if (selected === "none") {
                    for (combo of (combo_list || this.option_list)) {
                        if (combo["id"] === "") {
                            selected = combo;
                            break;
                        }
                    }
                }
            }
            if (typeof selected !== "object") {
                if (
                       !(!this.option_list || this.option_list.length === 0)
                    && !(this.option_list.length === 1 && ["", "none"].includes(this.option_list[0]["id"])))
                {
                    console.warn(
                        "Warning: Failed to find 'selected' object in options list." +
                        "\n\ncombo_list:", combo_list, "\nselected:", selected,
                        "\nignore_callback:", ignore_callback, "\nthis.option_list:", this.option_list
                    );
                }
                // Previously, we would return in this case, but then valid option list changes wouldn't get updated
                selected = null;
            }
        }
        if (!ignore_callback && selected) {
            ignore_callback = (selected["id"].toString() === this.selected_option_id);
        }
        if (combo_list) {
            this.option_list = combo_list;
        }
        if (selected) {
            this.selected_option = selected;
            this.selected_option_id = selected["id"];
        }
        this.on_selection(this.selected_option, ignore_callback);
        if (this.bool) {
            this.option_list.reverse();
        }
    };
}

/**@member DashGuiCombo*/
function DashGuiComboStyleRow () {
    this.dropdown_icon_css ={
        "position": "relative",
        "display": "block",
        "margin-left": -(Dash.Size.Padding * 0.25),
        "pointer-events": "none"
    };
    this.setup_styles = function () {
        this.font_size = "100%";
        this.text_alignment = "left";
        this.label_background = this.color_set.Background.Base;
        this.html.append(this.highlight);
        this.html.append(this.click);
        this.html.append(this.label_container);
        this.html.append(this.rows);
        this.label_container.append(this.label);
        this.add_dropdown_icon(0.5);
        this.html.css({
            "margin-right": Dash.Size.Padding * 0.5,
            "height": Dash.Size.ButtonHeight,
            "line-height": Dash.Size.ButtonHeight + "px",
            "cursor": "pointer",
            "border-radius": Dash.Size.BorderRadius,
        });
        this.highlight.css({
            "position": "absolute",
            "left": 0,
            "top": 0,
            "width": "auto",
            "bottom": 0,
            "opacity": 0,
            "cursor": "pointer",
        });
        this.click.css({
            "position": "absolute",
            "left": 0,
            "top": "auto",
            "right": 0,
            "bottom": Dash.Size.Padding,
            "height": Dash.Size.Stroke,
            "opacity": 0,
        });
        this.label_container.css({
            "display": "flex",
        });
        this.label.css({
            "line-height": Dash.Size.RowHeight + "px",
            "text-align": "left",
            "color": this.color.Text,
            "white-space": "nowrap",
            "text-overflow": "ellipsis",
        });
        this.rows.css({
            "position": "absolute",
            "width": Dash.Size.ColumnWidth,
            "z-index": 10,
            "overflow": "hidden",
            "height": 0,
            "border-radius": Dash.Size.BorderRadius,
            "background": "orange",
        });
    };
}

/**@member DashGuiCombo*/
function DashGuiComboStyleDefault () {
    this.dropdown_icon_css = {
        "position": "relative",
        "display": "block",
        "right": Dash.Size.Padding * 0.5,
        "top": Dash.Size.Padding * 0.5,
        "margin-left": -(Dash.Size.Padding * 0.25),
        "pointer-events": "none"
    };
    this.setup_styles = function () {
        if (this.style === "default_bubbled") {
            this.list_offset_vertical = 4;
        }
        var height = Dash.Size.ButtonHeight - (this.style === "default_bubbled" ? this.list_offset_vertical : 0);
        var border_radius = this.style === "default_bubbled" ? Dash.Size.Padding * 2 : Dash.Size.BorderRadius;
        this.highlight_css = {
            "position": "absolute",
            "inset": 0,
            "background": this.color_set.Background.BaseHover,
            "border-radius": border_radius,
            "opacity": 0
        };
        this.font_size = "100%";
        this.text_alignment = "center";
        this.label_background = this.color_set.Background.Base;
        this.inner_html = $("<div></div>");
        this.html.append(this.inner_html);
        this.inner_html.append(this.highlight);
        this.inner_html.append(this.click);
        this.inner_html.append(this.label_container);
        this.inner_html.append(this.rows);
        this.label.text(this.label_text);
        this.label_container.css({
            "display": "flex"
        });
        this.label_container.append(this.label);
        this.add_dropdown_icon();
        this.html.css({
            "display": "flex",
            "height": height
        });
        this.inner_html.css({
            "background": this.label_background,
            "height": Dash.Size.ButtonHeight,
            "line-height": Dash.Size.ButtonHeight + "px",
            "cursor": "pointer",
            "border-radius": border_radius
        });
        if (this.style === "default_bubbled") {
            this.inner_html.css({
                "border": "2px solid " + this.color.StrokeLight,
                "box-sizing": "border-box"
            });
        }
        this.highlight.css(this.highlight_css);
        this.click.css({
            "position": "absolute",
            "inset": 0,
            "line-height": height + "px",
            "border-radius": border_radius,
            "background": this.color_set.Background.Base,
            "opacity": 0
        });
        this.label.css({
            "line-height": height + "px",
            "text-align": this.text_alignment,
            "font-size": this.font_size,
            "color": this.color_set.Text.Base,
            "white-space": "nowrap",
            "overflow": "hidden",
            "text-overflow": "ellipsis",
            "padding-left": Dash.Size.Padding,
            "padding-right": height
        });
        this.rows.css({
            "position": "absolute",
            "z-index": 10,
            "overflow": "hidden",
            "height": 0,
            "border-radius": border_radius,
            "background": "orange"
        });
    };
}

function DashGuiContext2D (
    c2d_id, can_edit=true, color=null, api="Context2D", preview_mode=false, override_mode=false, extra_request_params={}
) {
    /**
     * Context2D editor element.
     * -------------------------
     *
     * IMPORTANT NOTE: <br>
     *     For consistency across Dash, this takes an API name and object ID, and uses predetermined names
     *     for function calls. For each context this is used in, make sure to add the correct function names
     *     to the respective API file (which should be utilizing the Dash.Context2D module) as follows:
     *
     *         - "get_data":               Get data dict for provided object ID
     *         - "set_property":           Set property with a key/value for provided object ID
     *         - "set_layer_property":     Set layer property with a key/value for provided object ID
     *         - "set_layer_properties":   Set multiple layer properties with a single dict for provided object ID
     *         - "add_text_layer":         Add new text layer to provided object ID
     *         - "add_color_layer":        Add new color layer to provided object ID
     *         - "add_media_layer":        Add new media layer to provided object ID via media upload
     *         - "import_another_context": Import another context (layers) into provided object ID
     *         - "duplicate":              Duplicate the provided object ID as a new context (not tethered to the original) - backend function
     *                                     should call Dash.LocalStorage.Duplicate, unless there's a special need for a custom function
     *         - "duplicate_layer":        Duplicate the provided layer ID as a new layer (not tethered to the original)
     *         - "get_pil_preview":        Get PIL preview image URL of current state of provided object ID
     *         - "get_combo_options":      Get dict with keys for different combo option types, such as "fonts", with values being lists
     *                                     containing dicts that match the standard combo option format, such as {"id": "font_1", "label_text": "Font 1"}
     *
     *                                     Required/expected combo option type keys:
     *                                       - fonts (make sure 'url' and 'filename' are included in each option, alongside the usual 'id' and 'label_text')
     *                                       - contexts (all Context2D objects)
     *
     * @param {string} c2d_id - Object (context) ID (this will be included in requests as 'c2d_id')
     * @param {boolean} can_edit - Determines whether buttons, inputs, etc will be enabled (default=true)
     * @param {DashColorSet} color - DashColorSet instance (default=null)
     * @param {string} api - API name for requests (default="Context2D")
     * @param {boolean} preview_mode - When enabled, only shows a read-only "preview" of the context, hiding all the gui/tools (default=false)
     * @param {boolean} override_mode - When enabled, hides some gui/tools (default=false)
     * @param {Object} extra_request_params - Extra params to send on requests (default={})
     */
    this.c2d_id = c2d_id;
    this.api = api;
    this.color = color || Dash.Color.Light;
    this.can_edit = preview_mode ? false : can_edit;
    this.preview_mode = preview_mode;
    // As of writing, any changes made in this mode will have to be explicitly
    // handled on the backend by the custom abstraction of Dash.Context2D. In
    // the future, this can be baked into the core code if it makes sense to do so.
    this.override_mode = override_mode;
    this.extra_request_params = extra_request_params;
    this.data = null;
    this.canvas = null;
    this.log_bar = null;
    this.toolbar = null;
    this.initialized = false;
    this.editor_panel = null;
    this.ComboOptions = null;
    this.linked_preview = null;
    this.on_duplicate_cb = null;
    this.loading_overlay = null;
    this.html = $("<div></div>");
    this.left_pane_slider = null;
    this.right_pane_slider = null;
    this.middle_pane_slider = null;
    this.min_width_extensions = {};
    this.min_height_extensions = {};
    this.highlight_color = "#16f0ec";  // Arbitrary obvious color that is readable on light and dark backgrounds
    this.left_html = $("<div></div>");
    this.middle_html = $("<div></div>");
    this.refresh_ms = this.preview_mode ? 30000 : 5000;
    this.editor_panel_property_box_custom_fields_cb = null;
    this.opposite_color = Dash.Color.GetOpposite(this.color);
    this.refresh_data_request_failure_id = "dash_gui_context_2d_on_data";
    this.setup_styles = function () {
        var css = {
            "position": "absolute",
            "inset": 0
        };
        if (this.preview_mode) {
            css["user-select"] = "none";
            css["pointer-events"] = "none";
        }
        this.html.css(css);
        this.loading_overlay = new Dash.Gui.LoadingOverlay(this.color, "none", "Loading", this.html);
        Dash.SetInterval(this, this.refresh_data, this.refresh_ms);
        this.get_combo_options();
    };
    this.SetEditorPanelLayerProperty = function (key, value, id) {
        this.editor_panel.SetLayerProperty(key, value, id);
    };
    this.EditorPanelInputInFocus = function () {
        return this.editor_panel.InputInFocus();
    };
    this.CanvasInputInFocus = function () {
        return this.canvas.InputInFocus();
    };
    this.SetCanvasTool = function (name, cursor) {
        if (this.canvas) {
            this.canvas.SetTool(name, cursor);
        }
    };
    this.SetCanvasActivePrimitive = function (id) {
        if (this.canvas) {
            this.canvas.SetActivePrimitive(id);
        }
    };
    this.UpdateCanvasPrimitive = function (key, value, id="") {
        if (this.canvas) {
            this.canvas.UpdatePrimitive(key, value, id);
        }
    };
    this.DeselectAllCanvasPrimitives = function () {
        if (this.canvas) {
            this.canvas.DeselectAllPrimitives();
        }
    };
    this.UpdateCanvasPrimitiveZIndexes = function () {
        if (this.canvas) {
            this.canvas.UpdatePrimitiveZIndexes();
        }
    };
    this.AddCanvasPrimitive = function (layer, select=true) {
        if (this.canvas) {
            this.canvas.AddPrimitive(layer, select);
        }
    };
    this.RemoveAllCanvasPrimitives = function () {
        if (this.canvas) {
            this.canvas.RemoveAllPrimitives();
        }
    };
    this.RemoveCanvasPrimitive = function (id) {
        if (this.canvas) {
            this.canvas.RemovePrimitive(id);
        }
    };
    this.CanvasSizeInitialized = function () {
        if (this.canvas) {
            return this.canvas.SizeInitialized();
        }
    };
    this.ResizeCanvas = function () {
        if (this.canvas) {
            this.canvas.Resize();
        }
    };
    this.SelectLayer = function (id, from_canvas=true) {
        if (this.editor_panel) {
            this.editor_panel.SelectLayer(id, from_canvas);
        }
    };
    this.GetSelectedLayer = function () {
        if (this.editor_panel) {
            return this.editor_panel.GetSelectedLayer();
        }
        return null;
    };
    this.DeselectAllLayers = function () {
        this.editor_panel.layers_box.DeselectLayers();
        this.editor_panel.SwitchContentToNewTab();
        this.DeselectAllCanvasPrimitives();
    };
    this.SetOnDuplicateCallback = function (callback, binder=null) {
        this.on_duplicate_cb = binder ? callback.bind(binder) : callback;
    };
    this.SetLinkedPreview = function (preview) {
        if (!this.override_mode) {
            console.warn("Warning: SetLinkedPreview only works in Override Mode");
            return;
        }
        this.linked_preview = preview;
    };
    this.GetAspectRatio = function (calculated=false) {
        var aspect;
        if (this.editor_panel) {
            aspect = this.editor_panel.GetAspectRatio();
        }
        else {
            var data = this.get_data();
            aspect = [data["aspect_ratio_w"] || 1, data["aspect_ratio_h"] || 1];
        }
        if (calculated) {
            return aspect[0] / aspect[1];
        }
        return aspect;
    };
    this.AddToLog = function (message) {
        if (this.log_bar) {
            this.log_bar.Add(message);
        }
    };
    this.RedrawLayers = function (select=false, redraw_primitives=false) {
        this.editor_panel.RedrawLayers(select, redraw_primitives);
    };
    // This is useful when adding custom elements. Replicate this pattern for other panels as needed.
    this.ExtendEditorPanelContentBoxMinHeight = function (number) {
        this.min_height_extensions["editor_panel_content_box"] = number;
    };
    // This is useful when adding custom elements. Replicate this pattern for other panels as needed.
    this.ExtendEditorPanelPropertyBoxMinHeight = function (number) {
        this.min_height_extensions["editor_panel_property_box"] = number;
    };
    // This is useful when custom elements added to the panels are extra wide.
    this.ExtendEditorPanelPanelMinWidth = function (number) {
        this.min_width_extensions["editor_panel"] = number;
    };
    // Use this to add custom fields to the main property box
    this.SetEditorPanelPropertyBoxCustomFieldsCallback = function (callback, binder=null) {
        this.editor_panel_property_box_custom_fields_cb = binder ? callback.bind(binder) : callback;
    };
    this.AddCustomElementToEditorPanelContentNewTab = function (
        built_in_function_name="", built_in_function_params=[], callback_that_returns_html=null, binder=null
    ) {
        if (!this.editor_panel) {
            (function (self) {
                setTimeout(
                    function () {
                        self.AddCustomElementToEditorPanelContentNewTab(
                            built_in_function_name,
                            built_in_function_params,
                            callback_that_returns_html,
                            binder
                        );
                    },
                    1
                );
            })(this);
            return;
        }
        this.editor_panel.AddCustomElementToContentNewTab(
            built_in_function_name,
            built_in_function_params,
            callback_that_returns_html,
            binder
        );
    };
    this.AddCustomElementToEditorPanelContentEditTab = function (
        context_key, built_in_function_name="", built_in_function_params=[], callback_that_returns_html=null, binder=null
    ) {
        if (!this.editor_panel) {
            (function (self) {
                setTimeout(
                    function () {
                        self.AddCustomElementToEditorPanelContentEditTab(
                            context_key,
                            built_in_function_name,
                            built_in_function_params,
                            callback_that_returns_html,
                            binder
                        );
                    },
                    10
                );
            })(this);
            return;
        }
        this.editor_panel.AddCustomElementToContentEditTab(
            context_key,
            built_in_function_name,
            built_in_function_params,
            callback_that_returns_html,
            binder
        );
    };
    this.AddCustomContextToEditorPanelContentEditTab = function (context_key, callback_that_returns_html=null, binder=null) {
        if (!this.editor_panel) {
            (function (self) {
                setTimeout(
                    function () {
                        self.AddCustomContextToEditorPanelContentEditTab(context_key, callback_that_returns_html, binder);
                    },
                    10
                );
            })(this);
            return;
        }
        this.editor_panel.AddCustomContextToContentEditTab(context_key, callback_that_returns_html, binder);
    };
    // Intended for use by abstractions/extensions of this code
    this.SetCanvasOnPrimitiveUpdated = function (callback, binder=null) {
        if (!this.canvas) {
            (function (self) {
                setTimeout(
                    function () {
                        self.SetCanvasOnPrimitiveUpdated(callback, binder);
                    },
                    10
                );
            })(this);
            return;
        }
        this.canvas.OnPrimitiveUpdated = binder ? callback.bind(binder) : callback;
    };
    this.initialize = function () {
        if (this.initialized) {
            return;
        }
        this.initialized = true;
        var abs_css = {
            "position": "absolute",
            "inset": 0
        };
        this.html.css({
            "box-sizing": "border-box",
            "background": this.color.Pinstripe,
            "border": this.preview_mode ? "" : ("2px solid " + this.color.StrokeLight),
            ...abs_css
        });
        this.canvas = new DashGuiContext2DCanvas(this);
        if (this.preview_mode) {
            this.editor_panel = new DashGuiContext2DEditorPanel(this);
            this.html.append(this.canvas.html);
            (function (self) {
                requestAnimationFrame(function () {
                    self.ResizeCanvas();
                });
            })(this);
        }
        else {
            this.log_bar = new DashGuiContext2DLogBar(this);
            this.toolbar = new DashGuiContext2DToolbar(this);
            this.editor_panel = new DashGuiContext2DEditorPanel(this);
            this.middle_pane_slider = new Dash.Layout.PaneSlider(
                this,
                true,
                this.log_bar.min_height,
                "dash_gui_context_2d_middle" + (this.override_mode ? "_override" : "")
            );
            this.left_pane_slider = new Dash.Layout.PaneSlider(
                this,
                false,
                this.toolbar.min_width,
                "dash_gui_context_2d_left" + (this.override_mode ? "_override" : ""),
                true
            );
            this.right_pane_slider = new Dash.Layout.PaneSlider(
                this,
                false,
                this.editor_panel.min_width,
                "dash_gui_context_2d_right" + (this.override_mode ? "_override" : "")
            );
            this.right_pane_slider.SetPaneContentA(this.left_html);
            this.right_pane_slider.SetPaneContentB(this.editor_panel.html);
            this.html.append(this.right_pane_slider.html);
            this.left_pane_slider.SetPaneContentA(this.toolbar.html);
            this.left_pane_slider.SetPaneContentB(this.middle_html);
            this.left_html.css({
                "border-right": "1px solid " + this.color.StrokeLight,
                ...abs_css
            });
            this.left_html.append(this.left_pane_slider.html);
            this.middle_pane_slider.SetPaneContentA(this.canvas.html);
            this.middle_pane_slider.SetPaneContentB(this.log_bar.html);
            this.middle_html.css({
                "border-left": "1px solid " + this.color.StrokeLight,
                ...abs_css
            });
            this.middle_html.append(this.middle_pane_slider.html);
            this.editor_panel.UpdatePropertyBox();
            this.editor_panel.UpdateContentBoxComboOptions();
        }
        this.loading_overlay.Stop();
        this.loading_overlay.Hide();
    };
    this.refresh_data = function () {
        Dash.Request(
            this,
            this.on_data,
            this.api,
            {
                "f": "get_data",
                "c2d_id": this.c2d_id,
                ...this.extra_request_params
            }
        );
    };
    this.on_data = function (response) {
        if (!Dash.Validate.Response(response)) {
            Dash.Requests.TrackRequestFailureForID(
                this.refresh_data_request_failure_id,
                parseInt(30 / (this.refresh_ms / 1000))
            );
            return;
        }
        Dash.Requests.ResetRequestFailuresForID(this.refresh_data_request_failure_id);
        this.data = response;
        if (this.ComboOptions && !this.initialized) {
            this.initialize();
        }
        if (!this.preview_mode) {
            console.log("Context2D data:", this.data);
        }
        if (this.initialized && this.editor_panel && !this.preview_mode) {
            this.editor_panel.UpdatePropertyBox();
        }
    };
    this.get_combo_options = function (extra_params={}, callback=null) {
        (function (self) {
            Dash.Request(
                self,
                function (response) {
                    if (!Dash.Validate.Response(response)) {
                        return;
                    }
                    if ("error" in response) {
                        delete response["error"];
                    }
                    self.ComboOptions = response;
                    if (self.data && !self.initialized) {
                        self.initialize();
                    }
                    console.log("Context2D combo options:", self.ComboOptions);
                    if (self.initialized && self.editor_panel && !self.preview_mode) {
                        self.editor_panel.UpdateContentBoxComboOptions();
                    }
                    if (callback) {
                        callback();
                    }
                },
                self.api,
                {
                    "f": "get_combo_options",
                    "c2d_id": self.c2d_id,
                    ...extra_params
                }
            );
        })(this);
    };
    this.get_data = function () {
        return this.data;
    };
    this.set_data = function (key, value, callback=null, additional_params={}) {
        // Should never happen, but just in case
        if (this.preview_mode) {
            return;
        }
        if (this.get_data(key) === value) {
            return;
        }
        if (typeof value === "object") {
            value = JSON.stringify(value);
        }
        (function (self) {
            Dash.Request(
                self,
                function (response) {
                    if (!Dash.Validate.Response(response)) {
                        return;
                    }
                    self.on_set_data(response, key, value, callback);
                    if (self.linked_preview) {
                        self.linked_preview.on_set_data(response, key, value);  // Don't pass callback here
                    }
                },
                self.api,
                {
                    "f": "set_property",
                    "c2d_id": self.c2d_id,
                    "key": key + (self.override_mode ? "_override" : ""),
                    "value": value,
                    ...self.extra_request_params,
                    ...additional_params
                }
            );
        })(this);
    };
    this.on_set_data = function (response, key, value, callback=null) {
        this.data = response;
        // Aspect ratio change logging happens on canvas resize
        if (key !== "aspect_ratio_w" && key !== "aspect_ratio_h" && key !== "layer_order") {
            this.AddToLog(key.Title() + " set to: " + value);
        }
        if (this.editor_panel) {
            this.editor_panel.UpdatePropertyBox();
        }
        if (callback) {
            callback();
        }
    };
    this.setup_styles();
}

function DashGuiContext2DCanvas (editor) {
    this.editor = editor;
    this.primitives = {};
    this.active_tool = "";
    this.last_aspect_ratio = null;
    this.html = $("<div></div>");
    this.size_initialized = false;
    this.resize_event_timer = null;
    this.skip_resize_event = false;
    this.color = this.editor.color;
    this.canvas = $("<div></div>");
    this.border = $("<div></div>");
    this.top_mask = $("<div></div>");
    this.left_mask = $("<div></div>");
    this.right_mask = $("<div></div>");
    this.bottom_mask = $("<div></div>");
    this.last_selected_primitive = null;
    this.opposite_color = this.editor.opposite_color;
    this.padding = this.editor.preview_mode ? 0 : (Dash.Size.Padding * 2);
    this.setup_styles = function () {
        this.html.css({
            "position": "absolute",
            "inset": 0,
            "background": this.color.Stroke,
            "box-sizing": "border-box",
            "border-bottom": this.editor.preview_mode ? "" : ("1px solid " + this.color.StrokeLight),
            "padding": this.padding,
            "overflow": "hidden",
            "z-index": 1
        });
        var calc = "calc(100% - " + (this.padding * 2) + "px)";
        var css = {
            "width": calc,
            "height": calc,
            "position": "absolute",
            "top": "50%",
            "left": "50%",
            "transform": "translate(-50%, -50%)"
        };
        this.canvas.css({
            "background": this.color.Background,
            "z-index": 2,
            ...css
        });
        this.canvas.hide();
        this.border.css({
            "z-index": 999999999,
            "user-select": "none",
            "pointer-events": "none",
            ...css,
            "border": "1px solid " + this.opposite_color.StrokeDark,
        });
        this.border.hide();
        this.html.append(this.canvas);
        this.html.append(this.border);
        this.setup_connections();
    };
    this.InputInFocus = function () {
        for (var id in this.primitives) {
            if (this.primitives[id].InputInFocus()) {
                return true;
            }
        }
        return false;
    };
    this.GetActiveTool = function () {
        return this.active_tool;
    };
    this.SizeInitialized = function () {
        return this.size_initialized;
    };
    this.SetTool = function (name, cursor="grab") {
        this.active_tool = name;
        this.canvas.css({
            "cursor": cursor
        });
    };
    this.UpdatePrimitive = function (key, value, id="") {
        if (id && this.primitives[id]) {
            this.primitives[id].Update(key, value);
            return;
        }
        if (!this.last_selected_primitive) {
            return;
        }
        this.last_selected_primitive.Update(key, value);
    };
    this.SetActivePrimitive = function (id) {
        if (!this.primitives[id]) {
            return;
        }
        this.primitives[id].Select();
        this.last_selected_primitive = this.primitives[id];
    };
    this.AddPrimitive = function (layer, select=true) {
        var id = layer.GetID();
        if (this.primitives[id]) {
            return;
        }
        this.primitives[id] = new DashGuiContext2DPrimitive(this, layer);
        this.canvas.append(this.primitives[id].html);
        if (select) {
            this.SetActivePrimitive(id);
        }
    };
    this.RemoveAllPrimitives = function () {
        for (var id in this.primitives) {
            this.RemovePrimitive(id);
        }
    };
    this.UpdateAllChildrenPrimitives = function (parent_id, key, value) {
        for (var id in this.primitives) {
            if (this.primitives[id].parent_id !== parent_id) {
                continue;
            }
            this.primitives[id].Update(key, value);
        }
    };
    this.RemovePrimitive = function (id, _update_z_indexes=true) {
        if (!this.primitives[id]) {
            return;
        }
        if (this.primitives[id].data["type"] === "context") {
            var imported_context = this.primitives[id].data["imported_context"];
            var default_order = imported_context["layers"]["order"];
            // Do not use this.primitives[id].layer.GetChildrenLayerOrder() here
            var order = !this.primitives[id].get_value("linked") ? default_order : (imported_context["context_overrides"]["layer_order"] || default_order);
            for (var layer_id of order) {
                this.RemovePrimitive(layer_id, false);
            }
        }
        this.primitives[id].html.remove();
        delete this.primitives[id];
        if (_update_z_indexes) {
            this.UpdatePrimitiveZIndexes();
        }
    };
    this.GetHeight = function () {
        return this.canvas.innerHeight();
    };
    this.GetWidth = function () {
        return this.canvas.innerWidth();
    };
    this.DeselectAllPrimitives = function () {
        for (var id in this.primitives) {
            this.primitives[id].Deselect();
        }
        this.last_selected_primitive = null;
    };
    // To be called by primitive
    this.OnPrimitiveSelected = function (primitive, select_layer=false) {
        this.last_selected_primitive = primitive;
        if (!select_layer) {
            return;
        }
        for (var id in this.primitives) {
            if (this.primitives[id] !== primitive) {
                continue;
            }
            this.editor.SelectLayer(id);
            break;
        }
    };
    this.Resize = function (from_event=false) {
        if (!from_event) {
            this.skip_resize_event = true;
        }
        var css;
        var aspect_ratio = this.editor.GetAspectRatio();
        var w = aspect_ratio[0];
        var h = aspect_ratio[1];
        var html_width = this.html.innerWidth() - (this.padding * 2);
        var html_height = this.html.innerHeight() - (this.padding * 2);
        // Horizontal aspect
        if (w > h) {
            if (html_width > html_height && (html_width * (h / w)) > html_height) {
                html_width = html_height * (w / h);
            }
            css = {
                "width": html_width,
                "height": html_width * (h / w)
            };
        }
        // Vertical aspect
        else if (w < h) {
            if (html_height > html_width && (html_height * (w / h)) > html_width) {
                html_height = html_width * (h / w);
            }
            css = {
                "width": html_height * (w / h),
                "height": html_height
            };
        }
        // Square aspect
        else {
            if (html_width > html_height) {
                css = {
                    "width": html_height,
                    "height": html_height
                };
            }
            else if (html_width < html_height) {
                css = {
                    "width": html_width,
                    "height": html_width
                };
            }
            else {
                css = {
                    "width": html_width,
                    "height": html_height
                };
            }
        }
        this.canvas.css(css);
        this.border.css(css);
        if (!this.last_aspect_ratio || this.last_aspect_ratio[0] !== w || this.last_aspect_ratio[1] !== h) {
            this.editor.AddToLog("Canvas aspect ratio set to: " + w + "/" + h);
        }
        this.last_aspect_ratio = aspect_ratio;
        for (var id in this.primitives) {
            this.primitives[id].OnCanvasResize();
        }
        if (this.size_initialized) {
            this.set_mask_width_and_height();
            return;
        }
        this.canvas.show();
        if (!this.editor.preview_mode) {
            this.border.show();
        }
        this.setup_masks();
        this.add_observer();
        this.size_initialized = true;
    };
    this.UpdatePrimitiveZIndexes = function () {
        for (var id in this.primitives) {
            this.primitives[id].UpdateZIndex();
        }
    };
    this.OnPrimitiveUpdated = function (primitive, key, value) {
        // Intended to be overwritten by abstractions/extensions of this code
    };
    this.add_observer = function () {
        (function (self) {
            new ResizeObserver(function () {
                if (self.skip_resize_event) {
                    self.skip_resize_event = false;
                    return;
                }
                if (self.resize_event_timer) {
                    clearTimeout(self.resize_event_timer);
                }
                self.resize_event_timer = setTimeout(
                    function () {
                        self.Resize(true);
                    },
                    50
                );
            }).observe(self.html[0]);
        })(this);
    };
    this.setup_masks = function () {
        if (this.editor.preview_mode) {
            return;
        }
        var css = {
            "position": "absolute",
            "z-index": 999999998,
            "user-select": "none",
            "pointer-events": "none",
            "background": this.color.Stroke
        };
        this.top_mask.css({
            ...css,
            "top": 0
        });
        this.left_mask.css({
            ...css,
            "top": 0,
            "left": 0,
            "bottom": 0
        });
        this.right_mask.css({
            ...css,
            "top": 0,
            "right": 0,
            "bottom": 0
        });
        this.bottom_mask.css({
            ...css,
            "bottom": 0
        });
        this.set_mask_width_and_height();
        this.html.append(this.top_mask);
        this.html.append(this.left_mask);
        this.html.append(this.right_mask);
        this.html.append(this.bottom_mask);
    };
    this.set_mask_width_and_height = function () {
        var [width, height] = this.get_mask_width_and_height();
        this.top_mask.css({
            "left": width,
            "right": width,
            "height": height
        });
        this.left_mask.css({
            "width": width
        });
        this.right_mask.css({
            "width": width
        });
        this.bottom_mask.css({
            "left": width,
            "right": width,
            "height": height
        });
    };
    this.get_mask_width_and_height = function () {
        return [  // -2 for border and an extra pixel
            ((this.html.outerWidth() - this.GetWidth()) / 2) - 2,
            ((this.html.outerHeight() - this.GetHeight()) / 2) - 2
        ];
    };
    this.setup_connections = function () {
        if (!this.editor.can_edit) {
            return;
        }
        (function (self) {
            self.html.on("mousedown", function (e) {
                if (self.last_selected_primitive) {
                    self.last_selected_primitive.OnDragStart(e);
                }
            });
            self.html.on("mousemove", function (e) {
                // Left mouse button is still down (https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons)
                if (self.last_selected_primitive && e.buttons % 2 !== 0) {
                    self.last_selected_primitive.OnDrag(e);
                }
                e.preventDefault();
            });
            self.html.on("mouseup", function (e) {
                if (self.last_selected_primitive) {
                    self.last_selected_primitive.OnDragStop(e);
                }
            });
            self.html.on("click", function () {
                if (self.last_selected_primitive && self.last_selected_primitive.drag_cooldown) {
                    return;
                }
                self.editor.DeselectAllLayers();
            });
        })(this);
    };
    this.setup_styles();
}

function DashGuiContext2DLogBar (editor) {
    this.editor = editor;
    this.list = null;
    this.messages = [];
    this.min_height = null;
    this.html = $("<div></div>");
    this.color = this.editor.color;
    this.opposite_color = this.editor.opposite_color;
    // This won't be super useful at first, but lays the groundwork for a history/undo system that can come later
    this.setup_styles = function () {
        this.html.css({
            "position": "absolute",
            "inset": 0,
            "box-sizing": "border-box",
            "background": this.color.Stroke,
            "border-top": "1px solid " + this.color.StrokeLight,
            "padding": Dash.Size.Padding * 0.5
        });
        this.add_list();
    };
    this.Add = function (message) {
        this.messages.push(message);
        this.list.AddRow(this.messages.length, true);
        this.list.ScrollToBottom();
    };
    this.add_list = function () {
        this.list = new Dash.Layout.RevolvingList(
            this,
            this.get_column_config(),
            this.color,
            false,
            {"row_height": Dash.Size.RowHeight * 1.2}  // This is minimum height for the scroll bar to not look wonky
        );
        this.list.DisableRowEvents();
        this.min_height = this.list.full_row_height + 1;
        this.html.append(this.list.html);
    };
    this.get_column_config = function () {
        var config = new Dash.Layout.List.ColumnConfig();
        config.AddFlexText(
            "message",
            "",
            0.25,
            {"color": this.opposite_color.Stroke}
        );
        return config;
    };
    this.GetDataForKey = function (row_id) {
        return this.messages[row_id - 1];
    };
    this.setup_styles();
}

function DashGuiContext2DTool (toolbar, icon_name, hover_hint="", hotkey="", cursor="") {
    this.toolbar = toolbar;
    this.icon_name = icon_name;
    this.hover_hint = hover_hint || this.icon_name.Title();
    this.hotkey = hotkey || this.hover_hint[0];
    this.cursor = cursor || (
        this.icon_name === "move" ? this.icon_name : "url(https://dash.guide/github/dash/client/full/bin/img/cursor/" + this.icon_name + ".png), grab"
    );
    this.selected = false;
    this.icon_button = null;
    this.html = $("<div></div>");
    this.color = this.toolbar.color;
    this.editor = this.toolbar.editor;
    this.can_edit = this.toolbar.can_edit;
    this.size = this.toolbar.min_width - (this.toolbar.padding * 2) - 2;
    this.setup_styles = function () {
        this.html.css({
            "border-radius": Dash.Size.BorderRadius,
            "height": this.size,
            "width": this.size,
            "margin-top": Dash.Size.Padding,
            "margin-bottom": 0,
            "margin-left": "auto",
            "margin-right": "auto"
        });
        this.validate_hotkey();
        this.add_hotkey_letter();
        this.add_icon_button();
        this.setup_connections();
    };
    this.Deselect = function () {
        if (!this.selected) {
            return;
        }
        this.html.css({
            "background": ""
        });
        this.selected = false;
    };
    this.Select = function () {
        if (this.selected) {
            return;
        }
        this.toolbar.DeselectTools();
        this.html.css({
            "background": this.color.PinstripeDark
        });
        this.editor.SetCanvasTool(this.icon_name, this.cursor);
        if (this.editor.editor_panel) {
            this.editor.editor_panel.UpdatePropertyBoxToolSlider(this.icon_name);
        }
        if (this.toolbar.initialized) {
            this.editor.AddToLog("Selected tool: " + this.hover_hint);
        }
        this.selected = true;
    };
    this.on_click = function () {
        this.Select();
        // Anything else?
    };
    this.add_hotkey_letter = function () {
        if (!this.hotkey) {
            return;
        }
        var letter = $("<div>" + this.hotkey + "</div>");
        letter.css({
            "position": "absolute",
            "bottom": 0,
            "right": 0,
            "color": this.color.Stroke,
            "font-family": "sans_serif_bold",
            "font-size": "75%",
            "user-select": "none",
            "pointer-events": "none"
        });
        this.html.append(letter);
    };
    this.add_icon_button = function () {
        this.icon_button = new Dash.Gui.IconButton(
            this.icon_name,
            this.on_click,
            this,
            this.color,
            {
                "container_size": this.size,
                "size_mult": this.icon_name === "rotate" ? 0.65 : 0.69
            }
        );
        this.icon_button.SetHoverHint(this.hover_hint);
        if (!this.can_edit) {
            this.icon_button.Disable();
        }
        this.html.append(this.icon_button.html);
    };
    this.setup_connections = function () {
        if (!this.can_edit) {
            return;
        }
        (function (self) {
            self.html.on("mouseenter", function () {
                if (self.selected) {
                    return;
                }
                self.html.css({
                    "background": self.color.Pinstripe
                });
            });
            self.html.on("mouseleave", function () {
                if (self.selected) {
                    return;
                }
                self.html.css({
                    "background": ""
                });
            });
        })(this);
    };
    this.validate_hotkey = function () {
        if (!this.hotkey) {
            return;
        }
        for (var tool of this.toolbar.tools) {
            if (tool.hotkey !== this.hotkey) {
                continue;
            }
            console.warn("Duplicate hotkey:", this.hotkey);
            this.hotkey = "";
            return;
        }
        this.hover_hint += " [" + this.hotkey + "]";
    };
    this.setup_styles();
}

function DashGuiContext2DToolbar (editor) {
    this.editor = editor;
    this.tools = [];
    this.pil_data = null;
    this.pil_button = null;
    this.pil_preview = null;
    this.initialized = false;
    this.pil_interval = null;
    this.html = $("<div></div>");
    this.pil_button_active = false;
    this.color = this.editor.color;
    this.can_edit = this.editor.can_edit;
    this.padding = Dash.Size.Padding * 0.5;
    this.min_width = Dash.Size.ColumnWidth * 0.3;
    this.opposite_color = this.editor.opposite_color;
    this.setup_styles = function () {
        this.html.css({
            "position": "absolute",
            "inset": 0,
            "display": "flex",
            "flex-direction": "column",
            "box-sizing": "border-box",
            "border-right": "1px solid " + this.color.StrokeLight,
            "padding": this.padding
        });
        this.add_header();
        this.add_tools();
        this.add_pil_button();
        this.setup_connections();
        this.initialized = true;
    };
    this.DeselectTools = function () {
        for (var tool of this.tools) {
            tool.Deselect();
        }
    };
    this.add_pil_button = function () {
        this.html.append(Dash.Gui.GetFlexSpacer());
        this.pil_button = new Dash.Gui.Button(
            "PIL",
            this.on_pil_button_toggled,
            this,
            this.color,
            {"style": "toolbar"}
        );
        this.pil_button.html.css({
            "box-sizing": "border-box",
            "margin": 0
        });
        this.pil_button.label.css({
            "padding-left": Dash.Size.Padding * 0.5,
            "padding-right": Dash.Size.Padding * 0.5,
            "font-family": "sans_serif_bold",
            "letter-spacing": Dash.Size.Padding * 0.1,
            "overflow": "visible",
            "user-select": "none"
        });
        this.pil_button.html.attr(
            "title",
            "Toggle preview of rendered PIL image\n(takes a few seconds to generate)"
        );
        this.pil_button.DisableHoverTextColorChange();
        this.pil_button.SetColor("none", this.color.Pinstripe, null, null, this.color.Button.Background.Base);
        this.html.append(this.pil_button.html);
    };
    this.on_pil_button_toggled = function () {
        this.pil_data = null;
        this.pil_button_active = !this.pil_button_active;
        if (!this.pil_button_active) {
            this.disable_pil_button();
            return;
        }
        this.pil_button.SetColor(this.color.PinstripeDark);
        this.pil_button.SetLoading(true, 1, true, this.opposite_color);
        this.pil_button.Disable();
        this.pil_interval = Dash.SetInterval(this, this.refresh_pil_data, 5000);
    };
    this.disable_pil_button = function () {
        if (this.pil_preview) {
            this.pil_preview.hide();
        }
        this.pil_button.SetLoading(false);
        this.pil_button.Enable();
        this.pil_button.SetColor("none");
        if (this.pil_interval) {
            clearInterval(this.pil_interval);
            this.pil_interval = null;
        }
    };
    this.refresh_pil_data = function () {
        (function (self) {
            Dash.Request(
                self,
                function (response) {
                    if (!Dash.Validate.Response(response)) {
                        self.disable_pil_button();
                        return;
                    }
                    if (!self.pil_button_active) {
                        self.disable_pil_button();
                        return;
                    }
                    if (!self.pil_data || (self.pil_data && response["url"] !== self.pil_data["url"])) {
                        self.update_pil_preview(response["url"]);
                    }
                    if (!self.pil_data) {
                        self.pil_button.SetLoading(false);
                        self.pil_button.Enable();
                    }
                    self.pil_data = response;
                },
                self.editor.api,
                {
                    "f": "get_pil_preview",
                    "c2d_id": self.editor.c2d_id,
                    ...self.editor.extra_request_params
                }
            );
        })(this);
    };
    this.update_pil_preview = function (url) {
        var css = {"background-image": "url(" + url + ")"};
        if (!this.pil_preview) {
            this.pil_preview = $("<div></div>");
            css = {
                ...css,
                "background-repeat": "no-repeat",
                "background-size": "contain",
                "background-position": "center center",
                "position": "absolute",
                "inset": 0,
                "z-index": 999999998,
                "user-select": "none",
                "pointer-events": "none"
            };
            this.editor.canvas.canvas.append(this.pil_preview);
        }
        else {
            this.pil_preview.show();
        }
        this.pil_preview.css(css);
    };
    this.add_header = function () {
        var icon = new Dash.Gui.Icon(this.color, "tools", Dash.Size.ButtonHeight, 0.75, this.color.AccentGood);
        icon.html.css({
            "margin-top": 0,
            "margin-bottom": 0,
            "margin-left": "auto",
            "margin-right": "auto",
            "pointer-events": "none",
            "user-select": "none"
        });
        var label = $("<div>Tools</div>");
        label.css({
            "text-align": "center",
            "font-family": "sans_serif_bold",
            "font-size": "90%",
            "color": this.color.Stroke,
            "padding-bottom": Dash.Size.Padding * 0.1,
            "border-bottom": "1px solid " + this.color.PinstripeDark,
            "pointer-events": "none",
            "user-select": "none",
            "cursor": "default"
        });
        this.html.append(icon.html);
        this.html.append(label);
    };
    this.add_tools = function () {
        for (var icon_name of ["move", "rotate", "scale"]) {
            var tool = new DashGuiContext2DTool(this, icon_name);
            this.html.append(tool.html);
            this.tools.push(tool);
        }
        // First tool is selected by default
        this.tools[0].Select();
    };
    this.setup_connections = function () {
        if (!this.can_edit) {
            return;
        }
        var identifier = "dash_gui_context_2d_toolbar" + (this.editor.override_mode ? "_override" : "");
        (function (self) {
            $(document).on(
                "keydown." + identifier,  // Adding an ID to the event listener allows us to kill this specific listener
                function (e) {
                    if (self.html && !self.html.is(":visible")) {
                        $(document).off("keydown." + identifier);
                        return;
                    }
                    if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) {
                        return;
                    }
                    for (var tool of self.tools) {
                        if (tool.hotkey.toLowerCase() !== e.key) {
                            continue;
                        }
                        // Ignore if typing in an input
                        if (self.editor.EditorPanelInputInFocus() || self.editor.CanvasInputInFocus()) {
                            continue;
                        }
                        tool.Select();
                        break;
                    }
                }
            );
        })(this);
    };
    this.setup_styles();
}

function DashGuiContext2DPrimitive (canvas, layer) {
    this.canvas = canvas;
    this.layer = layer;
    this.top_px = 0;
    this.left_px = 0;
    this.width_px = 0;
    this.height_px = 0;
    this.selected = false;
    this.width_px_max = 0;
    this.width_px_min = 5;
    this.height_px_max = 0;
    this.drag_state = null;
    this.height_px_min = 5;
    this.drag_active = false;
    this.drag_context = null;
    this.z_index_mult = 1000;
    this.z_index_base = 1010;
    this.drag_cooldown = false;
    this.last_width_norm = null;
    this.color = this.canvas.color;
    this.data = this.layer.GetData();
    this.editor = this.canvas.editor;
    this.draw_properties_pending = false;
    this.file_data = this.data["file"] || {};
    this.parent_id = this.layer.GetParentID();
    this.parent_data = this.layer.GetParentData();
    this.opposite_color = this.editor.opposite_color;
    this.highlight_color = this.editor.highlight_color;
    this.html = $("<div class='DashGuiContext2DPrimitive'></div>");
    this.hover_color = Dash.Color.GetTransparent(this.highlight_color, 0.5);
    this.id = this.data["id"];
    this.type = this.data["type"] || "";
    this.setup_styles = function () {
        this.set_max();
        if (!this.call_style()) {
            return;
        }
        this.set_init(false);
        var css = {
            "position": "absolute",
            "z-index": this.get_z_index(),
            // Retain the physical space of the border, just make it invisible
            // (this prevents the box from appearing to "jitter" when the border is toggled)
            "border": "1px solid rgba(0, 0, 0, 0)"
        };
        if (this.type === "context") {
            css["pointer-events"] = "none";
        }
        this.html.css(css);
        this.draw_properties(true);
        this.on_opacity_change(this.get_value("opacity"));
        var hidden = this.get_value("hidden");
        var locked = this.get_value("locked");
        var contained = this.get_value("contained");
        var fade_direction = this.get_value("fade_direction");
        if (hidden) {
            this.on_hidden_change(hidden);
        }
        if (locked) {
            this.on_locked_change(locked);
        }
        if (!contained) {
            this.on_contained_change(contained);
        }
        if (fade_direction) {
            this.update_fade();
        }
        this.setup_connections();
    };
    this.InputInFocus = function () {
        if (this.type !== "text") {
            return false;
        }
        return this.text_area.InFocus();
    };
    this.UpdateZIndex = function () {
        this.html.css({
            "z-index": this.get_z_index()
        });
    };
    this.Update = function (key, value) {
        if (key === "display_name") {
            return;
        }
        this.data = this.layer.GetData();
        this.file_data = this.data["file"] || {};
        this.parent_data = this.layer.GetParentData();
        if (key === "opacity") {
            this.on_opacity_change(this.get_value(key));
        }
        else if (key === "locked") {
            this.on_locked_change(value);
        }
        else if (key === "hidden") {
            this.on_hidden_change(value);
        }
        else if (key === "contained") {
            this.on_contained_change(value);
        }
        else if (key === "linked" && this.parent_id) {
            this.on_linked_change();
        }
        else if (key.startsWith("fade_")) {
            this.update_fade();
        }
        if (!value && (key === "locked" || key === "hidden")) {
            this.Select();
        }
        this.on_update(key);
        this.canvas.OnPrimitiveUpdated(this, key, value);
        if (this.type === "context") {
            this.canvas.UpdateAllChildrenPrimitives(this.id, key, value);
        }
    };
    this.IsSelected = function () {
        return this.selected;
    };
    this.Deselect = function () {
        if (!this.selected || this.drag_active) {
            return;
        }
        var css = {
            // Retain the physical space of the border, just make it invisible
            // (this prevents the box from appearing to "jitter" when the border is toggled)
            "border": "1px solid rgba(0, 0, 0, 0)"
        };
        if (this.type === "context") {
            css["pointer-events"] = "none";
        }
        this.html.css(css);
        if (this.type === "text") {
            this.lock_text_area();
        }
        this.selected = false;
    };
    this.Select = function (from_click=false, border=true) {
        if (this.selected) {
            return;
        }
        if (from_click && this.type === "context") {
            return;
        }
        if (from_click && this.parent_id && this.canvas.primitives[this.parent_id].IsSelected()) {
            return;
        }
        var locked = this.get_value("locked");
        if (from_click && locked) {
            return;
        }
        this.canvas.DeselectAllPrimitives();
        var css = (border && !this.editor.preview_mode) ? {"border": "1px solid " + this.highlight_color} : {};
        if (this.type === "context") {
            css["pointer-events"] = "none";
        }
        // When a layer is hovered in the layer stack, it adds +0.1 to the brightness
        // to indicate in the canvas which layer is hovered over in the layer stack,
        // so when selected, we want to remove that slight highlight
        if (this.hasOwnProperty("update_filter")) {
            this.update_filter(this.get_value("brightness"));
        }
        else {
            css["filter"] = "brightness(" + this.get_value("brightness") + ")";
        }
        this.html.css(css);
        this.canvas.OnPrimitiveSelected(this, from_click);
        if (!locked && this.type === "text") {
            this.unlock_text_area();
            this.focus_text_area();
        }
        this.selected = true;
    };
    this.OnCanvasResize = function () {
        this.set_scale(null, null, false);
        this.set_position();
        this.set_max();
    };
    this.OnDragStart = function (event) {
        if (this.drag_active || this.get_value("locked")) {
            return;
        }
        this.drag_active = true;
        this.Select(true);
        var active_tool = this.canvas.GetActiveTool();
        this.drag_context = {
            "scale": active_tool === "scale",
            "rotate": active_tool === "rotate",
            "start_rot": parseFloat(this.data["rot_deg"]),
            "start_mouse_offset_x": event.offsetX,
            "start_mouse_offset_y": event.offsetY,
            "start_img_px_x": this.left_px,
            "start_img_px_y": this.top_px,
            "start_mouse_x": event.clientX,
            "start_mouse_y": event.clientY,
            "drag_start": new Date()
        };
        this.set_drag_state();
    };
    this.OnDrag = function (event) {
        if (!this.drag_active || this.get_value("locked")) {
            return;
        }
        this.drag_cooldown = true;
        if (this.type === "video" && !this.media[0].paused) {
            this.media[0].pause();
        }
        if (this.selected && !(this.type === "video" && this.drag_context["scale"])) {
            this.html.css({"border": "1px solid rgba(0, 0, 0, 0)"});  // Hide border when dragging (except when scaling a video)
        }
        var movement_x = event.clientX - this.drag_context["start_mouse_x"];
        var movement_y = event.clientY - this.drag_context["start_mouse_y"];
        // Rotate left / right
        if (this.drag_context["rotate"]) {
            this.on_rotate(this.drag_context["start_rot"] + (movement_x + (-movement_y)));  // Invert y value
        }
        // Scale bigger / smaller
        else if (this.drag_context["scale"]) {
            // Only take input from one axis at a time, so use the greater one
            var movement = Math.abs(movement_x) >= Math.abs(movement_y) ? movement_x : -movement_y;  // Invert y value if using y
            this.on_scale(this.data["width_norm"] + (movement * 0.00005));
        }
        else {
            this.set_position(
                this.drag_context["start_img_px_x"] + movement_x,
                this.drag_context["start_img_px_y"] + movement_y
            );
            [this.data["anchor_norm_x"], this.data["anchor_norm_y"]] = this.get_offset_norm();
        }
        event.preventDefault();
        return true;
    };
    this.OnDragStop = function () {
        if (!this.drag_active || this.get_value("locked")) {
            return;
        }
        this.drag_active = false;
        if (this.selected) {
            this.html.css({"border": "1px solid " + this.highlight_color});
        }
        if (this.type === "text") {
            this.update_textarea_width();
        }
        this.save_drag_state();
        (function (self) {
            setTimeout(
                function () {
                    self.drag_cooldown = false;
                },
                300
            );
        })(this);
    };
    this.update_fade = function () {
        var direction = this.get_value("fade_direction");
        var norm_start = this.get_value("fade_norm_start");
        var norm_end = this.get_value("fade_norm_end");
        if (this.get_value("fade_global")) {
            if (direction === "to_bottom" || direction === "to_top") {
                var canvas_height = this.canvas.GetHeight();
                var top_norm = ((canvas_height * norm_start) - this.top_px) / this.height_px;
                var bottom_norm = ((canvas_height * norm_end) - this.top_px) / this.height_px;
                if (direction === "to_bottom") {
                    norm_start = top_norm;
                    norm_end = bottom_norm;
                }
                else if (direction === "to_top") {
                    norm_start = bottom_norm;
                    norm_end = top_norm;
                }
            }
            else if (direction === "to_right" || direction === "to_left") {
                var canvas_width = this.canvas.GetWidth();
                var left_norm = ((canvas_width * norm_start) - this.left_px) / this.width_px;
                var right_norm = ((canvas_width * norm_end) - this.left_px) / this.width_px;
                if (direction === "to_right") {
                    norm_start = left_norm;
                    norm_end = right_norm;
                }
                else if (direction === "to_left") {
                    norm_start = right_norm;
                    norm_end = left_norm;
                }
            }
            else {
                console.warn("Warning: Unhandled global fade direction:", direction);
            }
        }
        this.html.css({
            "mask-image": direction ? (
                "linear-gradient("
                + direction.replaceAll("_", " ")
                + ", rgba(255, 255, 255, 1.0) "
                + (norm_start * 100)
                + "%, rgba(255, 255, 255, 0.0) "
                + (norm_end * 100)
                + "%)"
            ) : "none"
        });
    };
    this.on_rotate = function (rot_deg, force_save=false) {
        this.data["rot_deg"] = parseFloat(rot_deg);
        this.draw_properties();
        if (force_save) {
            this.save_drag_state(true);
        }
    };
    this.on_scale = function (width_norm, force_save=false) {
        [this.data["anchor_norm_x"], this.data["anchor_norm_y"]] = this.get_offset_norm();
        this.last_width_norm = this.get_value("width_norm");
        this.data["width_norm"] = parseFloat(width_norm);
        this.set_scale();
        if (force_save) {
            this.save_drag_state(true);
        }
    };
    this.set_max = function () {
        var max = Math.max(this.canvas.GetWidth(), this.canvas.GetHeight());
        // Text gets special handling since it has an extra-wide container
        this.width_px_max = max * (this.type === "text" ? 8 : 2);
        this.height_px_max = max * (this.type === "text" ? 1 : 2);
    };
    this.set_drag_state = function () {
        this.drag_state = {
            "anchor_norm_x": this.data["anchor_norm_x"],
            "anchor_norm_y": this.data["anchor_norm_y"],
            "rot_deg": this.data["rot_deg"],
            "width_norm": this.data["width_norm"]
        };
    };
    this.save_drag_state = function (modified=false) {
        if (!modified) {
            for (var key in this.drag_state) {
                if (this.drag_state[key] === this.data[key]) {
                    continue;
                }
                modified = true;
                break;
            }
        }
        if (!modified) {
            return;
        }
        this.set_drag_state();
        // Should never happen, but just in case
        if (this.editor.preview_mode) {
            return;
        }
        var properties = (
            this.parent_id || this.type === "context" ? (
                this.drag_context["rotate"] ? {
                    "rot_deg": this.data["rot_deg"]
                }
                : this.drag_context["scale"] ? {
                    "width_norm": this.data["width_norm"],
                    "anchor_norm_x": this.data["anchor_norm_x"],
                    "anchor_norm_y": this.data["anchor_norm_y"]
                }
                : {
                    "anchor_norm_x": this.data["anchor_norm_x"],
                    "anchor_norm_y": this.data["anchor_norm_y"]
                }
            ) : this.drag_state
        );
        if (this.editor.override_mode) {
            var renamed = {};
            for (var k in properties) {
                renamed[k + "_override"] = properties[k];
            }
            properties = renamed;
        }
        var params = {
            "f": "set_layer_properties",
            "c2d_id": this.editor.c2d_id,
            "layer_id": this.parent_id || this.id,
            "properties": JSON.stringify(properties),
            ...this.editor.extra_request_params
        };
        if (this.parent_id) {
            params["imported_context_layer_id"] = this.id;
        }
        (function (self) {
            Dash.Request(
                self,
                function (response) {
                    if (!Dash.Validate.Response(response)) {
                        return;
                    }
                    self.on_set_properties(response);
                    if (self.editor.linked_preview) {
                        self.editor.linked_preview.canvas.primitives[self.id].on_set_properties(response);
                    }
                },
                self.editor.api,
                params
            );
        })(this);
    };
    this.on_set_properties = function (response) {
        this.editor.data = response;
        // Is there a lighter way to achieve the same thing? maybe via Update()?
        if (this.type === "context" || this.parent_id) {
            this.canvas.RemoveAllPrimitives();
            this.editor.RedrawLayers(true);
        }
    };
    this.get_value = function (key, data=null, parent_data=null) {
        data = data || this.data;
        parent_data = parent_data || this.parent_data;
        var value = data[key];
        if (key.endsWith("_norm")) {
            value = parseFloat(value);
        }
        if (!Dash.Validate.Object(parent_data)) {
            return value;
        }
        if (key !== "linked" && !this.get_value("linked")) {
            return value;
        }
        var layer_overrides = parent_data["imported_context"]["layer_overrides"][this.id] || {};
        // Strings
        if (parent_data["str_keys"].includes(key)) {
            return (layer_overrides[key] || value).toString();
        }
        // Bools
        if (parent_data["bool_keys"].includes(key)) {
            return (key in layer_overrides ? layer_overrides[key] : value);
        }
        // Floats
        if (parent_data["float_keys"].includes(key)) {
            value = parseFloat(value);
            var override = parseFloat(layer_overrides[key] || 0);
            if (key === "opacity") {
                var parent_opacity = parent_data["opacity"];
                if (override) {
                    return override * parent_opacity;
                }
                return value * parent_opacity;
            }

            if (!override) {
                return value;
            }
            return value + override;
        }
        return value;
    };
    this.set_init = function (draw=true) {
        this.set_width_px();
        this.set_height_px();
        // After the above two are set
        this.set_top_px();
        this.set_left_px();
        if (draw) {
            this.draw_properties(true);
        }
    };
    this.on_linked_change = function () {
        this.set_init();  // Redraw - anything else?
    };
    // Meant to be overridden by member classes
    this.on_hidden_change = function (hidden) {
        if (this.type === "context") {
            return;
        }
        // console.warn("'on_hidden_change' function override is not defined in member class for type:", this.type);
        if (hidden) {
            this.html.hide();
        }
        else {
            this.html.show();
        }
    };
    // Meant to be overridden by member classes
    this.on_update = function () {
        if (this.type !== "context") {
            console.warn("'on_update' function override is not defined in member class for type:", this.type);
        }
    };
    // Meant to be overridden by member classes
    this.on_locked_change = function () {
        if (!(["context", "color"]).includes(this.type)) {
            console.warn("'on_locked_change' function override is not defined in member class for type:", this.type);
        }
    };
    // Meant to be overridden by member classes
    this.on_opacity_change = function (value) {
        if (this.type !== "context") {
            console.warn("'on_opacity_change' function override is not defined in member class for type:", this.type);
        }
        this.html.css({
            "opacity": value
        });
    };
    this.on_contained_change = function (value) {
        // If contained, it's not allowed to extend past the canvas' bounds and needs to be faded
        // underneath the canvas' masks, and the inverse if not contained. I'm not sure if this is possible
        // though, because raising this above the canvas' masks would also raise it above all other
        // layers, breaking the layer stacking order. There's no way to make both work that I can think of...
    };
    this.get_z_index = function () {
        var index = this.layer.GetIndex();
        if (!this.parent_id) {
            // Multiply the index by this.z_index_mult so that there's plenty of
            // room for recursive nested context layers to have recursive sub-indexes
            return this.z_index_base + (index * this.z_index_mult);
        }
        var parent_z_index = this.z_index_base + (this.layer.GetParentIndex() * this.z_index_mult);
        // When contexts are imported, bringing in nested layers, and potentially more
        // nested contexts, those indexes need to fall within the range of the parent's
        // index (ex: 9000), and the index of the layer before the parent (ex: 8000).
        return ((parent_z_index - this.z_index_mult) + (index + 1));
    };
    this.get_offset_norm = function () {
        if (this.left_px == null) {  // This isn't visible or hasn't been edited
            return [
                parseFloat(this.data["anchor_norm_x"]),
                parseFloat(this.data["anchor_norm_y"])
            ];
        }
        return [
            Dash.Math.InverseLerp(
                -this.width_px * 0.5,
                this.canvas.GetWidth() - (this.width_px * 0.5),
                this.left_px
            ),
            Dash.Math.InverseLerp(
                -this.height_px * 0.5,
                this.canvas.GetHeight() - (this.height_px * 0.5),
                this.top_px
            )
        ];
    };
    this.set_position = function (left=null, top=null, draw=true) {
        this.set_top_px(top);
        this.set_left_px(left);
        if (draw) {
            this.draw_properties();
        }
        if (this.type === "text") {
            this.resize_text();
        }
    };
    this.set_top_px = function (override=null) {
        this.top_px = override || ((this.canvas.GetHeight() * this.get_value("anchor_norm_y")) - (this.height_px * 0.5));
    };
    this.set_left_px = function (override=null) {
        this.left_px = override || ((this.canvas.GetWidth() * this.get_value("anchor_norm_x")) - (this.width_px * 0.5));
    };
    this.set_width_px = function (override=null) {
        var capped = false;
        this.width_px = override || (this.canvas.GetWidth() * this.get_value("width_norm"));
        // Ensure it doesn't get so small that it can't be edited
        if (this.width_px < this.width_px_min) {
            this.width_px = this.width_px_min;
            // console.warn("Warning: Minimum width reached");
            capped = true;
        }
        // Or unreasonably large
        if (this.width_px > this.width_px_max) {
            this.width_px = this.width_px_max;
            // console.warn("Warning: Maximum width reached");
            capped = true;
        }
        if (capped) {
            if (this.last_width_norm) {
                this.data["width_norm"] = parseFloat(this.last_width_norm);
            }
        }
    };
    this.set_height_px = function (override=null) {
        this.height_px = override || (this.width_px / (this.data["aspect"] || this.editor.GetAspectRatio(true)));
        // Ensure it doesn't get so small that it can't be edited
        if (this.height_px < this.height_px_min) {
            this.height_px = this.height_px_min;
            // console.warn("Warning: Minimum height reached");
        }
        // Or unreasonably large
        if (this.height_px > this.height_px_max) {
            this.height_px = this.height_px_max;
            // console.warn("Warning: Maximum height reached");
        }
    };
    this.set_scale = function (width=null, height=null, draw=true) {
        this.set_width_px(width);
        this.set_height_px(height);
        if (draw) {
            this.draw_properties();
            if (["image", "video"].includes(this.type)) {
                this.redraw_media();
            }
        }
        if (this.type === "text") {
            this.resize_text();
            this.update_kerning();
            (function (self) {
                requestAnimationFrame(function () {
                    self.update_stroke();
                });
            })(this);
            this.update_textarea_width();
        }
    };
    // Each type should have its own file which is called as a member of this file
    this.call_style = function () {
        if (this.type === "context") {
            return true;
        }
        if (this.type === "text") {
            DashGuiContext2DPrimitiveText.call(this);
        }
        else if (this.type === "color") {
            DashGuiContext2DPrimitiveColor.call(this);
        }
        else {  // Media types
            if (!Dash.Validate.Object(this.file_data)) {
                console.error("Error: Missing file data (required for file-based primitives like images, videos, etc):", this.file_data);
                return false;
            }
            if (["image", "video"].includes(this.type)) {
                DashGuiContext2DPrimitiveMedia.call(this);
            }
            else {
                console.error("Error: Unhandled primitive type:", this.type);
                return false;
            }
        }
        return true;
    };
    this.draw_properties = function (immediate=false) {
        if (immediate) {
            this._draw_properties();
            return;
        }
        if (this.draw_properties_pending) {
            return;
        }
        (function (self) {
            requestAnimationFrame(function () {
                self._draw_properties();
            });
        })(this);
        this.draw_properties_pending = true;
    };
    this.setup_connections = function () {
        if (!this.editor.can_edit) {
            return;
        }
        (function (self) {
            self.html.on("click", function (event, _event_override=null, _previous_layer_index=null, _skip_checks=false) {
                if (!_skip_checks && !self.drag_cooldown) {
                    if (
                           self.click_next_layer_if_transparent_image_pixel(_event_override || event, _previous_layer_index)
                        || self.click_next_layer_if_hidden(_event_override || event, _previous_layer_index)
                    ) {
                        self.Deselect();
                    }
                    event.stopPropagation();
                    return;
                }
                self.Select(true);
                event.stopPropagation();
            });
            // Without this, if you try to move/rotate/scale/etc this
            // container while it's not already selected, it won't work
            // TODO: This does not pass through the transparent part of
            //  an image like the click event does, because it's very
            //  complicated and I've spent enough time for now on getting
            //  the click pass-through to work, so need to leave it for now.
            self.html.on("mousedown", function () {
                self.Select(true, false);
            });
        })(this);
    };
    this.click_next_layer_if_hidden = function (event, previous_layer_index=null) {
        if (!this.get_value("hidden") && this.get_value("opacity")) {
            return false;
        }
        var [next_layer, layer_index] = this.get_next_primitive_and_index(event, previous_layer_index);
        if (next_layer) {  // Click the next layer
            $(next_layer).trigger("click", [event, layer_index]);
        }
        // Even if no next layer, we don't want to follow through
        // with the original click, since the layer is hidden
        return true;
    };
    this.click_next_layer_if_transparent_image_pixel = function (event, previous_layer_index=null) {
        if (this.type !== "image") {
            return false;
        }
        var url = this.get_url();
        if (!url || !url.toLowerCase().endsWith(".png")) {
            return false;
        }
        var img = new Image();
        var canvas = $("<canvas></canvas>");
        var ctx = canvas[0].getContext("2d");
        canvas.css({
            "position": "absolute",
            "inset": 0,
            "width": this.width_px,
            "height": this.height_px
        });
        canvas.attr("width", this.width_px);
        canvas.attr("height", this.height_px);
        img.src = url;
        img.crossOrigin = "Anonymous";
        (function (self) {
            img.onload = function () {
                var img_data = null;
                var next_layer = null;
                var layer_index = null;
                ctx.drawImage(img, 0, 0, self.width_px, self.height_px);
                try {
                    img_data = ctx.getImageData(event.offsetX, event.offsetY, 1, 1).data;
                }
                catch {
                    // Pass
                }
                // If clicked pixel is transparent
                if (img_data && img_data[3] === 0) {
                    [next_layer, layer_index] = self.get_next_primitive_and_index(event, previous_layer_index);
                }
                if (next_layer) {  // Click the next layer
                    $(next_layer).trigger("click", [event, layer_index]);
                }
                else {  // Re-trigger the click without checking for transparency
                    self.html.trigger("click", [event, null, true]);
                }
                return true;
            };
        })(this);
        return false;
    };
    this.get_next_primitive_and_index = function (event, previous_layer_index=null) {
        var next_primitive = null;
        var primitive_index = null;
        var elements = document.elementsFromPoint(event.clientX, event.clientY);
        for (var i in elements) {
            if (previous_layer_index !== null && parseInt(i) <= previous_layer_index) {
                continue;
            }
            var element = elements[i];
            var parent = $(element).parent()[0];
            if (parent === this.html[0] || element === this.html[0]) {
                continue;
            }
            if (element === this.canvas.html[0] || parent === this.canvas.html[0]) {
                break;
            }
            if ($(element).attr("class") !== "DashGuiContext2DPrimitive") {
                continue;
            }
            next_primitive = element;
            primitive_index = parseInt(i);
            break;
        }
        return [next_primitive, primitive_index];
    };
    // Late draw so that multiple functions can call this.draw_properties while only actually drawing once
    this._draw_properties = function () {
        this.draw_properties_pending = false;
        this.html.css({
            "width": this.width_px,
            "height": this.height_px,
            "top": this.top_px,
            "left": this.left_px,
            "transform": (
                "rotate(" + this.get_value("rot_deg") + "deg) "
                // This was added as an alternative to setting "top" and "left",
                // but it causes a complete breakage when media is rotated
                // + "translate3d(" + this.left_px + "px, " + this.top_px + "px, 0px)"
            )
        });
        this.on_opacity_change(this.get_value("opacity"));
        this.update_fade();
    };
    this.setup_styles();
}

/**@member DashGuiContext2DPrimitive*/
function DashGuiContext2DPrimitiveText () {
    this.text_area = null;
    this.last_text_value = null;
    this.text_border_thickness = 1;
    this.using_scroll_width = false;
    this.textarea_width_timer = null;
    this._setup_styles = function () {
        this.html.css({
            "display": "flex",
            "overflow": "visible"
        });
        this.text_area = new Dash.Gui.TextArea(this.color, "", this, this.on_text_change, true);
        this.text_area.html.css({
            "border-radius": Dash.Size.BorderRadius,
            "width": "fit-content",
            "height": "100%",
            "border": this.text_border_thickness + "px solid rgba(0, 0, 0, 0)",
            "overflow": "visible"
        });
        this.text_area.textarea.css({
            "border": "none",
            "width": "fit-content",
            "height": "fit-content",
            "white-space": "nowrap",
            "min-height": "",
            "max-height": "",
            "min-width": "",
            "max-width": "",
            "resize": "none",
            "padding": 0,
            "overflow": "visible"
        });
        // This essentially turns the TextArea into an Input, making it redundant,
        // but this is for a reason. Eventually, these text primitives should be able to
        // handle new lines. Right now, it's put on hold because it complicates the resizing
        // etc and it's not a priority. When ready to implement that, remove this line.
        this.text_area.DisableNewLines();
        this.text_area.DisableFlash();
        var text_value = this.get_value("text_value");
        if (text_value) {
            this.text_area.SetText(this.get_value("text_caps") ? text_value.toUpperCase() : text_value);
        }
        (function (self) {
            self.text_area.textarea.on("focus", function () {
                self.text_area.html.css({
                    "border": self.text_border_thickness + "px solid " + (self.get_value("locked") ? "rgba(0, 0, 0, 0)" : self.color.PinstripeDark)
                });
            });
            self.text_area.textarea.on("blur", function () {
                self.text_area.html.css({
                    // Retain the physical space of the border, just make it invisible
                    // (this prevents the box from appearing to "jitter" when the border is toggled)
                    "border": self.text_border_thickness + "px solid rgba(0, 0, 0, 0)"
                });
            });
        })(this);
        this.html.append(this.text_area.html);
        this.resize_text();
        this.update_font();
        this.update_font_color();
        this.update_text_alignment();
        if (this.get_value("placeholder")) {
            this.lock_text_area();
        }
        else if (!this.editor.can_edit) {
            this.lock_text_area();
            this.text_area.html.css({
                "user-select": "none",
                "pointer-events": "none"
            });
        }
        this.update_kerning();
        (function (self) {
            requestAnimationFrame(function () {
                self.update_stroke();
            });
        })(this);
        this.update_textarea_width();
    };
    this.update_textarea_width = function (skip_if_no_scroll_width=true, retry=true) {
        (function (self) {
            if (self.textarea_width_timer) {
                clearTimeout(self.textarea_width_timer);
            }
            self.textarea_width_timer = setTimeout(
                function () {
                    var html = self.text_area.textarea[0];
                    var has_overflow = html.offsetWidth < html.scrollWidth;
                    if (!has_overflow && retry) {
                        self.update_textarea_width(skip_if_no_scroll_width, false);
                        return;
                    }
                    var scroll_width = has_overflow ? (html.scrollWidth + 1) : 0;
                    if (scroll_width) {
                        self.using_scroll_width = true;
                    }
                    else {
                        if (skip_if_no_scroll_width && self.using_scroll_width) {
                            return;
                        }
                        self.using_scroll_width = false;
                    }
                    self.text_area.textarea.css({
                        "width": scroll_width ? (scroll_width + "px") : "fit-content"
                    });
                },
                300
            );
        })(this);
    };
    this.resize_text = function () {
        if (!this.height_px) {
            (function (self) {
                setTimeout(
                    function () {
                        self.resize_text();
                    },
                    10
                );
            })(this);
            return;
        }
        var text_height = this.height_px;
        var font_option = this.get_font_option();
        if (font_option && font_option["override_scale_mult"] !== 1.0) {
            text_height *= font_option["override_scale_mult"];
        }
        // This makes sure we keep the text within the bounding box, as opposed to the stroke extending outside it
        var stroke_px = text_height * (this.get_value("stroke_thickness") || 0);
        this.text_area.textarea.css({
            "top": font_option && font_option["override_top_mult"] ? (font_option["override_top_mult"] * text_height) : 0,
            "left": font_option && font_option["override_left_mult"] ? (font_option["override_left_mult"] * text_height) : 0,
            "font-size": (text_height - stroke_px) + "px",
            "line-height": text_height + "px"
        });
    };
    this.on_text_change = function (value) {
        value = value.trim();
        if (this.last_text_value === value || this.get_value("text_value") === value) {
            return;
        }
        this.editor.SetEditorPanelLayerProperty("text_value", value, this.id);
        this.Update("text_value", value);
        this.last_text_value = value;
        this.update_textarea_width(false);
    };
    this.update_text_alignment = function () {
        var alignment = this.get_value("text_alignment") || "center";
        this.html.css({
            "justify-content": alignment
        });
        this.text_area.textarea.css({
            "text-align": alignment
        });
        this.update_textarea_width(false);
    };
    this.update_font = function () {
        var font_option = this.get_font_option();
        if (!font_option || !font_option["url"] || !font_option["filename"]) {
            this.text_area.textarea.css({
                "font-family": "sans_serif_normal"
            });
            return;
        }
        (function (self) {
            Dash.Utils.SetDynamicFont(
                self.text_area.textarea,
                font_option["url"],
                font_option["label_text"],
                font_option["filename"],
                function () {
                    self.update_textarea_width();
                }
            );
        })(this);
    };
    this.update_font_color = function () {
        this.text_area.textarea.css({
            "color": this.get_value("font_color") || this.color.Text
        });
    };
    this.update_stroke = function () {
        if (!this.height_px) {
            (function (self) {
                setTimeout(
                    function () {
                        self.update_stroke();
                    },
                    10
                );
            })(this);
            return;
        }
        var shadow = "";
        var text_height = this.height_px;
        var opacity = this.get_value("opacity");
        var font_option = this.get_font_option();
        var stroke_color = (this.get_value("stroke_color") || this.color.Text);
        if (font_option && font_option["override_scale_mult"] !== 1.0) {
            text_height *= font_option["override_scale_mult"];
        }
        // Cut in half to match PIL
        var stroke_px = (text_height * (this.get_value("stroke_thickness") || 0)) * 0.5;

        // text-stroke applies inwards, but PIL applies stroke outwards,
        // so this approach allows us to match the output from PIL
        if (opacity && stroke_px) {
            var iterations = parseInt(100 * opacity);
            for (var num of Dash.Math.Range(iterations)) {
                shadow += "0px 0px " + stroke_px + "px " + stroke_color;
                if (num !== iterations - 1) {
                    shadow += ", ";
                }
            }
        }
        this.text_area.textarea.css({
            "text-shadow": shadow
        });
    };
    this.update_kerning = function () {
        if (!this.height_px) {
            (function (self) {
                setTimeout(
                    function () {
                        self.update_kerning();
                    },
                    10
                );
            })(this);
            return;
        }
        var text_height = this.height_px;
        var font_option = this.get_font_option();
        if (font_option && font_option["override_scale_mult"] !== 1.0) {
            text_height *= font_option["override_scale_mult"];
        }
        // This makes sure we keep the text within the bounding box, as opposed to the stroke extending outside it
        var stroke_px = text_height * (this.get_value("stroke_thickness") || 0);
        var kerning_norm = this.get_value("kerning") || 0;
        this.text_area.textarea.css({
            "letter-spacing": kerning_norm ? (((this.height_px * kerning_norm) + stroke_px) + "px") : "normal"  // When 0, don't apply kerning
        });
    };
    this.get_font_option = function () {
        var font_id = this.get_value("font_id");
        if (!font_id || !this.editor.ComboOptions["fonts"]) {
            return null;
        }
        for (var option of this.editor.ComboOptions["fonts"]) {
            if (option["id"] === font_id) {
                return option;
            }
        }
        return null;
    };
    this.lock_text_area = function () {
        this.text_area.Lock(false);
    };
    this.unlock_text_area = function () {
        if (this.get_value("placeholder")) {
            return;
        }
        this.text_area.Unlock(false);
    };
    this.focus_text_area = function () {
        if (this.get_value("placeholder")) {
            return;
        }
        this.text_area.Focus();
    };
    // Override
    this.on_update = function (key) {
        if (key === "font_id") {
            this.update_font();
        }
        else if (key === "text_alignment") {
            this.update_text_alignment();
        }
        else if (key === "text_caps") {
            var text_value = this.get_value("text_value");
            this.text_area.SetText(this.get_value("text_caps") ? text_value.toUpperCase() : text_value);
            this.update_textarea_width(false);
        }
        else if (key === "stroke_thickness") {
            this.resize_text();
        }
        this.update_kerning();
        this.update_textarea_width();
        this.update_stroke();
        this.update_font_color();
    };
    // Override
    this.on_opacity_change = function (value) {
        this.text_area.textarea.css({
            "opacity": value
        });
    };
    // Override
    this.on_locked_change = function (locked) {
        if (locked) {
            this.lock_text_area();
        }
        else {
            this.unlock_text_area();
        }
    };
    // Override
    // this.on_hidden_change = function (hidden) {
    //     if (hidden) {
    //         this.text_area.html.hide();
    //     }
    //
    //     else {
    //         this.text_area.html.show();
    //     }
    // };
    this._setup_styles();
}

/**@member DashGuiContext2DPrimitive*/
function DashGuiContext2DPrimitiveColor () {
    this.color = $("<div></div>");
    this._setup_styles = function () {
        this.color.css({
            "pointer-events": "none",
            "user-select": "none",
            "position": "absolute",
            "inset": 0
        });
        this.html.append(this.color);
        this.update_colors();
    };
    this.update_colors = function () {
        var colors = [];
        for (var num of [1, 2, 3]) {
            var key = "color_" + num;
            var color = this.get_value(key);
            if (!color) {
                continue;
            }
            var opacity = this.get_value(key + "_opacity");
            if (opacity && (opacity === 0 || opacity < 1)) {
                color = Dash.Color.GetTransparent(color, opacity);
            }
            colors.push(color);
        }
        if (!colors.length) {
            this.color.css({
                "background": ""
            });
            return;
        }
        if (colors.length === 1) {
            this.color.css({
                "background": colors[0]
            });
            return;
        }
        var direction = this.get_value("gradient_direction").replaceAll("_", " ");
        if (direction === "vertical") {
            direction = "to bottom";
        }
        else if (direction === "horizontal") {
            direction = "to right";
        }
        this.color.css({
            // https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient
            "background": (
                  "linear-gradient("
                + direction
                + ", "
                + colors.join(", ")
                + ")"
            )
        });
    };
    // Override
    this.on_update = function (key) {
        if (key.startsWith("aspect")) {
            this.set_init();
        }
        if (key.startsWith("color_") || key === "gradient_direction") {
            this.update_colors();
        }
    };
    // Override
    this.on_opacity_change = function (value) {
        this.color.css({
            "opacity": value
        });
    };
    // Override
    // this.on_hidden_change = function (hidden) {
    //     if (hidden) {
    //         this.color.hide();
    //     }
    //
    //     else {
    //         this.color.show();
    //     }
    // };
    this._setup_styles();
}

/**@member DashGuiContext2DPrimitive*/
function DashGuiContext2DPrimitiveMedia () {
    this.media = null;
    this.video_tint = null;
    this._setup_styles = function () {
        this.redraw_media();
    };
    this.redraw_media = function () {
        if (this.media) {
            this.media.remove();
        }
        if (this.file_data["placeholder"]) {
            if (!this.height_px) {
                (function (self) {
                    setTimeout(
                        function () {
                            self._setup_styles();
                        },
                        10
                    );
                })(this);
                return;
            }
            this.redraw_canvas_placeholder();
        }
        else {
            this.media = (
                this.type === "image" ? Dash.File.GetImagePreview(
                    this.get_url(),
                    "100%",
                    "100%"
                ) : this.type === "video" ? Dash.File.GetVideoPreview(
                    this.get_url(),
                    "100%",
                    true,
                    false,
                    !(this.get_value("locked") || this.editor.preview_mode)
                ) : $("<div></div>")
            );
            this.html.append(this.media);
        }
        this.update_filter();
        this.update_tint_color();
        if (this.type === "video") {
            this.media.off("click");
            // Restrict playback to the play button alone (disable playback from clicking
            // anywhere on the video, since that interferes with the other click/drag events)
            this.media.on("click", function (e) {
                e.preventDefault();
            });
        }
    };
    this.get_url = function () {
        return (
               this.file_data["url"]
            || this.file_data["orig_url"]
            || this.file_data["thumb_png_url"]
            || this.file_data["thumb_jpg_url"]
            || ""
        );
    };
    this.update_tint_color = function () {
        var multi_tone_colors = [];
        for (var num of Dash.Math.Range(3)) {
            var color = this.get_value("multi_tone_color_" + (num + 1));
            if (color) {
                multi_tone_colors.push(color);
            }
        }
        var tint_color = multi_tone_colors.length >= 2 ? multi_tone_colors[0] : this.get_value("tint_color");
        if (this.type === "image") {
            if (!tint_color) {
                this.media.css({
                    "mask": "",
                    "background-color": "",
                    "background-blend-mode": ""
                });
                return;
            }
            this.media.css({
                "mask-image": "url(" + this.get_url() + ")",
                "mask-mode": "alpha",
                "mask-size": "contain",
                "mask-repeat": "no-repeat",
                "mask-position": "center center",
                "background-color": tint_color,
                "background-blend-mode": "overlay"
            });
        }
        else if (this.type === "video") {
            if (!tint_color) {
                if (this.video_tint) {
                    this.video_tint.hide();
                }
                return;
            }
            if (this.video_tint) {
                this.video_tint.detach();
            }
            else {
                this.video_tint = $("<div></div>");
                this.video_tint.css({
                    "position": "absolute",
                    "inset": 0,
                    "pointer-events": "none",
                    "user-select": "none",
                    "mix-blend-mode": "overlay"
                });
            }
            this.html.append(this.video_tint);
            this.video_tint.css({
                "background-color": tint_color
            });
        }
    };
    this.update_filter = function (brightness=null, contrast=null) {
        if (!this.media) {
            (function (self) {
                setTimeout(
                    function () {
                        self.update_filter(brightness, contrast);
                    },
                    10
                );
            })(this);
            return;
        }
        this.media.css({
            "filter": (
                "brightness(" + (
                    brightness === null ? this.get_value("brightness") : brightness
                ) + ") contrast(" + (
                    contrast === null ? this.get_value("contrast") : contrast
                ) + ")"
            )
        });
    };
    this.redraw_canvas_placeholder = function () {
        if (!this.file_data["placeholder"]) {
            return;
        }
        var canvas = $("<canvas></canvas>");
        canvas.css({
            "box-sizing": "border-box",
            "border": "1px solid " + this.color.StrokeDark,
            // "outline": "1px solid " + this.opposite_color.StrokeLight,
            // "outline-offset": "1px"
        });
        // Don't set these with .css(), it's different
        canvas.attr("width", this.width_px);
        canvas.attr("height", this.height_px);
        var ctx = canvas[0].getContext("2d");
        // Dark lines (for light backgrounds)
        ctx.lineWidth = Dash.Size.Padding * 0.3;
        ctx.strokeStyle = this.color.Text;
        this.draw_canvas_lines(ctx);
        // Light lines (for dark backgrounds)
        ctx.lineWidth = Dash.Size.Padding * 0.1;  // Resized to fit "inside" the dark lines
        ctx.strokeStyle = this.opposite_color.Text;
        this.draw_canvas_lines(ctx);
        this.add_text_to_center_of_canvas(ctx);
        this.media = canvas;
        this.html.append(this.media);
    };
    this.draw_canvas_lines = function (ctx) {
        // Bottom left corner to top right corner
        ctx.beginPath();
        ctx.moveTo(0, 0);
        ctx.lineTo(this.width_px, this.height_px);
        ctx.stroke();
        // Top left corner to bottom right corner
        ctx.beginPath();
        ctx.moveTo(this.width_px, 0);
        ctx.lineTo(0, this.height_px);
        ctx.stroke();
    };
    this.add_text_to_center_of_canvas = function (ctx) {
        var i;
        var text_width;
        var greatest_text_width = 0;
        var line_height = Dash.Size.RowHeight;
        var max_text_width = Math.round(this.width_px * 0.85);
        var text = "(Placeholder)\n" + (this.get_value("display_name") || "Image");
        var lines = text.split("\n");
        var text_height = line_height * lines.length;
        var start_y = (this.height_px - text_height) / 2 + (line_height / 2);
        ctx.fillStyle = this.color.Text;
        ctx.lineWidth = Dash.Size.Padding * 0.4;  // Resized for text stroke
        ctx.font = "bold " + line_height + "px sans-serif";
        for (i in lines) {
            text_width = ctx.measureText(lines[i]).width;
            if (text_width > greatest_text_width) {
                greatest_text_width = text_width;
            }
        }
        if (greatest_text_width > this.width_px) {
            ctx.font = "bold " + (Math.round(line_height * (max_text_width / greatest_text_width))) + "px sans-serif";
        }
        for (i in lines) {
            var line = lines[i];
            text_width = ctx.measureText(line).width;
            var x = (this.width_px - text_width) / 2;
            var y = start_y + (i * line_height);
            ctx.strokeText(line, x, y);
            ctx.fillText(line, x, y);
        }
    };
    // Use this basic placeholder code instead of the canvas placeholder code
    // if we decide later to not use the canvas approach for some reason
    // this.get_placeholder = function () {
    //     var placeholder = $("<div>(Placeholder)\n" + this.get_value("display_name") + "</div>");
    //
    //     placeholder.css({
    //         "background": this.opposite_color.BackgroundRaised,
    //         "box-sizing": "border-box",
    //         "color": this.opposite_color.Text,
    //         "text-align": "center",
    //         "vertical-align": "middle",
    //         "font-family": "sans_serif_bold",
    //         "white-space": "pre",
    //         "overflow": "hidden",
    //         "text-overflow": "ellipsis",
    //         "font-size": "125%",
    //         "width": "100%",
    //         "height": "100%",
    //         "display": "flex",
    //         "align-items": "center",
    //         "justify-content": "center",
    //         "text-shadow": "0px 0px 5px " + this.opposite_color.Background
    //     });
    //
    //     return placeholder;
    // };
    // Override
    this.on_update = function (key) {
        if (!this.media) {
            (function (self) {
                setTimeout(
                    function () {
                        self.on_update(key);
                    },
                    10
                );
            })(this);
            return;
        }
        if (key === "contrast" || key === "brightness") {
            this.update_filter();
        }
        this.update_tint_color();
    };
    // Override
    this.on_opacity_change = function (value) {
        if (!this.media) {
            (function (self) {
                setTimeout(
                    function () {
                        self.on_opacity_change(value);
                    },
                    10
                );
            })(this);
            return;
        }
        this.media.css({
            "opacity": value
        });
    };
    // Override
    // this.on_hidden_change = function (hidden) {
    //     if (!this.media) {
    //         (function (self) {
    //             setTimeout(
    //                 function () {
    //                     self.on_hidden_change(hidden);
    //                 },
    //                 10
    //             );
    //         })(this);
    //
    //         return;
    //     }
    //
    //     if (hidden) {
    //         this.media.hide();
    //     }
    //
    //     else {
    //         this.media.show();
    //     }
    // };
    // Override
    this.on_locked_change = function (locked) {
        if (this.type !== "video") {
            return;
        }
        if (!this.media) {
            (function (self) {
                setTimeout(
                    function () {
                        self.on_locked_change(locked);
                    },
                    10
                );
            })(this);
            return;
        }
        if (this.editor.preview_mode) {
            return;
        }
        try {
            this.media.attr("controls", locked);
        }
        catch {
            // Pass
        }
    };
    this._setup_styles();
}

function DashGuiContext2DEditorPanel (editor) {
    this.editor = editor;
    this.button_bars = [];
    this.layers_box = null;
    this.content_box = null;
    this.property_box = null;
    this.api = this.editor.api;
    this.aspect_tool_row = null;
    this.html = $("<div></div>");
    this.first_pane_slider = null;
    this.color = this.editor.color;
    this.second_pane_slider = null;
    this.tool_value_tool_row = null;
    this.top_html = $("<div></div>");
    this.aspect_tool_row_inputs = {};
    this.c2d_id = this.editor.c2d_id;
    this.can_edit = this.editor.can_edit;
    this.preview_mode = this.editor.preview_mode;
    this.override_mode = this.editor.override_mode;
    this.min_width = (Dash.Size.ColumnWidth * 2.4) + (this.editor.min_width_extensions["editor_panel"] || 0);
    // Update if things are added to the box that would increase the overall height
    this.property_box_height = this.override_mode ? (
          (Dash.Size.RowHeight * 2)
        + (Dash.Size.Padding * 1.5)
    ) : (
           Dash.Size.ButtonHeight        // Header
        + (Dash.Size.RowHeight * 5)      // Rows and toolbar-style-buttons
        + (Dash.Size.Padding   * 2.5)    // Top, bottom, and button padding
        + (this.editor.min_height_extensions["editor_panel_property_box"] || 0)
    );
    // Wrappers
    this.get_data = this.editor.get_data.bind(this.editor);
    this.set_data = this.editor.set_data.bind(this.editor);
    this.setup_styles = function () {
        if (this.preview_mode) {
            this.layers_box = new DashGuiContext2DEditorPanelLayers(this);
            return;
        }
        var abs_css = {
            "position": "absolute",
            "inset": 0
        };
        this.html.css({
            "box-sizing": "border-box",
            "border-left": "1px solid " + this.color.StrokeLight,
            "overflow-x": "hidden",
            ...abs_css
        });
        this.layers_box = new DashGuiContext2DEditorPanelLayers(this);
        this.content_box = new DashGuiContext2DEditorPanelContent(this);
        this.property_box = new Dash.Gui.PropertyBox(this, this.get_data, this.set_data);
        this.first_pane_slider = new Dash.Layout.PaneSlider(
            this,
            true,
            this.property_box_height,
            "dash_gui_context_2d_editor_panel_first" + (this.override_mode ? "_override" : ""),
            true
        );
        this.second_pane_slider = new Dash.Layout.PaneSlider(
            this,
            true,
            this.get_top_html_size(),
            "dash_gui_context_2d_editor_panel_second" + (this.override_mode ? "_override" : ""),
            true
        );
        this.second_pane_slider.SetPaneContentA(this.top_html);
        this.second_pane_slider.SetPaneContentB(this.layers_box.html);
        this.html.append(this.second_pane_slider.html);
        this.first_pane_slider.SetPaneContentA(this.property_box.html);
        this.first_pane_slider.SetPaneContentB(this.content_box.html);
        this.top_html.css(abs_css);
        this.top_html.append(this.first_pane_slider.html);
        this.setup_property_box();
        if (this.GetSelectedLayer()) {
            this.SwitchContentToEditTab();
        }
        else {
            this.SwitchContentToNewTab();
        }
    };
    this.RedrawLayers = function (select=false, redraw_primitives=false) {
        this.layers_box.Redraw(select, redraw_primitives);
    };
    this.OnNewLayer = function (response) {
        this.layers_box.OnNewLayer(response);
    };
    this.SetLayerProperty = function (key, value, id) {
        this.layers_box.SetProperty(key, value, id);
    };
    this.SwitchContentToEditTab = function () {
        if (this.content_box) {
            this.content_box.SwitchToEditTab();
        }
    };
    this.RedrawCurrentContentTab = function () {
        if (this.content_box) {
            this.content_box.RedrawCurrentTab();
        }
    };
    this.SwitchContentToNewTab = function () {
        if (this.content_box) {
            this.content_box.SwitchToNewTab();
        }
    };
    this.InputInFocus = function () {
        return (
               (this.property_box && this.property_box.InputInFocus())
            || (this.layers_box   && this.layers_box.InputInFocus())
            || (this.content_box  && this.content_box.InputInFocus())
        );
    };
    this.GetAspectRatio = function () {
        var data = this.get_data();
        var w = data["aspect_ratio_w"];
        var h = data["aspect_ratio_h"];
        if (!this.aspect_tool_row) {
            return [
                w || 1,
                h || 1
            ];
        }
        return [
            parseFloat(this.aspect_tool_row_inputs["w"].Text() || w || 1) || 1,
            parseFloat(this.aspect_tool_row_inputs["h"].Text() || h || 1) || 1
        ];
    };
    this.GetSelectedLayer = function () {
        return this.layers_box.GetSelectedLayer();
    };
    this.AddLayer = function (primitive_type, primitive_file_data=null) {
        this.layers_box.AddLayer(primitive_type, primitive_file_data);
    };
    this.UpdatePropertyBox = function () {
        if (this.preview_mode) {
            return;
        }
        if (!this.editor.CanvasSizeInitialized()) {
            this.editor.ResizeCanvas();
        }
        if (!this.property_box) {
            return;
        }
        this.property_box.Update();
    };
    this.UpdateContentBoxComboOptions = function () {
        this.content_box.UpdateComboOptions();
    };
    this.SelectLayer = function (id, from_canvas=true) {
        if (this.layers_box) {
            this.layers_box.Select(id, from_canvas);
        }
    };
    this.AddCustomElementToContentNewTab = function (
        built_in_function_name="", built_in_function_params=[], callback_that_returns_html=null, binder=null
    ) {
        if (!this.content_box) {
            (function (self) {
                setTimeout(
                    function () {
                        self.AddCustomElementToContentNewTab(
                            built_in_function_name,
                            built_in_function_params,
                            callback_that_returns_html,
                            binder
                        );
                    },
                    1
                );
            })(this);
            return;
        }
        this.content_box.AddCustomElementToNewTab(
            built_in_function_name,
            built_in_function_params,
            callback_that_returns_html,
            binder
        );
    };
    this.AddCustomElementToContentEditTab = function (
        context_key, built_in_function_name="", built_in_function_params=[], callback_that_returns_html=null, binder=null
    ) {
        if (!this.content_box) {
            (function (self) {
                setTimeout(
                    function () {
                        self.AddCustomElementToContentEditTab(
                            context_key,
                            built_in_function_name,
                            built_in_function_params,
                            callback_that_returns_html,
                            binder
                        );
                    },
                    10
                );
            })(this);
            return;
        }
        this.content_box.AddCustomElementToEditTab(
            context_key,
            built_in_function_name,
            built_in_function_params,
            callback_that_returns_html,
            binder
        );
    };
    this.AddCustomContextToContentEditTab = function (context_key, callback_that_returns_html=null, binder=null) {
        if (!this.content_box) {
            (function (self) {
                setTimeout(
                    function () {
                        self.AddCustomContextToContentEditTab(context_key, callback_that_returns_html, binder);
                    },
                    10
                );
            })(this);
            return;
        }
        this.content_box.AddCustomContextToEditTab(context_key, callback_that_returns_html, binder);
    };
    this.UpdatePropertyBoxToolSlider = function (active_tool="", layer=null) {
        if (!this.property_box) {
            return;
        }
        if (!active_tool) {
            active_tool = this.editor.canvas.GetActiveTool();
        }
        if (!layer) {
            layer = this.GetSelectedLayer();
        }
        var active = layer && active_tool;
        this.tool_value_tool_row.elements = [];
        this.tool_value_tool_row.html.empty();
        var label = this.tool_value_tool_row.AddLabel(
            active ? (active_tool === "move" ? "X" : active_tool.Title()) + ":" : "Tool:",
            null,
            null,
            null,
            false
        );
        label.label.css({
            "padding-left": 0
        });
        var data_key = (
              active_tool === "move"   ? "anchor_norm_x"
            : active_tool === "rotate" ? "rot_deg"
            : active_tool === "scale"  ? "width_norm"
            : ""
        );
        if (!active || !data_key) {
            if (!data_key) {
                console.warn("Warning: Unhandled tool:", active_tool);
            }
            return;
        }
        this.add_tool_value_tool_row_input(layer, data_key);
        if (active_tool !== "move") {
            return;
        }
        this.add_tool_value_tool_row_input(layer, "anchor_norm_y", "Y:");
    };
    this.add_tool_value_tool_row_input = function (layer, data_key, label_text="") {
        var input = (function (self) {
            return self.tool_value_tool_row.AddInput(
                "",
                data_key,
                null,
                true,
                function (value) {
                    self.on_tool_value_tool_row_input_changed(layer, data_key, value);
                },
                null,
                self.can_edit,
                Boolean(label_text),
                label_text,
                true,
                false,
                false
            );
        })(this);
        input.SetText(layer.GetData()[data_key]);
    };
    this.on_tool_value_tool_row_input_changed = function (layer, key, value) {
        if (!(value.LTrim("-").replace(".", "").IsDigit())) {
            alert("Value must be a number");
            return;
        }
        if (layer.GetData()["locked"]) {
            alert("Layer is locked");
            return;
        }
        var primitive = this.editor.canvas.primitives[layer.GetID()];
        if (key === "rot_deg") {
            primitive.on_rotate(value, true);
        }
        else if (key === "width_norm") {
            primitive.on_scale(value, true);
        }
        else if (key.startsWith("anchor_norm_")) {
            primitive.data[key] = value;
            primitive.set_position();
            primitive.save_drag_state(true);
        }
    };
    this.get_top_html_size = function () {
        return (this.content_box.min_height + this.property_box_height + this.first_pane_slider.divider_size);
    };
    this.setup_property_box = function () {
        this.property_box.Flatten();
        this.property_box.SetIndentPx(Dash.Size.Padding);
        this.property_box.html.css({
            "position": "absolute",
            "inset": 0,
            "padding-top": Dash.Size.Padding * 0.5,
            "margin-bottom": 0,
            "background": this.color.Background,
            "box-sizing": "border-box",
            "border-bottom": "1px solid " + this.color.StrokeLight
        });
        if (this.override_mode) {
            this.add_aspect_tool_row();
            this.add_tool_value_tool_row();
            return;
        }
        this.add_property_box_header();
        this.property_box.AddInput("id", "ID", "", null, false).RemoveSaveButton();
        this.property_box.AddInput("display_name", "Display Name", "", null, this.can_edit).RemoveSaveButton();
        this.add_aspect_tool_row();
        if (this.editor.editor_panel_property_box_custom_fields_cb) {
            this.editor.editor_panel_property_box_custom_fields_cb(this);
        }
        this.add_tool_value_tool_row();
        this.add_property_box_button_bar();
    };
    this.add_tool_value_tool_row = function () {
        this.tool_value_tool_row = this.property_box.AddToolRow();
        if (this.override_mode) {
            this.tool_value_tool_row.html.css({
                "margin-left": 0
            });
        }
        var label = this.tool_value_tool_row.AddLabel("Tool:", null, null, null, false);
        label.label.css({
            "padding-left": 0
        });
    };
    this.add_property_box_button_bar = function () {
        var button_bar = this.property_box.AddButtonBar("toolbar");
        if (!this.can_edit) {
            button_bar.Disable();
        }
        button_bar.html.css({
            "height": "fit-content",
            "margin-top": Dash.Size.Padding,
            "margin-left": Dash.Size.Padding
        });
        button_bar.AddButton("Duplicate Context", this.duplicate_context);
        button_bar.AddButton("Fit Layer To Canvas", this.fit_layer_to_canvas);
        this.button_bars.push(button_bar);
    };
    this.fit_layer_to_canvas = function () {
        var layer = this.GetSelectedLayer();
        if (!layer) {
            alert("No layer selected");
            return;
        }
        var primitive = this.editor.canvas.primitives[layer.GetID()];
        primitive.on_rotate(0);
        primitive.on_scale(1);
        primitive.data["anchor_norm_x"] = 0.5;
        primitive.data["anchor_norm_y"] = 0.5;
        primitive.set_position();
        primitive.save_drag_state(true);
    };
    this.add_property_box_header = function () {
        var header = this.property_box.AddHeader(
            this.get_data()["display_name"] || "Properties",
            "display_name"
        );
        header.ReplaceBorderWithIcon("gear").html.css({
            "margin-left": -Dash.Size.Padding * 0.5,
            "padding-left": Dash.Size.Padding * 0.5,
            "padding-bottom": Dash.Size.Padding * 0.5,
            "border-bottom": "1px solid " + this.color.PinstripeDark
        });
        header.icon.icon_html.css({
            "padding-left": Dash.Size.Padding * 0.3
        });
        header.html.css({
            "background": this.color.Pinstripe,
            "margin-top": -Dash.Size.Padding,
            "margin-left": -Dash.Size.Padding,
            "margin-right": -Dash.Size.Padding,
            "padding-bottom": Dash.Size.Padding * 0.6,
            "padding-top": Dash.Size.Padding,
            "padding-left": Dash.Size.Padding,
            "padding-right": Dash.Size.Padding
        });
        header.label.css({
            "flex": 2,
            "margin-right": -Dash.Size.Padding * 0.5,
            "padding-left": Dash.Size.Padding * 0.4,
            "padding-right": Dash.Size.Padding * 1.5,
            "padding-bottom": Dash.Size.Padding * 0.5,
            "border-bottom": "1px solid " + this.color.PinstripeDark
        });
    };
    this.duplicate_context = function () {
        // Should never happen, but just in case
        if (this.editor.preview_mode || this.override_mode) {
            return;
        }
        if (!window.confirm("Duplicate this context?\n\n(Duplicates are not tethered to the original)")) {
            return;
        }
        (function (self) {
            Dash.Request(
                self,
                function (response) {
                    if (!Dash.Validate.Response(response)) {
                        return;
                    }
                    if (self.editor.on_duplicate_cb) {
                        self.editor.on_duplicate_cb(response);
                    }
                },
                self.api,
                {
                    "f": "duplicate",
                    "c2d_id": self.c2d_id
                }
            );
        })(this);
    };
    this.add_aspect_tool_row = function () {
        this.aspect_tool_row = this.property_box.AddToolRow();
        if (this.override_mode) {
            this.aspect_tool_row.html.css({
                "margin-left": 0
            });
        }
        this.get_aspect_tool_row_input("w");
        var label = this.aspect_tool_row.AddLabel("x", Dash.Size.Padding * 0.7, null, null, false);
        label.label.css({
            "padding-left": 0
        });
        this.get_aspect_tool_row_input("h");
    };
    this.get_aspect_tool_row_input = function (key) {
        this.aspect_tool_row_inputs[key] = (function (self) {
            return self.aspect_tool_row.AddInput(
                key.Title(),
                "aspect_ratio_" + key,
                Dash.Size.ColumnWidth * 0.25,
                false,
                function (value, input, additional_data) {
                    if (isNaN(value)) {
                        alert("Aspect ratio values must be numbers");
                        return;
                    }
                    self.set_data(additional_data["data_key"], value);
                    self.editor.ResizeCanvas();
                },
                null,
                self.can_edit,
                key === "w",
                key === "w" ? "Aspect Ratio:" : "",
                false,
                false
            );
        })(this);
        this.aspect_tool_row_inputs[key].html.css({
            "background": this.color.Background
        });
        this.aspect_tool_row_inputs[key].input.css({
            "text-align": "center"
        });
        return this.aspect_tool_row_inputs[key];
    };
    this.setup_styles();
}

function DashGuiContext2DEditorPanelLayer (layers, id, parent_id="") {
    this.layers = layers;
    this.id = id;
    this.parent_id = parent_id;
    this.input = null;
    this.selected = false;
    this.hidden_icon = null;
    this.locked_icon = null;
    this.linked_icon = null;
    this.icon_size_mult = 0.8;
    this.contained_icon = null;
    this.color_border_size = 3;
    this.html = $("<div></div>");
    this.color = this.layers.color;
    this.panel = this.layers.panel;
    this.editor = this.layers.editor;
    this.icon_area = $("<div></div>");
    this.can_edit = this.layers.can_edit;
    this.icon_color = this.color.StrokeLight;
    this.child_left_margin = Dash.Size.Padding;
    this.preview_mode = this.layers.preview_mode;
    this.setup_styles = function () {
        if (this.preview_mode) {
            return;
        }
        this.html.css({
            "padding": Dash.Size.Padding - this.color_border_size,
            "border-bottom": "1px solid " + this.color.PinstripeDark,
            "display": "flex",
            "cursor": "pointer",
            "box-sizing": "border-box",
            "opacity": this.can_edit ? 1 : 0.5
        });
        this.UpdateTintColor();
        this.add_type_icon();
        this.add_input();
        this.html.append(Dash.Gui.GetFlexSpacer());
        this.add_icon_area();
        this.RefreshConnections();
        var hidden = this.get_value("hidden");
        var locked = this.get_value("locked");
        var linked = this.get_value("linked");
        var contained = this.get_value("contained");
        if (hidden) {
            this.ToggleHidden(hidden);
        }
        if (locked) {
            this.ToggleLocked(locked);
        }
        if (!linked) {
            this.ToggleLinked(linked);
        }
        if (!contained) {
            this.ToggleContained(contained);
        }
    };
    this.GetID = function () {
        return this.id;
    };
    this.GetParentID = function () {
        return this.parent_id;
    };
    this.IsSelected = function () {
        return this.selected;
    };
    this.GetIndex = function () {
        return this.layers.get_data()["order"].indexOf(this.id);
    };
    this.GetData = function () {
        return this.get_data();
    };
    this.GetValue = function (key, default_value=null) {
        return this.get_value(key, default_value);
    };
    this.GetParentData = function () {
        return this.get_parent_data();
    };
    this.GetParentIndex = function () {
        if (!this.parent_id) {
            return -1;
        }
        return this.layers.layers[this.parent_id].GetIndex();
    };
    this.GetParentLayerOrder = function () {
        if (!this.parent_id) {
            return [];
        }
        var imported_context = this.get_parent_data()["imported_context"];
        var default_order = imported_context["layers"]["order"];
        return (!this.get_value("linked") ? default_order : (imported_context["context_overrides"]["layer_order"] || default_order));
    };
    this.GetChildrenLayerOrder = function () {
        var data = this.get_data();
        if (data["type"] !== "context") {
            return [];
        }
        var default_order = data["imported_context"]["layers"]["order"];
        return (!this.get_value("linked") ? default_order : (data["imported_context"]["context_overrides"]["layer_order"] || default_order));
    };
    this.SetData = function (key, value, callback=null) {
        return this.set_data(key, value, callback);
    };
    this.InputInFocus = function () {
        return this.input.InFocus();
    };
    this.Deselect = function () {
        if (!this.selected) {
            return;
        }
        var primitive = this.editor.canvas.primitives[self.id];
        if (primitive && primitive.drag_active) {
            return;
        }
        this.selected = false;
        this.html.css({
            "background": "",
            "cursor": "pointer"
        });
    };
    this.Select = function (from_canvas=false) {
        if (this.selected || this.preview_mode) {
            return;
        }
        this.layers.DeselectLayers();
        this.selected = true;
        this.html.css({
            "background": this.color.PinstripeDark,
            "cursor": "auto"
        });
        if (!from_canvas) {
            this.editor.SetCanvasActivePrimitive(this.id);
        }
        if (!this.layers.redrawing) {
            this.editor.AddToLog("Selected layer: " + this.get_value("display_name"));
            this.layers.UpdateToolbarIconStates();
            this.panel.UpdatePropertyBoxToolSlider("", this);
        }
        this.panel.SwitchContentToEditTab();
        // TODO: Ryan didn't like this, re-enable after it's improved - what's wrong with it?
        // Dash.Gui.ScrollToElement(this.layers.layers_box, this.html);
    };
    this.ToggleHidden = function (hidden) {
        if (hidden) {
            this.hidden_icon.html.show();
        }
        else {
            this.hidden_icon.html.hide();
        }
        if (!this.layers.redrawing) {
            this.editor.AddToLog("Layer " + (hidden ? "hidden" : "shown") + ": " + this.get_value("display_name"));
            this.set_data("hidden", hidden);
        }
    };
    this.ToggleLocked = function (locked) {
        if (locked) {
            this.locked_icon.html.show();
        }
        else {
            this.locked_icon.html.hide();
        }
        if (!this.layers.redrawing) {
            this.editor.AddToLog("Layer " + (locked ? "locked" : "unlocked") + ": " + this.get_value("display_name"));
            this.set_data("locked", locked);
        }
    };
    this.ToggleLinked = function (linked) {
        if (linked) {
            this.linked_icon.html.hide();
        }
        else {
            this.linked_icon.html.show();
        }
        if (!this.layers.redrawing) {
            this.editor.AddToLog("Layer " + (linked ? "linked" : "unlinked") + ": " + this.get_value("display_name"));
            (function (self) {
                self.set_data(
                    "linked",
                    linked,
                    function () {
                        var hidden = self.get_value("hidden");
                        var locked = self.get_value("locked");
                        self.ToggleHidden(hidden);
                        self.ToggleLocked(locked);
                        self.UpdateLabel();
                        if (self.editor.linked_preview) {
                            var layer = self.editor.linked_preview.editor_panel.layers_box.layers[self.id];
                            layer.ToggleHidden(hidden);
                            layer.ToggleLocked(locked);
                            layer.UpdateLabel();
                        }
                    }
                );
            })(this);
        }
    };
    this.ToggleContained = function (contained) {
        if (contained) {
            this.contained_icon.html.hide();
        }
        else {
            this.contained_icon.html.show();
        }
        if (!this.layers.redrawing) {
            this.editor.AddToLog(
                "Layer " + (
                    contained ? "contained" : "no longer contained"
                ) + " (within canvas): " + this.get_value("display_name")
            );
            (function (self) {
                self.set_data("contained", contained);
            })(this);
        }
    };
    this.RefreshConnections = function () {
        (function (self) {
            if (self.can_edit) {
                self.html.on("click", function (e) {
                    self.Select();
                    e.stopPropagation();
                });
            }
            self.html.on("mouseenter", function () {
                var primitive = self.editor.canvas.primitives[self.id];
                if (!primitive.selected) {
                    var css = {"border": "1px solid " + primitive.hover_color};
                    var brightness = primitive.get_value("brightness");
                    if (primitive.hasOwnProperty("update_filter")) {
                        primitive.update_filter(brightness + 0.1);
                    }
                    else {
                        css["filter"] = "brightness(" + (brightness + 0.1) + ")";
                    }
                    primitive.html.css(css);
                }
                if (!self.selected) {
                    self.html.css({
                        "background": self.color.Pinstripe
                    });
                }
            });
            self.html.on("mouseleave", function () {
                var primitive = self.editor.canvas.primitives[self.id];
                if (!primitive.selected) {
                    var css = {"border": "1px solid rgba(0, 0, 0, 0)"};
                    var brightness = primitive.get_value("brightness");
                    if (primitive.hasOwnProperty("update_filter")) {
                        primitive.update_filter(brightness);
                    }
                    else {
                        css["filter"] = "brightness(" + brightness + ")";
                    }
                    primitive.html.css(css);
                }
                if (!self.selected) {
                    self.html.css({
                        "background": "none"
                    });
                }
            });
        })(this);
    };
    this.UpdateLabel = function () {
        if (this.preview_mode) {
            return;
        }
        this.input.SetText(this.get_value("display_name"));
    };
    this.UpdateTintColor = function () {
        if (this.preview_mode) {
            return;
        }
        var tint_color = this.get_value("tint_color");
        this.html.css({
            "border-left": this.color_border_size + "px solid " + (tint_color || "rgba(0, 0, 0, 0)")
        });
    };
    this.add_type_icon = function () {
        var type_icon = (function (self) {
            return new Dash.Gui.CopyButton(
                self,
                function () {
                    return self.id;
                },
                self.icon_size_mult,
                Dash.Size.RowHeight,
                "default",
                self.get_type_icon_name(),
                self.color
            );
        })(this);
        type_icon.SetIconColor(this.icon_color);
        type_icon.html.css({
            "margin-top": Dash.Size.Padding * 0.1
        });
        type_icon.html.attr("title", "Copy Layer ID");
        var css = {"margin-right": Dash.Size.Padding * 0.5};
        if (this.parent_id) {
            css["margin-left"] = this.child_left_margin;
            css["border-left"] = "1px solid " + this.color.PinstripeDark;
            type_icon.button.icon.icon_html.css({
                "padding-left": Dash.Size.Padding * 0.3
            });
        }
        type_icon.html.css(css);
        this.html.append(type_icon.html);
    };
    this.add_input = function () {
        var display_name = this.get_value("display_name");
        this.input = new Dash.Gui.Input(display_name, this.color);
        this.input.html.css({
            // Allow some extra space to easily select the row, as well as showing icon toggles when applicable
            "width": (Dash.Size.ColumnWidth * 1.25) - (this.parent_id ? this.child_left_margin : 0),  // Match the ends
            "box-shadow": "none",
            "border": "1px solid " + this.color.PinstripeDark
        });
        this.input.input.css({
            "width": "calc(100% - " + Dash.Size.Padding + "px)"
        });
        if (display_name) {
            this.input.SetText(display_name);
        }
        if (this.can_edit) {
            this.input.SetOnSubmit(this.on_input_submit, this);
            this.input.SetOnAutosave(this.on_input_submit, this);
        }
        else {
            this.input.SetLocked(true);
        }
        (function (self) {
            self.input.html.attr(
                "title",
                function () {
                    return self.get_value("display_name") || "";
                }
            );
        })(this);
        this.html.append(this.input.html);
    };
    this.add_icon_area = function () {
        this.icon_area.css({
            "display": "flex"
        });
        this.hidden_icon = this.get_icon("hidden");
        this.locked_icon = this.get_icon("lock");
        this.contained_icon = this.get_icon("box_open");
        this.linked_icon = this.get_icon("unlink");
        this.hidden_icon.html.css({
            "margin-left": Dash.Size.Padding
        });
        this.locked_icon.html.css({
            "margin-left": Dash.Size.Padding
        });
        this.contained_icon.html.css({
            "margin-left": Dash.Size.Padding
        });
        this.linked_icon.html.css({
            "margin-left": Dash.Size.Padding
        });
        if (!this.get_value("hidden")) {
            this.hidden_icon.html.hide();
        }
        if (!this.get_value("locked")) {
            this.locked_icon.html.hide();
        }
        if (this.get_value("linked")) {
            this.linked_icon.html.hide();
        }
        if (this.get_value("contained")) {
            this.contained_icon.html.hide();
        }
        this.icon_area.append(this.hidden_icon.html);
        this.icon_area.append(this.locked_icon.html);
        this.icon_area.append(this.contained_icon.html);
        this.icon_area.append(this.linked_icon.html);
        this.html.append(this.icon_area);
    };
    this.get_icon = function (icon_name) {
        var icon = new Dash.Gui.Icon(this.color, icon_name, Dash.Size.RowHeight, this.icon_size_mult, this.icon_color);
        icon.html.css({
            "margin-top": Dash.Size.Padding * 0.1,
            "cursor": "default"
        });
        return icon;
    };
    this.get_type_icon_name = function () {
        var type = this.get_data()["type"];
        var icon_name = this.layers.icon_map[type] || "unknown";
        if (icon_name === "unknown") {
            console.warn("Unhandled layer type, couldn't get layer icon:", type);
        }
        return icon_name;
    };
    this.on_input_submit = function () {
        this.set_data("display_name", this.input.Text().trim());
    };
    this.set_data = function (key, value, callback=null) {
        this.layers.set_layer_property(key, value, this.id, this.parent_id, callback);
    };
    this.get_data = function () {
        return this.layers.get_data(this.parent_id)["data"][this.id];
    };
    this.get_parent_data = function () {
        if (!this.parent_id) {
            return {};
        }
        return this.layers.get_data()["data"][this.parent_id];
    };
    this.get_value = function (key, default_value=null) {
        if (default_value === null) {
            default_value = (
                  key === "display_name" ? ""
                : key === "hidden" || key === "locked" ? false
                : key === "linked" ? true
                : default_value
            );
        }
        var data = this.get_data();
        var bool = typeof default_value === "boolean";
        var value = bool ? (key in data ? data[key] : default_value) : (data[key] || default_value);
        if (!this.parent_id) {
            return value;
        }
        if (key !== "linked" && !this.get_value("linked")) {
            return value;
        }
        var imported_context = this.get_parent_data()["imported_context"];
        var layer_overrides = imported_context["layer_overrides"][id] || {};
        return bool ? (key in layer_overrides ? layer_overrides[key] : value) : (layer_overrides[key] || value);
    };
    this.setup_styles();
}

function DashGuiContext2DEditorPanelLayers (panel) {
    this.panel = panel;
    this.layers = {};
    this.header = null;
    this.toolbar = null;
    this.redrawing = false;
    this.html = $("<div></div>");
    this.color = this.panel.color;
    this.editor = this.panel.editor;
    this.layers_box = $("<div></div>");
    this.can_edit = this.panel.can_edit;
    this.preview_mode = this.panel.preview_mode;
    this.icon_map = {
        // Layer type: icon name
        "text": "font",
        "image": "image",
        "video": "film",
        "color": "color_palette",
        "context": "project_diagram"
    };
    this.setup_styles = function () {
        if (!this.preview_mode) {
            this.html.css({
                "position": "absolute",
                "inset": 0,
                "padding": Dash.Size.Padding,
                "padding-top": Dash.Size.Padding * 0.5,
                "box-sizing": "border-box",
                "border-top": "1px solid " + this.color.StrokeLight
            });
            this.add_header();
            this.layers_box.css({
                "position": "absolute",
                "inset": 0,
                "top": Dash.Size.ButtonHeight + (Dash.Size.Padding * 0.5),
                "overflow-y": "auto"
            });
            this.html.append(this.layers_box);
            this.setup_connections();
        }
        (function (self) {
            requestAnimationFrame(function () {
                self.redraw_layers();  // Wait for canvas to be fully drawn first
            });
        })(this);
    };
    this.InputInFocus = function () {
        for (var id in this.layers) {
            if (this.layers[id].InputInFocus()) {
                return true;
            }
        }
        return false;
    };
    this.AddLayer = function (id, select=true, parent_id="") {
        this.layers[id] = new DashGuiContext2DEditorPanelLayer(this, id, parent_id);
        var data = this.layers[id].GetData();
        if (data["type"] === "context") {
            var imported_layers = data["imported_context"]["layers"]["data"];
            // If imported context is *this* context, then the layer ids will be the same, which will
            // be a problem (same applies to primitives, since they also rely on layer IDs), but as of
            // writing, importing a context into itself is disabled in DashGuiContext2DEditorPanelContentNew
            for (var imported_id of this.layers[id].GetChildrenLayerOrder()) {
                if (imported_layers[imported_id]["type"] === "context") {
                    alert(
                        "A context has been imported that has its own imported context(s).\n" +
                        "Importing nested contexts within contexts is complex and not yet supported.\n" +
                        "The nested context(s) within the imported context will be ignored."
                    );
                    // We probably need to add support for this, it's just very complicated because of
                    // the need to handle overrides recursively and it's not needed/important for now
                    continue;
                }
                this.AddLayer(imported_id, false, id);
            }
        }
        if (!this.preview_mode) {
            this.layers_box.prepend(this.layers[id].html);
            if (select) {
                this.layers[id].Select();
            }
        }
        this.editor.AddCanvasPrimitive(
            this.layers[id],
            this.preview_mode ? false : select
        );
    };
    this.Duplicate = function () {
        // Should never happen, but just in case
        if (this.editor.preview_mode || this.editor.override_mode) {
            return;
        }
        var id = this.GetSelectedID();
        if (!id) {
            return;
        }
        (function (self) {
            Dash.Request(
                this,
                function (response) {
                    if (!Dash.Validate.Response(response)) {
                        return;
                    }
                    self.OnNewLayer(response);
                },
                self.editor.api,
                {
                    "f": "duplicate_layer",
                    "c2d_id": self.editor.c2d_id,
                    "layer_id": id
                }
            );
        })(this);
    };
    this.Delete = function () {
        var layer = this.GetSelectedLayer();
        if (!layer) {
            return;
        }
        var id = layer.GetID();
        var parent_id = layer.GetParentID();
        var parent_layer_order = layer.GetParentLayerOrder();
        var order = [...(parent_id ? parent_layer_order : this.get_data()["order"])];
        order.Remove(id);
        (function (self) {
            if (parent_id) {
                self.set_layer_property(
                    "layer_order",
                    order,
                    id,
                    parent_id,
                    function () {
                        self.on_delete(id);
                        if (self.editor.linked_preview) {
                            self.editor.linked_preview.editor_panel.layers_box.on_delete(id);
                        }
                    }
                );
            }
            else {
                self.set_layer_order(
                    order,
                    function () {
                        self.on_delete(id);
                        if (self.editor.linked_preview) {
                            self.editor.linked_preview.editor_panel.layers_box.on_delete(id);
                        }
                    }
                );
            }
        })(this);
    };
    this.Download = function (callback=null) {
        var layer = this.GetSelectedLayer();
        if (!layer) {
            if (callback) {
                callback();
            }
            alert("Can't download, no selected layer found");
            return;
        }
        var data = layer.GetData()["file"];
        if (!data) {
            if (callback) {
                callback();
            }
            alert("Can't download, selected layer data not found");
            return;
        }
        var url = (data["url"] || data["orig_url"] || data["thumb_png_url"] || data["thumb_jpg_url"] || "");
        if (!url) {
            if (callback) {
                callback();
            }
            alert("Can't download, url not found");
            return;
        }
        Dash.Gui.OpenFileURLDownloadDialog(url, "", callback);
    };
    this.MoveUp = function () {
        this.on_move();
    };
    this.MoveDown = function () {
        this.on_move(false);
    };
    this.ToggleHidden = function (hidden) {
        var layer = this.GetSelectedLayer();
        if (!layer) {
            this.toolbar.ReEnableToggle("hidden");
            return;
        }
        layer.ToggleHidden(hidden);
    };
    this.ToggleLocked = function (locked) {
        var layer = this.GetSelectedLayer();
        if (!layer) {
            this.toolbar.ReEnableToggle("locked");
            return;
        }
        layer.ToggleLocked(locked);
    };
    this.ToggleContained = function (contained) {
        var layer = this.GetSelectedLayer();
        if (!layer) {
            this.toolbar.ReEnableToggle("contained");
            return;
        }
        layer.ToggleContained(contained);
    };
    this.ToggleLinked = function (linked) {
        var layer = this.GetSelectedLayer();
        if (!layer) {
            this.toolbar.ReEnableToggle("linked");
            return;
        }
        layer.ToggleLinked(linked);
    };
    this.GetSelectedID = function () {
        var layer = this.GetSelectedLayer();
        if (layer) {
            return layer.GetID();
        }
        return "";
    };
    this.GetSelectedLayer = function () {
        for (var id in this.layers) {
            if (this.layers[id].IsSelected()) {
                return this.layers[id];
            }
        }
        return null;
    };
    this.DeselectLayers = function () {
        for (var id in this.layers) {
            this.layers[id].Deselect();
        }
        this.UpdateToolbarIconStates();
        this.panel.UpdatePropertyBoxToolSlider();
    };
    this.UpdateToolbarIconStates = function () {
        this.toolbar.UpdateIconStates();
    };
    this.Select = function (id, from_canvas=true) {
        this.layers[id].Select(from_canvas);
    };
    this.SetProperty = function (key, value, id) {
        this.set_layer_property(key, value, id);
    };
    this.OnNewLayer = function (response) {
        this.on_data(response, true, true);
    };
    this.Redraw = function (select=false, redraw_primitives=false) {
        this.redraw_layers(select, redraw_primitives);
    };
    this.on_move = function (up=true) {
        var layer = this.GetSelectedLayer();
        if (!layer) {
            return;
        }
        var id = layer.GetID();
        var parent_id = layer.GetParentID();
        var parent_layer_order = layer.GetParentLayerOrder();
        var order = [...(parent_id ? parent_layer_order : this.get_data()["order"])];
        var index = parent_id ? parent_layer_order.indexOf(id) : layer.GetIndex();
        if (index < 0 || order.length < 2 || (up && index === (order.length - 1)) || (!up && index === 0)) {
            return;
        }
        delete this.layers[id];
        order.Remove(id);
        order.splice((up ? index + 1 : index - 1), 0, id);
        (function (self) {
            if (parent_id) {
                self.set_layer_property(
                    "layer_order",
                    order,
                    id,
                    parent_id,
                    function () {
                        self._on_move(id);
                        if (self.editor.linked_preview) {
                            self.editor.linked_preview.editor_panel.layers_box._on_move(id);
                        }
                    }
                );
            }
            else {
                self.set_layer_order(
                    order,
                    function () {
                        self._on_move(id);
                        if (self.editor.linked_preview) {
                            self.editor.linked_preview.editor_panel.layers_box._on_move(id);
                        }
                    }
                );
            }
        })(this);
    };
    this.on_delete = function (id) {
        this.redraw_layers();
        this.editor.RemoveCanvasPrimitive(id);
        if (!this.preview_mode) {
            this.panel.SwitchContentToNewTab();
        }
    };
    this.get_data = function (parent_id="") {
        var layers = this.editor.data["layers"];
        if (parent_id) {
            return layers["data"][parent_id]["imported_context"]["layers"];
        }
        return layers;
    };
    this.on_data = function (response, redraw=false, select=false) {
        this.editor.data = response;
        if (redraw) {
            this.redraw_layers(select);
        }
    };
    this.set_layer_order = function (order, callback=null) {
        this.editor.set_data("layer_order", order, callback);
    };
    this.set_layer_property = function (key, value, id="", parent_id="", callback=null) {
        // Should never happen, but just in case
        if (this.editor.preview_mode) {
            return;
        }
        if (!id) {
            id = this.GetSelectedID();
        }
        if (!id) {  // Shouldn't happen, unless there are no layers, in which case, this shouldn't have been called
            console.error("Failed to get current layer ID");
            this.toolbar.ReEnableToggle(key);
            return;
        }
        if (typeof value === "object") {
            value = JSON.stringify(value);
        }
        var params = {
            "c2d_id": this.editor.c2d_id,
            "layer_id": parent_id || id,
            ...this.editor.extra_request_params
        };
        if (key === "font_id") {
            var font_url = "";
            if (value) {
                for (var option of this.editor.ComboOptions["fonts"]) {
                    if (option["id"] !== value) {
                        continue;
                    }
                    font_url = option["url"];
                    break;
                }
            }
            params["f"] = "set_layer_properties";
            params["properties"] = {
                "font_id": value,
                "font_url": font_url
            };
        }
        else {
            params["f"] = "set_layer_property";
            params["key"] = key;
            params["value"] = value;
        }
        if (parent_id && key !== "layer_order") {
            params["imported_context_layer_id"] = id;
        }
        if (this.editor.override_mode) {
            if (params["properties"]) {
                var renamed = {};
                for (var k in params["properties"]) {
                    renamed[k + "_override"] = params["properties"][k];
                }
                params["properties"] = renamed;
            }
            if (params["key"]) {
                params["key"] += "_override";
            }
        }
        if (params["properties"]) {
            params["properties"] = JSON.stringify(params["properties"]);
        }
        (function (self) {
            Dash.Request(
                self,
                function (response) {
                    self.on_set_layer_property(response, key, value, id, parent_id);
                    if (self.editor.linked_preview) {
                        self.editor.linked_preview.editor_panel.layers_box.on_set_layer_property(
                            response, key, value, id, parent_id
                        );
                    }
                    if (callback) {
                        callback();
                    }
                },
                self.editor.api,
                params
            );
        })(this);
    };
    this.on_set_layer_property = function (response, key, value, id, parent_id="") {
        if (!Dash.Validate.Response(response)) {
            if (!this.preview_mode) {
                this.toolbar.ReEnableToggle(key);
            }
            return;
        }
        this.on_data(response);
        if (key === "display_name" || key === "text_value") {
            this.layers[id].UpdateLabel();
        }
        else if (key === "tint_color") {
            this.layers[id].UpdateTintColor();
        }
        var display_name;
        if (parent_id) {
            var imported_context = this.editor.data["layers"]["data"][parent_id]["imported_context"];
            var overrides = imported_context["layer_overrides"][id] || {};
            var layer_data = imported_context["layers"]["data"][id];
            var linked = "linked" in overrides ? overrides["linked"] : layer_data["linked"];
            display_name = linked ? (overrides["display_name"] || layer_data["display_name"]) : layer_data["display_name"];
        }
        else {
            display_name = this.get_data()["data"][id]["display_name"];
        }
        if (key !== "layer_order") {
            this.editor.AddToLog("[" + display_name + "] Set " + "'" + key + "' to '" + value + "'");
            this.editor.UpdateCanvasPrimitive(key, value, id);
        }
        if (!this.preview_mode) {
            this.toolbar.ReEnableToggle(key);
            if (key === "hidden" || key === "locked") {
                this.panel.RedrawCurrentContentTab();
            }
        }
    };
    this.redraw_layers = function (select=false, redraw_primitives=false) {
        this.redrawing = true;
        if (redraw_primitives) {
            this.editor.RemoveAllCanvasPrimitives();
        }
        this.layers = {};
        this.layers_box.empty();
        for (var id of this.get_data()["order"]) {
            this.AddLayer(id, select);
        }
        this.redrawing = false;
    };
    this.add_header = function () {
        this.header = new Dash.Gui.Header("Layers");
        this.header.ReplaceBorderWithIcon("layers");
        this.header.html.css({
            "margin-left": -Dash.Size.Padding * 0.5,
            "margin-right": -Dash.Size.Padding * 0.5,
            "padding-left": Dash.Size.Padding * 0.5,
            "padding-right": Dash.Size.Padding * 0.5,
            "padding-bottom": Dash.Size.Padding * 0.5,
            "border-bottom": "1px solid " + this.color.PinstripeDark
        });
        this.header.label.css({
            "padding-left": Dash.Size.Padding * 0.5
        });
        this.header.html.append(new Dash.Gui.GetFlexSpacer());
        this.toolbar = new DashGuiContext2DEditorPanelLayersToolbar(this);
        this.header.html.append(this.toolbar.html);
        this.html.append(this.header.html);
    };
    this.setup_connections = function () {
        (function (self) {
            self.layers_box.on("click", function () {
                self.editor.DeselectAllLayers();
            });
        })(this);
    };
    this._on_move = function (id) {
        this.redraw_layers();
        this.editor.UpdateCanvasPrimitiveZIndexes();
        this.layers[id].Select();
        Dash.Gui.ScrollToElement(this.layers_box, this.layers[id].html);
    };
    this.setup_styles();
}

function DashGuiContext2DEditorPanelContent (panel) {
    this.panel = panel;
    this.html = null;
    this.header = null;
    this.layout = null;
    this.floating_combos = [];
    this.new_tab_index = null;
    this.edit_tab_index = null;
    this.color = this.panel.color;
    this.editor = this.panel.editor;
    this.last_instantiated_class = null;
    this.can_edit = this.panel.can_edit;
    this.edit_tab_custom_context_cbs = {};
    this.new_tab_custom_element_configs = [];
    this.edit_tab_custom_element_configs = {};
    this.inactive_tab_bg_color = Dash.Color.GetTransparent(this.color.Text, 0.05);
    // Increase this when any other elements are added that would increase the overall height
    // (thought at a certain point, probably now, need to stop increasing this and just let it scroll)
    this.min_height = (Dash.Size.ButtonHeight * 9.5) + (this.panel.editor.min_height_extensions["editor_panel_content_box"] || 0);
    this.PrimitiveTypes = [
        "text",
        "color",
        "image",
        "video"
        // Add to this list as support for more primitives are added
    ];
    this.setup_styles = function () {
        this.layout = new Dash.Layout.Tabs.Top(this, "dash_gui_context_2d_editor_panel_content");
        this.layout.OnTabChanged(this.on_tab_changed);
        this.html = this.layout.html;
        this.html.css({
            "background": "none",
            "position": "absolute",
            "inset": 0,
            "padding": Dash.Size.Padding,
            "box-sizing": "border-box",
            "border-top": "1px solid " + this.color.StrokeLight,
            "border-bottom": "1px solid " + this.color.StrokeLight
        });
        this.add_header();
        if (!this.editor.override_mode) {
            this.add_new_box();
        }
        this.add_edit_box();
        this.set_header_right_margin();
    };
    this.InputInFocus = function () {
        var tab = this.layout.all_content[this.layout.GetCurrentIndex()]["content_div_html_class"];
        if (tab.hasOwnProperty("InputInFocus")) {
            return tab.InputInFocus();
        }
        return false;
    };
    this.SwitchToEditTab = function () {
        this.layout.LoadIndex(this.edit_tab_index);
    };
    this.SwitchToNewTab = function () {
        if (this.editor.override_mode) {
            return;  // No New tab
        }
        this.layout.LoadIndex(this.new_tab_index);
    };
    this.RedrawCurrentTab = function () {
        if (!this.last_instantiated_class || !this.last_instantiated_class.hasOwnProperty("Redraw")) {
            return;
        }
        this.last_instantiated_class.Redraw();
    };
    this.UpdateComboOptions = function () {
        if (!this.last_instantiated_class) {
            return;
        }
        if (this.layout.GetCurrentIndex() === this.edit_tab_index) {
            this.last_instantiated_class.UpdateFontComboOptions();
        }
        else if (this.layout.GetCurrentIndex() === this.new_tab_index) {
            this.last_instantiated_class.UpdateImportComboOptions();
        }
    };
    this.GetCombo = function (label_text, options, callback, default_value="") {
        var tool_row = new Dash.Gui.ToolRow(this);
        tool_row.html.css({
            "margin-left": 0,
            "margin-bottom": 0
        });
        (function (self) {
            tool_row.AddComboRow(
                label_text,
                options,
                default_value,
                callback,
                {},
                {"read_only": !self.can_edit},
                false
            );
        })(this);
        return tool_row;
    };
    this.FloatCombos = function (instantiated_class) {
        if (!instantiated_class.floating_combos) {
            return;
        }
        // I couldn't get the combo skirt/rows to appear above the other panels, no matter
        // what I did, so this basically detaches it and adds it back on top of everything
        var combo;
        for (combo of this.floating_combos) {
            combo.html.remove();
        }
        this.floating_combos = [];
        for (var floating_combo of instantiated_class.floating_combos) {
            combo = floating_combo["tool_row"].elements.Last().combo;
            if (!combo) {
                continue;
            }
            combo.DisableAutoGravity();
            combo.html.detach();
            combo.html.css({
                "position": "absolute",
                "top": (
                      this.panel.property_box.html.outerHeight()  // Editor panel top box height
                    + Dash.Size.ButtonHeight  // Tabs height
                    + floating_combo["tool_row"].html[0].offsetTop  // Tool row offset from top of context div
                    + floating_combo["tool_row"].html.parent()[0].offsetTop  // Context div offset from top of content box
                    + 1  // Bottom border of tabs
                ),
                "left": floating_combo["tool_row"].elements[0].html.outerWidth() + (Dash.Size.Padding * 1.5)  // Combo label
            });
            this.panel.html.append(combo.html);
            this.floating_combos.push(combo);
            combo.RefreshConnections();
        }
    };
    this.AddCustomElementToNewTab = function (
        built_in_function_name="", built_in_function_params=[], callback_that_returns_html=null, binder=null
    ) {
        if ((!built_in_function_name && !callback_that_returns_html) || (built_in_function_name && callback_that_returns_html)) {
            console.error(
                "AddCustomElementToNewTab requires either 'built_in_function_name' " +
                "or 'callback_that_returns_html' to be provided (and not both)."
            );
            return;
        }
        this.new_tab_custom_element_configs.push({
            "function_name": built_in_function_name,
            "function_params": built_in_function_params,
            "callback": binder && callback_that_returns_html ? callback_that_returns_html.bind(binder) : callback_that_returns_html
        });
    };
    this.AddCustomElementToEditTab = function (
        context_key, built_in_function_name="", built_in_function_params=[], callback_that_returns_html=null, binder=null
    ) {
        if ((!built_in_function_name && !callback_that_returns_html) || (built_in_function_name && callback_that_returns_html)) {
            console.error(
                "AddCustomElementToEditTab requires either 'built_in_function_name' " +
                "or 'callback_that_returns_html' to be provided (and not both)."
            );
            return;
        }
        if (!(context_key in this.edit_tab_custom_element_configs)) {
            this.edit_tab_custom_element_configs[context_key] = [];
        }
        this.edit_tab_custom_element_configs[context_key].push({
            "function_name": built_in_function_name,
            "function_params": built_in_function_params,
            "callback": binder && callback_that_returns_html ? callback_that_returns_html.bind(binder) : callback_that_returns_html
        });
    };
    this.AddCustomContextToEditTab = function (context_key, callback_that_returns_html=null, binder=null) {
        this.edit_tab_custom_context_cbs[context_key] = (
            binder && callback_that_returns_html ? callback_that_returns_html.bind(binder) : callback_that_returns_html
        );
    };
    this.on_tab_changed = function (selected_content_data, instantiated_class=null) {
        if (this.last_instantiated_class && this.last_instantiated_class.floating_combos) {
            for (var floating_combo of this.last_instantiated_class.floating_combos) {
                var combo = floating_combo["tool_row"].elements.Last().combo;
                if (!combo) {
                    return;
                }
                combo.html.remove();
                if (this.floating_combos.includes(combo)) {
                    this.floating_combos.Remove(combo);
                }
            }
            this.last_instantiated_class.floating_combos = [];
        }
        this.set_inactive_tabs_bg_color(selected_content_data);
        this.last_instantiated_class = instantiated_class;
    };
    this.add_edit_box = function () {
        this.layout.Prepend("Edit", function () {
            return new DashGuiContext2DEditorPanelContentEdit(this);
        });
        this.edit_tab_index = this.layout.all_content.length - 1;
    };
    this.add_new_box = function () {
        this.layout.Prepend("New", function () {
            return new DashGuiContext2DEditorPanelContentNew(this);
        });
        this.new_tab_index = this.layout.all_content.length - 1;
    };
    this.add_header = function () {
        this.header = new Dash.Gui.Header("Content");
        this.header.ReplaceBorderWithIcon("pencil_paintbrush");
        this.header.html.css({
            "padding-left": Dash.Size.Padding * 0.5,
            "margin-left": Dash.Size.Padding * 0.5,
            "margin-top": Dash.Size.Padding * 0.5,
            "padding-bottom": Dash.Size.Padding * 0.4,
            "border-bottom": "1px solid " + this.color.PinstripeDark,
            "flex": 2
        });
        this.header.label.css({
            "padding-left": Dash.Size.Padding * 0.5
        });
        this.layout.AppendHTML(this.header.html);
    };
    this.set_header_right_margin = function () {
        var tabs_width = 0;
        for (var content_data of this.layout.all_content) {
            var width = content_data["button"].html.width();
            if (!width) {
                (function (self) {
                    setTimeout(
                        function () {
                            self.set_header_right_margin();
                        },
                        100
                    );
                })(this);
                return;
            }
            tabs_width += width;
        }
        this.header.html.css({
            "margin-right": tabs_width + (Dash.Size.Padding * (this.layout.all_content.length)) + (Dash.Size.Padding * 0.5)
        });
    };
    this.set_inactive_tabs_bg_color = function (selected_content_data) {
        for (var content_data of this.layout.all_content) {
            if (selected_content_data["button"] === content_data["button"]) {
                continue;
            }
            content_data["button"].html.css({
                "background": this.inactive_tab_bg_color
            });
        }
    };
    this.setup_styles();
}

function DashGuiContext2DEditorPanelContentNew (content) {
    this.content = content;
    this.import_combo = null;
    this.floating_combos = [];
    this.html = $("<div></div>");
    this.color = this.content.color;
    this.panel = this.content.panel;
    this.editor = this.panel.editor;
    this.can_edit = this.content.can_edit;
    this.setup_styles = function () {
        this.html.css({
            "position": "absolute",
            "inset": 0,
            "padding": Dash.Size.Padding,
            "overflow-x": "hidden"
        });
        (function (self) {
            requestAnimationFrame(function () {
                setTimeout(
                    function () {
                        self.draw_types();
                        self.add_import_combo();
                        requestAnimationFrame(function () {
                            self.content.FloatCombos(self);
                        });
                    },
                    100
                );
            });
        })(this);
    };
    // Called by DashGuiContext2D when combo options are received
    this.UpdateImportComboOptions = function () {
        if (!this.import_combo) {
            return;
        }
        this.import_combo.Update(
            this.editor.ComboOptions["contexts"] ? this.editor.ComboOptions["contexts"] : [{"id": "", "label_text": "ERROR"}],
            "",
            true
        );
    };
    this.draw_types = function () {
        for (var primitive_type of this.content.PrimitiveTypes) {
            if (["text", "color"].includes(primitive_type)) {
                (function (self, primitive_type) {
                    self.html.append(self.get_button(
                        "New " + primitive_type.Title() + " Layer",
                        function (event, button) {
                            // Should never happen, but just in case
                            if (self.editor.preview_mode || self.editor.override_mode) {
                                return;
                            }
                            button.SetLoading(true);
                            button.Disable();
                            Dash.Request(
                                self,
                                function (response) {
                                    self.on_new_layer(response, button);
                                },
                                self.editor.api,
                                {
                                    "f": "add_" + primitive_type + "_layer",
                                    "c2d_id": self.editor.c2d_id
                                }
                            );
                        }
                    ).html);
                })(this, primitive_type);
            }
            else if (["image", "video"].includes(primitive_type)) {
                this.html.append(this.get_upload_button(primitive_type, "New " + primitive_type.Title() + " Layer").html);
            }
            else {
                console.warn("Warning: Unhandled primitive type in 'New' tab:", primitive_type);
            }
        }
        for (var element_config of this.content.new_tab_custom_element_configs) {
            if (element_config["callback"]) {
                this.html.append(element_config["callback"]());
            }
            else {
                var element = this[element_config["function_name"]](...element_config["function_params"]);
                this.html.append(element.hasOwnProperty("html") ? element.html : element);
            }
        }
    };
    this.get_button = function (label_text, callback) {
        var button = new Dash.Gui.Button(label_text, callback, this, this.color, {"style": "toolbar"});
        button.html.css({
            "margin-top": 0,
            "margin-right": 0,
            "margin-bottom": Dash.Size.Padding
        });
        if (!this.can_edit) {
            button.Disable();
        }
        return button;
    };
    this.on_new_layer = function (response, element) {
        if (!Dash.Validate.Response(response)) {
            element.SetLoading(false);
            element.Enable();
            return;
        }
        this.panel.OnNewLayer(response);
        element.SetLoading(false);
        element.Enable();
    };
    this.get_upload_button = function (primitive_type, label_text) {
        var media = ["image", "video"].includes(primitive_type);
        var button = this.get_button(label_text + " (Upload)", this.on_new_layer);
        var params = {
            "f": "add_" + (media ? "media" : primitive_type) + "_layer",
            "c2d_id": this.editor.c2d_id
        };
        if (media) {
            params["media_type"] = primitive_type;
        }
        button.SetFileUploader(
            this.editor.api,
            params,
            function () {
                button.SetLoading(true);
                button.Disable();
            },
            {},
            true
        );
        return button;
    };
    this.add_import_combo = function () {
        this.import_combo = (function (self) {
            return self.add_combo(
                "Import Another Context",
                "contexts",
                function (selected_option) {
                    // Should never happen, but just in case
                    if (self.editor.preview_mode || self.editor.override_mode) {
                        return;
                    }
                    if (!selected_option["id"]) {
                        return;
                    }
                    
                    if (selected_option["id"] === self.editor.c2d_id) {
                        alert("Importing a context into itself is not yet supported.");
                        return;
                    }
                    self.import_combo.SetLoading(true, true);
                    self.import_combo.Disable();
                    Dash.Request(
                        self,
                        function (response) {
                            self.on_new_layer(response, self.import_combo);
                        },
                        self.editor.api,
                        {
                            "f": "import_another_context",
                            "c2d_id": self.editor.c2d_id,
                            "c2d_id_to_import": selected_option["id"]
                        }
                    );
                }
            );
        })(this);
    };
    this.add_combo = function (label_text, options_key, callback, wrap_cb=false) {
        var tool_row = (function (self) {
            return self.content.GetCombo(
                label_text,
                self.editor.ComboOptions ? (
                    self.editor.ComboOptions[options_key] ? self.editor.ComboOptions[options_key] : [{"id": "", "label_text": "ERROR"}]
                ) : [{"id": "", "label_text": "Loading..."}],
                wrap_cb ? function (selected_option, previous_option, toolbar) {
                    callback(self, selected_option, toolbar.objects[0].html);
                } : callback
            );
        })(this);
        this.floating_combos.push({
            "tool_row": tool_row
        });
        this.html.append(tool_row.html);
        return tool_row.elements.Last().combo;
    };
    this.setup_styles();
}

function DashGuiContext2DEditorPanelLayersToolbar (layers) {
    this.layers = layers;
    this.icon_size = 120;
    this.icon_buttons = {};
    this.icon_toggles = {};
    this.html = $("<div></div>");
    this.color = this.layers.color;
    this.editor = this.layers.editor;
    this.can_edit = this.layers.can_edit;
    // Skipping folders/grouping in V1 of this system, as it's nice to
    // have but not necessary and can come later when it's needed/desired
    this.setup_styles = function () {
        this.html.css({
            "display": "flex"
        });
        this.add_icon_buttons();
        this.add_icon_toggles();
    };
    this.UpdateIconStates = function () {
        var selected_layer = this.layers.GetSelectedLayer();
        var revert = !selected_layer;
        var parent_id = selected_layer ? selected_layer.GetParentID() : "";
        var type = selected_layer ? selected_layer.GetData()["type"] : null;
        if (this.icon_buttons["download"]) {
            if (type === "image" || type === "video") {
                this.icon_buttons["download"].Enable();
            }
            else {
                this.icon_buttons["download"].Disable();
            }
        }
        for (var key in this.icon_toggles) {
            if (revert) {
                this.icon_toggles[key].RevertToDefaultState(true, revert);
                continue;
            }
            if (!parent_id && key === "linked") {
                this.icon_toggles[key].Disable();
            }
            else {
                this.icon_toggles[key].Enable();
            }
            if (selected_layer.GetValue(key) !== this.icon_toggles[key].IsChecked()) {
                this.icon_toggles[key].Toggle(true);
            }
        }
    };
    this.ReEnableToggle = function (key) {
        if (!this.icon_toggles[key]) {
            return;
        }
        this.icon_toggles[key].SetLoading(false);
        this.icon_toggles[key].Enable();
    };
    this.add_icon_toggle = function (selected_layer, key, true_icon_name, false_icon_name, default_state=false) {
        this.icon_toggles[key] = (function (self) {
            return new Dash.Gui.Checkbox(
                "",
                selected_layer ? selected_layer.GetValue(key, default_state) : default_state,
                self.color,
                "Toggle " + key.Title(),
                self,
                function (checkbox) {
                    checkbox.SetLoading(true);
                    checkbox.Disable();
                    if (key === "hidden") {
                        self.layers.ToggleHidden(checkbox.IsChecked());
                    }
                    else if (key === "locked") {
                        self.layers.ToggleLocked(checkbox.IsChecked());
                    }
                    else if (key === "contained") {
                        self.layers.ToggleContained(checkbox.IsChecked());
                    }
                    else if (key === "linked") {
                        self.layers.ToggleLinked(checkbox.IsChecked());
                    }
                    else {
                        console.error("Unhandled key:", key);
                    }
                }
            );
        })(this);
        this.icon_toggles[key].html.css({
            "position": "relative",
            "right": -Dash.Size.Padding * 0.5,
            "top": -Dash.Size.Padding * 0.5,
            "padding": Dash.Size.Padding * 0.5,
            "border-radius": Dash.Size.BorderRadius
        });
        this.icon_toggles[key].SetIconSize(this.icon_size);
        this.icon_toggles[key].SetTrueIconName(true_icon_name);
        this.icon_toggles[key].SetFalseIconName(false_icon_name);
        this.icon_toggles[key].SetAbleToToggleCallback(this.layer_is_selected, this);
        if (this.can_edit) {
            this.add_on_hover(this.icon_toggles[key].html);
        }
        else {
            this.icon_toggles[key].SetReadOnly();
            this.icon_toggles[key].html.css({
                "opacity": 0.5
            });
        }
        this.html.append(this.icon_toggles[key].html);
    };
    this.layer_is_selected = function () {
        return this.layers.GetSelectedLayer() !== null;
    };
    this.add_icon_button = function (key, icon_name, callback) {
        this.icon_buttons[key] = new Dash.Gui.IconButton(icon_name, callback, this, this.color);
        this.icon_buttons[key].html.css({
            "position": "relative",
            "right": -Dash.Size.Padding * 0.5,
            "top": -Dash.Size.Padding * 0.5,
            "padding": Dash.Size.Padding * 0.5,
            "margin-top": Dash.Size.Padding * 0.1
        });
        this.icon_buttons[key].SetIconSize(this.icon_size);
        this.icon_buttons[key].SetHoverHint(key.Title());
        if (this.can_edit) {
            this.add_on_hover(this.icon_buttons[key].html);
        }
        else {
            this.icon_buttons[key].Disable();
        }
        this.html.append(this.icon_buttons[key].html);
    };
    this.add_on_hover = function (html) {
        (function (self) {
            html.on("mouseenter", function () {
                html.css({
                    "background": self.color.Pinstripe
                });
            });
        })(this);
        html.on("mouseleave", function () {
            html.css({
                "background": ""
            });
        });
    };
    this.add_icon_toggles = function () {
        var selected_layer = this.layers.GetSelectedLayer();
        this.add_icon_toggle(selected_layer, "hidden", "visible", "hidden");
        this.add_icon_toggle(selected_layer, "locked", "unlock_alt", "lock");
        this.add_icon_toggle(selected_layer, "contained", "box_open", "box", true);
        this.add_icon_toggle(selected_layer, "linked", "unlink", "linked", true);
    };
    this.add_icon_buttons = function () {
        if (this.editor.override_mode) {
            return;
        }
        (function (self) {
            self.add_icon_button(
                "download",
                "download",
                function () {
                    self.icon_buttons["download"].Disable();
                    self.icon_buttons["download"].SetLoading(true);
                    self.layers.Download(function () {
                        self.icon_buttons["download"].SetLoading(false);
                        self.icon_buttons["download"].Enable();
                    });
                }
            );
            self.add_icon_button(
                "duplicate",
                "clone",
                function () {
                    self.layers.Duplicate();
                }
            );
            self.add_icon_button(
                "delete",
                "trash_alt",
                function () {
                    self.layers.Delete();
                }
            );
            self.add_icon_button(
                "move_up",
                "arrow_up_alt",
                function () {
                    self.layers.MoveUp();
                }
            );
            self.add_icon_button(
                "move_down",
                "arrow_down_alt",
                function () {
                    self.layers.MoveDown();
                }
            );
        })(this);
        this.icon_buttons["download"].Disable();
    };
    this.setup_styles();
}

function DashGuiContext2DEditorPanelContentEdit (content) {
    this.content = content;
    this.contexts = {};
    this.font_combo = null;
    this.redrawing = false;
    this.floating_combos = [];
    this.html = $("<div></div>");
    this.color = this.content.color;
    this.panel = this.content.panel;
    this.editor = this.panel.editor;
    this.no_selected_layer_label = null;
    this.can_edit = this.content.can_edit;
    this.setup_styles = function () {
        this.html.css({
            "position": "absolute",
            "inset": 0,
            "padding": Dash.Size.Padding,
            "overflow-x": "hidden"
        });
        var key;
        for (key of ["general", ...this.content.PrimitiveTypes]) {
            this.add_context(key);
        }
        for (key in this.content.edit_tab_custom_context_cbs) {
            this.add_context(key);
        }
        this.Redraw();
    };
    this.InputInFocus = function () {
        for (var key in this.contexts) {
            if (!this.contexts[key]["visible"]) {
                continue;
            }
            for (var input of this.contexts[key]["inputs"]) {
                if (input.InFocus()) {
                    return true;
                }
            }
        }
        return false;
    };
    // Called by DashGuiContext2D when combo options are received
    this.UpdateFontComboOptions = function () {
        if (!this.font_combo) {
            return;
        }
        this.font_combo.Update(
            this.editor.ComboOptions["fonts"] ? this.editor.ComboOptions["fonts"] : [{"id": "", "label_text": "ERROR"}],
            this.get_data()["font_id"] || "",
            true
        );
    };
    this.Redraw = function () {
        this.redrawing = true;
        this.hide_no_selected_layer_label();
        for (var key in this.contexts) {
            if (key === "general") {
                continue;
            }
            this.hide_context(key);
        }
        var selected_layer = this.panel.GetSelectedLayer();
        var layer_data = selected_layer ? selected_layer.GetData() : {};
        if (!selected_layer) {
            this.hide_context("general");
            this.show_no_selected_layer_label(layer_data);
            return;
        }
        this.show_context("general");  // Always show general context when a layer is selected
        this.show_context(layer_data["type"]);
        (function (self) {
            requestAnimationFrame(function () {
                self.content.FloatCombos(self);
            });
            var disabled = layer_data["hidden"] || layer_data["locked"];
            for (var key in self.contexts) {
                var context = self.contexts[key];
                if (!context["visible"]) {
                    continue;
                }
                for (var element of context["all_elements"]) {
                    var html = typeof element.html === "function" ? element : (element.html || element);
                    if (element.hasOwnProperty("Disable") && element.hasOwnProperty("Enable")) {
                        if (disabled) {
                            element.Disable();
                        }
                        else {
                            element.Enable();
                        }
                        html.css({
                            "opacity": disabled ? 0.5 : 1
                        });
                    }
                    else if (element.hasOwnProperty("SetLocked")) {
                        element.SetLocked(disabled);
                        html.css({
                            "opacity": disabled ? 0.5 : 1
                        });
                    }
                    else {
                        html.css({
                            "opacity": disabled ? 0.5 : 1,
                            "user-select": disabled ? "none" : "auto",
                            "pointer-events": disabled ? "none" : "auto"
                        });
                    }
                    if (!disabled && element.hasOwnProperty("RefreshConnections")) {
                        element.RefreshConnections();
                    }
                }
            }
            self.redrawing = false;
        })(this);
    };
    this.show_no_selected_layer_label = function (layer_data) {
        if (!this.no_selected_layer_label) {
            this.no_selected_layer_label = $("<div></div>");
            this.no_selected_layer_label.css({
                "color": this.color.Text,
                "font-family": "sans_serif_bold",
                "width": "fit-content",
                "margin-top": Dash.Size.Padding,
                "margin-bottom": "0",
                "margin-left": "auto",
                "margin-right": "auto"
            });
            this.html.append(this.no_selected_layer_label);
        }
        this.no_selected_layer_label.text(layer_data["hidden"] ? "Layer Hidden" : layer_data["locked"] ? "Layer Locked" : "No Layer Selected");
        this.no_selected_layer_label.show();
    };
    this.hide_no_selected_layer_label = function () {
        if (!this.no_selected_layer_label) {
            return;
        }
        this.no_selected_layer_label.hide();
    };
    this.show_context = function (key) {
        if (!key || !this.contexts[key] || this.contexts[key]["visible"]) {
            return;
        }
        this.contexts[key]["html"].show();
        this.contexts[key]["visible"] = true;
        if (!this.contexts[key]["initialized"]) {
            this.initialize_context(key);
        }
    };
    this.hide_context = function (key) {
        if (!key || !this.contexts[key] || !this.contexts[key]["visible"]) {
            return;
        }
        this.contexts[key]["html"].hide();
        this.contexts[key]["visible"] = false;
    };
    this.get_data = function () {
        var selected_layer = this.panel.GetSelectedLayer();
        if (!selected_layer) {
            return {};
        }
        return selected_layer.GetData();
    };
    this.get_value = function (key) {
        var selected_layer = this.panel.GetSelectedLayer();
        if (!selected_layer) {
            return "";
        }
        var value = selected_layer.GetData()[key];
        var parent_data = selected_layer.GetParentData();
        if (!Dash.Validate.Object(parent_data)) {
            return value;
        }
        if (key !== "linked" && !this.get_value("linked")) {
            return value;
        }
        var override = (parent_data["imported_context"]["layer_overrides"][selected_layer.GetID()] || {})[key] || 0;
        if (!override) {
            return value;
        }
        if (key === "opacity") {
            return override;
        }
        return value + override;
    };
    this.set_data = function (key, value, callback=null) {
        var selected_layer = this.panel.GetSelectedLayer();
        if (!selected_layer) {
            return;
        }
        selected_layer.SetData(key, value, callback);
    };
    this.add_context = function (key) {
        this.contexts[key] = {
            "html": $("<div></div>"),
            "visible": false,
            "initialized": false,
            "inputs": [],  // Any inputs that get added to these contexts need to be added to this list for external checks
            "all_elements": []
        };
        this.contexts[key]["html"].hide();
        this.html.append(this.contexts[key]["html"]);
    };
    this.initialize_context = function (context_key) {
        if (context_key === "general") {
            this.initialize_general_context(context_key);
        }
        else if (context_key === "text") {
            this.initialize_text_context(context_key);
        }
        else if (context_key === "image") {
            this.initialize_image_context(context_key);
        }
        else if (context_key === "video") {
            this.initialize_video_context(context_key);
        }
        else if (context_key === "color") {
            this.initialize_color_context(context_key);
        }
        else if (context_key in this.content.edit_tab_custom_context_cbs) {
            this.contexts[context_key]["html"].append(this.content.edit_tab_custom_context_cbs[context_key]());
        }
        else {
            console.warn("Warning: Unhandled 'Edit' tab context type:", context_key);
        }
        if (context_key in this.content.edit_tab_custom_element_configs) {
            for (var element_config of this.content.edit_tab_custom_element_configs[context_key]) {
                if (element_config["callback"]) {
                    var html = element_config["callback"]();
                    this.contexts[context_key]["html"].append(html);
                    this.contexts[context_key]["all_elements"].push(html);
                }
                else {
                    var element = this[element_config["function_name"]](...element_config["function_params"]);
                    this.contexts[context_key]["html"].append(element.hasOwnProperty("html") ? element.html : element);
                }
            }
        }
        this.contexts[context_key]["initialized"] = true;
    };
    this.initialize_color_context = function (context_key) {
        this.add_aspect_tool_row(context_key);
        var gradient_direction_combo_tool_row = this.get_combo(
            context_key,
            [
                {"id": "vertical", "label_text": "Vertical"},  // Default to this
                {"id": "horizontal", "label_text": "Horizontal"}
            ],
            "gradient_direction",
            "*Gradient Direction",
            null,
            null,
            "Only applies when using more than one color"
        );
        this.contexts[context_key]["html"].append(gradient_direction_combo_tool_row.html);
        this.add_colors(context_key);
    };
    this.add_colors = function (context_key, key_prefix="color", include_opacity=true, label_text="", total=3) {
        var label = $("<div>" + (label_text || (key_prefix.Title() + "(s)")) + ":</div>");
        var colors_container = $("<div></div>");
        var picker_container = $("<div></div>");
        colors_container.css({
            "display": "flex",
            "margin-top": Dash.Size.Padding * 0.5
        });
        label.css({
            "font-family": "sans_serif_bold",
            "font-size": "80%",
            "color": this.color.Text,
            "margin-top": Dash.Size.Padding * 0.9
        });
        var horizontal = !include_opacity && total <= 3;
        if (horizontal) {
            picker_container.css({
                "display": "flex"
            });
        }
        colors_container.append(label);
        colors_container.append(picker_container);
        for (var num of Dash.Math.Range(total)) {
            num += 1;
            var data_key = key_prefix + "_" + num;
            var color_picker = this.get_color_picker(context_key, data_key, "none");
            var css = {
                "display": "flex",
                "margin-bottom": Dash.Size.Padding * 0.5
            };
            if (horizontal && num !== total) {
                css["border-right"] = "1px solid " + this.color.PinstripeDark;
                css["margin-right"] = Dash.Size.Padding * 0.5;
            }
            color_picker.html.css(css);
            var icon_button = (function (self, color_picker, data_key) {
                return self.get_clear_button(
                    context_key,
                    data_key,
                    function () {
                        color_picker.input.val("#000000");
                    }
                );
            })(this, color_picker, data_key);
            color_picker.clear_button = icon_button;
            color_picker.html.append(icon_button.html);
            if (include_opacity) {
                var opacity_slider = this.get_slider(
                    1,
                    context_key,
                    data_key + "_opacity",
                    0.6,
                    "Opacity"
                );
                opacity_slider.html.css({
                    "margin-top": Dash.Size.Padding * 0.6
                });
                (function (opacity_slider) {
                    requestAnimationFrame(function () {
                        opacity_slider.html.css({
                            "margin-bottom": 0
                        });
                    });
                })(opacity_slider);
                color_picker.html.append(opacity_slider.html);
            }
            picker_container.append(color_picker.html);
        }
        this.contexts[context_key]["all_elements"].push(label);
        this.contexts[context_key]["html"].append(colors_container);
    };
    
    this.add_aspect_tool_row = function (context_key) {
        var tool_row = new Dash.Gui.ToolRow(this, this.get_data);
        tool_row.html.css({
            "margin-left": 0,
            "margin-bottom": 0
        });
        var w_input = this.add_numeric_tool_row_input(context_key, "aspect_ratio_w", tool_row, "aspect_inputs", "W", "Aspect Ratio:");
        this.contexts[context_key]["all_elements"].push(w_input);
        if (w_input.label) {
            this.contexts[context_key]["all_elements"].push(w_input.label);
        }
        var label = tool_row.AddLabel("x", Dash.Size.Padding * 0.7, null, null, false);
        label.label.css({
            "padding-left": 0
        });
        this.contexts[context_key]["all_elements"].push(label);
        var h_input = this.add_numeric_tool_row_input(context_key, "aspect_ratio_h", tool_row, "aspect_inputs", "H");
        this.contexts[context_key]["all_elements"].push(h_input);
        if (h_input.label) {
            this.contexts[context_key]["all_elements"].push(h_input.label);
        }
        this.contexts[context_key]["html"].append(tool_row.html);
    };
    this.add_fade_tool_row = function (context_key) {
        var tool_row = new Dash.Gui.ToolRow(this, this.get_data);
        tool_row.html.css({
            "margin-left": 0,
            "margin-bottom": 0
        });
        var start_input = this.add_numeric_tool_row_input(
            context_key,
            "fade_norm_start",
            tool_row,
            "fade_inputs",
            "Start",
            "Fade Start:",
            0,
            1
        );
        this.contexts[context_key]["all_elements"].push(start_input);
        if (start_input.label) {
            this.contexts[context_key]["all_elements"].push(start_input.label);
        }
        var end_input = this.add_numeric_tool_row_input(
            context_key,
            "fade_norm_end",
            tool_row,
            "fade_inputs",
            "End",
            "Fade End:",
            0,
            1
        );
        this.contexts[context_key]["all_elements"].push(end_input);
        if (end_input.label) {
            this.contexts[context_key]["all_elements"].push(end_input.label);
        }
        // var checkbox = (function (self) {
        //     return new Dash.Gui.Checkbox(
        //         "",
        //         self.get_data()[data_key] || false,
        //         self.color,
        //         "Toggle",
        //         self,
        //         function (checkbox) {
        //             self.set_data(data_key, checkbox.IsChecked());
        //         },
        //         label_text
        //     );
        // })(this);
        //
        // checkbox.html.css({
        //     "margin-top": Dash.Size.Padding * 0.6,
        //     "margin-left": Dash.Size.Padding
        // });
        //
        // checkbox.label.label.css({
        //     "font-family": "sans_serif_bold",
        //     "font-size": "80%"
        // });
        //
        this.contexts[context_key]["fade_checkbox"] = (function (self) {
            return tool_row.AddCheckbox(
                "Global:",
                self.get_data()["fade_global"] || false,
                function (checkbox) {
                    self.set_data("fade_global", checkbox.IsChecked());
                },
                "",
                "Toggle",
                null,
                false,
                true
            );
        })(this);
        this.contexts[context_key]["all_elements"].push(this.contexts[context_key]["fade_checkbox"]);
        this.contexts[context_key]["html"].append(tool_row.html);
        if (!this.get_value("fade_direction")) {
            (function (self) {
                requestAnimationFrame(function () {
                    start_input.Disable();
                    end_input.Disable();
                    self.contexts[context_key]["fade_checkbox"].Disable();
                });
            })(this);
        }
    };
    this.add_numeric_tool_row_input = function (context_key, data_key, tool_row, inputs_key, placeholder="", label_text="", min=null, max=null) {
        if (!(inputs_key in this.contexts[context_key])) {
            this.contexts[context_key][inputs_key] = {};
        }
        this.contexts[context_key][inputs_key][data_key] = (function (self) {
            return tool_row.AddInput(
                placeholder || data_key.Title(),
                data_key,
                Dash.Size.ColumnWidth * 0.25,
                false,
                function (value, input, additional_data) {
                    if (isNaN(value)) {
                        alert("Values must be numbers");
                        return;
                    }
                    if (min !== null && value < min) {
                        alert("Value must be at least " + min);
                        return;
                    }
                    if (max !== null && value > max) {
                        alert("Value cannot exceed " + max);
                        return;
                    }
                    self.set_data(additional_data["data_key"], value);
                },
                null,
                self.can_edit,
                Boolean(label_text),
                label_text,
                false,
                false
            );
        })(this);
        this.contexts[context_key][inputs_key][data_key].html.css({
            "background": this.color.Background
        });
        this.contexts[context_key][inputs_key][data_key].input.css({
            "text-align": "center"
        });
        return this.contexts[context_key][inputs_key][data_key];
    };
    this.initialize_general_context = function (context_key) {
        var input = this.get_input(context_key, "precomp_tag", "Pre-Comp Tag");
        var blend_mode_combo_tool_row = this.get_combo(
            context_key,
            [
                {"id": "", "label_text": "Normal"},
                {"id": "multiply", "label_text": "Multiply"},
                {"id": "additive", "label_text": "Additive"},
                {"id": "overlay", "label_text": "Overlay"}
            ],
            "blend_mode",
            "*Blend Mode",
            null,
            null,
            "Blend Mode cannot be visualized in this editor"
        );
        var fade_direction_combo_tool_row = (function (self) {
            return self.get_combo(
                context_key,
                [
                    {"id": "", "label_text": "No Fade"},
                    {"id": "to_right", "label_text": "Left to Right"},
                    {"id": "to_left", "label_text": "Right to Left"},
                    {"id": "to_bottom", "label_text": "Top to Bottom"},
                    {"id": "to_top", "label_text": "Bottom to Top"}
                ],
                "fade_direction",
                "",
                function (selected_option) {
                    for (var key in self.contexts[context_key]["fade_inputs"]) {
                        if (selected_option["id"]) {
                            self.contexts[context_key]["fade_inputs"][key].Enable();
                        }
                        else {
                            self.contexts[context_key]["fade_inputs"][key].Disable();
                        }
                    }
                    if (selected_option["id"]) {
                        self.contexts[context_key]["fade_checkbox"].Enable();
                    }
                    else {
                        self.contexts[context_key]["fade_checkbox"].Disable();
                    }
                }
            );
        })(this);
        var slider = this.get_slider(1, context_key, "opacity", 1.05);
        slider.html.css({
            "margin-top": Dash.Size.Padding
        });
        this.contexts[context_key]["html"].append(input.html);
        this.contexts[context_key]["html"].append(blend_mode_combo_tool_row.html);
        this.contexts[context_key]["html"].append(fade_direction_combo_tool_row.html);
        this.add_fade_tool_row(context_key);
        this.contexts[context_key]["html"].append(slider.html);
    };
    this.initialize_text_context = function (context_key) {
        var kerning_slider = this.get_slider(
            0,
            context_key,
            "kerning",
            1.05,
            "",
            0.5,
            1.0,
            -1.0
        );
        var thickness_slider = this.get_slider(
            0,
            context_key,
            "stroke_thickness",
            0.735,
            "",
            0,
            0.2
        );
        var font_color_picker = this.get_color_picker(context_key, "font_color", "Font\nColor");
        var stroke_color_picker = this.get_color_picker(context_key, "stroke_color", "Stroke\nColor");
        var container = $("<div></div>");
        container.css({
            "display": "flex"
        });
        stroke_color_picker.label.css({
            "margin-left": Dash.Size.Padding
        });
        container.append(font_color_picker.html);
        container.append(stroke_color_picker.html);
        var checkbox = this.get_checkbox(context_key, "text_caps", "ALL-CAPS:");
        container.append(checkbox.html);
        // This could be on the same row as the color picker, and actually looks better
        // that way, but some font names will be long, so best this is on its own row
        var font_combo_tool_row = this.get_combo(
            context_key,
            this.editor.ComboOptions ? (
                this.editor.ComboOptions["fonts"] ? this.editor.ComboOptions["fonts"] : [{"id": "", "label_text": "ERROR"}]
            ) : [{"id": "", "label_text": "Loading..."}],
            "font_id",
            "Font"
        );
        var alignment_combo_tool_row = this.get_combo(
            context_key,
            [
                {"id": "", "label_text": "Center"},
                {"id": "left", "label_text": "Left"},
                {"id": "right", "label_text": "Right"}
            ],
            "text_alignment",
            "Alignment"
        );
        this.contexts[context_key]["html"].append(kerning_slider.html);
        this.contexts[context_key]["html"].append(thickness_slider.html);
        this.contexts[context_key]["html"].append(container);
        this.contexts[context_key]["html"].append(font_combo_tool_row.html);
        this.contexts[context_key]["html"].append(alignment_combo_tool_row.html);
    };
    this.get_checkbox = function (context_key, data_key, label_text) {
        var checkbox = (function (self) {
            return new Dash.Gui.Checkbox(
                "",
                self.get_data()[data_key] || false,
                self.color,
                "Toggle",
                self,
                function (checkbox) {
                    self.set_data(data_key, checkbox.IsChecked());
                },
                label_text
            );
        })(this);
        checkbox.html.css({
            "margin-top": Dash.Size.Padding * 0.6,
            "margin-left": Dash.Size.Padding
        });
        checkbox.label.label.css({
            "font-family": "sans_serif_bold",
            "font-size": "80%"
        });
        this.contexts[context_key]["all_elements"].push(checkbox);
        return checkbox;
    };
    this.initialize_video_context = function (context_key) {
        var contrast_slider = this.get_slider(
            1,
            context_key,
            "contrast",
            1.02,
            "",
            0.5,
            2.0
        );
        var brightness_slider = this.get_slider(
            1,
            context_key,
            "brightness",
            0.95,
            "",
            0.5,
            2.0
        );
        var color_container = $("<div></div>");
        color_container.css({
            "display": "flex"
        });
        var color_picker = this.get_color_picker(context_key, "tint_color", "Tint Color");
        color_container.append(color_picker.html);
        var icon_button = this.get_clear_button(
            context_key,
            "tint_color",
            function () {
                color_picker.input.val("#000000");
            }
        );
        color_picker.clear_button = icon_button;
        color_container.append(icon_button.html);
        this.contexts[context_key]["html"].append(contrast_slider.html);
        this.contexts[context_key]["html"].append(brightness_slider.html);
        this.contexts[context_key]["html"].append(color_container);
    };
    this.initialize_image_context = function (context_key) {
        var contrast_slider = this.get_slider(
            1,
            context_key,
            "contrast",
            1.02,
            "",
            0.5,
            2.0
        );
        var brightness_slider = this.get_slider(
            1,
            context_key,
            "brightness",
            0.95,
            "",
            0.5,
            2.0
        );
        var color_container = $("<div></div>");
        color_container.css({
            "display": "flex"
        });
        var color_picker = this.get_color_picker(context_key, "tint_color", "Tint Color");
        color_container.append(color_picker.html);
        var icon_button = this.get_clear_button(
            context_key,
            "tint_color",
            function () {
                color_picker.input.val("#000000");
            }
        );
        color_picker.clear_button = icon_button;
        color_container.append(icon_button.html);
        this.contexts[context_key]["html"].append(contrast_slider.html);
        this.contexts[context_key]["html"].append(brightness_slider.html);
        this.contexts[context_key]["html"].append(color_container);
        this.add_colors(context_key, "multi_tone_color", false, "Multi-Tone");
    };
    this.get_clear_button = function (context_key, data_key, callback=null, icon_name="close_square", icon_color="") {
        var icon_button = (function (self) {
            return new Dash.Gui.IconButton(
                icon_name,
                function () {
                    self.set_data(data_key, "", callback);
                },
                self,
                self.color,
                {
                    "container_size": Dash.Size.ButtonHeight,
                    "size_mult": 0.5
                }
            );
        })(this);
        icon_button.SetIconColor(icon_color || this.color.AccentBad);
        icon_button.html.css({
            "padding-top": Dash.Size.Padding * 0.1
        });
        this.contexts[context_key]["all_elements"].push(icon_button);
        return icon_button;
    };
    this.get_input = function (context_key, data_key, label_text="") {
        if (!label_text) {
            label_text = data_key.Title();
        }
        return (function (self) {
            var input =  new Dash.Gui.InputRow(
                label_text,
                self.get_data()[data_key] || "",
                label_text,
                "",
                function (input) {
                    self.set_data(data_key, input.Text());
                },
                self,
                self.color,
                data_key
            );
            input.RemoveSaveButton();
            self.contexts[context_key]["all_elements"].push(input);
            return input;
        })(this);
    };
    this.get_combo = function (context_key, options, data_key, label_text="", extra_cb=null, on_draw=null, hover_text="") {
        var starting_value = this.get_data()[data_key] || "";
        var tool_row = (function (self) {
            return self.content.GetCombo(
                label_text || data_key.Title(),
                options,
                function (selected_option) {
                    self.set_data(
                        data_key,
                        selected_option["id"],
                        extra_cb ? function () {
                            extra_cb(selected_option, self);
                        } : null
                    );
                },
                starting_value
            );
        })(this);
        this.floating_combos.push({
            "tool_row": tool_row
        });
        if (data_key === "font_id") {
            this.font_combo = tool_row.elements.Last().combo;
        }
        this.contexts[context_key]["all_elements"].push(tool_row.elements[0]);
        this.contexts[context_key]["all_elements"].push(tool_row.elements[1]);
        if (on_draw) {
            this._on_draw(on_draw, [starting_value, this]);
        }
        if (hover_text) {
            var combo_label = tool_row.elements[0];
            combo_label.html.css({
                "cursor": "help"
            });
            combo_label.html.attr("title", hover_text);
        }
        return tool_row;
    };
    this.get_color_picker = function (context_key, data_key, label_text="") {
        var color_picker = (function (self) {
            return Dash.Gui.GetColorPicker(
                self,
                function (color_val) {
                    if (!color_val) {
                        return;
                    }
                    self.set_data(data_key, color_val);
                },
                (label_text || data_key.Title()) + ":",
                self.color,
                self.get_data()[data_key] || "#000000"
            );
        })(this);
        if (color_picker.label) {
            if (!(label_text.includes("\n"))) {
                color_picker.label.css({
                    "top": -Dash.Size.Padding * 0.6
                });
            }
            this.contexts[context_key]["all_elements"].push(color_picker.label);
        }
        if (!this.can_edit) {
            color_picker.html.css({
                "user-select": "none",
                "pointer-events": "none"
            });
        }
        this.contexts[context_key]["all_elements"].push(color_picker.input);
        return color_picker;
    };
    this.get_slider = function (default_value, context_key, data_key, width_mult, label_text="", reset_value=null, end_range=1.0, start_range=0.0, hover_text="") {
        var value = this.get_value(data_key);
        return (function (self) {
            var slider = new Dash.Gui.Slider(
                self.color,
                (label_text || data_key.Title()) + ":",
                function (value) {
                    self.set_data(data_key, value);
                },
                start_range,
                end_range,
                (value || value === 0) ? value : default_value,
                Dash.Size.ColumnWidth * width_mult
            );
            requestAnimationFrame(function () {
                self.style_slider(slider, reset_value || default_value, context_key);
            });
            if (hover_text) {
                slider.label.attr("title", hover_text);
            }
            self.contexts[context_key]["all_elements"].push(slider);
            return slider;
        })(this);
    };
    this.style_slider = function (slider, default_value, context_key) {
        slider.FireCallbackOnUpInsteadOfMove();
        slider.SetMaxValueLabelLength(5);
        slider.StyleForPropertyBox(0);
        slider.AddResetToDefaultButton(default_value, "Reset");
        // Ideally, we use this instead of the below slop, but it's not fully worked out yet
        // slider.FlexInsteadOfAbsolute();
        slider.label.css({
            "padding-left": 0
        });
        slider.reset_button.label.css({
            "padding-left": Dash.Size.Padding * 0.5,
            "padding-right": Dash.Size.Padding * 0.5
        });
        slider.slider.css({
            "left": parseInt(slider.slider.css("left")) - (Dash.Size.Padding * 0.5)
        });
        slider.value_label.html.css({
            "left": parseInt(slider.value_label.html.css("left")) - (Dash.Size.Padding * 1.5)
        });
        slider.reset_button.html.css({
            "left": parseInt(slider.reset_button.html.css("left")) - (Dash.Size.Padding * 2.5)
        });
        if (!this.can_edit) {
            slider.Disable();
        }
        slider.html.css({
            "margin-left": 0
        });
        this.contexts[context_key]["inputs"].push(slider.value_label);
    };
    this._on_draw = function (callback, params) {
        if (this.redrawing) {
            (function (self) {
                setTimeout(
                    function () {
                        self._on_draw(callback, params);
                    },
                    10
                );
            })(this);
            return;
        }
        callback(...params);
    };
    this.setup_styles();
}

function DashGuiFileExplorer (color=null, api="", parent_obj_id="", supports_desktop_client=false, supports_folders=true, include_modified_keys_columns=false) {
    /**
     * File Explorer box element.
     * --------------------------
     *
     * IMPORTANT NOTE: <br>
     *     For consistency across Dash, this takes an API name and parent object ID, and uses predetermined names for function calls.
     *     For each context this is used in, make sure to add the correct function names to the respective API file as follows:
     *
     *         - "get_files":                      Get all files and return dict with data/order keys
     *         - "upload_file":                    Upload a file
     *         - "delete_file":                    Delete a file
     *         - "set_file_property":              Set a property for a file with provided key/value
     *         - "send_signal_to_desktop_session": Send a signal to a specific session (by machine_id and session_id) by adding a key/value pair to it
     *
     *         (Archive Mode)
     *         - "get_archived_files":    Get all archived files and return dict with data/order keys
     *         - "restore_archived_file": Restore a file
     *
     * @param {DashColorSet} color - DashColorSet instance
     * @param {string} api - API name for requests
     * @param {string} parent_obj_id - Parent object ID where the file is stored (this will be included in requests as 'parent_obj_id')
     * @param {boolean} supports_desktop_client - Whether this context has a related desktop client app it should try to connect to
     * @param {boolean} supports_folders - Whether this context uses folders/subfolders
     * @param {boolean} include_modified_keys_columns - Whether to include list columns for "modified_on" and "modified_by"
     */
    this.color = color || Dash.Color.Light;
    this.api = api;
    this.parent_obj_id = parent_obj_id;
    this.supports_desktop_client = supports_desktop_client;
    this.supports_folders = supports_folders;
    this.include_modified_keys_columns = include_modified_keys_columns;
    // This is a quick, non-responsive solution to ensure the viewport is big enough for the extra columns
    if (window.innerWidth < 1065) {
        this.include_modified_keys_columns = false;
    }
    this.rows = {};
    this.list = null;
    this.buttons = [];
    this.header = null;
    this.extra_gui = [];
    this.files_data = {};
    this._buttons = null;
    this.tool_row = null;
    this.subheader = null;
    this.sort_by_key = null;
    this.initialized = false;
    this.archive_mode = false;
    this.upload_button = null;
    this.column_config = null;
    this.original_order = null;
    this.header_text = "Files";
    this.subheader_styling = {};
    this.display_folders_first = true;
    this.include_list_header_row = true;
    this.desktop_client_name = "desktop";
    this.include_uploaded_keys_columns = true;
    this.reset_upload_button_uploader = false;
    this.read_only = !this.api || !this.parent_obj_id;
    this.html = Dash.Gui.GetHTMLBoxContext({}, this.color);
    this.request_failure_id = "dash_gui_file_explorer_on_files_data";
    this.loader = new Dash.Gui.FileExplorerDesktopLoader(this.api, this.parent_obj_id, this.supports_desktop_client);
    this.upload_button_params = {
        "f": "upload_file",
        "parent_obj_id": this.parent_obj_id
    };
    // See this.instantiate_button_configs()
    this.OpenButtonConfig = null;
    this.DeleteButtonConfig = null;
    this.RestoreButtonConfig = null;
    this.DownloadButtonConfig = null;
    this.UpdateContentButtonConfig = null;
    DashGuiFileExplorerGUI.call(this);
    DashGuiFileExplorerData.call(this);
    this.setup_styles = function () {
        if (this.read_only) {
            console.log("(File Explorer) Using read-only mode because 'api' and/or 'parent_obj_id' were not provided");
        }
        if (!this.read_only) {
            this.instantiate_button_configs();
            // Default button config
            this.buttons = [
                this.OpenButtonConfig,
                this.DownloadButtonConfig,
                this.DeleteButtonConfig
            ];
            Dash.SetInterval(this, this.get_files_data, 4000);
        }
        this.add_header();
        if (!this.read_only) {
            this.add_tool_row();
            this.add_upload_button();
        }
        this.initialized = true;
    };
    // Only necessary in unique cases, like hijacking the subheader's spot
    this.SetSubheaderStyling = function (css) {
        if (!Dash.Validate.Object(css)) {
            return;
        }
        this.subheader_styling = css;
    };
    this.SetHeaderText = function (label_text="") {
        this.header_text = label_text;
        this.header.SetText(label_text);
    };
    this.SetDesktopClientName = function (name) {
        if (!name) {
            return;
        }
        this.supports_desktop_client = true;  // In case it wasn't set to true on instantiation
        this.desktop_client_name = name;
        // Re-instantiate these to update the desktop client name
        if (!this.read_only) {
            this.instantiate_button_configs();
            // Default button config
            this.buttons = [
                this.OpenButtonConfig,
                this.DownloadButtonConfig,
                this.DeleteButtonConfig
            ];
        }
        this.loader.SetDesktopClientName(name);
    };
    this.Flatten = function () {
        Dash.Gui.Flatten(this.html);
    };
    this.AddHTML = function (html, wait_for_list=false) {
        if (!html || (wait_for_list && this.extra_gui.includes(html))) {
            return;
        }
        if (!this.initialized) {
            (function (self) {
                setTimeout(
                    function () {
                        self.AddHTML(html, wait_for_list);
                    },
                    250
                );
            })(this);
            return;
        }
        if (wait_for_list) {
            if (!this.list) {
                html.hide();
            }
            this.extra_gui.push(html);
        }
        this.html.append(html);
    };
    // Use this if different buttons are desired than the default config. Config list
    // provided must consist of this class' ButtonConfig properties, such as this.OpenButtonConfig.
    this.SetButtonConfig = function (config_list) {
        if (!Dash.Validate.Object(config_list)) {
            return;
        }
        this.buttons = config_list;
        var column_config = this.get_column_config(true);
        if (this.list) {
            this.list.SetColumnConfig(column_config);
        }
        this.redraw_rows();
    };
    this.CreateCustomButtonConfig = function (display_name, icon_name, callback, binder=null, right_margin=null, hover_text="") {
        return {
            "config_name": display_name,
            "icon_name": icon_name,
            "callback": binder ? callback.bind(binder) : callback,
            "right_margin": right_margin || -Dash.Size.Padding * 0.25,
            "hover_preview": hover_text
        };
    };
    // Intended for read-only mode
    this.OverrideGetDataForKey = function (binder, new_get_data_for_key_function) {
        this.GetDataForKey = new_get_data_for_key_function.bind(binder);
    };
    this.AddRow = function (file_data, file_id="") {
        if (!this.read_only) {
            console.warn(
                "(File Explorer) AddRow function is only for use when this element " +
                "is read-only, otherwise, rows are added and managed automatically."
            );
            return;
        }
        if (!file_id) {
            file_id = file_data["id"];
        }
        if (!("data" in this.files_data)) {
            this.files_data["data"] = {};
        }
        if (!("order" in this.files_data)) {
            this.files_data["order"] = [];
        }
        this.files_data["data"][file_id] = file_data;
        this.files_data["order"].push(file_id);
        if (!this.list) {
            this.add_list();
        }
        this.add_row(file_id);
    };
    this.SetIncludeUploadedKeysColumns = function (include=false) {
        if (!this.read_only) {
            console.warn(
                "(File Explorer) SetIncludeUploadedKeysColumns function is intended for use when " +
                "this element is read-only. It has not been written to support the standard mode."
            );
            return;
        }
        this.include_uploaded_keys_columns = include;
    };
    this.SetIncludeListHeaderRow = function (include=false) {
        if (!this.read_only) {
            console.warn(
                "(File Explorer) SetIncludeListHeaderRow function is intended for use when " +
                "this element is read-only. It has not been written to support the standard mode."
            );
            return;
        }
        this.include_list_header_row = include;
    };
    this.ToggleArchiveMode = function () {
        this.show_subheader("Switching...");
        this.disable_load_buttons();
        if (this._buttons === null) {
            this._buttons = this.buttons;
        }
        this.archive_mode = !this.archive_mode;
        var tag = " (Archive)";
        if (this.archive_mode) {
            this.header_text += tag;
        }
        else {
            this.header_text = this.header_text.replace(tag, "");
        }
        this.SetHeaderText(this.header_text);
        this.get_files_data(this.update_button_config_on_archive_toggled);
    };
    this.update_button_config_on_archive_toggled = function () {
        if (this.archive_mode) {
            this.SetButtonConfig([this.RestoreButtonConfig]);
        }
        else {
            this.SetButtonConfig(this._buttons);
        }
        this.hide_subheader();
        this.enable_load_buttons();
    };
    this.instantiate_button_configs = function () {
        this.OpenButtonConfig = {
            "config_name": "Open",
            "icon_name": "link",
            "callback": this.open_file,
            "right_margin": -Dash.Size.Padding * 0.25,
            "hover_preview": this.supports_desktop_client ?
                "Open locally on your computer (or in a browser tab, if " + this.desktop_client_name + " app isn't running)" :
                "View file in new browser tab"
        };
        this.UpdateContentButtonConfig = {
            "config_name": "Update Content",
            "icon_name": "sync",
            "callback": this.update_file_content,
            "right_margin": -Dash.Size.Padding * 0.25,
            "hover_preview": "Upload an updated version of this file"
        };
        this.DownloadButtonConfig = {
            "config_name": "Download",
            "icon_name": "download_file",
            "callback": this.download_file,
            "right_margin": -Dash.Size.Padding * 0.5
        };
        this.DeleteButtonConfig = {
            "config_name": "Delete",
            "icon_name": "trash",
            "callback": this.delete_file,
            "right_margin": -Dash.Size.Padding
        };
        this.RestoreButtonConfig = {
            "config_name": "Restore",
            "icon_name": "trash_restore",
            "callback": this.restore_file,
            "right_margin": -Dash.Size.Padding
        };
    };
    this.show_subheader = function (text="") {
        if (!this.subheader) {
            this.add_subheader();
        }
        else {
            this.subheader.html.show();
        }
        if (text) {
            if (text.includes(" ")) {
                // Subheader should only be a single word
                text = text.split(" ")[0];
            }
            if (!text.endsWith("...")) {
                text += "...";
            }
            this.subheader.SetText(text);
        }
    };
    this.hide_subheader = function () {
        if (!this.subheader) {
            return;
        }
        this.subheader.html.hide();
    };
    this.disable_load_buttons = function () {
        this.upload_button.Disable();
        if (this.list) {
            this.list.DisableColumn("icon_buttons", 1);
        }
    };
    this.enable_load_buttons = function () {
        this.upload_button.Enable();
        if (this.list) {
            this.list.EnableColumn("icon_buttons", 1);
        }
    };
    this.on_row_selected = function (file_id, is_selected, row) {
        if (this.archive_mode) {
            return;
        }
        if (!row) {
            row = this.list.GetRow(file_id);
        }
        if (!is_selected) {
            row.Collapse();
            return;
        }
        var preview = new DashGuiFileExplorerPreviewStrip(this, file_id);
        row.Expand(preview.html);
    };
    this.redraw_rows = function () {
        if (!Dash.Validate.Object(this.files_data)) {
            return;
        }
        this.rows = {};
        if (this.list) {
            this.list.Clear();
        }
        else {
            if (this.files_data["order"].length < 1) {
                return;
            }
            this.add_list();
            for (var extra_gui of this.extra_gui) {
                extra_gui.show();
            }
        }
        if (this.display_folders_first) {
            this.draw_subfolders();
        }
        // Draw files that don't live in subfolders
        this.files_data["order"].forEach(
            function (file_id) {
                if (!Dash.Validate.Object(this.get_file_data(file_id)["parent_folders"])) {
                    this.add_row(file_id);
                }
            },
            this
        );
        if (!this.display_folders_first) {
            this.draw_subfolders();
        }
    };
    this.get_file_data = function (file_id) {
        return this.files_data["data"][file_id];
    };
    this.get_filename = function (file_data) {
        return file_data["filename"] || file_data["orig_filename"] || "";
    };
    this.get_file_url = function (file_data) {
        return file_data["url"] || file_data["orig_url"] || "";
    };
    this.GetDataForKey = function (file_id, key) {
        if (key === "filename") {
            var file_data = this.get_file_data(file_id);
            return this.get_filename(file_data) || file_data["id"];
        }
        var value = this.get_file_data(file_id)[key];
        if (key === "uploaded_on" || key === "modified_on") {
            if (Dash.DateTime.IsIsoFormat(value)) {
                return Dash.DateTime.Readable(value, false);
            }
        }
        else if (key === "uploaded_by" || key === "modified_by") {
            var user = Dash.User.Init["team"][value];
            if (user && user["display_name"]) {
                return user["display_name"];
            }
        }
        return value;
    };
    this.Update = function () {
        this.redraw_rows();
    };
    this.setup_styles();
}

/**@member DashGuiFileExplorer*/
function DashGuiFileExplorerGUI () {
    this.add_header = function () {
        this.header = new Dash.Gui.Header(this.header_text, this.color);
        this.header.ReplaceBorderWithIcon("paperclip").AddShadow();
        this.header.html.css({
            "margin-bottom": 0
        });
        this.html.append(this.header.html);
    };
    this.add_subheader = function () {
        this.subheader = new Dash.Gui.Header("...", this.color);
        this.subheader.border.remove();
        this.subheader.html.css({
            "opacity": 0.6,
            "position": "absolute",
            "right": Dash.Size.Padding * 1.1,
            "top": Dash.Size.Padding * 4,
            "z-index": 10000,
            ...this.subheader_styling
        });
        this.subheader.label.css({
            "font-family": "sans_serif_italic"
        });
        this.html.append(this.subheader.html);
    };
    this.add_tool_row = function () {
        this.tool_row = new Dash.Gui.ToolRow(this, null, null, this.color);
        this.add_combo_to_tool_row(
            "Sort By:",
            [
                {"id": "most_recent", "label_text": "Most Recent"},
                {"id": "alphabetical", "label_text": "Alphabetical"}
            ],
            this.on_sort_changed
        );
        if (this.supports_folders) {
            this.add_combo_to_tool_row(
                "Folders Display:",
                [
                    {"id": "top", "label_text": "Top"},
                    {"id": "bottom", "label_text": "Bottom"}
                ],
                this.on_folder_display_changed
            );
        }
        this.tool_row.html.css({
            "position": "absolute",
            "right": Dash.Size.Padding * 4.25,
            "top": Dash.Size.Padding,
            "border-bottom": "none"
        });
        this.html.append(this.tool_row.html);
    };
    this.add_combo_to_tool_row = function (label_text, combo_options, callback) {
        this.tool_row.AddLabel(label_text, null, null, null, false);
        var combo = this.tool_row.AddCombo(combo_options, combo_options[0], callback);
        combo.html.css({
            "margin-right": 0,
            "margin-top": -Dash.Size.Padding * 0.151,
            "border": "1px dotted " + Dash.Color.GetTransparent(this.color.Text, 0.25)
        });
        combo.label.css({
            "margin-left": Dash.Size.Padding * 0.5
        });
    };
    this.add_upload_button = function () {
        this.upload_button = Dash.Gui.GetTopRightIconButton(this, this.on_file_uploaded, "upload_file");
        this.upload_button.SetFileUploader(
            this.api,
            this.upload_button_params,
            this.on_file_upload_started
        );
        this.upload_button.html.css({
            "margin-right": Dash.Size.Padding * 0.1,
            "margin-top": Dash.Size.Padding * 0.25
        });
        this.upload_button.SetIconSize(150).SetHoverHint("Upload File").AddHighlight();
        this.html.append(this.upload_button.html);
    };
    this.add_row = function (row_id) {
        var row = this.list.AddRow(row_id);
        row.html.css({
            "margin-left": Dash.Size.Padding * 2,
            "border-bottom": "1px dotted rgba(0, 0, 0, 0.2)"
        });
        row.Update();
        this.rows[row_id] = row;
        return row;
    };
    this.add_sublist = function (row_id, list) {
        var row = list.AddSubList(row_id, this.color.Pinstripe, true);
        row.html.css({
            "border-bottom": "1px dotted rgba(0, 0, 0, 0.2)"
        });
        if (list === this.list) {
            row.html.css({
                "margin-left": Dash.Size.Padding * 2
            });
        }
        this.rows[row_id] = row;
        return row;
    };
    this.draw_subfolders = function () {
        if (!this.supports_folders) {
            return;
        }
        for (var file_id in this.files_data["data"]) {
            var parents = this.get_file_data(file_id)["parent_folders"];
            if (!Dash.Validate.Object(parents)) {
                continue;
            }
            var list = this.list;
            for (var i in parents) {
                var folder_name = parents[i];
                var row = list.GetRow(folder_name, true);
                if (!row) {
                    row = this.add_sublist(folder_name, list);
                }
                if (parseInt(i) === (parents.length - 1)) {
                    row.AddToSublistQueue(file_id, {"border-bottom": "1px dotted rgba(0, 0, 0, 0.2)"});
                }
                list = row.GetCachedPreview();
            }
        }
    };
    this.get_column_config = function (force=false) {
        if (!force && this.column_config) {
            return this.column_config;
        }
        var border_css = {"background": this.color.Pinstripe};
        var column_config = new Dash.Layout.List.ColumnConfig();
        column_config.AddFlexText("filename");
        column_config.AddSpacer(true);
        if (this.include_uploaded_keys_columns || this.include_modified_keys_columns || this.buttons.length) {
            column_config.AddDivider(border_css);
        }
        if (this.include_modified_keys_columns) {
            column_config.AddText("modified_by", 0.7);
            column_config.AddDivider(border_css);
            column_config.AddText("modified_on", 0.95);
            column_config.AddDivider(border_css);
        }
        if (this.include_uploaded_keys_columns) {
            column_config.AddText("uploaded_by", 0.7);
            column_config.AddDivider(border_css);
            column_config.AddText("uploaded_on", 0.95);
            column_config.AddDivider(border_css);
        }
        for (var button_config of this.buttons) {
            column_config.AddIconButton(
                button_config["icon_name"],
                this,
                button_config["callback"],
                button_config["hover_preview"] || button_config["config_name"] || "",
                0.85,
                0.15,
                {
                    "margin-left": Dash.Size.Padding,
                    "margin-right": button_config["right_margin"],
                    "margin-top": Dash.Size.Padding * 0.15,
                    "flex": "none"
                }
            );
        }
        this.column_config = column_config;
        return column_config;
    };
    this.add_list = function () {
        this.list = new Dash.Layout.List(this, this.on_row_selected, this.get_column_config(), this.color);
        this.list.DisableDividerColorChangeOnHover();
        if (this.include_list_header_row) {
            this.list.AddHeaderRow(
                {"margin-left": Dash.Size.Padding * 2},
                {"background": this.color.Pinstripe}
            );
        }
        this.list.html.css({
            "margin-top": Dash.Size.Padding
        });
        this.html.append(this.list.html);
    };
}

/**@member DashGuiFileExplorer*/
function DashGuiFileExplorerData () {
    this.open_file = function (row) {
        this.loader.OpenFile(this.get_file_data(row.ID()));
    };
    this.update_file_content = function (row) {
        if (!window.confirm(this.UpdateContentButtonConfig["hover_preview"] + "?")) {
            return;
        }
        this.reset_upload_button_uploader = true;
        // Hijack the main upload button's uploader
        this.upload_button.SetFileUploader(
            this.api,
            {
                ...this.upload_button_params,
                "existing_id_to_update": row.ID()
            },
            this.on_file_upload_started
        );
        this.upload_button.file_uploader.html.trigger("click");
    };
    this.delete_file = function (row) {
        if (!window.confirm("Are you sure you want to delete this file?")) {
            return;
        }
        this.show_subheader("Deleting...");
        this.disable_load_buttons();
        (function (self) {
            Dash.Request(
                self,
                function (response) {
                    self.on_files_changed(response, false);
                    self.list.RemoveRow(row.ID(), true);
                },
                self.api,
                {
                    "f": "delete_file",
                    "parent_obj_id": self.parent_obj_id,
                    "file_id": row.ID()
                }
            );
        })(this);
    };
    this.restore_file = function (row) {
        if (!window.confirm("Are you sure you want to restore this file?")) {
            return;
        }
        this.show_subheader("Restoring...");
        this.disable_load_buttons();
        Dash.Request(
            this,
            this.on_files_changed,
            this.api,
            {
                "f": "restore_archived_file",
                "parent_obj_id": this.parent_obj_id,
                "file_id": row.ID(),
                "return_all": false,
                "return_all_archived": true
            }
        );
    };
    this.download_file = function (row) {
        var file_data = this.get_file_data(row.ID());
        Dash.Gui.OpenFileURLDownloadDialog(
            this.get_file_url(file_data),
            this.get_filename(file_data)
        );
    };
    this.set_file_data = function (key, value, file_id) {
        this.show_subheader("Updating...");
        this.disable_load_buttons();
        (function (self) {
            Dash.Request(
                self,
                function (response) {
                    self.on_files_changed(response, false);
                    var row = self.list.GetRow(file_id);
                    if (!row) {
                        row = self.list.GetRow(file_id, false, true);
                    }
                    if (row) {
                        row.Update();
                    }
                },
                self.api,
                {
                    "f": "set_file_property",
                    "parent_obj_id": self.parent_obj_id,
                    "key": key,
                    "value": value,
                    "file_id": file_id
                }
            );
        })(this);
    };
    this.get_files_data = function (callback=null) {
        var archive_mode = this.archive_mode;  // Need archive mode at the moment of the request, not at the moment of the callback
        (function (self) {
            Dash.Request(
                self,
                function (response) {
                    self.on_files_data(response, archive_mode, callback);
                },
                self.api,
                {
                    "f": self.archive_mode ? "get_archived_files" : "get_files",
                    "parent_obj_id": self.parent_obj_id
                }
            );
        })(this);
    };
    this.update_cached_data = function (data) {
        this.files_data = data;
        this.original_order = data["order"];
        this.get_order();
    };
    this.on_files_data = function (response, archive_mode=false, callback=null) {
        if (archive_mode !== this.archive_mode) {
            return;
        }
        if (!Dash.Validate.Response(response, false)) {
            // The requests are made every 2.25 seconds, so if it's still not resolved after ~20
            // seconds, the portal was updated or something is wrong - either way, need to reload.
            Dash.Requests.TrackRequestFailureForID(this.request_failure_id, 9);
            return;
        }
        Dash.Requests.ResetRequestFailuresForID(this.request_failure_id);
        if (!response["data"] || !response["order"]) {
            console.error("Error: Get files data response was invalid. Both 'data' and 'order' keys are required to update the list:", response);
            return;
        }
        if (!this.initialized) {
            (function (self, response, archive_mode) {
                setTimeout(
                    function () {
                        self.on_files_data(response, archive_mode);
                    },
                    250
                );
            })(this, response, archive_mode);
            return;
        }
        response = this.clean_cached_data(response);
        if (this.files_data && Dash.Validate.Object(this.files_data["data"])) {
            if (JSON.stringify(this.files_data["data"]) === JSON.stringify(response["data"])) {
                return;
            }
        }
        console.log("(File Explorer) Files data:", response);
        this.update_cached_data(response);
        if (callback) {
            callback.bind(this)();
        }
        else {
            if (this.list) {
                for (var row of this.list.rows) {
                    if (row.is_sublist && row.IsExpanded()) {
                        return;  // Make sure we don't redraw when looking in a folder (sublist)
                    }
                }
            }
            this.redraw_rows();
        }
    };
    this.clean_cached_data = function (data) {
        for (var id in data["data"]) {
            if ("local_ids" in data["data"][id]) {
                delete data["data"][id]["local_ids"];
            }
            // This isn't ideal, but a lot of times, the sync app can be updating the modified time stamps when there isn't necessarily a change
            if (this.supports_desktop_client && "modified_on" in data["data"][id]) {
                delete data["data"][id]["modified_on"];
            }
        }
        return data;
    };
    this.on_files_changed = function (response, redraw_rows=true) {
        var error_context = "on_files_changed response (on upload/delete) was invalid.";
        if (!response["all_files"]) {
            console.error("Error:", error_context, "An 'all_files' key is required to update the list:", response);
            return;
        }
        if (!response["all_files"]["data"] || !response["all_files"]["order"]) {
            console.error("Error:", error_context, "Both 'data' and 'order' keys are required to update the list:", response);
            return;
        }
        if (!Dash.Validate.Response(response)) {
            return;
        }
        this.update_cached_data(this.clean_cached_data(response["all_files"]));
        if (redraw_rows) {
            this.redraw_rows();
        }
        this.hide_subheader();
        this.enable_load_buttons();
    };
    this.on_file_upload_started = function () {
        this.show_subheader("Uploading...");
        this.disable_load_buttons();
    };
    this.on_file_uploaded = function (data_key, additional_data, response) {
        if (this.reset_upload_button_uploader) {
            this.upload_button.SetFileUploader(
                this.api,
                this.upload_button_params,
                this.on_file_upload_started
            );
        }
        if (!response || response["originalEvent"] || response["isTrigger"]) {
            return;
        }
        this.on_files_changed(response);
    };
    this.on_folder_display_changed = function (selection) {
        if (selection["id"] === "top") {
            if (this.display_folders_first) {
                return;  // No change
            }
            this.display_folders_first = true;
        }
        else if (selection["id"] === "bottom") {
            if (!this.display_folders_first) {
                return;  // No change
            }
            this.display_folders_first = false;
        }
        else {
            return;
        }
        this.redraw_rows();
    };
    this.on_sort_changed = function (selection) {
        if (selection["id"] === this.sort_by_key) {
            return;  // No change
        }
        this.sort_by_key = selection["id"];
        this.get_order();
        this.redraw_rows();
    };
    this.get_order = function () {
        if (this.sort_by_key === "most_recent") {
            this.files_data["order"] = this.original_order;
        }
        else if (this.sort_by_key === "alphabetical") {
            this.set_alphabetical_order();
        }
    };
    this.set_alphabetical_order = function () {
        var order = [];
        var items = [];
        for (var file_id in this.files_data["data"]) {
            items.push([file_id, this.get_filename(this.files_data["data"][file_id])]);
        }
        items.sort(function (item, next_item) {
            if (item[1] < next_item[1]) {
                return -1;
            }
            if (item[1] > next_item[1]) {
                return 1;
            }
            return 0;
        });
        items.forEach(
            function (item) {
                order.push(item[0]);
            }
        );
        this.files_data["order"] = order;
    };
}

function DashGuiFileExplorerPreviewStrip (file_explorer, file_id) {
    this.file_explorer = file_explorer;
    this.file_id = file_id;
    this.html = $("<div></div>");
    this.details_property_box = null;
    this.detail_box = $("<div></div>");
    this.preview_box = $("<div></div>");
    this.color = this.file_explorer.color;
    this.height = Dash.Size.RowHeight * 15;
    this.read_only = this.file_explorer.read_only;
    this.opposite_color = Dash.Color.GetOpposite(this.color);
    this.setup_styles = function () {
        this.html.css({
            "height": this.height
        });
        this.preview_box.css({
            "background": this.opposite_color.BackgroundRaised,
            "position": "absolute",
            "inset": 0,
            "width": this.height,
            "overflow": "auto"
        });
        this.detail_box.css({
            "background": this.color.Background,
            "padding-left": this.height,
            "height": "100%"
        });
        this.ReloadFileContentPreview();
        this.ReloadFileDetailsPropertyBox();
        this.html.append(this.detail_box);
        this.html.append(this.preview_box);
    };
    this.ReloadFileContentPreview = function () {
        if (!Dash.Validate.Object(this.get_data())) {
            return;
        }
        this.preview_box.empty();
        this.preview_box.append(Dash.File.GetPreview(this.color, this.get_data(), this.height));
    };
    this.ReloadFileDetailsPropertyBox = function () {
        if (!Dash.Validate.Object(this.get_data())) {
            return;
        }
        this.detail_box.empty();
        this.add_details_property_box();
        this.detail_box.append(this.details_property_box.html);
    };
    this.ReplacePropertyBoxWithHTML = function (html) {
        this.detail_box.empty();
        this.detail_box.append(html);
    };
    this.get_data = function () {
        return this.file_explorer.get_file_data(this.file_id);
    };
    this.get_file_ext = function (file_url) {
        return file_url.split(".").Last();
    };
    this.set_data = function (key, value) {
        this.file_explorer.set_file_data(key, value, this.file_id);
    };
    this.add_details_property_box = function () {
        var file_data = this.get_data();
        this.details_property_box = new Dash.Gui.PropertyBox(this, this.get_data, this.set_data);
        this.details_property_box.SetTopRightLabel(file_data["id"]);
        var is_image = "aspect" in file_data;
        this.add_header_to_property_box(file_data, is_image);
        if (this.read_only) {
            this.add_read_only_inputs(file_data);
        }
        else {
            this.add_primary_inputs(file_data, is_image);
        }
        this.details_property_box.AddExpander();
        if (!this.read_only) {
            this.add_server_data_inputs(file_data);
        }
        this.details_property_box.html.css({
            "position": "absolute",
            "inset": 0,
            "padding-left": this.height,
            "margin": 0,
            "margin-left": Dash.Size.Padding,
            "box-shadow": "none",
            "overflow-y": "auto"
        });
    };
    this.add_read_only_inputs = function (file_data) {
        var added = false;
        for (var key in file_data) {
            if (key === "id" || key === "url" || key === "filename" || key === "name") {
                continue;
            }
            this.details_property_box.AddInput(key, key.Title(), file_data[key], null, false);
            added = true;
        }
        if (!added) {
            this.details_property_box.AddText("(No details for this file)", this.color);
        }
    };
    this.add_header_to_property_box = function (file_data, is_image) {
        var file_ext = this.get_file_ext(this.file_explorer.get_file_url(file_data));
        var header = this.details_property_box.AddHeader("File Details");
        header.ReplaceBorderWithIcon(
            is_image                                             ? "file_image"   :
            file_ext === "txt"                                   ? "file_lined"   :
            file_ext === "pdf"                                   ? "file_pdf"     :
            file_ext === "csv"                                   ? "file_csv"     :
            file_ext === "doc" || file_ext === "docx"            ? "file_word"    :
            Dash.File.Extensions["model"].includes(file_ext)     ? "cube"         :
            Dash.File.Extensions["video"].includes(file_ext)     ? "file_video"   :
            Dash.File.Extensions["drafting"].includes(file_ext)  ? "pencil_ruler" :
            "file"
        ).AddShadow();
    };
    this.add_primary_inputs = function (file_data, is_image) {
        this.details_property_box.AddInput(is_image ? "orig_filename" : "filename", "Filename", this.file_explorer.get_filename(file_data), null, true);
        this.details_property_box.AddInput(is_image ? "orig_url" : "url", "URL", this.file_explorer.get_file_url(file_data), null, false);
        if ("thumb_url" in file_data) {
            this.details_property_box.AddInput("thumb_url", "URL (Thumbnail)", file_data["thumb_url"], null, false);
        }
        if ("thumb_sq_url" in file_data) {
            this.details_property_box.AddInput("thumb_sq_url", "URL (Square Thumbnail)", file_data["thumb_sq_url"], null, false);
        }
        if ("glb_url" in file_data) {
            this.details_property_box.AddInput("glb_url", "URL (GLB)", file_data["glb_url"], null, false);
        }
    };
    this.add_server_data_inputs = function (file_data) {
        if ("modified_by" in file_data) {
            var modified_by = this.details_property_box.AddInput("modified_by", "Last Modified By", file_data["modified_by"], null, false);
        }
        if ("modified_on" in file_data) {
            var modified_on = this.details_property_box.AddInput("modified_on", "Last Modified On", file_data["modified_on"], null, false);
        }
        var uploaded_by = this.details_property_box.AddInput("uploaded_by", "Uploaded By", file_data["uploaded_by"], null, false);
        var uploaded_on = this.details_property_box.AddInput("uploaded_on", "Uploaded On", file_data["uploaded_on"], null, false);
        [modified_by, modified_on, uploaded_by, uploaded_on].forEach(function (input) {
            if (input) {
                input.html.css({
                    "opacity": 0.5
                });
            }
        });
    };
    this.setup_styles();
}

function DashGuiFileExplorerDesktopLoader (api, parent_obj_id, supports_desktop_client=true) {
    /** See docstring in DashGuiFileExplorer for explanation of 'api' and 'parent_object_id' params, and request function naming */
    this.api = api;
    this.parent_obj_id = parent_obj_id;
    this.supports_desktop_client = supports_desktop_client;
    this.desktop_client_name = "desktop";
    this.pending_file_view_requests = {};
    this.OpenFile = function (file_data) {
        if (!this.supports_desktop_client) {
            this.open_file_in_browser_tab(file_data);
            return;
        }
        this.send_signal_to_desktop_session(file_data, "open_local_file_path");
    };
    this.ViewFile = function (file_data) {
        if (!this.supports_desktop_client) {
            this.open_file_in_browser_tab(file_data);
            return;
        }
        this.send_signal_to_desktop_session(file_data, "show_local_file_path");
    };
    // If parent_folders are not provided, it will open the main parent folder, such as a job folder
    this.ViewFolder = function (binder=null, backup_cb=null, parent_folders=[]) {
        backup_cb = binder && backup_cb ? backup_cb.bind(binder) : backup_cb;
        if (!this.supports_desktop_client || !this.parent_obj_id) {
            if (backup_cb) {
                backup_cb(this.parent_obj_id, parent_folders);
            }
            return;
        }
        this.send_signal_to_desktop_session(
            {"id": this.parent_obj_id, "parent_folders": parent_folders},
            "show_local_folder_path",
            true,
            backup_cb
        );
    };
    this.SetDesktopClientName = function (name) {
        if (!name) {
            return;
        }
        this.supports_desktop_client = true;  // In case it wasn't set to true on instantiation
        this.desktop_client_name = name;
    };
    this.send_signal_to_desktop_session = function (file_data, key, folder=false, backup_cb=null) {
        if (!(file_data["id"] in this.pending_file_view_requests)) {
            this.pending_file_view_requests[file_data["id"]] = 0;
        }
        if (this.pending_file_view_requests[file_data["id"]] > 0) {
            alert("This " + (folder ? "folder" : "file") + " is currently in process of being accessed on your computer.");
            return;
        }
        this.pending_file_view_requests[file_data["id"]] += 1;
        console.log("Sending signal to desktop session to access", (folder ? "folder" : "file"), file_data["id"]);
        (function (self) {
            Dash.Request(
                self,
                function (response) {
                    self.on_signal_sent(response, file_data, folder, backup_cb);
                },
                self.api,
                {
                    "f": "send_signal_to_desktop_session",
                    "key": key,
                    "value": JSON.stringify(file_data),
                    "parent_obj_id": self.parent_obj_id
                }
            );
        })(this);
    };
    this.on_signal_sent = function (response, file_data, folder=false, backup_cb=null) {
        this.pending_file_view_requests[file_data["id"]] -= 1;
        if (!Dash.Validate.Response(response)) {
            return;
        }
        console.log("Signal sent:", response["sent"], response["msg"] ? ("(" + response["msg"] + ")") : "");
        if (!response["msg"]) {
            return;
        }
        if (folder && backup_cb) {
            alert(response["msg"]);
            backup_cb(this.parent_obj_id, file_data["parent_folders"]);
            return;
        }
        this.open_file_in_browser_tab(file_data);
    };
    this.open_file_in_browser_tab = function (file_data) {
        var url = file_data["url"] || file_data["orig_url"] || "";
        if (!url) {
            console.warn("Couldn't open file in browser tab, no URL found in file data:", url);
            return;
        }
        window.open(url, "_blank");
    };
}

function DashGuiIcon (color=null, icon_name="unknown", container_size=null, icon_size_mult=1, icon_color=null) {
    this.color = color || Dash.Color.Light;
    this.name = icon_name;
    this.size = container_size || Dash.Size.RowHeight;
    this.size_mult = icon_size_mult;
    this.icon_color = icon_color || this.color.Button.Background.Base;
    // this.theme = "light";
    this.icon_html = null;
    this.icon_definition = new DashGuiIcons(this);
    this.html = $("<div class='GuiIcon'></div>");
    if (!this.color.Text) {
        console.error("Error: Incorrect color object passed to DashGuiIcon:", this.color);
        console.trace();
        debugger;
    }
    this.setup_styles = function () {
        this.html.css({
            "width": this.size,
            "height": this.size,
            "margin": 0,
            "padding": 0,
            "cursor": "pointer",  // TODO: why is this the default?
            "-webkit-user-select": "none"
        });
        this.icon_html = $('<i class="' + this.icon_definition.get_class() + '"></i>');
        this.icon_html.css(this.icon_definition.get_css());
        this.html.append(this.icon_html);
    };
    this.SetIcon = function (icon_name) {
        if (icon_name === this.name) {
            return;
        }
        this.name = icon_name || "unknown";
        this.icon_definition = new DashGuiIcons(this);
        var icon_html = $('<i class="' + this.icon_definition.get_class() + '"></i>');
        icon_html.css(this.icon_definition.get_css());
        this.html.append(icon_html);
        if (this.icon_html) {
            this.icon_html.remove();
        }
        this.icon_html = icon_html;
        return this;
    };
    this.SetSize = function (percentage_number) {
        percentage_number = parseInt(percentage_number);
        if (isNaN(percentage_number)) {
            console.error("Error: DashGuiIcon SetSize requires a number (that represents a percentage)");
            return;
        }
        this.icon_html.css({
            "font-size": percentage_number.toString() + "%"
        });
        return this;
    };
    this.SetColor = function (color) {
        this.icon_html.css({
            "color": color
        });
        return this;
    };
    this.Mirror = function () {
        this.icon_html.css({
            "transform": "scale(-1, 1)"
        });
        return this;
    };
    this.AddStroke = function (color="black") {
        this.AddShadow(
            "-1px 1px 0 " + color + ", 1px 1px 0 " + color + ", 1px -1px 0 " + color + ", -1px -1px 0 " + color
        );
        return this;
    };
    this.AddShadow = function (value="") {
        if (!value) {
            if (Dash.DarkModeActive) {
                value = "0px 0px 0px rgba(255, 255, 255, 0.2)";
            }
            else {
                value = "0px 0px 0px rgba(0, 0, 0, 0.2)";
            }
        }
        this.icon_html.css({
            "text-shadow": value
        });
        return this;
    };
    // this.update = function (icon_id) {
    //     this.id = icon_id;
    //     this.url = ICON_MAP["url_prefix"] + ICON_MAP["icons"][this.id][0];
    //     this.default_size = ICON_MAP["icons"][this.id][1];
    // };
    this.setup_styles();
}

function DashGuiIcons (icon) {
    this.icon = icon;
    this.weight = {
        "solid":   "s",
        "regular": "r",
        "light":   "l",
        "brand":   "b"
    };
    
    this.icon_map = {
        "abacus":                new DashGuiIconDefinition(this.icon, "Abacus", this.weight["regular"], "abacus"),
        "accessible":            new DashGuiIconDefinition(this.icon, "Accessible", this.weight["regular"], "universal-access"),
        "add":                   new DashGuiIconDefinition(this.icon, "Add", this.weight["regular"], "plus"),
        "add_circle":            new DashGuiIconDefinition(this.icon, "Add (Circle)", this.weight["regular"], "plus-circle"),
        "add_layer":             new DashGuiIconDefinition(this.icon, "Add Layer", this.weight["regular"], "layer-plus"),
        "add_light":             new DashGuiIconDefinition(this.icon, "Add (Light)", this.weight["light"], "plus"),
        "add_person":            new DashGuiIconDefinition(this.icon, "Add Person", this.weight["regular"], "user-plus"),
        "add_phone":             new DashGuiIconDefinition(this.icon, "Add Phone", this.weight["regular"], "phone-plus"),
        "add_square":            new DashGuiIconDefinition(this.icon, "Add (Square)", this.weight["regular"], "plus-square"),
        "admin_tools":           new DashGuiIconDefinition(this.icon, "Admin Tools", this.weight["regular"], "shield-alt"),
        "alert":                 new DashGuiIconDefinition(this.icon, "Alert", this.weight["solid"], "exclamation"),
        "alert_square":          new DashGuiIconDefinition(this.icon, "Alert Square", this.weight["regular"], "exclamation-square"),
        "alert_triangle":        new DashGuiIconDefinition(this.icon, "Alert Triangle", this.weight["solid"], "exclamation-triangle"),
        "align_left":            new DashGuiIconDefinition(this.icon, "Align Left", this.weight["regular"], "align-left"),
        "align_right":           new DashGuiIconDefinition(this.icon, "Align Right", this.weight["regular"], "align-right"),
        "align_center":          new DashGuiIconDefinition(this.icon, "Align Center", this.weight["regular"], "align-center"),
        "analytics":             new DashGuiIconDefinition(this.icon, "Analytics", this.weight["regular"], "analytics"),
        "apple_logo":            new DashGuiIconDefinition(this.icon, "Apple Logo", this.weight["brand"], "apple"),
        "archive":               new DashGuiIconDefinition(this.icon, "Archive", this.weight["regular"], "archive"),
        "archive_light":         new DashGuiIconDefinition(this.icon, "Archive (Light)", this.weight["light"], "archive"),
        "arrow_down":            new DashGuiIconDefinition(this.icon, "Arrow Down", this.weight["regular"], "angle-down"),
        "arrow_down_alt":        new DashGuiIconDefinition(this.icon, "Arrow Down Alt", this.weight["regular"], "arrow-down"),
        "arrow_down_alt_heavy":  new DashGuiIconDefinition(this.icon, "Arrow Down Alt (Heavy)", this.weight["solid"], "arrow-down"),
        "arrow_left":            new DashGuiIconDefinition(this.icon, "Arrow Left", this.weight["regular"], "angle-left"),
        "arrow_left_alt":        new DashGuiIconDefinition(this.icon, "Arrow Left Alt", this.weight["regular"], "arrow-left"),
        "arrow_left_long":       new DashGuiIconDefinition(this.icon, "Arrow Left Long", this.weight["regular"], "long-arrow-left"),
        "arrow_left_circled":    new DashGuiIconDefinition(this.icon, "Arrow Left Circled", this.weight["light"], "arrow-circle-left"),
        "arrow_left_from_right": new DashGuiIconDefinition(this.icon, "Arrow Left From Right", this.weight["regular"], "arrow-from-right"),
        "arrow_right":           new DashGuiIconDefinition(this.icon, "Arrow Right", this.weight["regular"], "angle-right"),
        "arrow_right_to_right":  new DashGuiIconDefinition(this.icon, "Arrow Left From Right", this.weight["regular"], "arrow-to-right"),
        "arrow_to_left":         new DashGuiIconDefinition(this.icon, "Arrow To Left", this.weight["regular"], "arrow-to-left"),
        "arrow_up":              new DashGuiIconDefinition(this.icon, "Arrow Up", this.weight["regular"], "angle-up"),
        "arrow_up_alt":          new DashGuiIconDefinition(this.icon, "Arrow Up Alt", this.weight["regular"], "arrow-up"),
        "arrow_up_alt_heavy":    new DashGuiIconDefinition(this.icon, "Arrow Up Alt (Heavy)", this.weight["solid"], "arrow-up"),
        "asterisk":              new DashGuiIconDefinition(this.icon, "Asterisk", this.weight["solid"], "asterisk"),
        "at_sign":               new DashGuiIconDefinition(this.icon, "At Sign", this.weight["regular"], "at"),
        "award":                 new DashGuiIconDefinition(this.icon, "Award", this.weight["regular"], "award"),
        "aws_logo":              new DashGuiIconDefinition(this.icon, "AWS Logo", this.weight["brand"], "aws"),
        "barcode":               new DashGuiIconDefinition(this.icon, "Barcode", this.weight["light"], "barcode-alt"),
        "baseball":              new DashGuiIconDefinition(this.icon, "Baseball", this.weight["regular"], "baseball-ball"),
        "baseball_bat":          new DashGuiIconDefinition(this.icon, "Baseball Bat", this.weight["regular"], "baseball"),
        "basketball":            new DashGuiIconDefinition(this.icon, "Basketball", this.weight["regular"], "basketball-ball"),
        "battle_axe":            new DashGuiIconDefinition(this.icon, "Battle Axe", this.weight["regular"], "axe-battle"),
        "binoculars":            new DashGuiIconDefinition(this.icon, "Binoculars", this.weight["regular"], "binoculars"),
        "book_open":             new DashGuiIconDefinition(this.icon, "Book (Open)", this.weight["regular"], "book-open"),
        "box":                   new DashGuiIconDefinition(this.icon, "Box", this.weight["regular"], "box"),
        "box_open":              new DashGuiIconDefinition(this.icon, "Box (Open)", this.weight["regular"], "box-open"),
        "browser_window":        new DashGuiIconDefinition(this.icon, "Browser Window", this.weight["solid"], "window"),
        "building":              new DashGuiIconDefinition(this.icon, "Building", this.weight["regular"], "building"),
        "business_time":         new DashGuiIconDefinition(this.icon, "Business Time", this.weight["regular"], "business-time"),
        "calendar":              new DashGuiIconDefinition(this.icon, "Calendar", this.weight["regular"], "calendar-alt"),
        "camera":                new DashGuiIconDefinition(this.icon, "Camera", this.weight["regular"], "camera"),
        "cancel":                new DashGuiIconDefinition(this.icon, "Cancel", this.weight["regular"], "ban"),
        "cancel_thick":          new DashGuiIconDefinition(this.icon, "Cancel (Thick)", this.weight["solid"], "ban"),
        "car":                   new DashGuiIconDefinition(this.icon, "Car", this.weight["regular"], "car"),
        "caret_down":            new DashGuiIconDefinition(this.icon, "Caret Down", this.weight["solid"], "caret-down"),
        "caret_up":              new DashGuiIconDefinition(this.icon, "Caret Up", this.weight["solid"], "caret-up"),
        "cdn_tool_accordion":    new DashGuiIconDefinition(this.icon, "Accordion Tool", this.weight["regular"], "angle-double-down"),
        "cdn_tool_block_layout": new DashGuiIconDefinition(this.icon, "Block Layout Tool", this.weight["regular"], "th-large"),
        "cdn_tool_career_path":  new DashGuiIconDefinition(this.icon, "Career Path Tool", this.weight["regular"], "shoe-prints"),
        "cdn_tool_embed":        new DashGuiIconDefinition(this.icon, "Embed Tool", this.weight["regular"], "expand-arrows"),
        "cdn_tool_file":         new DashGuiIconDefinition(this.icon, "File Tool", this.weight["light"], "file"),
        "cdn_tool_gallery":      new DashGuiIconDefinition(this.icon, "Gallery Tool", this.weight["regular"], "images"),
        "cdn_tool_header":       new DashGuiIconDefinition(this.icon, "Header Tool", this.weight["regular"], "heading"),
        "cdn_tool_hrule":        new DashGuiIconDefinition(this.icon, "Hrule Tool", this.weight["regular"], "ruler-horizontal"),
        "cdn_tool_image":        new DashGuiIconDefinition(this.icon, "Image Tool", this.weight["regular"], "image"),
        "cdn_tool_layout":       new DashGuiIconDefinition(this.icon, "Layout Tool", this.weight["regular"], "columns"),
        "cdn_tool_lightbox":     new DashGuiIconDefinition(this.icon, "Lightbox Tool", this.weight["regular"], "expand-wide"),
        "cdn_tool_link":         new DashGuiIconDefinition(this.icon, "Link Tool", this.weight["light"], "external-link"),
        "cdn_tool_link_bank":    new DashGuiIconDefinition(this.icon, "Link Bank Tool", this.weight["regular"], "link"),
        "cdn_tool_subheader":    new DashGuiIconDefinition(this.icon, "Sub Header Tool", this.weight["light"], "heading"),
        "cdn_tool_text":         new DashGuiIconDefinition(this.icon, "Text Tool", this.weight["regular"], "font"),
        "cdn_tool_video":        new DashGuiIconDefinition(this.icon, "Text Tool", this.weight["regular"], "video"),
        "cell":                  new DashGuiIconDefinition(this.icon, "Cell Phone", this.weight["regular"], "mobile-alt"),
        "checked_box":           new DashGuiIconDefinition(this.icon, "Checked Box", this.weight["regular"], "check-square"),
        "checked_box_solid":     new DashGuiIconDefinition(this.icon, "Checked Box", this.weight["solid"], "check-square"),
        "circle_dot":            new DashGuiIconDefinition(this.icon, "Circle Dot", this.weight["regular"], "dot-circle"),
        "circle_arrow_right":    new DashGuiIconDefinition(this.icon, "Circle Arrow (Right)", this.weight["solid"], "chevron-circle-right"),
        "clipboard":             new DashGuiIconDefinition(this.icon, "Clipboard", this.weight["regular"], "clipboard-list"),
        "cloud_logs":            new DashGuiIconDefinition(this.icon, "Cloud Logs", this.weight["regular"], "fog"),
        "clone":                 new DashGuiIconDefinition(this.icon, "Clone", this.weight["regular"], "clone"),
        "close":                 new DashGuiIconDefinition(this.icon, "Close", this.weight["regular"], "times"),
        "close_circle":          new DashGuiIconDefinition(this.icon, "Close (Circle)", this.weight["regular"], "times-circle"),
        "close_square":          new DashGuiIconDefinition(this.icon, "Close (Square)", this.weight["regular"], "times-square"),
        "close_thin":            new DashGuiIconDefinition(this.icon, "Close (Thin)", this.weight["light"], "times"),
        "cloud":                 new DashGuiIconDefinition(this.icon, "Cloud", this.weight["regular"], "cloud"),
        "color_palette":         new DashGuiIconDefinition(this.icon, "Color Palette", this.weight["regular"], "palette"),
        "comment":               new DashGuiIconDefinition(this.icon, "Conversation Bubble", this.weight["solid"], "comment"),
        "comment_square":        new DashGuiIconDefinition(this.icon, "Conversation Box", this.weight["regular"], "comment-alt-lines"),
        "comments":              new DashGuiIconDefinition(this.icon, "Multiple Conversations Bubble", this.weight["solid"], "comments"),
        "comments_square":       new DashGuiIconDefinition(this.icon, "Multiple Conversations Boxes", this.weight["regular"], "comments-alt"),
        "complete":              new DashGuiIconDefinition(this.icon, "Complete", this.weight["regular"], "check"),
        "copy":                  new DashGuiIconDefinition(this.icon, "Copy", this.weight["regular"], "copy"),
        "cube":                  new DashGuiIconDefinition(this.icon, "Cube", this.weight["regular"], "cube"),
        "cubes":                 new DashGuiIconDefinition(this.icon, "Cubes", this.weight["regular"], "cubes"),
        "database":              new DashGuiIconDefinition(this.icon, "Database", this.weight["regular"], "database"),
        "delete":                new DashGuiIconDefinition(this.icon, "Delete", this.weight["regular"], "times"),
        "delete_thin":           new DashGuiIconDefinition(this.icon, "Delete (thin_", this.weight["light"], "times"),
        "dollar_sign":           new DashGuiIconDefinition(this.icon, "Dollar Sign", this.weight["solid"], "dollar-sign"),
        "dollar_sign_circle":    new DashGuiIconDefinition(this.icon, "Dollar Sign Circle", this.weight["regular"], "usd-circle"),
        "dollar_sign_square":    new DashGuiIconDefinition(this.icon, "Dollar Sign Square", this.weight["regular"], "usd-square"),
        "dot":                   new DashGuiIconDefinition(this.icon, "Dot", this.weight["light"], "circle"),
        "dots_horizontal":       new DashGuiIconDefinition(this.icon, "Horizontal Dots", this.weight["solid"], "ellipsis-h"),
        "dots_vertical":         new DashGuiIconDefinition(this.icon, "Vertical Dots", this.weight["solid"], "ellipsis-v"),
        "download":              new DashGuiIconDefinition(this.icon, "Download", this.weight["regular"], "download"),
        "download_solid":        new DashGuiIconDefinition(this.icon, "Download", this.weight["solid"], "download"),
        "download_file":         new DashGuiIconDefinition(this.icon, "Download File", this.weight["regular"], "file-download"),
        "dropbox_logo":          new DashGuiIconDefinition(this.icon, "Dropbox Logo", this.weight["brand"], "dropbox"),
        "edit":                  new DashGuiIconDefinition(this.icon, "Edit", this.weight["regular"], "pencil"),
        "edit_square":           new DashGuiIconDefinition(this.icon, "Edit (Square)", this.weight["regular"], "edit"),
        "email":                 new DashGuiIconDefinition(this.icon, "Email", this.weight["regular"], "at"),
        "empty":                 new DashGuiIconDefinition(this.icon, "Empty", this.weight["regular"], "empty-set"),
        "empty_folder":          new DashGuiIconDefinition(this.icon, "Empty Folder", this.weight["regular"], "folder-times"),
        "envelope":              new DashGuiIconDefinition(this.icon, "Email Envelope", this.weight["regular"], "envelope"),
        "eraser":                new DashGuiIconDefinition(this.icon, "Eraser", this.weight["solid"], "eraser"),
        "exec":                  new DashGuiIconDefinition(this.icon, "Executive", this.weight["light"], "business-time"),
        "expand":                new DashGuiIconDefinition(this.icon, "Expand View", this.weight["regular"], "expand-alt"),
        "expand_square":         new DashGuiIconDefinition(this.icon, "Expand View", this.weight["regular"], "expand"),
        "expand_square_arrows":  new DashGuiIconDefinition(this.icon, "Expand View", this.weight["regular"], "expand-arrows-alt"),
        "file":                  new DashGuiIconDefinition(this.icon, "File", this.weight["regular"], "file"),
        "file_lined":            new DashGuiIconDefinition(this.icon, "File Lined", this.weight["regular"], "file-alt"),
        "file_image":            new DashGuiIconDefinition(this.icon, "Image File", this.weight["regular"], "file-image"),
        "file_pdf":              new DashGuiIconDefinition(this.icon, "PDF File", this.weight["regular"], "file-pdf"),
        "file_csv":              new DashGuiIconDefinition(this.icon, "CSV File", this.weight["regular"], "file-csv"),
        "file_video":            new DashGuiIconDefinition(this.icon, "Video File", this.weight["regular"], "file-video"),
        "file_word":             new DashGuiIconDefinition(this.icon, "Word File", this.weight["regular"], "file-word"),
        "filter":                new DashGuiIconDefinition(this.icon, "Filter", this.weight["regular"], "filter"),
        "filter_solid":          new DashGuiIconDefinition(this.icon, "Filter", this.weight["solid"], "filter"),
        "flag":                  new DashGuiIconDefinition(this.icon, "Flag", this.weight["solid"], "flag-alt"),
        "flag_checkered":        new DashGuiIconDefinition(this.icon, "Flag", this.weight["solid"], "flag-checkered"),
        "film":                  new DashGuiIconDefinition(this.icon, "Film", this.weight["regular"], "film"),
        "folder":                new DashGuiIconDefinition(this.icon, "Folder", this.weight["regular"], "folder"),
        "folder_solid":          new DashGuiIconDefinition(this.icon, "Folder (Solid)", this.weight["solid"], "folder"),
        "folder_tree":           new DashGuiIconDefinition(this.icon, "Folder Tree", this.weight["regular"], "folder-tree"),
        "font":                  new DashGuiIconDefinition(this.icon, "Font", this.weight["regular"], "font"),
        "font_alt":              new DashGuiIconDefinition(this.icon, "Font", this.weight["regular"], "font-case"),
        "football":              new DashGuiIconDefinition(this.icon, "Football", this.weight["regular"], "football-ball"),
        "gear":                  new DashGuiIconDefinition(this.icon, "Gear", this.weight["regular"], "cog"),
        "gears":                 new DashGuiIconDefinition(this.icon, "Gears", this.weight["regular"], "cogs"),
        "gem":                   new DashGuiIconDefinition(this.icon, "Gem", this.weight["solid"], "gem"),
        "git":                   new DashGuiIconDefinition(this.icon, "Git", this.weight["brand"], "git-square"),
        "github":                new DashGuiIconDefinition(this.icon, "Github", this.weight["brand"], "github"),
        "goal_reply":            new DashGuiIconDefinition(this.icon, "Goal Reply", this.weight["solid"], "reply"),
        "golf_ball":             new DashGuiIconDefinition(this.icon, "Golf Ball", this.weight["regular"], "golf-ball"),
        "google_drive":          new DashGuiIconDefinition(this.icon, "Google Drive", this.weight["brand"], "google-drive"),
        "group":                 new DashGuiIconDefinition(this.icon, "Group", this.weight["solid"], "layer-group"),
        "handshake":             new DashGuiIconDefinition(this.icon, "Handshake", this.weight["regular"], "handshake"),
        "headphones":            new DashGuiIconDefinition(this.icon, "Audio", this.weight["regular"], "headphones"),
        "hidden":                new DashGuiIconDefinition(this.icon, "Hidden", this.weight["regular"], "eye-slash"),
        "history":               new DashGuiIconDefinition(this.icon, "History", this.weight["regular"], "history"),
        "hockey_puck":           new DashGuiIconDefinition(this.icon, "Hockey Puck", this.weight["regular"], "hockey-puck"),
        "hr":                    new DashGuiIconDefinition(this.icon, "Human Resources", this.weight["light"], "poll-people"),
        "id_card":               new DashGuiIconDefinition(this.icon, "ID Card", this.weight["regular"], "address-card"),
        "image":                 new DashGuiIconDefinition(this.icon, "Image", this.weight["regular"], "image"),
        "images":                new DashGuiIconDefinition(this.icon, "Images", this.weight["regular"], "images"),
        "import_file":           new DashGuiIconDefinition(this.icon, "Import File", this.weight["regular"], "file-import"),
        "infinity":              new DashGuiIconDefinition(this.icon, "Infinity", this.weight["regular"], "infinity"),
        "info":                  new DashGuiIconDefinition(this.icon, "Info Circle", this.weight["regular"], "info-circle"),
        "invoice":               new DashGuiIconDefinition(this.icon, "Invoice", this.weight["regular"], "file-invoice-dollar"),
        "invoice_alt":           new DashGuiIconDefinition(this.icon, "Invoice Alt", this.weight["regular"], "file-invoice"),
        "javascript_logo":       new DashGuiIconDefinition(this.icon, "JavaScript", this.weight["brand"], "js-square"),
        "layers":                new DashGuiIconDefinition(this.icon, "Layers", this.weight["regular"], "layer-group"),
        "level_up":              new DashGuiIconDefinition(this.icon, "Level Up", this.weight["regular"], "level-up"),
        "level_down":            new DashGuiIconDefinition(this.icon, "Level Down", this.weight["regular"], "level-down"),
        "link":                  new DashGuiIconDefinition(this.icon, "Link", this.weight["regular"], "external-link"),
        "linked":                new DashGuiIconDefinition(this.icon, "Linked", this.weight["regular"], "link"),
        "list":                  new DashGuiIconDefinition(this.icon, "List", this.weight["regular"], "bars"),
        "list_boxed":            new DashGuiIconDefinition(this.icon, "List Boxed", this.weight["regular"], "list-alt"),
        "list_bulleted":         new DashGuiIconDefinition(this.icon, "Bulleted List", this.weight["regular"], "list"),
        "list_offset":           new DashGuiIconDefinition(this.icon, "List Offset", this.weight["regular"], "stream"),
        "lock":                  new DashGuiIconDefinition(this.icon, "Lock", this.weight["regular"], "lock"),
        "log_out":               new DashGuiIconDefinition(this.icon, "Log Out", this.weight["regular"], "sign-out"),
        "magic_wand":            new DashGuiIconDefinition(this.icon, "Magic Wand", this.weight["solid"], "magic"),
        "map_marker":            new DashGuiIconDefinition(this.icon, "Map Marker", this.weight["regular"], "map-marker-alt"),
        "minimize":              new DashGuiIconDefinition(this.icon, "Minimize", this.weight["regular"], "compress-alt"),
        "minus_circle":          new DashGuiIconDefinition(this.icon, "Minus Circle", this.weight["regular"], "minus-circle"),
        "minus_sign":            new DashGuiIconDefinition(this.icon, "Minus Sign", this.weight["regular"], "minus"),
        "minus_square":          new DashGuiIconDefinition(this.icon, "Minus Square", this.weight["regular"], "minus-square"),
        "moon":                  new DashGuiIconDefinition(this.icon, "Moon", this.weight["regular"], "moon"),
        "more":                  new DashGuiIconDefinition(this.icon, "More", this.weight["regular"], "window-restore"),
        "move":                  new DashGuiIconDefinition(this.icon, "Move", this.weight["regular"], "arrows-alt"),
        "navigation":            new DashGuiIconDefinition(this.icon, "Navigation - Top Level", this.weight["regular"], "tasks"),
        "newsfeed":              new DashGuiIconDefinition(this.icon, "Newsfeed", this.weight["regular"], "newspaper"),
        "note":                  new DashGuiIconDefinition(this.icon, "Note", this.weight["regular"], "sticky-note"),
        "notify":                new DashGuiIconDefinition(this.icon, "Notify", this.weight["regular"], "bell"),
        "object_group":          new DashGuiIconDefinition(this.icon, "Object Group", this.weight["regular"], "object-group"),
        "open_folder":           new DashGuiIconDefinition(this.icon, "Open Folder", this.weight["regular"], "folder-open"),
        "paperclip":             new DashGuiIconDefinition(this.icon, "Paperclip", this.weight["regular"], "paperclip"),
        "pen":                   new DashGuiIconDefinition(this.icon, "Pen", this.weight["regular"], "pen"),
        "pencil_paintbrush":     new DashGuiIconDefinition(this.icon, "Pencil and Paintbrush", this.weight["regular"], "pencil-paintbrush"),
        "pencil_ruler":          new DashGuiIconDefinition(this.icon, "Pencil and Ruler", this.weight["regular"], "pencil-ruler"),
        "phone":                 new DashGuiIconDefinition(this.icon, "Phone", this.weight["regular"], "phone"),
        "play":                  new DashGuiIconDefinition(this.icon, "Play", this.weight["solid"], "play"),
        "portal_editor":         new DashGuiIconDefinition(this.icon, "Content Builder", this.weight["regular"], "toolbox"),
        "print":                 new DashGuiIconDefinition(this.icon, "Print", this.weight["regular"], "print"),
        "print_alt":             new DashGuiIconDefinition(this.icon, "Print (Alt)", this.weight["solid"], "print"),
        "project_diagram":       new DashGuiIconDefinition(this.icon, "Project Diagram", this.weight["regular"], "project-diagram"),
        "python_logo":           new DashGuiIconDefinition(this.icon, "Python Logo", this.weight["brand"], "python"),
        "read":                  new DashGuiIconDefinition(this.icon, "Read", this.weight["regular"], "book-reader"),
        "refresh":               new DashGuiIconDefinition(this.icon, "Refresh", this.weight["regular"], "redo"),
        "remove_person":         new DashGuiIconDefinition(this.icon, "Remove Person", this.weight["regular"], "user-slash"),
        "remove_notification":   new DashGuiIconDefinition(this.icon, "Remove Notification", this.weight["regular"], "bell-slash"),
        "robot":                 new DashGuiIconDefinition(this.icon, "Robot", this.weight["regular"], "robot"),
        "rocket":                new DashGuiIconDefinition(this.icon, "Rocket", this.weight["regular"], "rocket"),
        "rotate":                new DashGuiIconDefinition(this.icon, "Rotate", this.weight["regular"], "sync-alt"),
        "save":                  new DashGuiIconDefinition(this.icon, "Save", this.weight["regular"],"save"),
        "scale":                 new DashGuiIconDefinition(this.icon, "Scale", this.weight["regular"], "expand-arrows-alt"),
        "search":                new DashGuiIconDefinition(this.icon, "Search", this.weight["regular"],"search"),
        "send":                  new DashGuiIconDefinition(this.icon, "Send", this.weight["solid"],"paper-plane"),
        "server":                new DashGuiIconDefinition(this.icon, "Server", this.weight["regular"], "server"),
        "share":                 new DashGuiIconDefinition(this.icon, "Share", this.weight["regular"],"share"),
        "shield":                new DashGuiIconDefinition(this.icon, "Shield", this.weight["regular"],"shield-alt"),
        "signal_full":           new DashGuiIconDefinition(this.icon, "Full Signal", this.weight["regular"],"signal-alt"),
        "signal_none":           new DashGuiIconDefinition(this.icon, "No Signal", this.weight["regular"],"signal-alt-slash"),
        "signal_some":           new DashGuiIconDefinition(this.icon, "Some Signal", this.weight["regular"],"signal-alt-2"),
        "signature":             new DashGuiIconDefinition(this.icon, "Signature", this.weight["regular"],"signature"),
        "slash":                 new DashGuiIconDefinition(this.icon, "Slash", this.weight["regular"],"slash"),
        "sliders_horizontal":    new DashGuiIconDefinition(this.icon, "Sliders (Horizontal)", this.weight["regular"],"sliders-h"),
        "soccer_ball":           new DashGuiIconDefinition(this.icon, "Soccer Ball", this.weight["regular"], "futbol"),
        "sort_numeric_down":     new DashGuiIconDefinition(this.icon, "Sort (Numeric - Down)", this.weight["regular"], "sort-numeric-down"),
        "spinner":               new DashGuiIconDefinition(this.icon, "Spinner", this.weight["regular"],"spinner"),
        "stars":                 new DashGuiIconDefinition(this.icon, "Stars", this.weight["regular"], "stars"),
        "stop":                  new DashGuiIconDefinition(this.icon, "Stop", this.weight["solid"], "stop"),
        "stopwatch":             new DashGuiIconDefinition(this.icon, "Stopwatch", this.weight["regular"], "stopwatch"),
        "stroopwafel":           new DashGuiIconDefinition(this.icon, "Stroopwafel", this.weight["regular"], "stroopwafel"),
        "sun":                   new DashGuiIconDefinition(this.icon, "Sun", this.weight["regular"], "sun"),
        "sword":                 new DashGuiIconDefinition(this.icon, "Sword", this.weight["regular"],"sword"),
        "swords":                new DashGuiIconDefinition(this.icon, "Swords", this.weight["regular"],"swords"),
        "sync":                  new DashGuiIconDefinition(this.icon, "Sync", this.weight["regular"], "sync"),
        "tablet":                new DashGuiIconDefinition(this.icon, "Tablet", this.weight["regular"], "tablet-alt"),
        "tablet_alt":            new DashGuiIconDefinition(this.icon, "Tablet (Alt)", this.weight["regular"], "tablet-android-alt"),
        "tag":                   new DashGuiIconDefinition(this.icon, "Tag", this.weight["regular"], "tag"),
        "tally":                 new DashGuiIconDefinition(this.icon, "Tally", this.weight["regular"], "tally"),
        "tasks":                 new DashGuiIconDefinition(this.icon, "Tasks", this.weight["regular"], "tasks"),
        "tasks_alt":             new DashGuiIconDefinition(this.icon, "Tasks", this.weight["regular"], "tasks-alt"),
        "tennis_ball":           new DashGuiIconDefinition(this.icon, "Tennis Ball", this.weight["regular"], "tennis-ball"),
        "text":                  new DashGuiIconDefinition(this.icon, "Text", this.weight["regular"], "text"),
        "terminal":              new DashGuiIconDefinition(this.icon, "Terminal", this.weight["regular"], "terminal"),
        "ticket":                new DashGuiIconDefinition(this.icon, "Ticket", this.weight["regular"], "ticket-alt"),
        "toggle_off":            new DashGuiIconDefinition(this.icon, "Toggle Off", this.weight["regular"], "toggle-off"),
        "toggle_off_light":      new DashGuiIconDefinition(this.icon, "Toggle Off (Light)", this.weight["light"], "toggle-off"),
        "toggle_off_solid":      new DashGuiIconDefinition(this.icon, "Toggle Off (Solid)", this.weight["solid"], "toggle-off"),
        "toggle_on":             new DashGuiIconDefinition(this.icon, "Toggle On", this.weight["regular"], "toggle-on"),
        "toggle_on_light":       new DashGuiIconDefinition(this.icon, "Toggle On (Light)", this.weight["light"], "toggle-on"),
        "toggle_on_solid":       new DashGuiIconDefinition(this.icon, "Toggle On (Solid)", this.weight["solid"], "toggle-on"),
        "toilet_paper":          new DashGuiIconDefinition(this.icon, "Toilet Paper", this.weight["regular"], "toilet-paper-alt"),
        "tools":                 new DashGuiIconDefinition(this.icon, "Tools", this.weight["regular"], "tools"),
        "transferring":          new DashGuiIconDefinition(this.icon, "Transferring", this.weight["regular"], "exchange"),
        "trash":                 new DashGuiIconDefinition(this.icon, "Trash", this.weight["regular"], "trash"),
        "trash_alt":             new DashGuiIconDefinition(this.icon, "Trash Alt", this.weight["regular"], "trash-alt"),
        "trash_alt_light":       new DashGuiIconDefinition(this.icon, "Trash Alt (Light)", this.weight["light"], "trash-alt"),
        "trash_alt_solid":       new DashGuiIconDefinition(this.icon, "Trash Alt (Solid)", this.weight["solid"], "trash-alt"),
        "trash_restore":         new DashGuiIconDefinition(this.icon, "Trash Undo", this.weight["regular"], "trash-restore"),
        "trash_solid":           new DashGuiIconDefinition(this.icon, "Trash", this.weight["solid"], "trash"),
        "triangle":              new DashGuiIconDefinition(this.icon, "Triangle", this.weight["regular"], "triangle"),
        "truck":                 new DashGuiIconDefinition(this.icon, "Truck", this.weight["regular"], "truck"),
        "unchecked_box":         new DashGuiIconDefinition(this.icon, "Unchecked Box", this.weight["regular"],"square"),
        "undo":                  new DashGuiIconDefinition(this.icon, "Undo", this.weight["regular"], "undo"),
        "unknown":               new DashGuiIconDefinition(this.icon, "Unknown Icon", this.weight["light"], "spider-black-widow"),
        "unlink":                new DashGuiIconDefinition(this.icon, "Unlink", this.weight["regular"], "unlink"),
        "unlock":                new DashGuiIconDefinition(this.icon, "Unlocked", this.weight["regular"], "unlock"),
        "unlock_alt":            new DashGuiIconDefinition(this.icon, "Unlocked", this.weight["regular"], "lock-open"),
        "upload":                new DashGuiIconDefinition(this.icon, "Upload", this.weight["regular"], "upload"),
        "upload_file":           new DashGuiIconDefinition(this.icon, "Upload File", this.weight["regular"], "file-upload"),
        "user":                  new DashGuiIconDefinition(this.icon, "User", this.weight["regular"], "user"),
        "users":                 new DashGuiIconDefinition(this.icon, "Users", this.weight["regular"], "users"),
        "user_settings":         new DashGuiIconDefinition(this.icon, "User Settings", this.weight["regular"], "user-cog"),
        "video":                 new DashGuiIconDefinition(this.icon, "Video", this.weight["regular"], "video"),
        "view":                  new DashGuiIconDefinition(this.icon, "View", this.weight["regular"], "eye"),
        "visible":               new DashGuiIconDefinition(this.icon, "Visible", this.weight["regular"], "eye"),
        "web":                   new DashGuiIconDefinition(this.icon, "Web", this.weight["solid"], "spider-web"),
        "windows_logo":          new DashGuiIconDefinition(this.icon, "Windows Logo", this.weight["brand"], "windows"),
        "worker":                new DashGuiIconDefinition(this.icon, "Worker", this.weight["regular"], "user-hard-hat"),
        "wrench":                new DashGuiIconDefinition(this.icon, "Wrench", this.weight["regular"], "wrench"),
        "wrestling_mask":        new DashGuiIconDefinition(this.icon, "Wrestling Mask", this.weight["regular"], "luchador"),
    };
    // Return icon map for use in portal editor > font icons
    if (this.icon.name === "icon_map") {
        return this.icon_map;
    }
    
    else if (!this.icon_map[this.icon.name]) {
        console.warn("Warning: Unable to locate icon by name '" + this.icon.name + "'");
        
        console.trace();
        
        debugger;
        
        return this.icon_map["unknown"];
    }
    
    else {
        return this.icon_map[this.icon.name];
    }
}

function DashGuiIconDefinition (icon, label, fa_style, fa_id) {
    this.icon = icon;
    this.label = label || "";
    this.fa_style = fa_style;
    this.fa_id = fa_id;
    // FA Styles:
    //     r = regular
    //     s = solid
    //     l = light
    //     b = brands
    this.get_class = function () {
        return "fa" + this.fa_style + " fa-" + this.fa_id + "";
    };
    this.get_css = function () {
        var icon_fnt_size = this.icon.size * this.icon.size_mult;
        var icon_css = {
            "position": "absolute",
            "inset": 0,
            "width": this.icon.size,
            "height": this.icon.size,
            "font-size": icon_fnt_size + "px",
            "line-height": this.icon.size + "px",
            "text-align": "center",
            "color": this.icon.icon_color
        };
        if (!this.icon.icon_color) {
            console.error("Error: Incorrect color object passed to DashGuiIcon:", this.icon.icon_color);
            
            console.trace();
            
            debugger;
        }
        return icon_css;
    };
}

function DashGuiInput (placeholder_text="", color=null) {
    this.placeholder = placeholder_text;
    this.color = color || Dash.Color.Light;
    this.locked = false;
    this.autosave = false;
    this.blur_enabled = null;
    this.last_submit_ts = null;
    this.skip_next_blur = false;
    this.html = $("<div></div>");
    this.autosave_timeout = null;
    this.autosave_delay_ms = 1500;
    this.last_submitted_text = "";
    this.on_change_callback = null;
    this.on_submit_callback = null;
    this.skip_next_autosave = false;
    this.on_autosave_callback = null;
    this.previous_submitted_text = "";
    this.last_arrow_navigation_ts = null;
    this.submit_called_from_autosave = false;
    if (this.placeholder.toString().toLowerCase().includes("password")) {
        this.input = $("<input class='" + this.color.PlaceholderClass + "' type=password placeholder='" + this.placeholder + "'>");
    }
    else {
        this.input = $("<input class='" + this.color.PlaceholderClass + "' placeholder='" + this.placeholder + "'>");
    }
    this.setup_styles = function () {
        this.html.append(this.input);
        this.html.css({
            "height": Dash.Size.RowHeight,
            "background": this.color.Input.Background.Base,
            "border-radius": Dash.Size.BorderRadiusInteractive,
            "padding-right": Dash.Size.Padding,
            "box-shadow": "0px 0px 20px 1px rgba(0, 0, 0, 0.2)",
            "padding": 0,
            "margin": 0,
        });
        this.input.css({
            "background": "rgba(0, 0, 0, 0)",
            "line-height": Dash.Size.RowHeight + "px",
            "width": "100%",
            "height": "100%",
            "padding-left": Dash.Size.Padding,
            "color": this.color.Text,
            "white-space": "nowrap",
            "overflow": "hidden",
            "text-overflow": "ellipsis"
        });
    };
    this.Flatten = function () {
        Dash.Gui.Flatten(this.html);
    };
    this.InFocus = function () {
        return $(this.input).is(":focus");
    };
    this.SetAutosaveDelayMs = function (ms) {
        this.autosave_delay_ms = parseInt(ms);
    };
    this.EnableAutosave = function () {
        this.autosave = true;
    };
    this.DisableAutosave = function () {
        this.autosave = false;
    };
    this.DisableBlurSubmit = function () {
        this.input.off("blur");
        this.blur_enabled = false;
    };
    // Enabled by default - this is to re-enable it if disabled
    this.EnableBlurSubmit = function () {
        (function (self) {
            self.input.on("blur", function () {
                if (self.skip_next_blur) {
                    self.skip_next_blur = false;
                    return;
                }
                if (self.Text().toString() !== self.last_submitted_text.toString()) {
                    self.skip_next_autosave = true;  // Autosave was happening at the same time as blur
                    self.on_submit();
                }
            });
        })(this);
        this.blur_enabled = true;
    };
    // This is primarily intended to be called on error by Dash.Validate.Response
    this.SkipNextBlur = function () {
        if (this.blur_enabled) {
            this.skip_next_blur = true;
        }
    };
    // This is primarily intended to be called on error by Dash.Validate.Response
    this.SkipNextAutosave = function () {
        if (this.autosave) {
            this.skip_next_autosave = true;
        }
    };
    // Similar to SetLocked(true)
    this.Disable = function () {
        if (this.locked) {
            return;
        }
        this.SetLocked(true);
        this.html.css({
            "opacity": 0.5
        });
    };
    // Similar to SetLocked(false)
    this.Enable = function () {
        if (!this.locked) {
            return;
        }
        this.SetLocked(false);
        this.html.css({
            "opacity": 1
        });
    };
    this.SetLocked = function (is_locked) {
        this.locked = is_locked;
        if (is_locked) {
            this.input.prop("readOnly", true);
            // Prevent navigating to locked box via tab
            this.input[0].tabIndex = "-1";  // Shouldn't this be a number, not a string? (-1)
        }
        else {
            this.input.prop("readOnly", false);
        }
    };
    this.SetDarkMode = function (dark_mode_on) {
        if (dark_mode_on) {
            this.html.css({
                "box-shadow": "none",
                "background": "rgba(0, 0, 0, 0)",
            });
            this.input.css({
                "color": "rgba(255, 255, 255, 0.9)",
            });
        }
    };
    this.SetTransparent = function (is_transparent) {
        if (is_transparent) {
            this.html.css({
                "box-shadow": "none",
                "background": "rgba(0, 0, 0, 0)",
            });
        }
        return this;
    };
    this.Text = function () {
        return this.input.val();
    };
    this.SetText = function (text, input_row_data_key="") {
        text = this.parse_value(text, input_row_data_key);  // Was formerly (incorrectly) located in InputRow
        this.last_val = text;
        this.last_submitted_text = text;
        return this.input.val(text);
    };
    this.SetOnChange = function (callback, bind_to) {
        this.on_change_callback = callback.bind(bind_to);
    };
    this.SetOnAutosave = function (callback, bind_to) {
        // TODO: Shouldn't this also call this.EnableAutosave by default?
        this.on_autosave_callback = callback.bind(bind_to);
    };
    this.SetOnSubmit = function (callback, bind_to) {
        this.on_submit_callback = callback.bind(bind_to);
    };
    // DEPRECATED
    this.OnChange = function (callback, bind_to) {
        this.SetOnChange(callback, bind_to);
    };
    // DEPRECATED
    this.OnAutosave = function (callback, bind_to) {
        this.SetOnAutosave(callback, bind_to);
    };
    // DEPRECATED
    this.OnSubmit = function (callback, bind_to) {
        this.SetOnSubmit(callback, bind_to);
    };
    this.Focus = function () {
        this.input.trigger("focus");
    };
    this.parse_value = function (value, data_key="") {
        if (value === null || value === undefined) {
            return "";
        }
        if (value === false) {
            return value.toString();  // Keep this value intact, protect against '!'
        }
        // Initial value is a dict or array
        if (Dash.Validate.Object(value)) {
            return JSON.stringify(value);
        }
        // Initial value is ISO datetime string
        if (Dash.DateTime.IsIsoFormat(value)) {
            return Dash.DateTime.Readable(value, false);
        }
        // Initial value is team member email
        if (data_key && !(data_key.includes("email")) && Dash.Validate.Email(value)) {
            if ("team" in Dash.User.Init && value in Dash.User.Init["team"]) {
                if ("display_name" in Dash.User.Init["team"][value]) {
                    return Dash.User.Init["team"][value]["display_name"];
                }
            }
        }
        return value;
    };
    // Fired if the box is clicked on or the user is typing
    this.on_change = function () {
        var changed = false;
        var text = this.Text().toString();
        if (this.last_val) {
            changed = text !== this.last_val.toString();
        }
        else {
            if (text) {
                changed = true;
            }
        }
        this.last_val = text;
        if (!changed) {
            return;
        }
        if (this.autosave) {
            this.last_change_ts = new Date();
            this.attempt_autosave();
        }
        else {
            if (!this.on_change_callback) {
                return;
            }
            this.on_change_callback();
        }
    };
    // Fired on 'enter' or 'paste'
    this.on_submit = function (from_autosave=false) {
        if (from_autosave) {
            if (!this.on_autosave_callback) {
                return;
            }
            if (this.previous_submitted_text && this.Text().toString() === this.previous_submitted_text.toString()) {
                return;
            }
        }
        else {
            if (!this.on_submit_callback) {
                return;
            }
        }
        // Store the previous value, so we can reset the input value from
        // Dash.ValidateInput, in case the new value throws an error
        this.previous_submitted_text = this.last_submitted_text;
        // Also, important in case Dash.ValidateInput throws an error
        this.submit_called_from_autosave = from_autosave;
        Dash.Temp.SetLastInputSubmitted(this);
        if (from_autosave) {
            this.on_autosave_callback();
        }
        else {
            this.on_submit_callback();
            // Don't store this on autosave
            this.last_submit_ts = new Date();
        }
        this.last_submitted_text = this.Text();
    };
    this.attempt_autosave = function () {
        if (this.autosave_timeout) {
            clearTimeout(this.autosave_timeout);
            this.autosave_timeout = null;
        }
        (function (self) {
            self.autosave_timeout = setTimeout(
                function () {
                    self._attempt_autosave();
                },
                self.autosave_delay_ms
            );
        })(this);
    };
    this._attempt_autosave = function () {
        var now = new Date();
        // Don't fire if the user manually submitted a change in the autosave time window
        if (this.last_submit_ts !== null) {
            if (this.last_change_ts < this.last_submit_ts < now) {
                if (now - this.last_submit_ts < this.autosave_delay_ms) {
                    return;
                }
            }
        }
        // Reset autosave attempt if, after a change, the user navigated using the arrow keys during the autosave time window
        if (this.last_arrow_navigation_ts !== null) {
            if (this.last_change_ts < this.last_arrow_navigation_ts < now) {
                if (now - this.last_arrow_navigation_ts < this.autosave_delay_ms) {
                    this.attempt_autosave();
                    return;
                }
            }
        }
        // In case autosave is toggled while there are active timers
        if (!this.autosave) {
            return;
        }
        if (this.skip_next_autosave) {
            this.skip_next_autosave = false;
            return;
        }
        if (this.on_autosave_callback) {
            this.on_submit(true);
        }
        else {
            this.on_submit();
        }
    };
    this.setup_connections = function () {
        (function (self) {
            self.input.on("click", function (event) {
                event.preventDefault();
                return false;
            });
            self.input.on("keydown",function (e) {
                if (self.autosave && (e.key === "ArrowLeft" || e.key === "ArrowRight")) {
                    self.last_arrow_navigation_ts = new Date();
                }
                else if (e.key === "Enter") {
                    self.on_submit();
                }
            });
            self.input.on("change", function () {
                self.on_change();
            });
            self.input.on("paste", function () {
                self.on_change();
            });
            self.input.on("keyup click", function () {
                self.on_change();
            });
        })(this);
        this.EnableBlurSubmit();
    };
    this.setup_styles();
    this.setup_connections();
}

function DashGuiInputRow (label_text, initial_value, placeholder_text, button_text, on_click, on_click_bind, color=null, data_key="") {
    this.label_text = label_text;
    this.initial_value = initial_value;
    this.placeholder_text = placeholder_text;
    this.button_text = button_text || "Save";
    this.on_click = on_click;
    this.on_click_bind = on_click_bind;
    this.color = color || (on_click_bind && on_click_bind.color ? on_click_bind.color : Dash.Color.Light);
    this.data_key = data_key;
    this.end_tag = null;
    this.disabled = false;
    this.icon_button_count = 0;
    this.html = $("<div></div>");
    this.save_button_visible = false;
    this.highlight = $("<div></div>");
    this.flash_save = $("<div></div>");
    this.invalid_input_highlight = $("<div></div>");
    // For lock toggle
    this.locked = false;
    this.lock_button = null;
    DashGuiInputRowInterface.call(this);
    this.setup_styles = function () {
        this.html.append(this.invalid_input_highlight);
        this.html.append(this.highlight);
        this.html.append(this.flash_save);
        this.label = $("<div>" + this.label_text + ": </div>");
        this.input = new Dash.Gui.Input(this.placeholder_text, this.color);
        this.input.EnableAutosave();
        this.input.SetTransparent(true);
        this.set_initial_text();
        this.input.input.css({
            "padding-left": Dash.Size.Padding * 0.5
        });
        this.input.SetOnChange(this.input_changed, this);
        this.input.SetOnAutosave(this.trigger_autosave, this);
        this.html.append(this.label);
        this.html.append(this.input.html);
        var highlight_color = this.color.AccentGood;
        if (this.on_click) {
            this.input.SetOnSubmit(this.on_submit, this);
            this.create_save_button();
        }
        else {
            this.input.SetLocked(true);
            highlight_color = this.color.AccentBad;
        }
        this.html.css({
            "cursor": "auto",
            "height": Dash.Size.RowHeight,
            "display": "flex",
            "border-bottom": "1px dotted rgba(0, 0, 0, 0.2)"
        });
        this.invalid_input_highlight.css({
            "position": "absolute",
            "left": -Dash.Size.Padding,
            "top": 0,
            "bottom": 0,
            "width": Dash.Size.Padding * 0.5,
            "background": this.color.AccentBad,
            "opacity": 0
        });
        this.highlight.css({
            "position": "absolute",
            "inset": 0,
            "background": highlight_color,
            "border-radius": Dash.Size.BorderRadius,
            "opacity": 0
        });
        this.flash_save.css({
            "position": "absolute",
            "left": -Dash.Size.Padding,
            "right": 0,
            "top": 0,
            "bottom": 0,
            "background": Dash.Color.SaveHighlight,
            "opacity": 0
        });
        this.input.html.css({
            "flex-grow": 2,
            "margin-right": Dash.Size.Padding
        });
        this.label.css({
            "height": Dash.Size.RowHeight,
            "line-height": (Dash.Size.RowHeight) + "px",
            "text-align": "left",
            "color": this.color.Text,
            "font-family": "sans_serif_bold",
            "font-size": "80%",
            "flex": "none"
        });
        if (Array.isArray(this.button_text)) {
            this.SetupCombo(this.button_text);
        }
        this.update_label_cursor();
    };
    this.set_initial_text = function () {
        this.input.SetText(this.initial_value, this.data_key);
    };
    this.create_save_button = function () {
        this.button = new Dash.Gui.Button(this.button_text, this.on_submit, this);
        this.html.append(this.button.html);
        if (Dash.IsMobile) {
            // No submit button on mobile - but it's used to process the result, so we'll hide it
            this.button.html.css({
                "pointer-events": "none",
                "opacity": 0
            });
            return;
        }
        this.button.html.css({
            "position": "absolute",
            "right": 0,
            "top": 0,
            "margin": 0,
            "height": Dash.Size.RowHeight,
            "width": Dash.Size.ColumnWidth,
            "background": "none",
            "opacity": 0,
            "cursor": "auto"  // While hidden
        });
        this.button.highlight.css({
            "background": "none",
        });
        this.button.label.css({
            "text-align": "right",
            "line-height": Dash.Size.RowHeight + "px",
            "color": "rgba(0, 0, 0, 0.9)"
        });
    };
    this.on_combo_changed = function (option) {
        if (!this.combo) {
            return;
        }
        this.input.SetText(option["id"], this.data_key);
        if (this.on_click) {
            this.on_submit();
        }
    };
    this.on_label_clicked = function (check_validity=false) {
        var active_text = this.input.Text().toString();
        var tracking_labels = ["track", "tracking", "track #", "tracking #", "track number", "tracking number"];
        if (active_text.startsWith("https://")) {
            if (check_validity) {
                return true;
            }
            window.open(active_text, "_blank");
        }
        else if (Dash.Validate.Email(active_text)) {
            if (check_validity) {
                return true;
            }
            window.open("mailto:" + active_text, "_blank");
        }
        else if (tracking_labels.includes(this.label_text.toLowerCase())) {
            if (check_validity) {
                return true;
            }
            window.open("https://www.google.com/search?q=track+" + active_text.toString(), "_blank");
        }
        if (check_validity) {
            return false;
        }
    };
    this.setup_connections = function () {
        (function (self) {
            self.label.on("click", function () {
                self.on_label_clicked();
            });
            self.html.on("mouseenter", function () {
                self.highlight.stop().animate({"opacity": 0.5}, 50);
            });
            self.html.on("mouseleave", function () {
                self.highlight.stop().animate({"opacity": 0}, 250);
            });
        })(this);
    };
    this.input_changed = function (ignore_save_button_show) {
        if (!this.button || ignore_save_button_show) {
            return;
        }
        this.show_save_button();
    };
    this.trigger_autosave = function () {
        if (!this.load_dots) {
            this.setup_load_dots();
        }
        if (this.load_dots.IsActive()) {
            this.input_changed();
            return;
        }
        this.on_submit();
    };
    this.setup_load_dots = function () {
        if (this.load_dots) {
            return;
        }
        this.load_dots = new Dash.Gui.LoadDots(Dash.Size.RowHeight - Dash.Size.Padding);
        this.load_dots.SetOrientation("vertical");
        this.load_dots.SetColor("rgba(0, 0, 0, 0.8)");
        this.html.append(this.load_dots.html);
        this.load_dots.html.css({
            "position": "absolute",
            "left": -Dash.Size.Padding,
            "top": Dash.Size.Padding * 0.5
        });
    };
    this.show_save_button = function () {
        if (this.save_button_visible || !this.button) {
            return;
        }
        this.button.html.css({
            "cursor": "pointer"
        });
        this.button.html.stop().animate({"opacity": 1});
        this.save_button_visible = true;
    };
    this.hide_save_button = function () {
        if (!this.save_button_visible || !this.button) {
            return;
        }
        this.button.html.css({
            "cursor": "auto"
        });
        this.button.html.stop().animate({"opacity": 0});
        this.save_button_visible = false;
    };
    this.on_request_response = function (response_json) {
        this.hide_save_button();
        if (this.load_dots) {
            this.load_dots.Stop();
        }
        this.request_callback.bind(this.request_callback_binder)(response_json);
    };
    this.on_submit = function () {
        if (this.lock_button && this.locked) {
            // Initially thought to add this check in this.input_changed(), but it that would trigger even during any
            // initialization of values, or programmatic changes of values, where this only triggers if the user saves.
            alert("This row is locked. Please unlock it by clicking the lock icon at the end of the row, then try again.");
            return;
        }
        this.hide_save_button();
        this.highlight.stop().animate({"opacity": 0}, 100);
        this.invalid_input_highlight.stop().animate({"opacity": 0}, 100);
        var response_callback = this.on_click.bind(this.on_click_bind);
        // Leaving this disabled for now - enable this to lock the row as soon as it receives input
        // if (this.lock_button && this.Text() && !this.locked) {
        //     this.toggle_lock();
        // }
        this.update_label_cursor();
        response_callback(this);
    };
    this.update_label_cursor = function () {
        var cursor = "auto";
        if (this.on_label_clicked(true)) {
            cursor = "pointer";
        }
        this.label.css({
            "cursor": cursor
        });
    };
    this.toggle_lock = function (data_key) {
        this.locked = !this.locked;
        var icon_name = "lock";
        if (!this.locked) {
            icon_name = "unlock_alt";
        }
        this.lock_button.html.remove();
        this.icon_button_count -= 1;
        this.lock_button = this.AddIconButton(icon_name, this.toggle_lock, this, data_key);
    };
    this.setup_styles();
    this.setup_connections();
}

/**@member DashGuiInputRow*/
function DashGuiInputRowInterface () {
    this.InFocus = function () {
        return (this.input && this.input.InFocus());
    };
    this.Focus = function () {
        this.input.Focus();
    };
    this.DisableAutosave = function () {
        this.input.DisableAutosave();
    };
    this.SetAutosaveDelayMs = function (ms) {
        this.input.SetAutosaveDelayMs(ms);
    };
    this.Disable = function () {
        if (this.disabled) {
            return;
        }
        this.disabled = true;
        this.html.css({
            "opacity": 0.5,
            "pointer-events": "none",
            "user-select": "none"
        });
    };
    this.Enable = function () {
        if (!this.disabled) {
            return;
        }
        this.disabled = false;
        this.html.css({
            "opacity": 1,
            "pointer-events": "auto",
            "user-select": "auto"
        });
    };
    this.SetInputValidity = function (input_is_valid) {
        console.log("input_is_valid: " + input_is_valid, "\n", this.color);
        if (input_is_valid) {
            this.invalid_input_highlight.stop().animate({"opacity": 0}, 100);
        }
        else {
            this.invalid_input_highlight.stop().animate({"opacity": 1}, 100);
        }
    };
    this.FlashSave = function () {
        (function (self) {
            self.flash_save.stop().animate({"opacity": 1}, 100, function () {
                self.flash_save.stop().animate({"opacity": 0}, 1000);
            });
        })(this);
    };
    this.AddEndTag = function (text, css={}) {
        this.end_tag = $("<div>" + text + "</div>");
        this.end_tag.css({
            "color": this.color.Stroke,
            "font-family": "sans_serif_italic",
            "height": Dash.Size.RowHeight,
            "line-height": Dash.Size.RowHeight + "px",
            "user-select": "none",
            "pointer-events": "none",
            "flex": "none",
            ...css
        });
        this.html.append(this.end_tag);
        (function (self) {
            setTimeout(
                function () {
                    var right = self.end_tag.width() + Dash.Size.Padding;
                    self.highlight.css({
                        "right": right
                    });
                    self.flash_save.css({
                        "right": right
                    });
                },
                250
            );
        })(this);
    };
    this.SetupCombo = function (combo_options) {
        this.initial_value = this.initial_value || combo_options[0]["id"];
        this.input.html.css({
            "opacity": 0,
            "user-select": "none",
            "pointer-events": "none",
            "position": "absolute",
            "left": 0,
            "top": 0,
        });
        var options = {};
        options["list"] = combo_options;
        // options["selected"] = ComboUtils.GetDataFromID(combo_options, this.initial_value);
        options["thin_style"] = true;
        options["text_alignment"] = "left";
        options["label_style"] = "light";
        options["label_transparent"] = true;
        this.combo = new Combo(this, "", options, this.on_combo_changed, this);
        this.html.append(this.combo.html);
    };
    this.CanAutoUpdate = function () {
        var highlight_opacity = parseFloat("" + this.highlight.css("opacity"));
        if (highlight_opacity > 0.2) {
            return false;
        }
        return !this.save_button_visible;
    };
    this.SetText = function (text) {
        this.input.SetText(text, this.data_key);
        this.input_changed(true);
        if (this.input.autosave_timeout) {
            clearTimeout(this.input.autosave_timeout);
            this.input.autosave_timeout = null;
        }
        if (this.load_dots) {
            this.load_dots.Stop();
        }
        this.hide_save_button();
    };
    this.Text = function () {
        return this.input.Text();
    };
    this.Request = function (endpoint, params, callback, binder) {
        if (this.input.autosave_timeout) {
            clearTimeout(this.input.autosave_timeout);
            this.input.autosave_timeout = null;
            console.log("Cleared input autosave timeout");
        }
        this.request_callback = callback;
        this.request_callback_binder = binder;
        return (function (self, endpoint, params) {
            if (self.button) {
                return self.button.Request(
                    endpoint,
                    params,
                    function (response) {
                        self.on_request_response(response);
                    },
                    self
                );
            }
            return Dash.Request(
                self,
                function (response) {
                    self.on_request_response(response);
                },
                endpoint,
                params
            );
        })(this, endpoint, params);
    };
    this.SetLocked = function (is_locked) {
        if (is_locked) {
            this.DisableSaveButton();
        }
        else {
            this.EnableSaveButton();
        }
    };
    this.EnableSaveButton = function () {
        if (this.button) {
            this.button.SetButtonVisibility(true);
        }
        this.input.SetLocked(false);
        this.input.SetTransparent(true);
    };
    this.DisableSaveButton = function () {
        if (this.button) {
            this.button.SetButtonVisibility(false);
        }
        this.input.SetLocked(true);
    };
    this.RemoveSaveButton = function () {
        if (!this.button) {
            return;
        }
        this.button.html.remove();
        this.button = null;
    };
    this.IsLoading = function () {
        if (this.button) {
            return this.button.IsLoading();
        }
        else {
            return false;
        }
    };
    this.SetAlignRight = function () {
        var spacer = $("<div></div>");
        this.html.prepend(spacer);
        spacer.css({
            "flex-grow": 1
        });
        this.html.css({
            "padding-right": Dash.Size.Padding
        });
        this.label.css({
            "width": "auto"
        });
    };
    this.AddIconButton = function (icon_name, callback, binder, data_key=null) {
        callback = callback.bind(binder);
        var button = new Dash.Gui.IconButton(
            icon_name,
            function () {
                callback(data_key);
            },
            this,
            this.color,
            {"size_mult": 0.9}
        );
        button.html.css({
            "position": "absolute",
            "right": 0,
            "top": 0,
            "height": Dash.Size.RowHeight,
            "width": Dash.Size.RowHeight,
        });
        this.html.append(button.html);
        this.icon_button_count += 1;
        // We need to leave space for the save button to coexist with this new button
        if (this.button) {
            this.button.html.css("margin-right", Dash.Size.Padding * (3 * this.icon_button_count));
        }
        return button;
    };
    this.AddLockToggle = function (data_key) {
        var icon_name = "unlock_alt";
        // Only start locked if text exists already
        if (this.Text()) {
            this.locked = true;
            icon_name = "lock";
        }
        this.lock_button = this.AddIconButton(icon_name, this.toggle_lock, this, data_key);
    };
}

function DashGuiLoadingLabel (binder, label_text, height=null, color=null) {
    this.binder = binder;
    this.label_text = label_text;
    this.height = height || Dash.Size.ButtonHeight;
    this.html = null;
    this.loading_dots = null;
    this.color = color || this.binder.color || Dash.Color.Light;
    this.label = $("<div>" + this.label_text + "</div>");

    this.setup_styles = function () {
        this.loading_dots = new Dash.Gui.LoadDots(this.height, this.color);
        this.html = this.loading_dots.html;
        this.html.append(this.label);
        this.html.css({
            "margin-left": "auto",
            "margin-right": "auto",
            "margin-bottom": this.height
        });
        this.label.css({
            "position": "absolute",
            "left": -100,
            "right": -100,
            "top": this.height - Dash.Size.Padding,
            "bottom": -(this.height - Dash.Size.Padding),
            "height": this.height,
            "line-height": this.height + "px",
            "text-align": "center",
            "color": this.color.Text,
            "opacity": 0
        });
        this.Start();
        this.label.animate({"opacity": 1}, 250);
    };
    this.Clear = function () {
        // This function will fade out the loading label while converting
        // it to an absolutely positioned element. Since this element is
        // really meant to be used to show while something is loading, once
        // loading is complete, this flow makes it easy to build the loaded
        // content without having to wait to fade out the label first and fire a callback.
        if (this.html) {
            this.html.css({
                "position": "absolute",
                "top": this.html[0].offsetTop,
                "left": this.html[0].offsetLeft
            });
        }
        this.Stop();
        if (this.label) {
            this.label.stop().animate({"opacity": 0}, 250, this.destroy.bind(this));
        }
    };
    this.Stop = function () {
        if (this.loading_dots) {
            this.loading_dots.Stop();
        }
    };
    this.Start = function () {
        if (this.loading_dots) {
            this.loading_dots.Start();
        }
    };
    this.SetText = function (text) {
        if (this.label) {
            this.label.text(text);
        }
    };
    // Called after fade out is complete
    this.destroy = function () {
        if (this.label) {
            this.label.remove();
        }
        if (this.loading_dots) {
            this.loading_dots.html.remove();
        }
        if (this.html) {
            this.html.remove();
        }
        this.label = null;
        this.loading_dots = null;
        this.html = null;
    };
    this.setup_styles();
}

function DashGuiLoadingOverlay (color=null, progress=0, label_prefix="Loading", html_to_append_to=null, simple=false) {
    this.color = color || Dash.Color.Light;
    this.progress = progress;
    this.label_prefix = label_prefix;
    this.html_to_append_to = html_to_append_to;
    // Simple shows a static "..." instead of the animated loading dots.
    // This is intended for overlays that will often be quick and not left on screen long. With
    // certain operations, like loading heavy data, drawing a ton of rows, etc, the loading dots
    // stay frozen and don't actually animate, so if it's heavy and/or quick, simple may be preferred.
    this.simple = simple;
    // Not using 'this.html' is unconventional, but in order for this to be a single GUI element
    // with a transparent background and an opaque bubble, we can't use the typical 'this.html',
    // because then all the elements are either transparent or opaque, not able to be individually
    // set. You also shouldn't need to append this to any html manually, but in the case that is needed,
    // use this.AppendTo(), instead of the standard method of appending 'this.html' to the desired element.
    this.modal = null;
    this.removed = false;
    this.is_showing = false;
    this.bubble_dots = null;
    this.bubble_label = null;
    // Deprecated, just wrappers now - but keeping around to avoid breaking things
    this.bubble = null;
    this.background = null;
    this.setup_styles = function () {
        this.modal = new Dash.Gui.Modal(
            this.color,
            null,  // This part is handled in this.AppendTo
            Dash.Size.ColumnWidth,  // Placeholder value for init
            Dash.Size.RowHeight,
            true,
            0.6,
            false
        );
        // Deprecated, just wrappers now - but keeping around to avoid breaking things
        this.bubble = this.modal.modal;
        this.background = this.modal.background;
        this.modal.modal.css({
            "position": "absolute",
            "inset": 0,
            "top": "50%",
            "left": "50%",
            "display": "flex",
            "margin": Dash.Size.Padding,
            "padding": Dash.Size.Padding,
            "width": "fit-content",
            "transform": "translate(-50%, -50%)"
        });
        this.setup_label();
        if (!this.simple) {
            this.setup_dots();
        }
        if (this.html_to_append_to) {
            this.AppendTo(this.html_to_append_to);
        }
    };
    this.SetCSS = function (css) {
        if (!Dash.Validate.Object(css)) {
            return;
        }
        this.modal.background.css(css);
        this.modal.modal.css(css);
    };
    // See note at the top
    this.AppendTo = function (html) {
        if (!html) {
            console.warn("DashGuiLoadingOverlay AppendTo() requires an HTML element:", html);
            return;
        }
        this.modal.SetParentHTML(html);
        this.is_showing = true;
        this.html_to_append_to = html;
    };
    this.Show = function () {
        if (this.is_showing) {
            return;
        }
        if (this.simple) {
            this.modal.Show();
            this.is_showing = true;
            return;
        }
        if (this.modal.background.is(":visible")) {
            return;
        }
        if (!this.html_to_append_to) {
            console.warn("DashGuiLoadingOverlay Show() requires the 'html_to_append_to' param to be provided on init:", this.html_to_append_to);
            return;
        }
        if (this.removed) {
            this.AppendTo(this.html_to_append_to);
        }
        else {
            this.modal.Show();
            this.is_showing = true;
        }
    };
    this.Hide = function () {
        if (!this.is_showing) {
            return;
        }
        this.modal.Hide();
        this.is_showing = false;
    };
    this.Remove = function () {
        if (this.simple) {
            this.Hide();
            return;
        }
        this.bubble_dots.Stop();
        this.modal.Remove();
        this.progress = 0;
        this.removed = true;
    };
    this.SetProgress = function (progress) {
        if (progress > 0 && progress < 1) {
            progress = progress * 100;
        }
        progress = parseInt(progress);
        if (isNaN(progress)) {
            return;
        }
        if (progress < 0 || progress >= 100) {
            this.Remove();
            return;
        }
        this.progress = progress;
        this.Show();
        this.bubble_dots.Start();
        this.bubble_label.SetText(this.get_loading_label_text(progress));
    };
    this.SetLabelPrefix = function (label_prefix="Loading") {
        this.label_prefix = label_prefix;
    };
    this.Stop = function (label_prefix="") {
        this.bubble_dots.Stop();
        if (label_prefix) {
            this.label_prefix = label_prefix;
            this.bubble_label.SetText(this.get_loading_label_text(this.progress));
        }
        this.bubble_dots.html.hide();
    };
    this.setup_dots = function () {
        this.bubble_dots = new Dash.Gui.LoadDots(Dash.Size.RowHeight * 0.75);
        this.bubble_dots.html.css({
            "margin-top": Dash.Size.Padding * 0.5
        });
        this.bubble_dots.Start();
        this.modal.AddHTML(this.bubble_dots.html);
    };
    this.setup_label = function () {
        this.bubble_label = new Dash.Gui.Header(this.get_loading_label_text(this.progress), null, false);
        this.bubble_label.label.css({
            "padding-left": 0,
            "padding-right": Dash.Size.Padding * 0.5
        });
        this.modal.AddHTML(this.bubble_label.html);
    };
    this.get_loading_label_text = function (progress) {
        if (progress === "none") {  // Special case
            return this.label_prefix;
        }
        if (isNaN(progress)) {
            return;
        }
        if (this.simple) {
            return (this.label_prefix + "...");
        }
        else {
            return (this.label_prefix + " (" + progress.toString() + "%)");
        }
    };
    
    this.setup_styles();
}

function DashGuiPropertyBox (binder, get_data_cb, set_data_cb, endpoint, dash_obj_id, options={}) {
    this.binder = binder;
    this.get_data_cb = get_data_cb ? get_data_cb.bind(binder) : null;
    this.set_data_cb = set_data_cb ? set_data_cb.bind(binder) : null;
    this.endpoint = endpoint;
    this.dash_obj_id = dash_obj_id;
    this.options = options;
    this.data = {};
    this.rows = [];
    this.combos= {};
    this.inputs = {};
    this.headers = [];
    this.tool_rows = [];
    this.num_headers = 0;
    this.disabled = false;
    this.bottom_divider = null;
    this.property_set_data = null; // Managed Dash data
    this.get_formatted_data_cb = null;
    this.top_right_delete_button = null;
    this.indent_px = Dash.Size.Padding * 2;
    this.every_other_row_hightlight = null;
    this.html = Dash.Gui.GetHTMLBoxContext({}, this.color);
    this.indent_properties = this.options["indent_properties"] || 0;
    this.additional_request_params = this.options["extra_params"] || {};
    this.color = this.options["color"] || (binder && binder.color ? binder.color : Dash.Color.Light);
    DashGuiPropertyBoxInterface.call(this);
    this.setup_styles = function () {
        this.html.css({
            "background": "rgba(255, 255, 255, 0.25)",
        });
        if (Dash.IsMobile) {
            this.setup_mobile_styles();
        }
    };
    this.setup_mobile_styles = function () {
        this.html.css({
            "border-radius": 0,
            "margin": 0,
            "padding": 0,
            "padding-left": Dash.Size.Padding,
            "padding-right": Dash.Size.Padding
        });
        this.Flatten();
    };
    this.update_inputs = function () {
        for (var data_key in this.inputs) {
            var input_row = this.inputs[data_key];
            if (!input_row.CanAutoUpdate() || input_row.InFocus()) {
                console.log("(Currently being edited) Skipping update for " + data_key);
                continue;
            }
            input_row.SetText(this.get_update_value(data_key));
        }
    };
    this.update_combos = function () {
        for (var data_key in this.combos) {
            if (data_key === "") {
                continue;
            }
            var combo = this.combos[data_key];
            if (combo.InFocus(false)) {
                console.log("(Currently being edited) Skipping update for " + data_key);
                continue;
            }
            var value = this.get_update_value(data_key);
            // This might be too biased... unsure, but without it, a default value provided to the
            // combo gets immediately switched to the first option if the data has no value for that key
            if (value !== "") {
                combo.Update(null, value, true);
            }
        }
    };
    this.update_headers = function () {
        if (!this.get_data_cb) {
            return;
        }
        for (var i in this.headers) {
            this.headers[i]["obj"].SetText(this.get_update_value(this.headers[i]["update_key"]));
        }
    };
    this.update_tool_rows = function () {
        for (var tool_row of this.tool_rows) {
            for (var element of tool_row.elements) {
                if (element instanceof DashGuiInput || element instanceof DashGuiInputRow) {
                    if (element.InFocus()) {
                        console.log("(Currently being edited) Skipping update for " + element.data_key);
                        continue;
                    }
                    if (element.data_key) {
                        element.SetText(this.get_update_value(element.data_key));
                    }
                }
                // Add more as needed
            }
        }
    };
    this.get_update_value = function (data_key) {
        if (this.property_set_data) {
            return this.property_set_data[data_key];
        }
        return this.get_formatted_data_cb ? this.get_formatted_data_cb(data_key) : this.get_data_cb()[data_key];
    };
    this.indent_row = function (row) {
        if (this.num_headers <= 0) {
            return;
        }
        row.html.css({
            "margin-left": this.indent_px + ((this.indent_properties || this.indent_properties > 0) ? this.indent_properties : 0)
        });
    };
    this.on_server_property_set = function (property_set_data) {
        if (property_set_data["error"]) {
            alert("There was a problem accessing data");
            return;
        }
        this.property_set_data = property_set_data;
        this.Update();
    };
    this.add_top_right_label = function () {
        this.top_right_label = Dash.Gui.GetTopRightLabel("", this.color);
        this.top_right_label.css({
            "top": Dash.Size.Padding
        });
        this.html.append(this.top_right_label);
    };
    this.add_combo = function (row, combo_params, bool=false, add_button_margin=false) {
        var combo_options = combo_params["combo_options"];
        var property_key = combo_params["property_key"];
        var default_value = combo_params["default_value"] || null;
        var callback = combo_params["callback"] || null;
        var selected_key = default_value || this.get_data_cb()[property_key];
        (function (self, row, selected_key, property_key, combo_options, bool, callback) {
            var _callback;
            if (callback) {
                _callback = function (selected_option) {
                    callback(property_key, selected_option["id"]);
                };
            }
            else {
                _callback = function (selected_option) {
                    self.on_combo_updated(property_key, selected_option["id"]);
                };
            }
            var combo = new Dash.Gui.Combo (
                selected_key,     // Label
                _callback,         // Callback
                self,             // Binder
                combo_options,    // Option List
                selected_key,     // Selected
                self.color,       // Color set
                {"style": "row"}, // Options
                bool              // Bool (Toggle)
            );
            combo.html.css({
                "position": "absolute",
                "right": 0,
                "top": 0,
                "height": Dash.Size.RowHeight,
                "margin-right": add_button_margin ? Dash.Size.RowHeight * 1.25 : 0,
            });
            combo.label.css({
                "height": Dash.Size.RowHeight,
                "line-height": Dash.Size.RowHeight + "px"
            });
            row.html.append(combo.html);
        })(this, row, selected_key, property_key, combo_options, bool, callback);
        return row;
    };
    // Note: This function was initially intended for PropertyBox
    // rows - it may not work well with other styles without modification
    this.add_delete_button = function (row, callback, data_key) {
        callback = callback.bind(this.binder);
        if (!this.buttons) {
            this.buttons = [];
        }
        (function (self, row, callback, data_key) {
            var button = new Dash.Gui.IconButton(
                "trash",
                function () {
                    callback(data_key);
                },
                self,
                self.color,
                {"size_mult": 0.9}
            );
            self.buttons.push(button);
            button.html.css({
                "position": "absolute",
                "right": 0,
                "top": 0,
                "height": Dash.Size.RowHeight,
                "width": Dash.Size.RowHeight,
                "margin-right": -Dash.Size.Padding * 0.2
            });
            row.html.append(button.html);
        })(this, row, callback, data_key);
        if (row.button) {
            row.button.html.css("margin-right", Dash.Size.RowHeight);
        }
        return row;
    };
    this.on_combo_updated = function (property_key, selected_option) {
        if (this.dash_obj_id) {
            Dash.Request(
                this,
                this.on_server_response,
                this.endpoint,
                {
                    "f": "set_property",
                    "key": property_key,
                    "value": selected_option,
                    "obj_id": this.dash_obj_id
                }
            );
            return;
        }
        if (this.set_data_cb) {
            this.set_data_cb(property_key, selected_option);
            return;
        }
        console.error("Error: Property Box has no callback and no endpoint information!");
    };
    this.on_row_updated = function (row_input, row_details) {
        var new_value = row_input.Text();
        if (!row_details["can_edit"]) {
            return;
        }
        if (this.get_data_cb) {
            var old_value = this.get_data_cb()[row_details["key"]];
            if (old_value === new_value) {
                return;
            }
        }
        if (this.dash_obj_id == null) {
            if (this.set_data_cb) {
                this.set_data_cb(row_details["key"], new_value);
            }
            else {
                console.error("Error: Property Box has no callback and no endpoint information!");
            }
            return;
        }
        this.set_property(row_details["key"], new_value, row_input, false);
    };
    this.set_property = function (key, value, row_input=null, check=true) {
        if (check && this.get_data_cb) {
            var old_value = this.get_data_cb()[key];
            if (old_value === value) {
                return;
            }
        }
        var params = {
            "f": "set_property",
            "key": key,
            "value": value,
            "obj_id": this.dash_obj_id
        };
        console.log("Set property '" + key + "':", value);
        for (var k in this.additional_request_params) {
            params[k] = this.additional_request_params[k];
        }
        if (key.includes("password") && this.endpoint === "Users") {
            params["f"] = "update_password";
            params["p"] = value;
            if (this.inputs && this.inputs["email"]) {
                var email = this.inputs["email"].Text();
                if (email) {
                    params["email"] = email;
                }
            }
        }
        (function (self) {
            if (row_input && row_input.hasOwnProperty("Request")) {
                row_input.Request(
                    self.endpoint,
                    params,
                    function (response) {
                        self.on_server_response(response, row_input);
                    },
                    self
                );
            }
            else {
                Dash.Request(
                    self,
                    function (response) {
                        self.on_server_response(response);
                    },
                    self.endpoint,
                    params
                );
            }
        })(this);
    };
    this.on_server_response = function (response, row_input=null) {
        if (!Dash.Validate.Response(response)) {
            if (row_input && row_input.hasOwnProperty("SetInputValidity")) {
                row_input.SetInputValidity(false);
            }
            return;
        }
        console.log("SERVER RESPONSE:", response);
        if (row_input && row_input.hasOwnProperty("FlashSave")) {
            row_input.FlashSave();
        }
        if (this.set_data_cb) {
            this.set_data_cb(response);
        }
    };
    this.add_hover_highlight = function (html) {
        var highlight = $("<div></div>");
        highlight.css({
            "position": "absolute",
            "inset": 0,
            "background": this.color.AccentGood,
            "border-radius": Dash.Size.BorderRadius,
            "opacity": 0
        });
        html.on("mouseenter", function () {
            highlight.stop().animate({"opacity": 0.5}, 50);
        });
        html.on("mouseleave", function () {
            highlight.stop().animate({"opacity": 0}, 250);
        });
        html.prepend(highlight);
        return highlight;
    };
    this.highlight_row_if_applicable = function (row) {
        if (!row || !this.every_other_row_hightlight) {
            return;
        }
        if (this.every_other_row_hightlight["highlight"]) {
            row.html.css({
                "background": this.every_other_row_hightlight["color"]
            });
        }
        this.every_other_row_hightlight["highlight"] = !this.every_other_row_hightlight["highlight"];
    };
    this.track_row = function (row) {
        this.rows.push(row);
        this.highlight_row_if_applicable(row);
    };
    this.setup_styles();
}

/**@member DashGuiPropertyBox*/
function DashGuiPropertyBoxInterface () {
    this.Update = function () {
        this.update_inputs();
        this.update_combos();
        this.update_headers();
        this.update_tool_rows();
    };
    this.Disable = function () {
        if (this.disabled) {
            return;
        }
        this.disabled = true;
        this.html.css({
            "opacity": 0.5,
            "pointer-events": "none",
            "user-select": "none"
        });
    };
    this.Enable = function () {
        if (!this.disabled) {
            return;
        }
        this.disabled = false;
        this.html.css({
            "opacity": 1,
            "pointer-events": "auto",
            "user-select": "auto"
        });
    };
    this.InputInFocus = function () {
        var data_key;
        for (data_key in this.inputs) {
            var input_row = this.inputs[data_key];
            if (input_row && input_row.InFocus()) {
                return true;
            }
        }
        for (data_key in this.combos) {
            if (data_key === "") {
                continue;
            }
            var combo = this.combos[data_key];
            if (combo && combo.InFocus(true)) {
                return true;
            }
        }
        for (var tool_row of this.tool_rows) {
            if (tool_row.InputInFocus()) {
                return true;
            }
        }
        return false;
    };
    this.SetIndentPx = function (px) {
        this.indent_px = px;
    };
    
    this.SetTopRightLabel = function (label_text) {
        if (!this.top_right_label) {
            this.add_top_right_label();
        }
        this.top_right_label.text(label_text);
    };
    this.Flatten = function () {
        Dash.Gui.Flatten(this.html);
    };
    // Intended for Flattened boxes
    this.AddBottomDivider = function () {
        if (this.bottom_divider) {
            return;
        }
        this.html.css({
            "margin-bottom": 0
        });
        this.bottom_divider = Dash.Gui.GetBottomDivider(this.color);
        this.html.append(this.bottom_divider);
        return this.bottom_divider;
    };
    // This is intended to nicely format a prop box that only uses locked rows for displaying data, therefore,
    // it's only been implemented in input-related areas for now (there may be other areas it should be added)
    this.SetGetFormattedDataCallback = function (callback, binder=null) {
        this.get_formatted_data_cb = binder || this.binder ? callback.bind(binder ? binder : this.binder) : callback;
    };
    this.AddTopRightIconButton = function (callback, data_key, additional_data=null, icon_id="trash") {
        if (this.top_right_delete_button) {
            return;
        }
        if (!this.buttons) {
            this.buttons = [];
        }
        this.top_right_delete_button = Dash.Gui.GetTopRightIconButton(
            this.binder,
            callback,
            icon_id,
            data_key,
            additional_data,
            this.top_right_label
        );
        this.html.append(this.top_right_delete_button.html);
        return this.top_right_delete_button;
    };
    this.AddHTML = function (html) {
        this.html.append(html);
        return html;
    };
    this.AddLineBreak = function () {
        return this.AddHTML($("<br>"));
    };
    this.AddExpander = function () {
        var expander = Dash.Gui.GetFlexSpacer();
        this.html.css({
            "display": "flex",
            "flex-direction": "column"
        });
        this.html.append(expander);
        return expander;
    };
    this.AddHeader = function (label_text, update_key=null) {
        var header_obj = new Dash.Gui.Header(label_text, this.color);
        if (this.num_headers > 0) {
            // header.css("margin-top", Dash.Size.Padding * 0.5);
            header_obj.html.css({
                "margin-top": Dash.Size.Padding * 1.5
            });
        }
        // Ryan, I made these margin changes on 2/1/22 because I do it with every property box,
        // so it felt right to adjust the default - please let me know if you feel otherwise!
        header_obj.html.css({
            "margin-bottom": Dash.Size.Padding * 0.5
        });
        this.html.append(header_obj.html);
        this.num_headers += 1;
        if (update_key != null && this.get_data_cb) {
            this.headers.push({
                "obj": header_obj,
                "update_key": update_key
            });
        }
        return header_obj;
    };
    this.AddButtonBar = function (style="default") {
        var bar = new Dash.Gui.ButtonBar(this.binder, this.color, style);
        bar.html.css({
            "margin-top": Dash.Size.Padding,
        });
        this.AddHTML(bar.html);
        return bar;
    };
    this.AddToolRow = function (set_data_cb=null, highlight_row=true) {
        var tool_row = new Dash.Gui.ToolRow(
            this.binder,
            this.get_formatted_data_cb ? this.get_formatted_data_cb : this.get_data_cb,
            set_data_cb ? set_data_cb.bind(this.binder) : this.set_data_cb,
            this.color
        );
        if (this.get_formatted_data_cb) {
            tool_row.SetGetFormattedDataCallback(this.get_formatted_data_cb);
        }
        this.AddHTML(tool_row.html);
        this.indent_row(tool_row);
        this.track_row(tool_row);
        if (highlight_row) {
            this.add_hover_highlight(tool_row.html);
        }
        this.tool_rows.push(tool_row);
        return tool_row;
    };
    this.AddButton = function (label_text, callback=null, options={}, wrap_cb=true) {  // See comments
        if (!this.buttons) {
            this.buttons = [];
        }
        var button = (function (self) {
            return new Dash.Gui.Button(
                label_text,
                // Andrew 1/17/23 - For some reason, the original code here wraps the provided callback in an empty function, which
                // suppresses the button's actual callback return values. I can't understand why it was written this way, but I've
                // added an extra param, 'wrap_cb', to circumvent this behavior and actually pass the provided callback directly to
                // the button, as it should be. I've done it this way to make sure nothing else will break, but this is a strange one.
                wrap_cb ? function () {
                    if (callback) {
                        callback.bind(self.binder)(button);
                    }
                } : callback ? callback.bind(self.binder) : null,
                self,
                self.color,
                options
            );
        })(this);
        this.buttons.push(button);
        var css = {"margin-top": Dash.Size.Padding};
        if (Dash.Validate.Object(options) && options["style"] === "toolbar") {
            css["margin-right"] = 0;
        }
        button.html.css(css);
        this.html.append(button.html);
        return button;
    };
    this.AddDeleteButton = function (callback, faint=true) {
        var button = this.AddButton("Delete", callback);
        button.StyleAsDeleteButton(Dash.Size.ColumnWidth, faint);
        button.html.css({
            "margin-left": Dash.Size.Padding * 2,
            "margin-right": "auto"
        });
        return button;
    };
    this.AddCombo = function (label_text, combo_options, property_key, default_value=null, bool=false, options={}) {
        var indent_px = options["indent_px"] || (Dash.Size.Padding * 2);
        var indent_row = false;
        if (this.num_headers > 0) {
            indent_row = true;
        }
        var row = new Dash.Gui.InputRow(
            label_text,
            "",
            "",
            "",
            function (row_input) {
                // Do nothing, dummy row
            },
            this
        );
        row.input.input.css("pointer-events", "none");
        if (indent_row) {
            row.html.css("margin-left", indent_px);
        }
        this.html.append(row.html);
        var selected_key = default_value || this.get_data_cb()[property_key];
        var combo = (function (self) {
            return new Dash.Gui.Combo(
                selected_key,
                options["callback"] ? function (selected_option) {
                    options["callback"](property_key, selected_option["id"]);
                } : function (selected_option) {
                    self.on_combo_updated(property_key, selected_option["id"]);
                },
                self,
                combo_options,
                default_value !== null ? default_value : selected_key,
                self.color,
                {
                    "style": "row",
                    ...options
                },
                bool
            );
        })(this);
        combo.html.css({
            "position": "absolute",
            "left": Dash.Size.Padding * 0.5,
            "top": 0,
            "height": Dash.Size.RowHeight
        });
        combo.label.css({
            "height": Dash.Size.RowHeight,
            "line-height": Dash.Size.RowHeight + "px"
        });
        row.input.html.append(combo.html);
        row.property_box_input_combo = combo;
        this.combos[property_key] = combo;
        this.track_row(row);
        return row;
    };
    this.AddInput = function (data_key, label_text, default_value, combo_options, can_edit, options={}) {
        this.data = this.get_data_cb ? this.get_data_cb() : {};
        var value = this.get_formatted_data_cb ? this.get_formatted_data_cb(data_key) : this.data[data_key];
        var row_details = {
            "key": data_key,
            "label_text": label_text,
            "default_value": default_value || null,
            "combo_options": combo_options || null,
            "value": value !== null && value !== undefined ? value : default_value,  // Keep 'false' intact
            "can_edit": can_edit
        };
        var row = (function (self) {
            return new Dash.Gui.InputRow(
                label_text,
                row_details["value"],
                options["placeholder_text"] || default_value || label_text,
                combo_options || "Save",
                options["callback"] ? function (row_input) {
                    options["callback"](data_key, row_input.Text());
                } : function (row_input) {
                    self.on_row_updated(row_input, row_details);
                },
                self,
                self.color,
                data_key
            );
        })(this);
        this.inputs[data_key] = row;
        this.indent_row(row);
        if (!can_edit) {
            row.SetLocked(true);
        }
        if (options["add_combo"]) {
            row = this.add_combo(
                row,
                options["add_combo"],
                false,
                !!options["on_delete"]
            );
        }
        if (options["on_delete"]) {
            row = this.add_delete_button(row, options["on_delete"], data_key);
        }
        this.html.append(row.html);
        this.track_row(row);
        return row;
    };
    this.AddLabel = function (text, color=null) {
        var header = new Dash.Gui.Header(text, color || this.color);
        header.html.css({
            "margin-left": Dash.Size.Padding * 2
        });
        this.html.append(header.html);
        return header;
    };
    this.AddText = function (text, color=null) {
        var label = this.AddLabel(text, false, color || this.color);
        label.border.remove();
        label.label.css({
            "font-family": "sans_serif_normal",
            "white-space": "nowrap",
            "overflow": "hidden",
            "text-overflow": "ellipsis",
            "padding-left": 0
        });
        this.html.append(label.html);
        return label;
    };
    // TODO: this should've originally been setup to be directly connected to this property box's set_data function
    this.AddCheckbox = function (
        local_storage_key="", default_state=true, color=null, hover_hint="Toggle", binder=null, callback=null,
        label_text="", label_first=true, include_border=false, read_only=false, icon_redraw_styling=null, highlight_row=true
    ) {
        label_text = label_text.trim();
        if (label_text && !label_text.endsWith(":")) {
            label_text += ":";  // To ensure conformity with property box row styling
        }
        var checkbox = new Dash.Gui.Checkbox(
            local_storage_key,
            default_state,
            color || this.color,
            hover_hint,
            binder,
            callback && highlight_row ? (function (self) {
                return function (checkbox) {
                    callback.bind(binder)(checkbox);
                    self.add_hover_highlight(checkbox.html);
                };
            })(this) : callback,
            label_text,
            label_first,
            include_border
        );
        this.indent_row(checkbox);
        checkbox.html.css({
            "border-bottom": "1px dotted rgba(0, 0, 0, 0.2)"
        });
        checkbox.label.label.css({
            "font-family": "sans_serif_bold",
            "font-size": "80%"
        });
        checkbox.SetIconSize(125);
        if (read_only) {
            checkbox.SetReadOnly(true);
        }
        if (icon_redraw_styling) {
            icon_redraw_styling["margin-top"] = Dash.Size.Padding * 0.1;
        }
        else {
            icon_redraw_styling = {"margin-top": 0.1};
        }
        checkbox.AddIconButtonRedrawStyling(icon_redraw_styling);
        if (highlight_row) {
            this.add_hover_highlight(checkbox.html);
        }
        this.AddHTML(checkbox.html);
        this.track_row(checkbox);
        return checkbox;
    };
    // To visually break up rows when readability is getting tough due to too much stuff on the screen etc
    this.HighlightEveryOtherRow = function (odd_rows=false, color="") {
        this.every_other_row_hightlight = {
            "color": color || this.color.Pinstripe,
            "highlight": odd_rows
        };
        for (var row of this.rows) {
            this.highlight_row_if_applicable(row);
        }
    };
    this.Load = function () {
        Dash.Request(
            this,
            this.on_server_property_set,
            this.endpoint,
            {
                "f": "get_property_set",
                "obj_id": this.dash_obj_id
            }
        );
    };
}

function DashLayout () {
    this.Dashboard               = DashLayoutDashboard;
    this.List                    = DashLayoutList;
    this.List.ColumnConfig       = DashLayoutListColumnConfig;
    this.PaneSlider              = DashLayoutPaneSlider;
    this.RevolvingList           = DashLayoutRevolvingList;
    this.SearchableList          = DashLayoutSearchableList;
    this.SearchableRevolvingList = DashLayoutSearchableRevolvingList;
    this.Toolbar                 = DashLayoutToolbar;
    this.UserProfile             = DashLayoutUserProfile;
    this.Tabs = {
        Side: class DashLayoutTabsSide extends DashLayoutTabs {
            constructor(binder, recall_id_suffix="") {
                super(binder, true, recall_id_suffix);
            };
        },
        Top:  class DashLayoutTabsTop extends DashLayoutTabs {
            constructor(binder, recall_id_suffix="") {
                super(binder, false, recall_id_suffix);
            };
        }
    };
}

function DashLayoutTabs (binder, side_tabs, recall_id_suffix="") {
    this.binder = binder;
    this.side_tabs = side_tabs;
    this.temp_html = [];
    this.all_content = [];
    this.selected_index = -1;
    this.current_index = null;
    this.html = $("<div></div>");
    this.on_tab_changed_cb = null;
    this.tab_top = $("<div></div>");
    this.tab_bottom = $("<div></div>");
    this.before_tab_changed_cb = null;
    this.content_area = $("<div></div>");
    this.always_start_on_first_tab = false;
    this.recall_id = (this.binder.constructor + "").replace(/[^A-Za-z]/g, "").slice(0, 100).trim().toLowerCase();
    // This is necessary if there will be two different lists within the same script.
    // Without this, both lists will share the same recall ID and load indexes incorrectly.
    if (recall_id_suffix) {
        this.recall_id += "_" + recall_id_suffix;
    }
    if (this.side_tabs) {
        this.color = Dash.Color.Dark;
        this.tab_area = $("<div></div>");
        this.tab_middle = $("<div></div>");
        this.tab_area_size = Dash.Size.ColumnWidth;
    }
    else {  // TODO: This should probably also be converted to a better div grouping
        this.color = Dash.Color.Light;
        this.list_backing = $("<div></div>");
        this.tab_area_size = Dash.Size.RowHeight + Dash.Size.Padding;
    }
    this.setup_styles = function () {
        if (this.side_tabs) {
            this.set_styles_for_side_tabs();
        }
        else {
            this.set_styles_for_top_tabs();
        }
        (function (self) {
            requestAnimationFrame(function () {
                if (!Dash.User.Data || Dash.User.Data["first_name"]) {
                    self.load_last_selection();
                    return;
                }
                // If the user is new and hasn't yet at least entered their first name, gently
                // nudge them to do so every time they load the main view by loading their user view
                for (var i in self.all_content) {
                    if (self.all_content[i]["content_div_html_class"] !== DashUserView) {
                        continue;
                    }
                    try {
                        self.LoadIndex(i);
                    }
                    catch {
                        self.load_last_selection();
                    }
                }
            });
        })(this);
    };
    this.AlwaysStartOnFirstTab = function () {
        this.always_start_on_first_tab = true;
    };
    this.OnTabChanged = function (callback) {
        this.on_tab_changed_cb = callback.bind(this.binder);
    };
    // The function provided here should return a bool which will
    // determine if the tab should be allowed to change or not
    this.BeforeTabChanged = function (callback) {
        this.before_tab_changed_cb = callback.bind(this.binder);
    };
    this.GetCurrentIndex = function () {
        return this.current_index;
    };
    this.GetCurrentTabData = function () {
        if (this.current_index === null) {
            return {};
        }
        return this.all_content[this.current_index];
    };
    this.GetIndexByTabName = function (name) {
        for (var i in this.all_content) {
            var content = this.all_content[i];
            if (content["label_text"] === name) {
                return i;
            }
        }
        console.warn("Warning: Failed to find index by tab name for:", name);
        return 0;
    };
    // TODO: Break this function up
    this.LoadIndex = function (index, clicked=false) {
        if (index > this.all_content.length - 1) {
            return;
        }
        if (clicked && this.before_tab_changed_cb && !this.before_tab_changed_cb(index)) {
            return;
        }
        this.remove_temp_html();
        if (!this.always_start_on_first_tab) {
            Dash.Local.Set("sidebar_index_" + this.recall_id, index);
        }
        this.current_index = index;
        var button = null;
        for (var i in this.all_content) {
            var content_data = this.all_content[i];
            if (parseInt(i) === parseInt(index)) {
                content_data["button"].SetSelected(true);
                button = content_data["button"];
                if (content_data["selected_css"]) {
                    content_data["button"].html.css(content_data["selected_css"]);
                }
            }
            else {
                content_data["button"].SetSelected(false);
                if (content_data["unselected_css"]) {
                    content_data["button"].html.css(content_data["unselected_css"]);
                }
            }
            if (content_data["css"]) {
                content_data["button"].html.css(content_data["css"]);
            }
        }
        this.content_area.empty();
        var inst_class;
        var content_html;
        if (typeof this.all_content[index]["content_div_html_class"] === "object") {
            content_html = this.all_content[index]["content_div_html_class"];
        }
        else if (typeof this.all_content[index]["content_div_html_class"] === "function") {
            // DashGlobalImpactChange | 12/21/21 | Ryan
            // Updating this function to pass optional_args to callback while also
            // binding the callback correctly to the parent class
            // This is likely a very low impact change that *shouldn't* affect anything
            var html_class = this.all_content[index]["content_div_html_class"];
            var callback = this.all_content[index]["content_div_html_class"].bind(this.binder);
            var optional_args = this.all_content[index]["optional_args"];
            var unpack = this.all_content[index]["unpack_params"] && Dash.Validate.Object(optional_args) && Array.isArray(optional_args);
            if (this.is_class(html_class)) {
                if (unpack) {
                    inst_class = new callback(...optional_args);
                }
                else {
                    if (optional_args) {
                        inst_class = new callback(optional_args);
                    }
                    else {
                        inst_class = new callback();
                    }
                }
                content_html = inst_class.html;
            }
            else {  // Calling a function with 'new' will result in an incorrect binding
                if (unpack) {
                    inst_class = callback(...optional_args);
                }
                else {
                    if (optional_args) {
                        inst_class = callback(optional_args);
                    }
                    else {
                        inst_class = callback();
                    }
                }
                content_html = inst_class.html;
            }
        }
        else {
            content_html = this.all_content[index]["content_div_html_class"].bind(this.binder)(button);
        }
        if (!content_html) {
            if (parseInt(index) === 0) {
                console.error("Error: Unknown content!");
                content_html = $("<div>Error Loading Content</div>");
            }
            else {
                console.error("Error: Invalid index", index, ", reloading index 0");
                this.LoadIndex(0);
                return;
            }
        }
        this.content_area.append(content_html);
        if (this.on_tab_changed_cb) {
            this.on_tab_changed_cb(this.all_content[index], inst_class);
        }
        if (this.all_content[index]["url_hash_text"]) {
            Dash.History.TabAdd(
                this.all_content[index]["url_hash_text"],
                this,
                index
            );
        }
        return inst_class;
    };
    this.AddHTML = function (html, remove_on_tab_change=false) {
        html.css({
            "margin-bottom": 1
        });
        this.tab_top.append(html);
        if (remove_on_tab_change) {
            this.temp_html.push(html);
        }
        return html;
    };
    // DEPRECATED in favor of AddHTML to stay consistent with that naming across Dash
    this.AppendHTML = function (html) {
        return this.AddHTML(html);
    };
    this.MidpendHTML = function (html) {
        if (!this.side_tabs) {
            console.log("MidpendHTML only works for side tabs right now");
            return;
        }
        html.css({
            "margin-top": 1,
            "margin-bottom": 1
        });
        this.tab_middle.append(html);
        return html;
    };
    this.PrependHTML = function (html) {
        html.css({
            "margin-top": 1
        });
        this.tab_bottom.append(html);
        return html;
    };
    this.AppendImage = function (img_url, height=null) {
        // TODO: Move the concept of an 'Image' into dash as a light abstraction for managing aspect ratios
        // TODO: This AppendImage is a hack. We need to revise the stack of objects in this
        //  container so they derive from some abstraction to simplify append/prepend
        var image = $("<div></div>");
        image.css({
            "height": height || Dash.Size.RowHeight * 2,
            "background-image": "url(" + img_url + ")",
            "background-repeat": "no-repeat",
            "background-size": "contain",
            "background-position": "center"
        });
        this.tab_top.append(image);
        return image;
    };
    this.Append = function (label_text, content_div_html_class, optional_args=null, additional_content_data={}) {
        return this._add(label_text, content_div_html_class, this.tab_top, optional_args, additional_content_data);
    };
    this.Midpend = function (label_text, content_div_html_class, optional_args=null, additional_content_data={}) {
        if (!this.side_tabs) {
            console.error("Error: Midpend only works for side tabs for now");
            return;
        }
        return this._add(label_text, content_div_html_class, this.tab_middle, optional_args, additional_content_data);
    };
    this.Prepend = function (label_text, content_div_html_class, optional_args=null, additional_content_data={}) {
        return this._add(label_text, content_div_html_class, this.tab_bottom, optional_args, additional_content_data);
    };
    this.SetTabAreaSize = function (size=null) {
        if (size) {
            this.tab_area_size = size;
        }
        if (this.side_tabs) {
            this.content_area.css({
                "left": this.tab_area_size
            });
            this.tab_area.css({
                "width": this.tab_area_size
            });
            this.tab_top.css({
                "width": this.tab_area_size
            });
            this.tab_middle.css({
                "width": this.tab_area_size
            });
            this.tab_bottom.css({
                "width": this.tab_area_size
            });
        }
        else {
            this.list_backing.css({
                "height": this.tab_area_size
            });
            this.tab_top.css({
                "height": this.tab_area_size
            });
            this.tab_bottom.css({
                "height": this.tab_area_size
            });
            this.content_area.css({
                "top": this.tab_area_size
            });
        }
    };
    this.remove_temp_html = function () {
        for (var html of this.temp_html) {
            html.remove();
        }
        this.temp_html = [];
    };
    this.is_class = function (func) {
        var dummy = Function.prototype.toString.call(func);
        return dummy.includes("this.setup_styles") || dummy.includes("this.html");
    };
    this.set_styles_for_side_tabs = function () {
        this.html.css({
            "position": "absolute",
            "inset": 0,
            "background": this.color.Tab.AreaBackground,
        });
        this.content_area.css({
            "position": "absolute",
            "top": 0,
            "left": this.tab_area_size,
            "bottom": 0,
            "right": 0,
            "background": Dash.Color.GetOpposite(this.color).Background,
        });
        this.tab_area.css({
            "display": "flex",
            "flex-direction": "column",
            "position": "absolute",
            "top": 0,
            "left": 0,
            "bottom": 0,
            "width": this.tab_area_size
        });
        this.tab_top.css({
            "width": this.tab_area_size
        });
        this.tab_middle.css({
            "margin-top": Dash.Size.Padding * 0.2,
            "margin-bottom": Dash.Size.Padding * 0.2,
            "flex-grow": 2,
            "overflow-y": "auto",
            "width": this.tab_area_size
        });
        this.tab_bottom.css({
            "width": this.tab_area_size
        });
        this.tab_area.append(this.tab_top);
        this.tab_area.append(this.tab_middle);
        this.tab_area.append(this.tab_bottom);
        this.html.append(this.content_area);
        this.html.append(this.tab_area);
    };
    this.set_styles_for_top_tabs = function () {
        this.html.css({
            "position": "absolute",
            "inset": 0,
            "background": this.color.Tab.AreaBackground,
        });
        this.list_backing.css({
            "position": "absolute",
            "left": 0,
            "top": 0,
            "right": 0,
            "height": this.tab_area_size
        });
        this.tab_top.css({
            "position": "absolute",
            "left": 0,
            "right": 0,
            "top": 0,
            "display": "flex",
            "height": this.tab_area_size
        });
        this.tab_bottom.css({
            "position": "absolute",
            "right": 0,
            "top": 0,
            "display": "flex",
            "height": this.tab_area_size
        });
        // The right side / non-tab area / content
        this.content_area.css({
            "position": "absolute",
            "inset": 0,
            "overflow-y": "auto",
            // "background": Dash.Color.GetOpposite(this.color).Background,
            "background": this.color.Background,
            "top": this.tab_area_size
        });
        this.html.append(this.list_backing);
        this.html.append(this.tab_top);
        this.html.append(this.tab_bottom);
        this.html.append(this.content_area);
    };
    this.load_last_selection = function () {
        if (parseInt(this.selected_index) !== -1) {
            // A selection was already made externally
            return;
        }
        if (this.all_content.length === 0) {
            return;
        }
        if (this.always_start_on_first_tab) {
            this.LoadIndex(0);
            return;
        }
        var last_index = parseInt(Dash.Local.Get("sidebar_index_" + this.recall_id)) || 0;
        if (last_index > this.all_content.length - 1) {
            last_index = 0;
        }
        this.LoadIndex(last_index);
    };
    this._add = function (label_text, content_div_html_class, anchor_div, optional_args=null, additional_content_data={}) {
        var content_data = {
            "label_text": label_text,
            "content_div_html_class": content_div_html_class,
            "button": null,
            // Any extra arg to pass to the class (if it's an array, it can be unpacked by passing "unpack_params": true (in additional_content_data))
            "optional_args": optional_args,
            // Extra data that doesn't belong in optional_args (since optional_args gets sent to the callback)
            ...additional_content_data
        };
        (function (self, index) {
            var style = self.side_tabs ? "tab_side" : "tab_top";
            content_data["button"] = new Dash.Gui.Button(
                label_text,                         // Label
                function () {                       // Callback
                    self.LoadIndex(index, true);
                },
                self,                               // Binder
                self.color,                         // Dash Color Set
                {"style": style}                    // Options
            );
        })(this, this.all_content.length);
        anchor_div = anchor_div || this.tab_top;
        anchor_div.append(content_data["button"].html);
        this.all_content.push(content_data);
        return content_data["button"];
    };
    this.setup_styles();
}

function DashLayoutPaneSlider (binder, is_vertical=false, default_size=null, identifier="", inverted=false) {
    this.binder = binder;
    this.is_vertical = is_vertical;
    this.default_size = default_size || Dash.Size.ColumnWidth;
    this.identifier = identifier;
    this.inverted = inverted;
    this.drag_properties = {};
    this.html = $("<div></div>");
    this.divider = $("<div></div>");
    this.content_a = $("<div></div>");
    this.content_b = $("<div></div>");
    this.divider_hover = $("<div></div>");
    this.locked_size = this.default_size;
    this.divider_color = "rgba(0, 0, 0, 0.2)";
    this.divider_size = Dash.Size.Padding * 0.1;
    this.divider_color_active = "rgba(0, 0, 0, 0.6)";
    this.divider_hover_size = Dash.Size.Padding * 1.5; // A slightly larger size for dragging
    this.min_size = this.default_size || Dash.Size.ColumnWidth * 0.5;
    this.recall_id = "dash_layout_pane_slider_" + (
        // If using multiple sliders with the same binder, they'll need their own, unique identifier strings
        this.identifier || (this.binder.constructor + "").replace(/[^A-Za-z]/g, "").slice(0, 100).trim().toLowerCase()
    );
    if (this.is_vertical) {
        this.recall_id += "_v";
    }
    else {
        this.recall_id += "_h";
    }
    this.setup_styles = function () {
        var recall_locked_size = Dash.Local.Get(this.recall_id);
        if (recall_locked_size) {
            var number = parseInt(recall_locked_size);
            if (number > this.min_size) {
                this.locked_size = number;
            }
            else if (number < this.min_size) {
                Dash.Local.Set(this.recall_id, this.min_size);
            }
        }
        this.html.append(this.content_a);
        this.html.append(this.content_b);
        this.html.append(this.divider);
        this.html.append(this.divider_hover);
        this.html.css({
            "position": "absolute",
            "inset": 0
        });
        if (this.is_vertical) {
            this.setup_vertical();
        }
        else {
            this.setup_horizontal();
        }
        this.draw();
        this.setup_connections();
    };
    this.SetPaneContentA = function (html) {
        this.content_a.empty().append(html);
    };
    this.SetPaneContentB = function (html) {
        this.content_b.empty().append(html);
    };
    // Don't need to use this if default size was provided on init and you want the default to be the min
    this.SetMinSize = function (size) {
        this.min_size = size;
    };
    this.setup_vertical = function () {
        this.content_a.css({
            "position": "absolute",
            "left": 0,
            "right": 0,
            "top": 0,
            "overflow-y": "auto",
        });
        this.content_b.css({
            "position": "absolute",
            "left": 0,
            "right": 0,
            "bottom": 0,
            "overflow-y": "auto",
        });
        this.divider.css({
            "position": "absolute",
            "left": 0,
            "right": 0,
            "bottom": 0,
            "height": this.divider_size,
            "background": this.divider_color,
            "user-select": "none"  // Disable unintentional highlighting when dragging slider
        });
        this.divider_hover.css({
            "position": "absolute",
            "left": 0,
            "right": 0,
            "bottom": 0,
            "height": this.divider_hover_size,
            "background": "rgba(0, 0, 0, 0)",
            "opacity": 0.5,
            "cursor": "ns-resize",
            "user-select": "none"  // Disable unintentional highlighting when dragging slider
        });
    };
    this.setup_horizontal = function () {
        this.content_a.css({
            "position": "absolute",
            "inset": 0,
            "overflow-x": "auto"
        });
        this.content_b.css({
            "position": "absolute",
            "inset": 0,
            "overflow-x": "auto"
        });
        this.divider.css({
            "position": "absolute",
            "left": 0,
            "top": 0,
            "bottom": 0,
            "width": this.divider_size,
            "background": this.divider_color,
            "user-select": "none"  // Disable unintentional highlighting when dragging slider
        });
        this.divider_hover.css({
            "position": "absolute",
            "left": 0,
            "top": 0,
            "bottom": 0,
            "width": this.divider_hover_size,
            "background": "rgba(0, 0, 0, 0)",
            "opacity": 0.5,
            "cursor": "ew-resize",
            "user-select": "none"  // Disable unintentional highlighting when dragging slider
        });
    };
    this.set_cursor = function (reset=false) {
        var cursor = this.is_vertical ? "ns-resize" : "ew-resize";
        if (!reset) {
            var size_a = this.is_vertical ? this.content_a.innerHeight() : this.content_a.innerWidth();
            var size_b = this.is_vertical ? this.content_b.innerHeight() : this.content_b.innerWidth();
            // Not enough screen space to move in either direction
            if (size_a <= this.min_size && size_b <= this.min_size) {
                cursor = "not-allowed";
            }
            // Check if one of the two sides is at min
            else {
                if (this.inverted) {
                    if (size_a <= this.min_size) {
                        cursor = this.is_vertical ? "s-resize" : "e-resize";
                    }
                }
                else {
                    if (size_b <= this.min_size) {
                        cursor = this.is_vertical ? "n-resize" : "w-resize";
                    }
                }
            }
        }
        this.divider_hover.css({
            "cursor": cursor
        });
    };
    this.setup_connections = function () {
        (function (self) {
            self.divider_hover.on("mouseenter", function () {
                self.set_cursor();
                self.divider.css({
                    "background": self.divider_color_active
                });
            });
            self.divider_hover.on("mouseleave", function () {
                self.divider.css({
                    "background": self.divider_color
                });
            });
            self.html.on("mousemove", function (e) {
                if (!self.drag_active) {
                    return;
                }
                self.drag_properties["last_pos"] = self.is_vertical ? e.screenY : e.screenX;
                self.on_drag();
            });
            self.divider_hover.on("mousedown", function (e) {
                if (self.drag_active) {
                    return;
                }
                self.drag_active = true;
                self.drag_properties["start_locked_size"] = self.locked_size;
                self.drag_properties["start_pos"] = self.is_vertical ? e.screenY : e.screenX;
                self.drag_properties["reset_cursor"] = true;
                self.on_drag_start();
            });
            self.html.on("mouseup", function () {
                if (!self.drag_active) {
                    return;
                }
                self.drag_active = false;
                self.on_drag_end();
            });
        })(this);
    };
    this.on_drag_start = function () {
        // Placeholder
    };
    this.on_drag_end = function () {
        this.set_cursor();
        Dash.Local.Set(this.recall_id, this.locked_size);
    };
    this.on_drag = function () {
        var size_now = this.locked_size;
        this.drag_properties["change"] = this.inverted ? this.drag_properties["last_pos"] - this.drag_properties["start_pos"] : this.drag_properties["start_pos"] - this.drag_properties["last_pos"];
        this.locked_size = this.drag_properties["start_locked_size"] + this.drag_properties["change"];
        // If inverted, this is content B, otherwise, content A
        var secondary_content_size = (this.is_vertical ? this.html.height() : this.html.width()) - this.locked_size;
        if (this.drag_properties["reset_cursor"]) {
            this.set_cursor(true);
            this.drag_properties["reset_cursor"] = false;
        }
        // If secondary content reaches min, lock it
        if (secondary_content_size < this.min_size) {
            this.locked_size = size_now;
            this.drag_properties["reset_cursor"] = true;
        }
        // If primary content reaches min, lock it
        if (this.locked_size < this.min_size) {
            this.locked_size = this.min_size;
            this.drag_properties["reset_cursor"] = true;
        }
        this.draw();
    };
    this.draw = function () {
        if (this.is_vertical) {
            this.draw_vertical();
        }
        else {
            this.draw_horizontal();
        }
    };
    this.draw_vertical = function () {
        if (this.inverted) {
            this.content_a.css({
                "height": this.locked_size - (this.divider_size * 0.5)
            });
            this.content_b.css({
                "top": this.locked_size + (this.divider_size * 0.5)
            });
            this.divider.css({
                "top": this.locked_size - (this.divider_size * 0.5),
                "bottom": "auto"
            });
            this.divider_hover.css({
                "top": this.locked_size - (this.divider_hover_size * 0.5),
                "bottom": "auto"
            });
        }
        else {
            this.content_a.css({
                "bottom": this.locked_size + (this.divider_size * 0.5)
            });
            this.content_b.css({
                "height": this.locked_size - (this.divider_size * 0.5)
            });
            this.divider.css({
                "bottom": this.locked_size - (this.divider_size * 0.5),
                "top": "auto"
            });
            this.divider_hover.css({
                "bottom": this.locked_size - (this.divider_hover_size * 0.5),
                "top": "auto"
            });
        }
    };
    this.draw_horizontal = function () {
        if (this.inverted) {
            this.content_a.css({
                "width": this.locked_size - (this.divider_size * 0.5),
                "right": "auto"
            });
            this.content_b.css({
                "left": this.locked_size + (this.divider_size * 0.5)
            });
            this.divider.css({
                "left": this.locked_size - (this.divider_size * 0.5),
                "right": "auto"
            });
            this.divider_hover.css({
                "left": this.locked_size - (this.divider_hover_size * 0.5),
                "right": "auto"
            });
        }
        else {
            this.content_a.css({
                "right": this.locked_size + (this.divider_size * 0.5)
            });
            this.content_b.css({
                "width": this.locked_size - (this.divider_size * 0.5),
                "left": "auto"
            });
            this.divider.css({
                "right": this.locked_size - (this.divider_size * 0.5),
                "left": "auto"
            });
            this.divider_hover.css({
                "right": this.locked_size - (this.divider_hover_size * 0.5),
                "left": "auto"
            });
        }
    };
    this.setup_styles();
}

// Profile page layout for the currently logged-in user
function DashLayoutUserProfile (user_data=null, options={}, view_mode="settings") {
    this.user_data = user_data || Dash.User.Data || {};
    this.options = options;  // TODO: convert to proper interface
    this.view_mode = view_mode;
    this.modal = null;
    this.callbacks = {};
    this.property_box = null;
    this.modal_profile = null;
    this.top_right_button = null;
    this.img_box = $("<div></div>");
    this.modal_of = this.options["modal_of"] || null;
    this.color = this.options["color"] || Dash.Color.Light;
    this.html = Dash.Gui.GetHTMLBoxContext({}, this.color);
    this.img_box_size = this.options["img_box_size"] || (this.view_mode === "preview" ? Dash.Size.ColumnWidth * 1.2 : Dash.Size.ColumnWidth);
    this.height = this.img_box_size + Dash.Size.Padding + Dash.Size.RowHeight;
    // True by default, but ideally, options["is_admin"] should be provided for added
    // security between non-admins. This is referenced by this.has_privileges when this element
    // is pertaining to the current user, so that users (and admins) can only change their own data.
    this.is_admin = "is_admin" in this.options ? this.options["is_admin"] : true;
    // This manages whether:
    //   - rows are editable (excluding the ones that are hard-coded)
    //   - the "Update Password" field is visible
    //   - the user image can be updated
    this.has_privileges = (this.user_data["email"] === Dash.User.Data["email"] || this.is_admin);
    this.setup_styles = function () {
        if (!["settings", "preview"].includes(this.view_mode)) {
            console.error("Error: View mode is invalid");
            return;
        }
        this.add_header();
        if (this.view_mode === "settings") {
            this.add_property_box();
        }
        this.add_user_image_box();
        this.add_top_right_button();
        this.html.css({
            "min-height": this.height
        });
        if (this.view_mode === "preview") {
            this.html.css({
                "max-height": this.height,
                "width": this.img_box_size,
                "min-width": this.img_box_size,
                "max-width": this.img_box_size
            });
        }
    };
    this.HasPrivileges = function () {
        return this.has_privileges;
    };
    this.add_top_right_button = function () {
        if (this.modal_of) {
            return;
        }
        this.top_right_button = Dash.Gui.GetTopRightIconButton(
            this,
            this.view_mode === "settings" ? this.log_out :
                this.view_mode === "preview" ? this.show_modal :
                function () {},
            this.modal_of ? "close" :
                this.view_mode === "settings" ? "log_out" :
                this.view_mode === "preview" ? "expand" :
                "alert_triangle"
        );
        this.top_right_button.html.css({
            "margin-top": Dash.Size.Padding * 0.25,
            "margin-right": Dash.Size.Padding * 0.8
        });
        this.top_right_button.SetIconSize(180).AddHighlight().SetHoverHint(
            this.view_mode === "settings" ? "Log Out" :
            this.view_mode === "preview" ? "Expand" :
            ""
        );
        this.html.append(this.top_right_button.html);
    };
    this.show_modal = function () {
        if (this.modal) {
            this.modal.Show();
            return;
        }
        this.modal = new Dash.Gui.Modal(
            this.color,
            this.html.parent(),
            Dash.Size.ColumnWidth * 3.25,
            this.img_box_size + Dash.Size.Padding  // This isn't technically correct, but it's working - moving on
        );
        if (this.modal_profile) {
            return;
        }
        this.add_modal_profile();
    };
    this.add_modal_profile = function () {
        this.modal_profile = new Dash.Layout.UserProfile(
            this.user_data,
            {
                ...this.options,
                "modal_of": this
            },
            "settings"
        );
        this.modal_profile.html.css({
            "padding": 0,
            "background": "",
            "box-shadow": ""
        });
        this.modal_profile.img_box.css({
            "left": 0,
            "top": Dash.Size.Padding + Dash.Size.RowHeight
        });
        this.modal.AddHTML(this.modal_profile.html);
    };
    this.add_header = function () {
        var label = "User";
        if (this.view_mode === "settings") {
            label = (this.user_data["first_name"] ? this.user_data["first_name"] + "'s " : "") + "User Settings";
        }
        else if (this.view_mode === "preview") {
            if (this.user_data["display_name"]) {
                label = this.user_data["display_name"];
            }
            else {
                label = "";
                if (this.user_data["first_name"]) {
                    label += this.user_data["first_name"];
                    if (this.user_data["last_name"]) {
                        label += " ";
                        label += this.user_data["last_name"];
                    }
                }
            }
        }
        this.header = new Dash.Gui.Header(label, this.color);
        this.header.ReplaceBorderWithIcon("user").AddShadow();
        this.header.label.css({
            "flex": 1,
            "overflow": "hidden",
            "white-space": "nowrap",
            "text-overflow": "ellipsis",
            "margin-right": Dash.Size.Padding * 3
        });
        this.html.append(this.header.html);
    };
    this.add_property_box = function () {
        this.property_box = new Dash.Gui.PropertyBox(
            this,           // For binding
            this.get_data,  // Function to return live data
            this.set_data,  // Function to set saved data locally
            "Users",        // Endpoint
            this.user_data["email"], // Dash obj_id (unique for users)
            {"color": this.color}
        );
        this.html.append(this.property_box.html);
        this.property_box.Flatten();
        this.property_box.html.css({
            "margin": 0,
            "padding": 0,
            "padding-left": this.img_box_size + Dash.Size.Padding,
            "border-radius": 0
        });
        if (!this.options["property_box"] || !this.options["property_box"]["replace"]) {
            // TODO: Ideally, this should also be editable (with this.has_privileges), but I don't think
            //  the right things are in place on the back-end, like renaming the user's folder etc
            this.property_box.AddInput("email", "E-mail Address", "", null, false);
            this.property_box.AddInput("first_name", "First Name", "", null, this.modal_of ? false : this.has_privileges);
            this.property_box.AddInput("last_name", "Last Name", "", null, this.modal_of ? false : this.has_privileges);
            if (this.has_privileges) {
                this.property_box.AddInput("password", "Update Password", "", null, !this.modal_of);
            }
        }
        if (this.options["property_box"] && this.options["property_box"]["properties"]) {
            var additional_props = this.options["property_box"]["properties"];
            for (var property_details of additional_props) {
                this.property_box.AddInput(
                    property_details["key"],
                    property_details["label_text"] || property_details["display_name"],
                    "",
                    null,
                    this.modal_of ? false : "editable" in property_details ? property_details["editable"] : this.has_privileges
                );
                // Extra callback if something else needs to happen in addition to the standard/basic set_data behavior
                if (property_details["callback"]) {
                    this.callbacks[property_details["key"]] = property_details["callback"];
                }
            }
        }
    };
    this.add_user_image_box = function () {
        var img_url = "https://dash.guide/github/dash/client/full/bin/img/user_default.jpg";
        if (this.user_data["img"]) {
            img_url = this.user_data["img"]["thumb_url"];
        }
        this.html.append(this.img_box);
        this.img_box.css({
            "position": "absolute",
            "left": Dash.Size.Padding,
            "top": (Dash.Size.Padding * 2) + Dash.Size.RowHeight,
            "width": this.img_box_size,
            "height": this.img_box_size,
            "background": "#222",
            "border-radius": 4,
            "background-image": "url(" + img_url + ")",
            "background-size": "cover",
            "box-shadow": "0px 0px 10px 1px rgba(0, 0, 0, 0.2)",
        });
        this.add_user_image_upload_button();
    };
    this.on_user_img_uploaded = function (response) {
        if (response.timeStamp) {
            return;
        }
        console.log("on_user_img_uploaded:", response);
        if (this.img_box && response["img"]) {
            this.user_data["img"] = response["img"];
            this.img_box.css({
                "background-image": "url(" + this.user_data["img"]["thumb_url"] + ")",
            });
        }
    };
    this.add_user_image_upload_button = function () {
        if (!this.has_privileges) {
            return;
        }
        var label = "Update Image";
        this.user_image_upload_button = new Dash.Gui.Button(label, this.on_user_img_uploaded, this, this.color);
        this.img_box.append(this.user_image_upload_button.html);
        var button_css = {
            "position": "absolute",
            "width": this.img_box_size,
            "height": this.img_box_size
        };
        var hidden_css = {...button_css, "opacity": 0};
        this.user_image_upload_button.SetFileUploader(
            "Users",
            {
                "f": "upload_image",
                "user_data": JSON.stringify(this.user_data)
            },
            null,
            hidden_css
        );
        this.user_image_upload_button.html.css({
            ...button_css,
            "background": "none",
            "overflow": "hidden"
        });
        this.user_image_upload_button.label.css({
            ...hidden_css,
            "font-family": "sans_serif_bold",
            "line-height": this.img_box_size + "px",
            "text-shadow": "1px 1px 1px rgba(0, 0, 0, 1)"
        });
        // this.user_image_upload_button.file_uploader.html.css(hidden_css);
        this.user_image_upload_button.html.attr("title", label);
        (function (user_image_upload_button) {
            user_image_upload_button.html.on("mouseenter", function () {
                user_image_upload_button.highlight.stop().animate({"opacity": 0.3}, 50);
                user_image_upload_button.label.stop().animate({"opacity": 0.65}, 50);
                if (user_image_upload_button.is_selected) {
                    user_image_upload_button.label.css("color", user_image_upload_button.color_set.Text.SelectedHover);
                }
                else {
                    user_image_upload_button.label.css("color", user_image_upload_button.color_set.Text.BaseHover);
                }
            });
            user_image_upload_button.html.on("mouseleave", function () {
                user_image_upload_button.label.stop().animate({"opacity": 0}, 50);
            });
        })(this.user_image_upload_button);
    };
    this.get_data = function () {
        return this.user_data;
    };
    // Basic/standard setting of data is taken care of in DashGuiPropertyBox
    this.set_data = function (updated_data_or_key, value) {
        var key = typeof updated_data_or_key === "string" ? updated_data_or_key : updated_data_or_key["key"];
        // This is an extra, optional follow-up to that
        if (key in this.callbacks) {
            this.callbacks[key](updated_data_or_key);
        }
    };
    this.log_out = function () {
        Dash.Logout();
    };
    // this.set_group = function (button, group_name, group_option) {
    //     console.log("this.set_group");
    //
    //     var api = "https://altona.io/Users";
    //     var server_data = {};
    //     server_data["f"] = "update_group_information";
    //     server_data["as_user"] = this.user_data["email"];
    //     server_data["group_name"] = group_name;
    //     server_data["group_option"] = group_option;
    //
    //     button.Request(api, server_data, this.on_info_saved, this);
    // };
    //
    // this.update_password = function () {
    //     if (!this.new_password_row.Text()) {
    //         return;
    //     }
    //
    //     (function (self) {
    //         Dash.Request(
    //             self,
    //             function (response) {
    //                 self.on_info_saved(response, self.new_password_row);
    //             },
    //             "Users",
    //             {
    //                 "f": "update_password",
    //                 "p": self.new_password_row.Text()
    //             }
    //         );
    //     })(this);
    // };
    //
    // this.update_first_name = function () {
    //     this.update_personal_information(this.first_name);
    // };
    //
    // this.update_last_name = function () {
    //     this.update_personal_information(this.last_name);
    // };
    //
    // this.update_personal_information = function (button) {
    //     console.log("this.update_personal_information");
    // };
    //
    // this.on_info_saved = function (response, input_row) {
    //     if (response["error"]) {
    //         console.log(response);
    //
    //         alert(response["error"]);
    //
    //         return;
    //     }
    //
    //     console.log("** Info saved successfully **");
    //
    //     input_row.FlashSave();
    // };
    this.setup_styles();
}

function DashLayoutDashboard (binder, color=null, vertical_space_percent=15) {
    this.binder = binder;
    this.color = color || this.binder.color || Dash.Color.Dark;
    this.vertical_space_percent = vertical_space_percent;
    this.margin = 1;
    this.vsizes = {};
    this.modules = [];
    this.vmargins = {};
    this.padding = 0.4;
    this.canvas_containers = [];
    this.rect_aspect_ratio = "2 / 1";
    this.square_aspect_ratio = "1 / 1";
    this.html = Dash.Gui.GetHTMLAbsContext();
    this.VerticalSpaceTakenPercent = null;
    this.VerticalSpaceAvailablePercent = null;
    this.AddSquareTagModule = function (header_text="", label_header_text="", label_text="") {
        var mod = this.add_module("square", "tag", header_text);
        if (label_text.toString()) {
            mod.SetLabelText(label_text);
        }
        if (label_header_text.toString()) {
            mod.SetLabelHeaderText(label_header_text);
        }
        return mod;
    };
    this.AddSquareRadialModule = function (header_text="", label_header_text="", radial_fill_percent=null) {
        var mod = this.add_module("square", "radial", header_text);
        if (parseInt(radial_fill_percent)) {
            mod.SetRadialFillPercent(radial_fill_percent);
        }
        if (label_header_text.toString()) {
            mod.SetLabelHeaderText(label_header_text);
        }
        return mod;
    };
    this.AddRectListModule = function (header_text="") {
        return this.add_module("rect", "list", header_text);
    };
    this.AddFlexBarModule = function (header_text="", bar_data=null) {
        var mod = this.add_module("flex", "bar", header_text);
        if (bar_data) {
            mod.SetBarData(bar_data);
        }
        return mod;
    };
    this.AddDivider = function () {
        if (!this.modules.length) {
            console.warn("No modules in dashboard, can't add divider");
            return;
        }
        var divider = $("<div></div>");
        var module = this.modules.Last()["module"];
        this.html.append(divider);
        (function (self) {
            requestAnimationFrame(function () {
                module.html.css({
                    "margin-right": 0
                });
                divider.css({
                    "width": Dash.Size.Stroke,
                    "height": module.html.height(),
                    "margin-top": parseInt(module.html.css("margin-top")) + (parseInt(module.html.css("padding-top")) * 2),
                    "margin-left": Dash.Size.Padding * 2,
                    "margin-right": Dash.Size.Padding * 2,
                    "background": self.color.AccentGood
                });
            });
        })(this);
        return divider;
    };
    this.SetVerticalSpacePercent = function (num) {
        num = parseInt(num);
        if (isNaN(num)) {
            console.error("Error: Invalid number passed to SetVerticalSpacePercent()");
            return;
        }
        this.vertical_space_percent = num;
        this.VerticalSpaceTakenPercent = num.toString() + "%";
        this.VerticalSpaceAvailablePercent = this.get_available_vertical_space_percent();
        for (var data of this.modules) {
            this.modules["module"].setup_styles(true);  // CSS update only
        }
    };
    this.get_text_vsize = function (percentage_decimal_of_dashboard_size) {
        var key = this.VerticalSpaceTakenPercent + "_" + percentage_decimal_of_dashboard_size;
        if (this.vsizes[key]) {
            return this.vsizes[key];
        }
        this.vsizes[key] = this.get_rounded_single_decimal(this.vertical_space_percent) * percentage_decimal_of_dashboard_size;
        return this.vsizes[key];
    };
    this.get_vmargin = function (margin_mult=1) {
        var key = this.VerticalSpaceTakenPercent + "_" + margin_mult;
        if (this.vmargins[key]) {
            return this.vmargins[key];
        }
        // 15 is the default vertical_space_percent
        this.vmargins[key] = this.get_rounded_single_decimal((this.margin * margin_mult) * (this.vertical_space_percent / 15));
        return this.vmargins[key];
    };
    this.get_rounded_single_decimal = function (value) {
        // Multiplying by 10 and then dividing by 10 yields a single decimal place, if applicable
        return Math.round(value * 10) / 10;
    };
    this.setup_styles = function () {
        this.SetVerticalSpacePercent(this.vertical_space_percent);
        this.html.css({
            "background": this.color.Background,
            "display": "flex",
            "overflow": "hidden"
        });
    };
    this.add_module = function (style, sub_style, header_text="") {
        var index = this.modules.length;
        var module = new DashLayoutDashboardModule(this, style, sub_style);
        if (header_text.toString()) {
            module.SetHeaderText(header_text);
        }
        this.html.append(module.html);
        this.modules.push({
            "module": module,
            "style": style,
            "sub_style": sub_style,
            "index": index
        });
        this.update_canvas_containers();
        return module;
    };
    this.get_available_vertical_space_percent = function () {
        return (100 - parseInt(this.VerticalSpaceTakenPercent)).toString() + "%";
    };
    // Document scope
    this.update_canvas_containers = function () {
        var i;
        var styles = [];
        for (i in this.modules) {
            styles.push(this.modules[i]["style"]);
        }
        for (i in this.canvas_containers) {
            try {
                document.body.removeChild(this.canvas_containers[i]["container"]);
                document.body.removeChild(this.canvas_containers[i]["script"]);
            }
            catch {
                // Not a child, continue/pass
            }
            if (window[this.canvas_containers[i]["id"]]) {
                delete window[this.canvas_containers[i]["id"]];
            }
        }
        
        this.canvas_containers = [];
        for (i in this.modules) {
            var canvas = this.modules[i]["module"].canvas;
            if (!canvas) {
                continue;
            }
            this.add_canvas(canvas, styles, this.modules[i]["index"]);
            if (!this.modules[i]["module"].canvas["gui"]) {
                var gui = window[this.modules[i]["module"].canvas["id"]];
                if (gui) {
                    this.modules[i]["module"].canvas["gui"] = gui;
                }
            }
        }
    };
    // Document scope
    this.add_canvas = function (canvas, styles, index) {
        var canvas_container = canvas["container"];
        var canvas_script = canvas["script"];
        if (!canvas_container || !canvas_script || !styles || styles.length < 1) {
            console.error("Error: Something went wrong when updating canvas containers x0741");
            return;
        }
        var top_container = document.createElement("div");
        top_container.style.display = "flex";
        top_container.style.position = "absolute";
        top_container.style.width = "100%";
        top_container.style.top = parseInt(this.VerticalSpaceAvailablePercent) + "vh";  // TEMP
        top_container.style.height = (parseInt(this.VerticalSpaceTakenPercent) - 0.1) + "vh";  // TEMP
        for (var i in styles) {
            if (parseInt(i) === index) {
                top_container.appendChild(canvas_container);
            }
            
            else {
                top_container.appendChild(this.get_placeholder_container(styles[i], i));
            }
        }
        // IMPORTANT: Must be at document level (added dynamically) for Chart script objects to properly display
        document.body.appendChild(top_container);
        document.body.appendChild(canvas_script);
        var new_container_data = {...canvas};
        new_container_data["container"] = top_container;
        this.canvas_containers.push(new_container_data);
    };
    // Document scope
    this.get_placeholder_container = function (type, index) {
        var container = document.createElement("div");
        container.style.padding = this.padding + "vh";  // TEMP
        container.style.margin = this.get_vmargin() + "vh";  // TEMP
        if (type === "square") {
            container.style.aspectRatio = this.square_aspect_ratio;
        }
        else if (type === "rect") {
            container.style.aspectRatio = this.rect_aspect_ratio;
        }
        else if (type === "flex") {
            container.style.flex = "1";
        }
        if (parseInt(index) > 0) {
            container.style.marginLeft = "0px";
        }
        return container;
    };
    this.setup_styles();
}

function DashLayoutDashboardModule (dashboard, style, sub_style) {
    this.dashboard = dashboard;
    this.style = style;
    this.sub_style = sub_style;
    this.color = this.dashboard.color || Dash.Color.Dark;
    this.modules = this.dashboard.modules;
    this.rect_aspect_ratio = this.dashboard.rect_aspect_ratio;
    this.square_aspect_ratio = this.dashboard.square_aspect_ratio;
    this.html = null;
    this.styles = [];
    this.header = $("<div>SetHeaderText()</div>");
    this.header_text = null;
    this.bold_font = "sans_serif_bold";
    this.primary_color = this.color.AccentGood;
    this.margin = this.dashboard.margin;
    this.padding = this.dashboard.padding;
    this.canvas = null;
    this.secondary_color = this.color.Stroke;
    this.text_css = {
        "font-family": this.bold_font,
        "white-space": "nowrap"
    };
    this.centered_text_css = {
        ...this.text_css,
        "text-align": "center",
        "margin-left": "auto",
        "margin-right": "auto"
    };
    // Applies to all module styles
    this.SetHeaderText = function (text) {
        text = text.toString().toUpperCase();
        if (text === this.header_text) {
            return;
        }
        if (!this.header_text) {
            this.header_text = text;
            this.header.text(this.header_text);
            return;  // No need to animate
        }
        this.header_text = text;
        (function (self) {
            self.header.fadeOut(
                500,
                function () {
                    self.header.text(self.header_text);
                    self.header.fadeIn(500);
                }
            );
        })(this);
    };
    this.initialize_style = function () {
        if (this.style === "flex") {
            DashLayoutDashboardModuleFlex.call(this);
        }
        else if (this.style === "square") {
            DashLayoutDashboardModuleSquare.call(this);
        }
        else if (this.style === "rect") {
            DashLayoutDashboardModuleRect.call(this);
        }
        else {
            console.error("Error: Invalid Module Style:", this.style);
            return;
        }
        if (!this.styles.includes(this.sub_style)) {
            console.error("Error: Invalid Module Sub-Style:", this.sub_style);
            return;
        }
        this.html = Dash.Gui.GetHTMLBoxContext();
        this.add_header();
        this.setup_styles();
        this.modify_styles();
    };
    this.modify_styles = function () {
        this.html.css({
            "background": this.color.BackgroundRaised,
            "margin": this.dashboard.get_vmargin() + "vh",  // TEMP
            "padding": this.padding + "vh"  // TEMP
        });
        if (this.modules && this.modules.length > 0) {
            this.html.css({
                "margin-left": 0
            });
        }
    };
    this.add_header = function () {
        this.header.css({
            ...this.centered_text_css,
            "color": this.secondary_color,
            "width": "95%",
            "font-size": this.dashboard.get_text_vsize(0.06) + "vh",  // TEMP
            "height": this.dashboard.get_text_vsize(0.06) + "vh",  // TEMP
        });
        if (this.header_text) {
            this.SetHeaderText(this.header_text);
        }
        this.html.append(this.header);
    };
    this.initialize_style();
}

/**@member DashLayoutDashboardModule*/
function DashLayoutDashboardModuleFlex () {
    this.styles = ["bar"];
    this.bar_data = {};
    this.text_css["overflow"] = "hidden";
    this.text_css["text-overflow"] = "ellipsis";
    this.centered_text_css["overflow"] = "hidden";
    this.centered_text_css["text-overflow"] = "ellipsis";
    this.SetBarData = function (data) {
        if (this.sub_style !== "bar") {
            console.error("Error: SetBarData() only applies to Flex-Bar Modules");
            return;
        }
        if (!Dash.Validate.Object(data)) {
            console.error("Error: SetBarData() requires a dictionary to be passed in");
            return;
        }
        if (!data["data"] || !data["order"]) {
            console.error("Error: SetBarData() expects a dict that contains 'data' and 'order' keys");
            return;
        }
        if (Dash.Validate.Object(this.bar_data) && JSON.stringify(this.bar_data) === JSON.stringify(data)) {
            return;
        }
        this.bar_data = data;
        this.update_bar_data(data);
    };
    this.setup_styles = function (css_only=false) {
        this.html.css({
            "flex": 1
        });
        if (this.sub_style === "bar") {
            this.setup_bar_style(css_only);
        }
    };
    this.setup_bar_style = function (css_only=false) {
        this.setup_bar_gui();
        if (css_only) {
            return;
        }
        // Only draw the default placeholder view if it hasn't been set after the first second
        (function (self) {
            setTimeout(
                function () {
                    if (!Dash.Validate.Object(self.bar_data)) {
                        self.update_bar_data({"-": 1, "--": 2, "---": 3});
                    }
                },
                1000
            );
        })(this);
    };
    this.setup_bar_gui = function () {
        if (!this.canvas) {
            var config = this.get_bar_config();
            var canvas = document.createElement("canvas");
            var script = document.createElement("script");
            var canvas_container = document.createElement("div");
            var canvas_id = "bar_canvas_" + Dash.Math.RandomNumber();
            canvas.id = canvas_id;
            script.type = "text/javascript";
            script.text = "window." + canvas_id + " = new Chart(document.getElementById('" + canvas_id + "').getContext('2d')," + JSON.stringify(config) + ");";
            canvas_container.appendChild(canvas);
            this.canvas = {"container": canvas_container, "script": script, "id": canvas_id};
        }
        var prev_mod_is_flex = this.modules.Last()["style"] === "flex";
        this.canvas["container"].style.height = this.dashboard.get_text_vsize(0.75) + "vh";  // TEMP
        this.canvas["container"].style.marginBottom = this.dashboard.get_vmargin() + "vh";  // TEMP
        this.canvas["container"].style.marginTop = this.dashboard.get_vmargin(2.2) + "vh";  // TEMP
        this.canvas["container"].style.marginLeft = this.dashboard.get_vmargin(prev_mod_is_flex ? 0.9 : 0.3) + "vw";  // TEMP
        this.canvas["container"].style.marginRight = this.dashboard.get_vmargin(prev_mod_is_flex ? 1 : 1.25) + "vw";  // TEMP
        this.canvas["container"].style.overflow = "hidden";
        this.canvas["container"].style.opacity = "0";
        this.canvas["container"].style.flex = "1";
    };
    this.update_bar_data = function (data) {
        if (!this.canvas) {
            return;
        }
        var bar_gui = this.canvas["gui"] || window[this.canvas["id"]];
        // Try again if gui hasn't loaded yet (should only happen when initializing)
        if (!bar_gui.data) {
            (function (self, data) {
                setTimeout(
                    function () {
                        self.SetBarData(data);
                    },
                    250
                );
            })(this, data);
            return;
        }
        if (!this.canvas["gui"]) {
            this.canvas["gui"] = bar_gui;
        }
        if (this.canvas["container"].style.opacity !== "1") {
            this.canvas["container"].animate({"opacity": 1}, 1000);
            this.canvas["container"].style.opacity = "1";
        }
        [bar_gui.data.labels, bar_gui.data.datasets[0].data] = this.get_bar_data_sets(data);
        bar_gui.update();
    };
    this.get_bar_data_sets = function (data) {
        if (!Dash.Validate.Object(data)) {
            data = this.bar_data;
        }
        var labels = data["order"];
        var values = [];
        for (var i in data["order"]) {
            var key = data["order"][i];
            var value = parseInt(data["data"][key]);
            if (isNaN(value)) {
                console.error("Error: Bar data object values must be numbers");
                return [["ERROR", "SEE", "CONSOLE"], [1, 2, 3]];
            }
            values.push(value);
        }
        return [labels, values];
    };
    // Config Documentation: https://www.chartjs.org/docs/latest/charts/bar.html
    this.get_bar_config = function () {
        var [labels, values] = this.get_bar_data_sets();
        return {
            "type": "bar",
            "data": {
                "labels": labels,
                "datasets": [{
                    "label": "My First Dataset",
                    "data": values,
                    "backgroundColor": this.primary_color,
                    "barPercentage": 1.15
                }]
            },
            "options": {
                "responsive": true,
                "maintainAspectRatio": false,
                "scales": {
                    "y": {
                        "beginAtZero": true,
                        "grid": {
                            "color": this.secondary_color,
                            "borderColor": this.secondary_color,
                            "tickLength": 4
                        },
                        "ticks": {
                            "color": this.secondary_color,
                            "padding": 4,
                            "font": {
                                "family": this.bold_font
                            }
                        }
                    },
                    "x": {
                        "grid": {
                            "display": false
                        },
                        "ticks": {
                            "color": this.secondary_color,
                            "padding": -5,
                            "font": {
                                "family": this.bold_font,
                                "size": 16
                            }
                        }
                    },
                },
                "plugins": {
                    "legend": {
                        "display": false
                    },
                    "tooltip": {
                        "enabled": false
                    },
                    "title": {
                        "display": false
                    }
                }
            }
        };
    };
}

/**@member DashLayoutDashboardModule*/
function DashLayoutDashboardModuleRect () {
    this.styles = ["list"];
    this.list_rows = [];
    this.list_data = [];
    // Expects list of dicts with a single key/value pair (value should be a string), where
    // the key displays on the left side of the list, and value displays on the right side
    this.SetListData = function (data_list) {
        if (this.sub_style !== "list") {
            console.error("Error: SetListData() only applies to Rect-List Modules");
            return;
        }
        if (!Array.isArray(data_list)) {
            console.error("Error: SetListData() requires a list of dicts to be passed in");
            return;
        }
        if (Dash.Validate.Object(this.list_data) && JSON.stringify(this.list_data) === JSON.stringify(data_list)) {
            return;
        }
        this.list_data = data_list;
        this.redraw_list_rows();
    };
    this.setup_styles = function () {
        this.html.css({
            "aspect-ratio": this.rect_aspect_ratio
        });
        if (this.sub_style === "list") {
            this.setup_list_style();
        }
    };
    this.setup_list_style = function () {
        // Only draw the default placeholder view if it hasn't been set after the first second
        (function (self) {
            setTimeout(
                function () {
                    if (self.list_rows.length < 1) {
                        self.redraw_list_rows();
                    }
                },
                1000
            );
        })(this);
    };
    this.get_list_rows = function () {
        this.list_rows = [];
        if (this.list_data.length < 1) {
            this.list_data = [
                {"-": "--"},
                {"--": "--"},
                {"---": "--"},
            ];
        }
        for (var i in this.list_data) {
            if (this.list_rows.length >= 3) {
                console.warn("Warning: Rect List Module will only display 3 key/value pairs from list data");
                break;
            }
            var data = this.list_data[i];
            if (!Dash.Validate.Object(data)) {
                console.error("Error: Rect List Module data expects a list of dicts");
                return;
            }
            var key = Object.keys(data)[0];
            this.list_rows.push(this.get_list_row(key, data[key]));
        }
    };
    this.redraw_list_rows = function () {
        this.get_list_rows();
        this.html.empty();
        this.add_header();
        for (var i in this.list_rows) {
            this.html.append(this.list_rows[i]);
            this.list_rows[i].stop().animate({"opacity": 1}, 1000);
        }
    };
    this.get_list_row = function (key, value) {
        var list_row = $("<div></div>");
        var content = $("<div></div>");
        var key_text = $("<div>" + key + "</div>");
        var value_text = $("<div>" + value + "</div>");
        list_row.css({
            "width": "98%",
            "margin-top": "3%",
            "margin-bottom": "3%",
            "opacity": 0,  // For animation
            "height": this.dashboard.get_text_vsize(0.18) + "vh"  // TEMP
        });
        content.css({
            "display": "flex",
            "height": this.dashboard.get_text_vsize(0.18) + "vh"  // TEMP
        });
        key_text.css({
            ...this.text_css,
            "color": this.primary_color,
            "font-size": this.dashboard.get_text_vsize(0.1) + "vh",  // TEMP
            "height": this.dashboard.get_text_vsize(0.18) + "vh",  // TEMP
            "width": this.dashboard.get_text_vsize(1.13) + "vh",  // TEMP
            "line-height": this.dashboard.get_text_vsize(0.18) + "vh"  // TEMP
        });
        value_text.css({
            ...this.text_css,
            "color": this.primary_color,
            "text-align": "right",
            "font-size": this.dashboard.get_text_vsize(0.15) + "vh",  // TEMP
            "height": this.dashboard.get_text_vsize(0.18) + "vh",  // TEMP
            "width": this.dashboard.get_text_vsize(0.26) + "vh",  // TEMP
            "line-height": this.dashboard.get_text_vsize(0.18) + "vh"  // TEMP
        });
        content.append(this.get_dot_icon().html);
        content.append(key_text);
        content.append(Dash.Gui.GetFlexSpacer());
        content.append(value_text);
        list_row.append(content);
        list_row.append(this.get_divider_line());
        return list_row;
    };
    this.get_dot_icon = function () {
        var dot_icon = new Dash.Gui.Icon(
            this.color,
            "circle_dot",
            Dash.Size.ButtonHeight
        );
        dot_icon.icon_html.css({
            "overflow": "hidden",
            "text-overflow": "ellipsis",
            "white-space": "nowrap",
            "color": this.primary_color,
            "font-size": this.dashboard.get_text_vsize(0.8) + "vh",  // TEMP
            "height": this.dashboard.get_text_vsize(0.18) + "vh",  // TEMP
            "line-height": this.dashboard.get_text_vsize(0.18) + "vh"  // TEMP
        });
        return dot_icon;
    };
    this.get_divider_line = function () {
        var line = $("<div></div>");
        line.css({
            "background": this.secondary_color,
            "height": this.dashboard.get_text_vsize(0.06) + "vh"  // TEMP
        });
        return line;
    };
}

/**@member DashLayoutDashboardModule*/
function DashLayoutDashboardModuleRect () {
    this.styles = ["list"];
    this.list_rows = [];
    this.list_data = [];
    // Expects list of dicts with a single key/value pair (value should be a string), where
    // the key displays on the left side of the list, and value displays on the right side
    this.SetListData = function (data_list) {
        if (this.sub_style !== "list") {
            console.error("Error: SetListData() only applies to Rect-List Modules");
            return;
        }
        if (!Array.isArray(data_list)) {
            console.error("Error: SetListData() requires a list of dicts to be passed in");
            return;
        }
        if (Dash.Validate.Object(this.list_data) && JSON.stringify(this.list_data) === JSON.stringify(data_list)) {
            return;
        }
        this.list_data = data_list;
        this.redraw_list_rows();
    };
    this.setup_styles = function () {
        this.html.css({
            "aspect-ratio": this.rect_aspect_ratio
        });
        if (this.sub_style === "list") {
            this.setup_list_style();
        }
    };
    this.setup_list_style = function () {
        // Only draw the default placeholder view if it hasn't been set after the first second
        (function (self) {
            setTimeout(
                function () {
                    if (self.list_rows.length < 1) {
                        self.redraw_list_rows();
                    }
                },
                1000
            );
        })(this);
    };
    this.get_list_rows = function () {
        this.list_rows = [];
        if (this.list_data.length < 1) {
            this.list_data = [
                {"-": "--"},
                {"--": "--"},
                {"---": "--"},
            ];
        }
        for (var i in this.list_data) {
            if (this.list_rows.length >= 3) {
                console.warn("Warning: Rect List Module will only display 3 key/value pairs from list data");
                break;
            }
            var data = this.list_data[i];
            if (!Dash.Validate.Object(data)) {
                console.error("Error: Rect List Module data expects a list of dicts");
                return;
            }
            var key = Object.keys(data)[0];
            this.list_rows.push(this.get_list_row(key, data[key]));
        }
    };
    this.redraw_list_rows = function () {
        this.get_list_rows();
        this.html.empty();
        this.add_header();
        for (var i in this.list_rows) {
            this.html.append(this.list_rows[i]);
            this.list_rows[i].stop().animate({"opacity": 1}, 1000);
        }
    };
    this.get_list_row = function (key, value) {
        var list_row = $("<div></div>");
        var content = $("<div></div>");
        var key_text = $("<div>" + key + "</div>");
        var value_text = $("<div>" + value + "</div>");
        list_row.css({
            "width": "98%",
            "margin-top": "3%",
            "margin-bottom": "3%",
            "opacity": 0,  // For animation
            "height": this.dashboard.get_text_vsize(0.18) + "vh"  // TEMP
        });
        content.css({
            "display": "flex",
            "height": this.dashboard.get_text_vsize(0.18) + "vh"  // TEMP
        });
        key_text.css({
            ...this.text_css,
            "color": this.primary_color,
            "font-size": this.dashboard.get_text_vsize(0.1) + "vh",  // TEMP
            "height": this.dashboard.get_text_vsize(0.18) + "vh",  // TEMP
            "width": this.dashboard.get_text_vsize(1.13) + "vh",  // TEMP
            "line-height": this.dashboard.get_text_vsize(0.18) + "vh"  // TEMP
        });
        value_text.css({
            ...this.text_css,
            "color": this.primary_color,
            "text-align": "right",
            "font-size": this.dashboard.get_text_vsize(0.15) + "vh",  // TEMP
            "height": this.dashboard.get_text_vsize(0.18) + "vh",  // TEMP
            "width": this.dashboard.get_text_vsize(0.26) + "vh",  // TEMP
            "line-height": this.dashboard.get_text_vsize(0.18) + "vh"  // TEMP
        });
        content.append(this.get_dot_icon().html);
        content.append(key_text);
        content.append(Dash.Gui.GetFlexSpacer());
        content.append(value_text);
        list_row.append(content);
        list_row.append(this.get_divider_line());
        return list_row;
    };
    this.get_dot_icon = function () {
        var dot_icon = new Dash.Gui.Icon(
            this.color,
            "circle_dot",
            Dash.Size.ButtonHeight
        );
        dot_icon.icon_html.css({
            "overflow": "hidden",
            "text-overflow": "ellipsis",
            "white-space": "nowrap",
            "color": this.primary_color,
            "font-size": this.dashboard.get_text_vsize(0.8) + "vh",  // TEMP
            "height": this.dashboard.get_text_vsize(0.18) + "vh",  // TEMP
            "line-height": this.dashboard.get_text_vsize(0.18) + "vh"  // TEMP
        });
        return dot_icon;
    };
    this.get_divider_line = function () {
        var line = $("<div></div>");
        line.css({
            "background": this.secondary_color,
            "height": this.dashboard.get_text_vsize(0.06) + "vh"  // TEMP
        });
        return line;
    };
}

/**@member DashLayoutDashboardModule*/
function DashLayoutDashboardModuleSquare () {
    this.styles = ["tag", "radial"];
    this.label_text = "";
    this.label_header_text = "";
    this.label = $("<div></div>");
    this.label_header = $("<div></div>");
    this.radial_fill_percent = 0;
    // Works for both "tag" and "radial" sub-styles
    this.SetLabelHeaderText = function (text) {
        text = text.toString().toUpperCase();
        if (text === this.label_header_text) {
            return;
        }
        if (!this.label_header_text) {
            this.label_header_text = text;
            this.label_header.text(this.label_header_text);
            return;  // No need to animate
        }
        this.label_header_text = text;
        (function (self) {
            self.label_header.fadeOut(
                500,
                function () {
                    self.label_header.text(self.label_header_text);
                    self.label_header.fadeIn(500);
                }
            );
        })(this);
    };
    // Works for both "tag" and "radial" sub-styles
    this.SetLabelText = function (text) {
        text = text.toString().toUpperCase();
        if (text === this.label_text) {
            return;
        }
        if (!this.label_text) {
            this.label_text = text;
            this.label.text(this.label_text);
            return;  // No need to animate
        }
        this.label_text = text;
        if (this.label_text.length > 4) {
            console.warn("Warning: Square Module SetLabelText is intended to be four characters or less - any more may introduce cut-off.");
        }
        (function (self) {
            self.label.fadeOut(
                500,
                function () {
                    if (self.sub_style === "tag" && self.label_text.length <= 3) {
                        self.label.css({
                            "font-size": self.dashboard.get_text_vsize(0.36) + "vh",  // TEMP
                            "height": self.dashboard.get_text_vsize(0.36) + "vh",  // TEMP
                            "line-height": self.dashboard.get_text_vsize(0.4) + "vh"  // TEMP
                        });
                    }
                    self.label.text(self.label_text);
                    self.label.fadeIn(500);
                }
            );
        })(this);
    };
    this.SetRadialFillPercent = function (percent) {
        if (this.sub_style !== "radial") {
            console.error("Error: SetRadialFillPercent() only works for Square Radial Modules");
            return;
        }
        percent = parseInt(percent);
        if (isNaN(percent)) {
            console.error("Error: SetRadialFillPercent requires a number!");
        }
        if (percent > 100) {
            percent = 100;
        }
        if (percent < 0) {
            percent = 0;
        }
        this.radial_fill_percent = percent;
        this.SetLabelText(this.radial_fill_percent.toString() + "%");
        this.update_radial_fill_percent(percent);
    };
    this.setup_styles = function (css_only=false) {
        this.html.css({
            "aspect-ratio": this.square_aspect_ratio
        });
        if (this.sub_style === "tag") {
            this.setup_tag_style(css_only);
        }
        else if (this.sub_style === "radial") {
            this.setup_radial_style();
        }
        if (css_only) {
            return;
        }
        this.html.append(this.label_header);
        this.html.append(this.label);
    };
    this.setup_tag_style = function (css_only=false) {
        this.label_header.css({
            ...this.centered_text_css,
            "color": this.primary_color,
            "width": "95%",
            "margin-top": "18%",
            "font-size": this.dashboard.get_text_vsize(0.1) + "vh",  // TEMP
            "height": this.dashboard.get_text_vsize(0.1) + "vh",  // TEMP
        });
        this.label.css({
            ...this.centered_text_css,
            "color": this.primary_color,
            "width": "95%",
            "font-size": this.dashboard.get_text_vsize(0.3) + "vh",  // TEMP
            "height": this.dashboard.get_text_vsize(0.3) + "vh",  // TEMP
            "line-height": this.dashboard.get_text_vsize(0.33) + "vh",  // TEMP
        });
        if (css_only) {
            return;
        }
        // Only draw the default placeholder view if it hasn't been set after the first second
        (function (self) {
            setTimeout(
                function () {
                    if (self.label_text.length < 1) {
                        self.SetLabelText("--");
                    }
                },
                1000
            );
        })(this);
    };
    this.setup_radial_style = function () {
        this.label_header.css({
            ...this.centered_text_css,
            "color": this.primary_color,
            "width": "50%",
            "margin-top": "32%",
            "font-size": this.dashboard.get_text_vsize(0.06) + "vh",  // TEMP
            "height": this.dashboard.get_text_vsize(0.06) + "vh",  // TEMP
        });
        this.label.css({
            ...this.centered_text_css,
            "color": this.primary_color,
            "width": "50%",
            "font-size": this.dashboard.get_text_vsize(0.18) + "vh",  // TEMP
            "height": this.dashboard.get_text_vsize(0.18) + "vh",  // TEMP
            "line-height": this.dashboard.get_text_vsize(0.21) + "vh",  // TEMP
        });
        this.setup_radial_gui();
    };
    this.setup_radial_gui = function () {
        if (!this.canvas) {
            var config = this.get_radial_config();
            var canvas = document.createElement("canvas");
            var script = document.createElement("script");
            var canvas_container = document.createElement("div");
            var canvas_id = "radial_canvas_" + Dash.Math.RandomNumber();
            canvas.id = canvas_id;
            script.type = "text/javascript";
            script.text = "window." + canvas_id + " = new Chart(document.getElementById('" + canvas_id + "').getContext('2d')," + JSON.stringify(config) + ");";
            canvas_container.appendChild(canvas);
            this.canvas = {"container": canvas_container, "script": script, "id": canvas_id};
        }
        this.canvas["container"].style.overflow = "hidden";
        this.canvas["container"].style.width = this.dashboard.get_text_vsize(0.7) + "vh";  // TEMP
        this.canvas["container"].style.height = this.dashboard.get_text_vsize(0.7) + "vh";  // TEMP
        this.canvas["container"].style.marginBottom = this.dashboard.get_vmargin() + "vh";  // TEMP
        this.canvas["container"].style.marginTop = this.dashboard.get_vmargin(3) + "vh";// TEMP
        this.canvas["container"].style.marginLeft = this.dashboard.get_vmargin(1.25) + "vh";// TEMP
        this.canvas["container"].style.marginRight = this.dashboard.get_vmargin(2.45) + "vh";// TEMP
    };
    this.get_radial_fill_data = function () {
        return [this.radial_fill_percent, 100 - this.radial_fill_percent];
    };
    this.update_radial_fill_percent = function (percent) {
        if (!this.canvas) {
            return;
        }
        var radial_gui = this.canvas["gui"] || window[this.canvas["id"]];
        // Try again if gui hasn't loaded yet (should only happen when initializing)
        if (!radial_gui.data) {
            (function (self, percent) {
                setTimeout(
                    function () {
                        self.SetRadialFillPercent(percent);
                    },
                    250
                );
            })(this, percent);
            return;
        }
        if (!this.canvas["gui"]) {
            this.canvas["gui"] = radial_gui;
        }
        radial_gui.data.datasets[0].data = this.get_radial_fill_data();
        radial_gui.update();
    };
    // Config Documentation: https://www.chartjs.org/docs/latest/charts/doughnut.html
    this.get_radial_config = function () {
        return {
            "type": "doughnut",
            "data": {
                "datasets": [{
                    "data": this.get_radial_fill_data(),
                    "backgroundColor": [
                        this.primary_color,  // Filled
                        this.secondary_color  // Unfilled
                    ],
                    "borderWidth": [
                        5,  // Filled
                        0,  // Unfilled
                    ],
                    "borderColor": [
                        this.primary_color  // Filled
                    ]
                }]
            },
            "options": {
                "cutout": "80%",
                "responsive": true,
                "aspectRatio": 1,
                "maintainAspectRatio": true,
                "plugins": {
                    "legend": {
                        "display": false
                    },
                    "tooltip": {
                        "enabled": false
                    },
                    "title": {
                        "display": false
                    }
                }
            }
        };
    };
}

function DashLayoutList (binder, selected_callback, column_config, color=null, get_data_for_key=null, row_height=null) {
    this.binder = binder;
    this.selected_callback = selected_callback && binder ? selected_callback.bind(this.binder) : null;
    this.column_config = column_config;
    this.color = color || (binder && binder.color ? binder.color : Dash.Color.Light);
    this.row_height = row_height || Dash.Size.RowHeight;
    // This is useful if there is more than one list in the same script, which each need their own GetDataForKey function
    this.get_data_for_key = get_data_for_key ? get_data_for_key.bind(binder) : binder.GetDataForKey ? binder.GetDataForKey.bind(binder) : null;
    if (!(column_config instanceof DashLayoutListColumnConfig)) {
        console.error("Error: Required second parameter 'column_config' is not of the correct class, DashLayoutListColumnConfig");
        return;
    }
    if (!this.get_data_for_key) {
        console.error("Error: If optional 'get_data_for_key' param is not provided, calling class must contain a function named GetDataForKey()");
        return;
    }
    this.rows = [];
    this.parent_row= null;  // Intended for cases where this is a sublist
    this.header_row = null;
    this.footer_row = null;
    this.header_row_css = null;
    this.footer_row_css = null;
    this.html = $("<div></div>");
    this.last_selection_id = null;
    this.highlight_active_row = false;
    this.sublist_row_tag = "_sublist_row_";
    this.header_row_tag = "_top_header_row";
    this.footer_row_tag = "_bottom_footer_row";
    this.allow_row_divider_color_change_on_hover = true;
    this.recall_id = "dash_list_" + (this.binder.constructor + "").replace(/[^A-Za-z]/g, "");
    this.recall_id = this.recall_id.slice(0, 100).trim().toLowerCase();
    this.setup_styles = function () {
        // Placeholder
    };
    this.AddRow = function (row_id) {
        var row = new DashLayoutListRow(this, row_id, this.row_height);
        this.rows.push(row);
        this.html.append(row.html);
        return row;
    };
    this.AddHeaderRow = function (html_css, column_box_css) {
        if (this.header_row) {
            console.error("Error: This list already has a header row, can't add another.");
            return;
        }
        this.header_row_css = {
            "html": html_css,
            "column_box": column_box_css
        };
        this.add_header_row();
        return this.header_row;
    };
    // This has only been tested with Dash.Layout.RevolvingList, but it
    // should work as expected in this basic list as well, just unconfirmed
    this.AddFooterRow = function (html_css, column_box_css) {
        if (this.footer_row) {
            console.error("Error: This list already has a footer row, can't add another.");
            return;
        }
        this.footer_row_css = {
            "html": html_css,
            "column_box": column_box_css
        };
        this.add_footer_row();
        return this.footer_row;
    };
    this.AddSubList = function (sublist_name, highlight_color=null, init_list=false) {
        var row = this.AddRow(this.sublist_row_tag + sublist_name);
        if (highlight_color) {
            row.highlight.css({
                "background": highlight_color
            });
        }
        // Always update it by default - can still update later in the code that calls this
        row.Update();
        if (init_list) {
            row.SetCachedPreview(this.get_sublist());
        }
        return row;
    };
    this.RemoveRow = function (row_id, could_be_in_sublist=false) {
        var row;
        var list;
        var nested_in_sublist = false;
        if (could_be_in_sublist) {
            [row, list] = this.get_row_nested_in_sublist(row_id, true);
            if (row) {
                nested_in_sublist = true;
            }
        }
        if (!row) {
            row = this.GetRow(row_id);
            if (!row) {
                return;
            }
            list = this;
        }
        row.Collapse();
        row.Hide();
        row.html.remove();
        if (nested_in_sublist && list.parent_row) {
            for (var i in list.parent_row.sublist_queue) {
                if (list.parent_row.sublist_queue[i]["row_id"] === row_id) {
                    list.parent_row.sublist_queue.Pop(i);
                    break;
                }
            }
            row.SetExpandedSubListParentHeight(-this.row_height);
        }
        var index = list.rows.indexOf(row);
        if (index === null || index === undefined || index < 0) {
            return;
        }
        list.rows.Pop(index);
    };
    this.DisableColumn = function (type, type_index) {
        if (!this.rows) {
            return;
        }
        for (var i in this.rows) {
            this.rows[i].ChangeColumnEnabled(type, type_index, false);
        }
    };
    this.EnableColumn = function (type, type_index) {
        if (!this.rows) {
            return;
        }
        for (var i in this.rows) {
            this.rows[i].ChangeColumnEnabled(type, type_index, true);
        }
    };
    this.Update = function () {
        for (var row of this.rows) {
            row.Update();
        }
        if (this.header_row) {
            this.header_row.Update();
        }
        if (this.footer_row) {
            this.footer_row.Update();
        }
    };
    this.Clear = function () {
        this.html.empty();
        // Always keep the header row, even when clearing the list
        if (this.header_row) {
            this.add_header_row();
        }
        // Always keep the footer row, even when clearing the list
        if (this.footer_row) {
            this.add_footer_row();
        }
        // This step must happen after re-adding the header/footer rows above, since we don't track those rows
        this.rows = [];
    };
    this.SetColumnConfig = function (column_config, clear=true) {
        if (!(column_config instanceof DashLayoutListColumnConfig)) {
            console.error("Error: New 'column_config' is not of the correct class, DashLayoutListColumnConfig!");
            return;
        }
        this.column_config = column_config;
        if (clear) {
            this.Clear();
        }
    };
    this.SetSelection = function (row) {
        var is_selected = !(this.last_selection_id && row.id.toString() === this.last_selection_id.toString());
        if (row.is_sublist) {
            this.expand_sublist(row, is_selected);
        }
        else {
            if (this.selected_callback) {
                this.selected_callback(row.id, is_selected, row);
            }
        }
        this.update_rows_highlighting(row, is_selected);
        this.last_selection_id = is_selected ? row.id : null;
    };
    this.EnableActiveRowHighlighting = function () {
        this.highlight_active_row = true;
    };
    this.GetRow = function (row_id, is_sublist=false, nested_in_sublist=false) {
        if (!this.rows) {
            return;
        }
        if (nested_in_sublist) {
            return this.get_row_nested_in_sublist(row_id);
        }
        for (var i in this.rows) {
            var row = this.rows[i];
            if (row.id === (is_sublist ? (this.sublist_row_tag + row_id) : row_id)) {
                return row;
            }
        }
    };
    // This is handy, so you can re-expand previously expanded rows after a list clear or list refresh
    this.GetExpandedRowIDs = function () {
        if (!this.rows) {
            return;
        }
        var expanded_rows_ids = [];
        for (var i in this.rows) {
            var row = this.rows[i];
            if (row.IsExpanded()) {
                expanded_rows_ids.push(row.ID());
            }
        }
        return expanded_rows_ids;
    };
    // Intended for cases where this is a sublist
    this.GetParentRow = function () {
        return this.parent_row;
    };
    // Intended for cases where this is a sublist
    this.SetParentRow = function (row) {
        this.parent_row = row;
    };
    // Intended to be used when custom CSS is used on divider elements
    this.DisableDividerColorChangeOnHover = function () {
        this.allow_row_divider_color_change_on_hover = false;
    };
    this.get_row_nested_in_sublist = function (row_id, return_sublist=false, _rows=null) {
        if (_rows === null) {
            _rows = this.rows;
        }
        for (var top_row of _rows) {
            if (!top_row.is_sublist) {
                continue;
            }
            var sublist = top_row.GetCachedPreview();
            if (!sublist) {
                continue;
            }
            for (var sub_row of sublist.rows) {
                if (sub_row.id === row_id) {
                    return (return_sublist ? [sub_row, sublist] : sub_row);
                }
            }

            if (return_sublist) {
                var [row, list] = this.get_row_nested_in_sublist(row_id, return_sublist, sublist.rows);
            }
            else {
                row = this.get_row_nested_in_sublist(row_id, return_sublist, sublist.rows);
            }
            if (row) {
                return (return_sublist ? [row, list] : row);
            }
        }
        return (return_sublist ? [null, null] : null);
    };
    this.update_rows_highlighting = function (row, is_selected) {
        if (!this.highlight_active_row) {
            return;
        }
        this.update_row_highlighting(row, is_selected);
        if (is_selected) {
            for (var other_row of this.rows) {
                if (other_row === row) {
                    continue;
                }
                this.update_row_highlighting(other_row, false);
            }
        }
    };
    this.update_row_highlighting = function (row, is_selected) {
        try {
            var row_bg = row.html.css("background-color");
            var highlight_bg = row.highlight ? row.highlight.css("background-color") : null;
            if (is_selected) {
                if ((!row_bg || row_bg === "rgba(0, 0, 0, 0)") && highlight_bg) {
                    row.html.css({
                        "background": row.highlight.css("background-color")
                    });
                }
            }
            else {
                if (highlight_bg === row_bg) {
                    row.html.css({
                        "background": "none"
                    });
                }
            }
        }
        catch {
            // Pass
        }
    };
    this.add_header_row = function () {
        this.header_row = new DashLayoutListRow(this, this.header_row_tag);
        if (this.header_row_css) {
            if (this.header_row_css["html"]) {
                this.header_row.html.css(this.header_row_css["html"]);
            }
            if (this.header_row_css["column_box"]) {
                this.header_row.column_box.css(this.header_row_css["column_box"]);
            }
        }
        this.html.prepend(this.header_row.html);
        // Always update it by default - can still update later in the code that calls this
        this.header_row.Update();
    };
    this.add_footer_row = function () {
        this.footer_row = new DashLayoutListRow(this, this.footer_row_tag);
        if (this.footer_row_css) {
            if (this.footer_row_css["html"]) {
                this.footer_row.html.css(this.footer_row_css["html"]);
            }
            if (this.footer_row_css["column_box"]) {
                this.footer_row.column_box.css(this.footer_row_css["column_box"]);
            }
        }
        this.html.append(this.footer_row.html);
        // Always update it by default - can still update later in the code that calls this
        this.footer_row.Update();
    };
    this.get_sublist = function () {
        var sublist = new Dash.Layout.List(this.binder, this.selected_callback, this.column_config);
        // Any changes to the list like this one should be re-applied to the sublist here
        if (!this.allow_row_divider_color_change_on_hover) {
            sublist.DisableDividerColorChangeOnHover();
        }
        return sublist;
    };
    this.expand_sublist = function (row, is_selected) {
        if (is_selected) {
            row.Collapse();
        }
        var refresh_connections = true;
        // Since lists can get big, we only want to draw this once, but we'll reset it to null on Update to force a redraw
        // (we may also want to follow this pattern for all row previews in the future, but it'd be harder to manage)
        var preview = row.GetCachedPreview();
        if (!(preview instanceof DashLayoutList)) {
            preview = row.SetCachedPreview(this.get_sublist());
            refresh_connections = false;
        }
        preview.SetParentRow(row);
        var queue = row.GetSublistQueue();
        if (Dash.Validate.Object(queue)) {
            queue.forEach(
                function (entry) {
                    var added_row = preview.GetRow(entry["row_id"]);
                    if (!added_row) {
                        added_row = preview.AddRow(entry["row_id"]);
                    }
                    if (entry["css"]) {
                        added_row.html.css(entry["css"]);
                    }
                    added_row.Update();
                }
            );
        }
        if (preview.rows.length > 0) {
            if (refresh_connections) {
                // When re-using a cached preview, need to refresh the connections
                preview.rows.forEach(
                    function (sublist_row) {
                        sublist_row.RefreshConnections();
                    }
                );
            }
            row.Expand(preview.html, preview.rows);
        }
        else {
            preview = $("<div></div>");
            preview.css({
                "padding-left": Dash.Size.Padding,
                "padding-top": Dash.Size.Padding * 0.5,
                "height": this.row_height,
                "color": this.color.Text,
                "font-family": "sans_serif_italic"
            });
            preview.text("No content (empty folder)");
            row.Expand(preview);
        }
    };
    this.setup_styles();
}

function DashLayoutListRow (list, row_id, height=null) {
    this.list = list;
    this.id = row_id;
    this.height = height || Dash.Size.RowHeight;
    this.columns = {};
    this.is_shown = true;
    this.tmp_css_cache = [];
    this.sublist_queue = [];
    this.is_expanded = false;
    this.cached_preview = null;  // Intended for sublists only
    this.is_highlighted = false;
    this.fully_disabled = false;
    this.color = this.list.color;
    this.expanded_highlight = null;
    this.html = $("<div></div>");
    this.highlight = $("<div></div>");
    this.column_box = $("<div></div>");
    this.expanded_content = $("<div></div>");
    this.clear_sublist_preview_on_update = true;
    this.is_header = this.list.hasOwnProperty("header_row_tag") ? this.id.toString().startsWith(this.list.header_row_tag) : false;
    this.is_footer = this.list.hasOwnProperty("footer_row_tag") ? this.id.toString().startsWith(this.list.footer_row_tag) : false;
    this.is_sublist = this.list.hasOwnProperty("sublist_row_tag") ? this.id.toString().startsWith(this.list.sublist_row_tag) : false;
    this.anim_delay = {
        "highlight_show": 100,
        "highlight_hide": 250,
        "expanded_content": 180,
        "expanded_highlight": 270
    };
    DashLayoutListRowElements.call(this);
    DashLayoutListRowInterface.call(this);
    this.setup_styles = function () {
        if (this.is_header || this.is_footer) {
            this.column_box.css({
                "background": this.color.AccentGood,
                "left": 0,
                "right": 0,
                "padding-left": Dash.Size.Padding,
                "padding-right": Dash.Size.Padding
            });
        }
        else {
            this.html.append(this.highlight);
            this.html.append(this.expanded_content);
            this.expanded_content.css({
                "margin-left": Dash.Size.Padding * (this.is_sublist ? 1 : -1),
                "margin-right": -Dash.Size.Padding,
                "overflow-y": "hidden",
                "height": 0
            });
            this.highlight.css({
                "position": "absolute",
                "left": 0,
                "top": 0,
                "right": 0,
                "height": this.height,
                "background": Dash.Color.GetTransparent(Dash.IsMobile ? Dash.Color.Mobile.AccentSecondary : this.color.AccentGood, 0.5),
                "pointer-events": "none",
                "opacity": 0
            });
            this.column_box.css({
                "left": Dash.Size.Padding,
                "right": Dash.Size.Padding
            });
        }
        this.html.append(this.column_box);
        this.column_box.css({
            "position": "absolute",
            "top": 0,
            "height": this.height,
            "display": "flex"
        });
        var css = {
            "color": this.color.Text,
            "border-bottom": "1px solid rgb(200, 200, 200)",
            "padding-left": Dash.Size.Padding,
            "padding-right": Dash.Size.Padding,
            "min-height": this.height,
            "cursor": "pointer"  // This is changed in setup_columns(), if relevant
        };
        if (this.is_footer) {
            css["position"] = "absolute";
            css["left"] = 0;
            css["right"] = 0;
            css["bottom"] = 0;
        }
        this.html.css(css);
        this.setup_columns();
        this.setup_connections();
    };
    this.store_css_on_expansion = function (row) {
        var border_bottom = row.html.css("border-bottom");
        if (!border_bottom || border_bottom === "none") {
            return;
        }
        row.html.css({
            "border-bottom": "none"
        });
        this.tmp_css_cache.push({
            "row": row,
            "css": {"border-bottom": border_bottom}
        });
    };
    this.create_expand_highlight = function (highlight_color=null) {
        this.expanded_highlight = Dash.Gui.GetHTMLAbsContext();
        this.expanded_highlight.css({
            "background": highlight_color || (this.is_sublist ? "none" : this.color.BackgroundRaised),
            "pointer-events": "none",
            "opacity": 0,
            "top": -1,
            "bottom": -1,
            "box-shadow": this.is_sublist ? "none" : "0px 0px 10px 1px rgba(0, 0, 0, 0.15)",
        });
        if (this.is_sublist) {
            this.expanded_highlight.css({
                "margin-left": Dash.Size.Padding * 2
            });
        }
        this.html.prepend(this.expanded_highlight);
    };
    this.get_data_for_key = function (column_config_data, default_value=null, third_param=null) {
        if (this.is_header) {
            return column_config_data["display_name"] || column_config_data["data_key"].Title();
        }
        if (third_param !== null) {
            return this.list.get_data_for_key(this.id, column_config_data["data_key"], third_param) || default_value;
        }
        return this.list.get_data_for_key(this.id, column_config_data["data_key"]) || default_value;
    };
    this.setup_connections = function () {
        (function (self) {
            self.html.on("mouseenter", function () {
                if (self.is_header || self.is_footer) {
                    return;
                }
                self.highlight.stop().animate({"opacity": 1}, self.anim_delay["highlight_show"]);
                if (self.list.allow_row_divider_color_change_on_hover === false) {
                    return;
                }
                for (var divider of self.columns["dividers"]) {
                    divider["obj"].css({"background": self.color.Button.Background.Base});
                }
            });
            self.html.on("mouseleave", function () {
                if (self.is_expanded || self.is_header || self.is_footer) {
                    return;
                }
                self.highlight.stop().animate({"opacity": 0}, self.anim_delay["highlight_hide"]);
                if (self.list.allow_row_divider_color_change_on_hover === false) {
                    return;
                }
                for (var divider of self.columns["dividers"]) {
                    divider["obj"].css({"background": self.color.AccentGood});
                }
            });
            self.column_box.on("click", function (e) {
                if (e.target && e.target.className.includes(" fa-")) {
                    // Don't set selection if it was an icon button that was clicked
                    return;
                }
                if (self.is_header || self.is_footer) {
                    return;
                }
                self.list.SetSelection(self);
            });
        })(this);
    };
    this.setup_columns = function () {
        this.columns = {  // Make sure this gets reset if redrawn
            "default": [],
            "inputs": [],
            "combos": [],
            "spacers": [],
            "dividers": [],
            "copy_buttons": [],
            "icon_buttons": []
        };
        var default_columns_only = true;
        for (var i in this.list.column_config.columns) {
            var column_config_data = this.list.column_config.columns[i];
            if (column_config_data["type"] === "spacer") {
                this.add_spacer_column(column_config_data);
            }
            else if (column_config_data["type"] === "divider") {
                this.add_divider_column(column_config_data);
            }
            else if (column_config_data["type"] === "combo") {
                default_columns_only = false;
                this.add_combo_column(column_config_data);
            }
            else if (column_config_data["type"] === "input") {
                default_columns_only = false;
                this.add_input_column(column_config_data);
            }
            else if (column_config_data["type"] === "icon_button") {
                default_columns_only = false;
                this.add_icon_button_column(column_config_data);
            }
            else if (column_config_data["type"] === "copy_button") {
                default_columns_only = false;
                this.add_copy_button_column(column_config_data);
            }
            else {
                if (column_config_data["on_click_callback"]) {
                    default_columns_only = false;
                }
                this.add_default_column(column_config_data, i);
            }
        }
        if (!this.fully_disabled) {
            this.html.css({
                // This helps differentiate elements on more complex lists, rather than having a pointer for everything.
                // The change only pertains to the row itself, and then each element controls their own cursor behavior.
                "cursor": (
                    (this.is_header || this.is_footer) ? "auto" :
                    this.is_sublist ? "context-menu" :
                    default_columns_only ? "pointer" :
                    this.list.hasOwnProperty("selected_callback") && !this.list.selected_callback ? "default" :
                    this.list.hasOwnProperty("get_expand_preview") && !this.list.get_expand_preview ? (
                        this.list.non_expanding_click_cb ? "pointer" : "default"
                    ) : "cell"
                )
            });
        }
    };
    this.setup_styles();
}

function DashLayoutListColumnConfig () {
    this.columns = [];
    this.AddColumn = function (display_name, data_key, can_edit, width, options) {
        this.columns.push({
            "width": width,
            "data_key": data_key,
            "can_edit": typeof can_edit !== "boolean" ? true : can_edit,
            "display_name": display_name,
            "type": options && options["type"] ? options["type"] : "",
            "css": options && options["css"] ? options["css"] : null,
            "header_css": options && options["header_css"] ? options["header_css"] : null,
            "footer_css": options && options["footer_css"] ? options["footer_css"] : null,
            "options": options && options["options"] ? options["options"] : {},
            "on_click_callback": options && options["on_click_callback"] ? options["on_click_callback"] : null
        });
    };
    this.AddSpacer = function (header_only=false, footer_only=false) {
        if (this.columns.length && this.columns.Last()["type"] === "spacer") {
            return;
        }
        this.columns.push({
            "type": "spacer",
            "header_only": header_only,
            "footer_only": footer_only
        });
    };
    this.AddDivider = function (css=null, show_for_header=false, show_for_footer=false, header_css={}, footer_css={}) {
        this.columns.push({
            "type": "divider",
            "css": css,
            "header_css": header_css,
            "footer_css": footer_css,
            "show_for_header": show_for_header,
            "show_for_footer": show_for_footer
        });
    };
    // This has not yet been tested for support with header/footer rows
    this.AddLabel = function (text, css={}, header_css={}, footer_css={}, hover_text="") {
        this.AddColumn(
            text,
            "",
            false,
            null,
            {
                "type": "label",
                "css": css,
                "header_css": header_css,
                "footer_css": footer_css,
                "options": {
                    "hover_text": hover_text
                }
            }
        );
    };
    this.AddCombo = function (
        label_text, combo_options, binder, callback, data_key="", width_mult=null,
        css={}, header_css={}, is_user_list=false, multi_select=false, footer_css={}, hover_text=""
    ) {
        this.AddColumn(
            label_text,
            data_key,
            true,
            width_mult ? Dash.Size.ColumnWidth * width_mult : null,
            {
                "type": "combo",
                "options": {
                    "label_text": label_text,
                    "callback": callback,
                    "binder": binder,
                    "hover_text": hover_text,
                    "combo_options": combo_options,
                    "is_user_list": is_user_list,
                    "multi_select": multi_select
                },
                "css": css,
                "header_css": header_css,
                "footer_css": footer_css
            }
        );
    };
    this.AddIconButton = function (
        icon_name, binder, callback, hover_text="", size_mult=1, width_mult=0.25,
        css={}, header_css={}, footer_css={}, icon_color=null
    ) {
        css["flex"] = "none";
        header_css["flex"] = "none";
        footer_css["flex"] = "none";
        this.AddColumn(
            "",
            "",
            true,
            !width_mult ? null : Dash.Size.ColumnWidth * width_mult,
            {
                "type": "icon_button",
                "options": {
                    "icon_name": icon_name,
                    "callback": callback,
                    "binder": binder,
                    "color": binder.color || Dash.Color.Light,
                    "icon_color": icon_color,
                    "hover_text": hover_text,
                    "options": {
                        "size_mult": size_mult
                    }
                },
                "css": css,
                "header_css": header_css,
                "footer_css": footer_css
            }
        );
    };
    this.AddCopyButton = function (binder, getter_cb, hover_text="Copy", width_mult=0.25, css={}, header_css={}, size_mult=0.8, icon_name="copy", footer_css={}) {
        css["flex"] = "none";
        header_css["flex"] = "none";
        footer_css["flex"] = "none";
        this.AddColumn(
            "",
            "",
            true,
            !width_mult ? null : Dash.Size.ColumnWidth * width_mult,
            {
                "type": "copy_button",
                "options": {
                    "binder": binder,
                    "getter_cb": getter_cb,
                    "size_mult": size_mult,
                    "icon_name": icon_name,
                    "color": binder.color || Dash.Color.Light,
                    "hover_text": hover_text
                },
                "css": css,
                "header_css": header_css,
                "footer_css": footer_css
            }
        );
    };
    this.AddInput = function (
        label_text="", binder=null, callback=null, data_key="", width_mult=1, css={},
        header_css={}, placeholder_label="", default_value="", disable_autosave=false,
        can_edit=true, use_placeholder_label_for_header=true, footer_css={}
    ) {
        this.AddColumn(
            label_text,
            data_key,
            can_edit,
            !width_mult ? null : Dash.Size.ColumnWidth * width_mult,
            {
                "type": "input",
                "options": {
                    "placeholder_label": placeholder_label || label_text,
                    "use_placeholder_label_for_header": use_placeholder_label_for_header,
                    "callback" : callback,
                    "binder": binder,
                    "color": binder ? (binder.color || Dash.Color.Light) : Dash.Color.Light,
                    "default_value": default_value,
                    "disable_autosave": disable_autosave
                },
                "css": css,
                "header_css": header_css,
                "footer_css": footer_css
            }
        );
    };
    // Abstraction to simplify AddColumn when just using a flex text value
    this.AddFlexText = function (data_key, label_text="", min_width_mult=0.25, css={}, header_css={}, footer_css={}) {
        var min_width = Dash.Size.ColumnWidth * min_width_mult;
        css["flex-grow"] = 2;
        css["flex-shrink"] = 2;
        css["min-width"] = min_width;
        header_css["flex-grow"] = 2;
        header_css["flex-shrink"] = 2;
        header_css["min-width"] = min_width;
        footer_css["flex-grow"] = 2;
        footer_css["flex-shrink"] = 2;
        footer_css["min-width"] = min_width;
        this.AddColumn(
            label_text || data_key.Title(),
            data_key,
            false,
            null,
            {
                "css": css,
                "header_css": header_css,
                "footer_css": footer_css
            }
        );
    };
    // Abstraction to simplify AddColumn when just using a simple text value
    this.AddText = function (data_key, width_mult=1, label_text="", css={}, header_css={}, footer_css={}) {
        css["flex"] = "none";
        header_css["flex"] = "none";
        footer_css["flex"] = "none";
        this.AddColumn(
            label_text || data_key.Title(),
            data_key,
            false,
            Dash.Size.ColumnWidth * width_mult,
            {
                "css": css,
                "header_css": header_css,
                "footer_css": footer_css
            }
        );
    };
}

function DashLayoutListRowColumn (list_row, column_config_data, index, color=null) {
    this.list_row = list_row;
    this.column_config_data = column_config_data;
    this.index = parseInt(index);
    this.color = color || list_row.color || Dash.Color.Light;
    this.disabled = false;
    this.html = $("<div></div>");
    this.list = this.list_row.list;
    this.height = this.list_row.height;
    this.width = this.column_config_data["width"] || -1;
    this.setup_styles = function () {
        this.set_click_callback();
        this.html.css(this.get_css());
        if (this.list_row.is_header && this.column_config_data["header_css"]) {
            this.html.css(this.column_config_data["header_css"]);
        }
        if (this.list_row.is_footer && this.column_config_data["footer_css"]) {
            this.html.css(this.column_config_data["footer_css"]);
        }
        if (!this.list.is_header && !this.list_row.is_footer && this.column_config_data["options"]["hover_text"]) {
            this.html.attr("title", this.column_config_data["options"]["hover_text"]);
            this.html.css({
                "cursor": "help"
            });
        }
    };
    this.Disable = function () {
        if (this.disabled) {
            return;
        }
        this.disabled = true;
        this.html.css({
            "opacity": 0.5,
            "pointer-events": "none",
            "user-select": "none"
        });
    };
    this.Enable = function () {
        if (!this.disabled) {
            return;
        }
        this.disabled = false;
        this.html.css({
            "opacity": 1,
            "pointer-events": "auto",
            "user-select": "auto"
        });
    };
    this.get_css = function () {
        var css = {
            "height": this.height,
            "line-height": this.height.toString() + "px",
            "color": this.color.Text,
            "white-space": "nowrap",
            "overflow": "hidden",
            "text-overflow": "ellipsis"
        };
        if (this.list_row.is_sublist) {
            css["text-decoration"] = "underline";
        }
        if (this.width > 0) {
            css["width"] = this.width;
        }
        if (this.column_config_data["type"] === "label") {
            css["font-size"] = "80%";
        }
        css = this.get_css_margins(css);
        css = this.get_column_config_css(css);
        css = this.get_text_color_css(css);
        return css;
    };
    this.get_text_color_css = function (css) {
        if (!this.list_row.is_header && !this.list_row.is_footer) {
            return css;
        }
        css["color"] = this.color.Stroke;
        return css;
    };
    this.get_column_config_css = function (css) {
        if (!this.column_config_data["css"]) {
            return css;
        }
        for (var key in this.column_config_data["css"]) {
            if (!key.includes("width") && (this.list_row.is_header || this.list_row.is_footer)) {
                continue;
            }
            css[key] = this.column_config_data["css"][key];
        }
        return css;
    };
    this.get_css_margins = function (css) {
        var previous_column = this.list.column_config.columns[this.index - 1];
        if (previous_column && previous_column["type"] === "divider") {
            if (this.index < (this.list.column_config.columns.length - 1)) {
                css["margin-right"] = Dash.Size.Padding;
            }
            css["margin-left"] = Dash.Size.Padding;
        }
        else {
            if (this.column_config_data["left_aligned"]) {
                if (this.index < (this.list.column_config.columns.length - 1)) {
                    css["margin-right"] = Dash.Size.Padding;
                }
            }
            else {
                css["margin-left"] = Dash.Size.Padding;
            }
        }
        if (this.column_config_data["type"] === "label") {
            css["margin-right"] = Dash.Size.Padding * 0.5;
        }
        return css;
    };
    this.set_click_callback = function () {
        if (!this.column_config_data["on_click_callback"]) {
            return;
        }
        this.html.css({
            "cursor": "pointer"
        });
        this.column_config_data["on_click_callback"] = this.column_config_data["on_click_callback"].bind(this.list.binder);
        (function (self) {
            self.html.on("click", function (e) {
                self.column_config_data["on_click_callback"](self.list_row.id);
                e.preventDefault();
                return false;
            });
        })(this);
    };
    this.Update = function () {
        var css = {};
        var column_value;
        if (this.list_row.is_header || this.column_config_data["type"] === "label") {
            column_value = (this.column_config_data["display_name"] || this.column_config_data["data_key"].Title() || "").trim();
            if (this.column_config_data["type"] === "label" && !column_value.endsWith(":")) {
                column_value += ":";
            }
        }
        else if (this.list_row.is_sublist) {
            if (this.index === 0) {
                column_value = this.list_row.id.toString().replace(this.list_row.list.sublist_row_tag, "");
            }
            else {
                column_value = "";
            }
        }
        else {
            column_value = this.list.get_data_for_key(
                this.list_row.id,
                this.column_config_data["data_key"],
                this
            );
        }
        if (this.list_row.is_header || this.list_row.is_footer || this.column_config_data["type"] === "label") {
            css["font-family"] = "sans_serif_bold";
        }
        else if (this.list_row.is_sublist) {
            css["font-family"] = "sans_serif_italic";
        }
        else if (column_value && column_value.length > 0) {
            css["font-family"] = "sans_serif_normal";
        }
        if (!column_value) {
            var options = this.column_config_data["options"];
            if (options && "default_to_display_name" in options && options["default_to_display_name"]) {
                column_value = this.column_config_data["display_name"];
            }
            css["font-family"] = "sans_serif_italic";
        }
        // Make sure these are preserved if provided
        if (this.column_config_data["css"] && this.column_config_data["css"]["font-family"]) {
            css["font-family"] = this.column_config_data["css"]["font-family"];
        }
        else if (this.list_row.is_header && this.column_config_data["header_css"] && this.column_config_data["header_css"]["font-family"]) {
            css["font-family"] = this.column_config_data["header_css"]["font-family"];
        }
        else if (this.list_row.is_footer && this.column_config_data["footer_css"] && this.column_config_data["footer_css"]["font-family"]) {
            css["font-family"] = this.column_config_data["footer_css"]["font-family"];
        }
        this.html.css(css);
        if (column_value && column_value.toString().includes("</")) {
            // jQuery's .text() escapes HTML tags, so this approach is required
            this.html[0].innerHTML = column_value;
        }
        else {
            this.html.text(column_value);
        }
    };
    this.setup_styles();
}

/**@member DashLayoutListRow*/
function DashLayoutListRowElements () {
    this.add_default_column = function (column_config_data, index) {
        column_config_data["left_aligned"] = true;
        var column = new DashLayoutListRowColumn(this, column_config_data, index, this.color);
        this.column_box.append(column.html);
        this.columns["default"].push({
            "obj": column,
            "column_config_data": column_config_data
        });
    };
    this.add_spacer_column = function (column_config_data) {
        if (column_config_data["header_only"] && !this.is_header) {
            return;
        }
        if (column_config_data["footer_only"] && !this.is_footer) {
            return;
        }
        var spacer = this.get_spacer();
        this.column_box.append(spacer);
        this.columns["spacers"].push({
            "obj": spacer,
            "column_config_data": column_config_data
        });
    };
    this.add_divider_column = function (column_config_data) {
        var divider = this.get_divider(column_config_data);
        this.column_box.append(divider);
        this.columns["dividers"].push({
            "obj": divider,
            "column_config_data": column_config_data
        });
    };
    this.add_combo_column = function (column_config_data) {
        var combo = this.get_combo(column_config_data);
        this.column_box.append(combo.html);
        this.columns["combos"].push({
            "obj": combo,
            "column_config_data": column_config_data
        });
    };
    this.add_input_column = function (column_config_data) {
        var input = this.get_input(column_config_data);
        this.column_box.append(input.html);
        this.columns["inputs"].push({
            "obj": input,
            "column_config_data": column_config_data
        });
    };
    this.add_icon_button_column = function (column_config_data) {
        var icon_button = this.get_icon_button(column_config_data);
        this.column_box.append(icon_button.html);
        this.columns["icon_buttons"].push({
            "obj": icon_button,
            "column_config_data": column_config_data
        });
    };
    this.add_copy_button_column = function (column_config_data) {
        var copy_button = this.get_copy_button(column_config_data);
        this.column_box.append(copy_button.html);
        this.columns["copy_buttons"].push({
            "obj": copy_button,
            "column_config_data": column_config_data
        });
    };
    this.get_spacer = function () {
        var spacer = $("<div></div>");
        spacer.css({
            "height": this.height,
            "flex-grow": 2,
            "flex-shrink": 2
        });
        return spacer;
    };
    this.get_divider = function (column_config_data) {
        var divider_line = $("<div></div>");
        var css = {
            "background": this.color.AccentGood,
            "width": Dash.Size.Padding * 0.3,
            "margin": "none",
            "flex": "none"
        };
        if (column_config_data["css"]) {
            css = {
                ...css,
                ...column_config_data["css"]
            };
        }
        if (this.is_header && column_config_data["header_css"]) {
            css = {
                ...css,
                ...column_config_data["header_css"]
            };
        }
        if (this.is_footer && column_config_data["footer_css"]) {
            css = {
                ...css,
                ...column_config_data["footer_css"]
            };
        }
        if ((this.is_header && !column_config_data["show_for_header"]) || (this.is_footer && !column_config_data["show_for_footer"])) {
            css["opacity"] = 0;
        }
        divider_line.css(css);
        return divider_line;
    };
    this.get_combo = function (column_config_data) {
        var read_only = this.is_header || this.is_footer || this.is_sublist;
        var label = column_config_data["options"]["label_text"] || column_config_data["options"]["display_name"] || "";
        var combo = new Dash.Gui.Combo (
            label,
            column_config_data["options"]["callback"] || column_config_data["on_click_callback"] || null,
            column_config_data["options"]["binder"] || null,
            (this.is_header) && label ? [{"id": label, "label_text": label}] : column_config_data["options"]["combo_options"] || null,
            this.get_data_for_key(column_config_data, "", true),
            this.color,
            {
                "style": "row",
                "read_only": read_only,
                "additional_data": {
                    "row_id": this.id,
                    "row": this,  // For revolving lists, use this instead of relying on row_id
                    "column_index": this.columns["combos"].length,
                    "data_key": column_config_data["data_key"]
                },
                "is_user_list": column_config_data["options"]["is_user_list"] || false,
                "multi_select": column_config_data["options"]["multi_select"] || false
            }
        );
        var css = {
            "height": this.height,
            "width": column_config_data["width"]
        };
        if (column_config_data["css"]) {
            if (column_config_data["css"]["border"] && column_config_data["css"]["border"] !== "none" && !this.is_header && !this.is_footer) {
                css["box-sizing"] = "border-box";
                css["padding-left"] = Dash.Size.Padding * 0.2;
            }
            css = {
                ...css,
                ...column_config_data["css"]
            };
        }
        if (this.is_header) {
            css["border"] = "none";
            if (column_config_data["header_css"]) {
                css = {
                    ...css,
                    ...column_config_data["header_css"]
                };
            }
        }
        else if (this.is_footer) {
            css["border"] = "none";
            if (column_config_data["footer_css"]) {
                css = {
                    ...css,
                    ...column_config_data["footer_css"]
                };
            }
        }
        if (read_only && column_config_data["options"]["hover_text"]) {
            css["cursor"] = "help";
            combo.html.attr("title", column_config_data["options"]["hover_text"]);
        }
        combo.html.css(css);
        combo.label.css({
            "height": this.height,
            "margin-top": -Dash.Size.Padding * 0.1,
            "line-height": this.height + "px"
        });
        if (read_only) {
            if (this.is_header && label) {
                // TODO: need a title thing up here, use default column element?
                combo.label.css({
                    "font-family": column_config_data["header_css"]["font-family"] || "sans_serif_bold",
                    "color": column_config_data["header_css"]["color"] || this.color.Stroke
                });
            }
            else if (this.is_footer && label) {
                // TODO: need a title thing up here, use default column element?
                combo.label.css({
                    "font-family": column_config_data["footer_css"]["font-family"] || "sans_serif_bold",
                    "color": column_config_data["footer_css"]["color"] || this.color.Stroke
                });
            }
            else {
                // Keep the container so the row stays properly aligned, but don't show the actual element
                combo.html.css({
                    "opacity": 0
                });
            }
            this.prevent_events_for_placeholder(
                combo.html,
                column_config_data["options"]["hover_text"]
            );
        }
        return combo;
    };
    this.get_input = function (column_config_data) {
        var color = column_config_data["options"]["color"] || this.color;
        var placeholder_label = column_config_data["options"]["placeholder_label"] || "";
        var input = new Dash.Gui.Input(placeholder_label === "none" ? "" : placeholder_label, color);
        var css = {
            "background": "none",
            "height": this.height * ((this.is_header || this.is_footer) ? 1 : 0.9),
            "box-shadow": "none"
        };
        if (column_config_data["width"]) {
            css["width"] = column_config_data["width"];
        }
        if (this.is_header || this.is_footer) {
            if (placeholder_label || this.is_footer) {
                css["color"] = color.Stroke;
                css["font-family"] = "sans_serif_bold";
            }
            css["border"] = "none";
            css["line-height"] = this.height + "px";
        }
        else {
            if (this.is_sublist && placeholder_label) {
                css["color"] = color.Stroke;
                css["font-family"] = "sans_serif_bold";
            }
            css["border"] = "1px solid " + this.color.Pinstripe;
            css["margin-top"] = Dash.Size.Padding * 0.1;
            if (column_config_data["css"]) {
                css = {
                    ...css,
                    ...column_config_data["css"]
                };
            }
        }
        if (this.is_header && column_config_data["header_css"]) {
            css = {
                ...css,
                ...column_config_data["header_css"]
            };
        }
        else if (this.is_footer && column_config_data["footer_css"]) {
            css = {
                ...css,
                ...column_config_data["footer_css"]
            };
        }
        input.html.css(css);
        if (this.is_header || this.is_footer || this.is_sublist) {
            // Keep the container so the row stays properly aligned, but don't add the actual element
            input.input.remove();
            input.html.text(
                placeholder_label && this.is_header && column_config_data["options"]["use_placeholder_label_for_header"] ?
                placeholder_label : (this.is_footer ? this.get_data_for_key(column_config_data) : "") || column_config_data["display_name"]
            );
            this.prevent_events_for_placeholder(input.html);
            return input;
        }
        input.input.css({
            "height": this.height * 0.9,
            "line-height": (this.height * 0.9) + "px",
            "padding-left": Dash.Size.Padding * 0.35
        });
        var starting_value = column_config_data["options"]["default_value"] || this.get_data_for_key(column_config_data);
        if (starting_value) {
            input.SetText(starting_value.toString());
        }
        if (column_config_data["options"]["callback"] && column_config_data["options"]["binder"]) {
            (function (self, column_config_data, input) {
                input.SetOnSubmit(
                    function () {
                        var callback = column_config_data["options"]["callback"].bind(column_config_data["options"]["binder"]);
                        callback(self.id, input.Text(), column_config_data, self, input);
                    },
                    column_config_data["options"]["binder"]
                );
                input.EnableAutosave();
            })(this, column_config_data, input);
        }
        if (column_config_data["options"]["disable_autosave"]) {
            input.DisableAutosave();
        }
        if (column_config_data["can_edit"] === false) {
            input.SetLocked(true);
        }
        return input;
    };
    this.get_icon_button = function (column_config_data) {
        var icon_button = (function (self) {
            return new Dash.Gui.IconButton(
                column_config_data["options"]["icon_name"],
                function (event, button) {
                    column_config_data["options"]["callback"].bind(column_config_data["options"]["binder"])(self, button);
                },
                column_config_data["options"]["binder"],
                column_config_data["options"]["color"] || self.color,
                column_config_data["options"]["options"] || {}
            );
        })(this);
        icon_button.html.css({
            "height": this.height
        });
        if (column_config_data["css"]) {
            icon_button.html.css(column_config_data["css"]);
        }
        if (this.is_header || this.is_footer || this.is_sublist) {
            // Keep the container so the row stays properly aligned, but don't add the actual element
            icon_button.icon.icon_html.remove();
            this.prevent_events_for_placeholder(icon_button.html);
            return icon_button;
        }
        if (column_config_data["options"]["hover_text"]) {
            icon_button.SetHoverHint(column_config_data["options"]["hover_text"]);
        }
        if (column_config_data["options"]["icon_color"]) {
            icon_button.SetIconColor(column_config_data["options"]["icon_color"]);
        }
        return icon_button;
    };
    this.get_copy_button = function (column_config_data) {
        var copy_button = (function (self) {
            return new Dash.Gui.CopyButton(
                column_config_data["options"]["binder"],
                function () {
                    return column_config_data["options"]["getter_cb"].bind(column_config_data["options"]["binder"])(self);
                },
                column_config_data["options"]["size_mult"],
                null,
                "default",
                column_config_data["options"]["icon_name"],
                column_config_data["options"]["color"] || self.color
            );
        })(this);
        copy_button.html.css({
            "height": this.height
        });
        if (column_config_data["css"]) {
            copy_button.html.css(column_config_data["css"]);
        }
        if (this.is_header || this.is_footer || this.is_sublist) {
            // Keep the container so the row stays properly aligned, but don't add the actual element
            copy_button.button.icon.icon_html.remove();
            copy_button.label.remove();
            this.prevent_events_for_placeholder(copy_button.html);
            return copy_button;
        }
        if (column_config_data["options"]["hover_text"]) {
            copy_button.button.SetHoverHint(column_config_data["options"]["hover_text"]);
        }
        return copy_button;
    };
    this.prevent_events_for_placeholder = function (html, click_only=false) {
        if (!click_only) {
            html.css({
                "pointer-events": "none"
            });
        }
        html.off("click");
    };
}

/**@member DashLayoutListRow*/
function DashLayoutListRowInterface () {
    // Sometimes, you may want the row to be a certain height, but not have all the elements fill that height
    this.AddTopAndBottomPadding = function (pad) {
        this.column_box.css({
            "padding-top": pad,
            "left": 0,
            "right": 0
        });
        this.html.css({
            "padding-top": pad,
            "padding-bottom": pad
        });
        this.highlight.css({
            "height": this.height + (pad * 2)
        });
    };
    this.DisableAnimation = function () {
        this.anim_delay = {
            "highlight_show": 0,
            "highlight_hide": 0,
            "expanded_content": 0,
            "expanded_highlight": 0
        };
    };
    this.AddToSublistQueue = function (row_id, css=null) {
        if (!this.is_sublist || !row_id) {
            return;
        }
        var item = {"row_id": row_id, "css": css};
        if (!(JSON.stringify(this.sublist_queue).includes(JSON.stringify(item)))) {
            this.sublist_queue.push(item);
        }
        return this.sublist_queue;
    };
    this.GetSublistQueue = function () {
        if (!this.is_sublist) {
            return;
        }
        return this.sublist_queue;
    };
    this.SetCachedPreview = function (preview_obj) {
        if (!this.is_sublist) {
            return;
        }
        this.cached_preview = preview_obj;
        return this.cached_preview;
    };
    this.GetCachedPreview = function () {
        if (!this.is_sublist) {
            return;
        }
        return this.cached_preview;
    };
    this.IsExpanded = function () {
        return this.is_expanded;
    };
    this.IsHighlighted = function () {
        return this.is_highlighted;
    };
    this.ID = function () {
        return this.id;
    };
    this.Remove = function () {
        this.list.RemoveRow(this.id);
    };
    this.Hide = function () {
        if (!this.is_shown) {
            return;
        }
        this.is_shown = false;
        this.html.css("display", "none");
    };
    this.Show = function () {
        if (this.is_shown) {
            return;
        }
        this.is_shown = true;
        this.html.css("display", "block");
    };
    // Use this if a sublist is not going to be updating (it's only generated once and that's it)
    this.DisableSublistClearOnUpdate = function () {
        this.clear_sublist_preview_on_update = false;
    };
    this.Update = function () {
        if (this.clear_sublist_preview_on_update) {
            this.SetCachedPreview(null);  // Reset this to force a redraw next time it's expanded
        }
        for (var type in this.columns) {
            if (!Dash.Validate.Object(this.columns[type])) {
                continue;
            }
            if (type === "default") {
                for (var column of this.columns[type]) {
                    column["obj"].Update();
                }
            }
            else if (type === "inputs") {
                for (var input of this.columns[type]) {
                    var new_value = this.get_data_for_key(input["column_config_data"], "", input["obj"]);
                    if (new_value || new_value !== input["obj"].Text()) {
                        input["obj"].SetText(new_value);
                    }
                }
            }
            else if (type === "combos") {
                for (var combo of this.columns[type]) {
                    var value = this.get_data_for_key(combo["column_config_data"], "", true);
                    if (value) {
                        if (this.is_header || this.is_footer) {
                            // TODO
                        }
                        else {
                            combo["obj"].Update(null, value, true);
                        }
                    }
                }
            }
        }
        // Probably need to recursively go through sublists and update
        // those as well, but that functionality isn't needed right now
    };
    this.SetExpandedSubListParentHeight = function (height_change) {
        if (!this.list.hasOwnProperty("GetParentRow")) {
            return;  // RevolvingList style
        }
        var row = this.list.GetParentRow();
        if (!row || !row.is_sublist || !row.is_expanded) {
            return;
        }
        var size_now = parseInt(row.expanded_content.css("height").replace("px", ""));
        row.expanded_content.stop().animate({"height": size_now + height_change}, this.anim_delay["expanded_content"]);
        // This will recursively continue up the stack
        row.SetExpandedSubListParentHeight(height_change);
    };
    this.Expand = function (html, sublist_rows=null, remove_hover_tip=false) {
        if (this.is_header || this.is_footer) {
            return;
        }
        if (this.is_expanded) {
            this.Collapse();
            return;
        }
        // Optional param so that we can hide hover tips that are intended for the collapsed row element only.
        // Once removed, the managing code needs to re-assign the hover tip on hover in (mouse enter).
        if (remove_hover_tip && this.html.attr("title")) {
            this.html.removeAttr("title");
        }
        if (sublist_rows) {
            this.store_css_on_expansion(sublist_rows.Last());
        }
        if (this.is_sublist) {
            this.store_css_on_expansion(this.list.rows.Last());
        }
        this.ShowHighlight();
        var size_now = parseInt(this.expanded_content.css("height").replace("px", ""));
        this.expanded_content.stop().css({
            "overflow-y": "auto",
            "opacity": 1,
            "height": "auto",
            "padding-top": this.height,
        });
        html.css({
            "border-bottom": "1px solid rgb(200, 200, 200)"
        });
        this.expanded_content.append(html);
        var target_size = parseInt(this.expanded_content.css("height").replace("px", ""));
        this.expanded_content.stop().css({
            "height": size_now,
            "overflow-y": "hidden",
        });
        (function (self) {
            self.expanded_content.animate(
                {"height": target_size},
                self.anim_delay["expanded_content"],
                function () {
                    self.expanded_content.css({
                        "overflow-y": "visible"  // This MUST be set to visible so that combo skirts don't get clipped
                    });
                    self.is_expanded = true;
                }
            );
        })(this);
        this.SetExpandedSubListParentHeight(target_size);
        return target_size;
    };
    this.Collapse = function () {
        if (!this.is_expanded || this.is_header || this.is_footer) {
            return;
        }
        if (Dash.Validate.Object(this.tmp_css_cache)) {
            this.tmp_css_cache.forEach(
                function (entry) {
                    if (entry && entry["row"] && entry["row"].html && entry["css"]) {
                        entry["row"].html.css(entry["css"]);
                    }
                }
            );
            this.tmp_css_cache = [];
        }
        this.expanded_content.stop().css({
            "overflow-y": "hidden",
        });
        var expanded_height = parseInt(this.expanded_content.css("height").replace("px", ""));
        (function (self) {
            self.expanded_content.animate(
                {"height": 0},
                self.anim_delay["expanded_content"],
                function () {
                    self.expanded_content.stop().css({
                        "overflow-y": "hidden",
                        "opacity": 0,
                    });
                    self.HideHighlight();
                    self.expanded_content.empty();
                    self.is_expanded = false;
                }
            );
        })(this);
        this.SetExpandedSubListParentHeight(-expanded_height);
        return expanded_height;
    };
    this.ShowHighlight = function (highlight_color=null) {
        if (this.is_highlighted) {
            return;
        }
        if (!this.expanded_highlight) {
            this.create_expand_highlight(highlight_color);
        }
        this.expanded_highlight.stop().animate(
            {"opacity": 1},
            this.anim_delay["expanded_highlight"]
        );
        this.is_highlighted = true;
    };
    this.HideHighlight = function () {
        if (!this.expanded_highlight || !this.is_highlighted) {
            return;
        }
        this.expanded_highlight.stop().css({
            "opacity": 0
        });
        this.is_highlighted = false;
    };
    // For disabling all columns
    this.Disable = function () {
        if (!this.columns) {
            return;
        }
        for (var type in this.columns) {
            if (!Dash.Validate.Object(this.columns[type])) {
                continue;
            }
            for (var column of this.columns[type]) {
                var obj = column["obj"];
                if (type === "default") {
                    obj.html.css({
                        "user-select": "none",
                        "pointer-events": "none"
                    });
                }
                else if (type === "copy_buttons") {
                    obj.button.Disable();
                }
                else if (type.includes("button")) {
                    obj.Disable();
                }
                else if (type === "combos") {
                    obj.SetReadOnly(true);
                    obj.Disable(false, true);
                }
                else if (type === "inputs") {
                    obj.SetLocked(true);
                }
            }
        }
    };
    // TODO: this.Enable
    // For extreme cases
    this.FullyDisable = function () {
        this.BreakConnections();
        this.DisableAnimation();
        this.Disable();
        this.html.css({
            "pointer-events": "none",
            "user-select": "none",
            "cursor": "default"
        });
        this.fully_disabled = true;
    };
    // For disabling individual columns
    this.ChangeColumnEnabled = function (type, index, enabled=true) {
        if (!this.columns || !Dash.Validate.Object(this.columns[type])) {
            return;
        }
        if (index === -1) {
            index = this.columns[type].length - 1;
        }
        if ((index + 1) > this.columns[type].length) {
            return;
        }
        if (!this.columns[type][index] || !this.columns[type][index]["obj"]) {
            return;
        }
        if (type === "icon_buttons") {
            if (enabled) {
                this.columns[type][index]["obj"].Enable();
            }
            else {
                this.columns[type][index]["obj"].Disable();
            }
        }
        else if (type === "copy_buttons") {
            if (enabled) {
                this.columns[type][index]["obj"].button.Enable();
            }
            else {
                this.columns[type][index]["obj"].button.Disable();
            }
        }
        // Add conditions for the other types as needed
    };
    this.SetHoverPreview = function (content="") {
        if (this.is_expanded || !content) {
            if (this.html.attr("title")) {
                this.html.removeAttr("title");
            }
            return;
        }
        this.html.attr("title", content);
    };
    this.BreakConnections = function () {
        this.html.off("mouseenter");
        this.html.off("mouseleave");
        this.column_box.off("click");
    };
    this.RefreshConnections = function () {
        this.BreakConnections();
        this.setup_connections();
        for (var icon_button of this.columns["icon_buttons"]) {
            icon_button["obj"].RefreshConnections();
        }
        for (var copy_button of this.columns["copy_buttons"]) {
            copy_button["obj"].button.RefreshConnections();
        }
    };
    this.RedrawColumns = function () {
        this.column_box.empty();
        this.setup_columns();
    };
    this.SetHighlightColor = function (color) {
        this.highlight.css({
            "background": color
        });
    };
}

// This is an alternate to DashLayoutList that is ideal for lists with high row counts
function DashLayoutRevolvingList (binder, column_config, color=null, include_header_row=false, row_options={}, get_data_for_key=null, include_footer_row=false) {
    this.binder = binder;
    this.column_config = column_config;
    this.color = color || (binder && binder.color ? binder.color : Dash.Color.Light);
    this.include_header_row = include_header_row;
    this.include_footer_row = include_footer_row;
    // This is useful if there is more than one list in the same script, which each need their own GetDataForKey function
    this.get_data_for_key = get_data_for_key ? get_data_for_key.bind(binder) : binder.GetDataForKey ? binder.GetDataForKey.bind(binder) : null;
    if (!(column_config instanceof DashLayoutListColumnConfig)) {
        console.error("Error: Required second parameter 'column_config' is not of the correct class, DashLayoutListColumnConfig");
        return;
    }
    if (!this.get_data_for_key) {
        console.error("Error: Calling class must contain a function named GetDataForKey()");
        return;
    }
    this.data = null;
    this.parent = null;
    this.recall_id = "";
    this.row_objects = [];
    this.header_row = null;
    this.footer_row = null;
    this.expanded_ids = {};
    this.initial_draw = false;
    this.row_count_buffer = 6;
    this.included_row_ids = [];
    this.html = $("<div></div>");
    this.get_expand_preview = null;
    this.header_row_backing = null;
    this.footer_row_backing = null;
    this.last_column_config = null;
    this.last_selected_row_id = "";
    this.row_events_disabled = false;
    this.row_clicks_disabled = false;
    this.container = $("<div></div>");
    this.non_expanding_click_cb = null;
    this.get_hover_preview_content = null;
    this.header_row_tag = "_top_header_row";
    this.footer_row_tag = "_bottom_footer_row";
    this.non_expanding_click_highlight_color = null;
    this.row_html_css = row_options["row_html_css"];
    this.row_column_box_css = row_options["row_column_box_css"];
    this.row_highlight_color = row_options["row_highlight_color"];
    this.row_height = row_options["row_height"] || Dash.Size.RowHeight;
    this.header_background_color = row_options["header_background_color"];
    this.footer_background_color = row_options["footer_background_color"];
    // For calculations - ensures the bottom border (1px) of rows are visible (they get overlapped otherwise)
    this.full_row_height = this.row_height + 1;
    DashLayoutRevolvingListScrolling.call(this);
    this.setup_styles = function () {
        this.html.css({
            "position": "absolute",
            "inset": 0
        });
        this.container.css({
            "position": "absolute",
            "inset": 0,
            "top": this.include_header_row ? this.full_row_height : 0,
            "bottom": this.include_footer_row ? this.full_row_height : 0,
            "overflow-y": "auto"
        });
        this.add_header_row();
        this.add_footer_row();
        this.html.append(this.container);
        this.setup_scroll_connections();
    };
    this.ScrollToBottom = function () {
        Dash.Gui.ScrollToBottom(this.container);
    };
    this.SetHoverPreviewGetter = function (getter, binder=null) {
        if (!getter) {
            return;
        }
        this.get_hover_preview_content = binder ? getter.bind(binder) : getter;
    };
    this.SetExpandPreviewGetter = function (getter, binder=null) {
        if (!getter) {
            return;
        }
        this.get_expand_preview = binder ? getter.bind(binder) : getter;
    };
    this.SetNonExpandingClickCallback = function (callback, binder=null, click_highlight_color=null) {
        if (!callback) {
            return;
        }
        if (click_highlight_color) {
            this.non_expanding_click_highlight_color = click_highlight_color;
            this.select_row("");
        }
        this.non_expanding_click_cb = binder ? callback.bind(binder) : callback;
    };
    this.SetColumnConfig = function (column_config, row_ids_to_include=[]) {
        if (!(column_config instanceof DashLayoutListColumnConfig)) {
            console.error("Error: New 'column_config' is not of the correct class, DashLayoutListColumnConfig!");
            return;
        }
        this.last_column_config = this.column_config;
        this.column_config = column_config;
        if (Dash.Validate.Object(row_ids_to_include)) {
            this.Draw(row_ids_to_include);
        }
    };
    this.RemoveRow = function (row_id) {
        if (!Dash.Validate.Object(this.included_row_ids) || !row_id) {
            return;
        }
        this.included_row_ids.Remove(row_id);
        this.Draw(this.included_row_ids);
    };
    this.AddRow = function (row_id, top=false) {
        if (!row_id) {
            return;
        }
        if (top) {
            this.included_row_ids.push(row_id);
        }
        else {
            this.included_row_ids.unshift(row_id);
        }
        this.Draw(this.included_row_ids);
    };
    this.UpdateRow = function (row_id) {
        var row = this.get_row(row_id);
        if (!row) {
            return;
        }
        row.Update();
    };
    // This shouldn't be used in most situations, since Draw handles it all
    this.Clear = function (clear_expanded_ids=true) {
        if (clear_expanded_ids) {
            this.expanded_ids = {};
        }
        this.included_row_ids = [];
        this.cleanup_rows();
    };
    this.Draw = function (row_ids_to_include=[]) {
        this.Clear(false);
        this.included_row_ids = row_ids_to_include;
        this.create_filler_space();
        for (var row of this.row_objects) {
            this.container.append(row.html);
        }
        this.on_view_scrolled();
        this.initial_draw = true;
    };
    // Intended to be used when custom CSS is used on divider elements
    this.DisableDividerColorChangeOnHover = function () {
        this.allow_row_divider_color_change_on_hover = false;
    };
    this.BubbleStyle = function () {
        this.html.css({
            "border-radius": Dash.Size.Padding,
            "background": this.color.Pinstripe,
            "border": "2px solid " + this.color.StrokeLight
        });
        if (this.include_header_row) {
            var header_css = {
                "border-top-left-radius": Dash.Size.Padding,
                "border-top-right-radius": Dash.Size.Padding
            };
            this.header_row.html.css(header_css);
            this.header_row.column_box.css(header_css);
            this.header_row_backing.css(header_css);
        }
        if (this.include_footer_row) {
            var footer_css = {
                "border-bottom-left-radius": Dash.Size.Padding,
                "border-bottom-right-radius": Dash.Size.Padding
            };
            this.footer_row.html.css(footer_css);
            this.footer_row.column_box.css(footer_css);
            this.footer_row_backing.css(footer_css);
        }
    };
    this.SetRecallID = function (recall_id) {
        if (!this.initial_draw) {
            (function (self) {
                setTimeout(
                    function () {
                        self.SetRecallID(recall_id);
                    },
                    100
                );
            })(this);
            return;
        }
        this.recall_id = recall_id;
        var last_loaded_id = Dash.Local.Get(this.recall_id);
        if (!last_loaded_id) {
            return;
        }
        this.SelectRow(last_loaded_id);
    };
    this.SelectRow = function (row_id) {
        this.last_selected_row_id = row_id;
        var scroll_top = this.included_row_ids.indexOf(this.last_selected_row_id) * this.full_row_height;
        if (scroll_top > this.html.height()) {
            this.container.scrollTop(scroll_top);  // Scrolling will trigger this.select_row as well
        }
        else {
            this.select_row(this.last_selected_row_id, false);
        }
    };
    this.CollapseExpandedRows = function () {
        for (var row_id in this.expanded_ids) {
            for (var row of this.row_objects) {
                if (row.ID().toString() !== row_id.toString()) {
                    continue;
                }
                row.Collapse();
            }
        }
    };
    this.DisableRowEvents = function () {
        this.row_events_disabled = true;
        for (var row of this.row_objects) {
            row.FullyDisable();
        }
    };
    this.DisableRowClickEvents = function () {
        this.row_clicks_disabled = true;
        for (var row of this.row_objects) {
            row.column_box.off("click");
        }
    };
    // Not needed in most cases - only needed if manually breaking/altering a particular row's connections
    this.RefreshRowConnections = function (row) {
        this.setup_row_connections(row);
    };
    this.select_row = function (row_id="", default_to_first_row=true) {
        if (row_id && !this.initial_draw) {
            (function (self) {
                setTimeout(
                    function () {
                        self.select_row(row_id, default_to_first_row);
                    },
                    100
                );
            })(this);
            return;
        }
        var row = row_id ? this.get_row(row_id) : null;
        if (!row) {
            if (default_to_first_row && this.row_objects.length) {
                row = this.row_objects[0];
            }
            else {
                return;
            }
        }
        this.on_row_selected(row, true);
    };
    this.get_row = function (row_id) {
        if (!Dash.Validate.Object(this.row_objects) || !row_id) {
            return;
        }
        for (var row of this.row_objects) {
            if (row.ID().toString() === row_id.toString()) {
                return row;
            }
        }
        return null;
    };
    this.add_header_row = function () {
        if (!this.include_header_row) {
            return;
        }
        this.header_row = this.get_new_row(true);
        if (!this.header_row_backing) {
            this.add_header_row_backing();
        }
        this.set_header_scrollbar_offset();
        this.html.append(this.header_row.html);
        this.header_row.Update();
    };
    this.add_header_row_backing = function () {
        this.header_row_backing = this.get_new_row(false, true);
        this.header_row_backing.css({
            "height": this.full_row_height,
            "background": this.header_row.column_box.css("background-color")
        });
        this.html.append(this.header_row_backing);
    };
    this.add_footer_row = function () {
        if (!this.include_footer_row) {
            return;
        }
        this.footer_row = this.get_new_row(false, false, true);
        if (!this.footer_row_backing) {
            this.add_footer_row_backing();
        }
        this.set_footer_scrollbar_offset();
        this.html.append(this.footer_row.html);
        this.footer_row.Update();
    };
    this.add_footer_row_backing = function () {
        this.footer_row_backing = this.get_new_row(false, true, false, true);
        this.footer_row_backing.css({
            "height": this.full_row_height,
            "background": this.footer_row.column_box.css("background-color")
        });
        this.html.append(this.footer_row_backing);
    };
    this.create_filler_space = function () {
        var filler_content = "";
        for (var row_id of this.included_row_ids) {
            filler_content += row_id + "<br>";
        }
        var filler_html = $("<div" + filler_content + "</div>");
        filler_html.css({
            "text-align": "left",
            "overflow": "hidden",
            "text-overflow": "clip",
            "white-space": "nowrap",
            "max-height": this.full_row_height,
            "height": this.full_row_height,
            "line-height": this.full_row_height + "px",
            "opacity": 0
        });
        this.container.append(filler_html);
        this.set_header_scrollbar_offset();
        this.set_footer_scrollbar_offset();
    };
    this.cleanup_rows = function () {
        var config_changed = this.column_config !== this.last_column_config;
        this.last_column_config = this.column_config;
        for (var row of this.row_objects) {
            if (config_changed) {
                row.RedrawColumns();
            }
            this.hide_row(row);
            row.html.detach();
        }
        if (this.header_row) {
            if (config_changed) {
                this.header_row.RedrawColumns();
            }
            this.header_row.Update();
        }
        if (this.footer_row) {
            if (config_changed) {
                this.footer_row.RedrawColumns();
            }
            this.footer_row.Update();
        }
        this.container.empty();
    };
    this.get_new_row = function (header=false, placeholder=false, footer=false, footer_placeholder=false) {
        var row;
        var css = {
            "position": "absolute",
            "left": 0,
            "right": 0
        };
        if (footer || footer_placeholder) {
            css["bottom"] = 0;
        }
        else {
            css["top"] = 0;
        }
        if (placeholder) {
            row = $("<div></div>");
            row.css(css);
        }
        else {
            row = new DashLayoutListRow(
                this,
                header ? this.header_row_tag : footer ? this.footer_row_tag : "",
                this.row_height
            );
            row.html.css(css);
            if (header) {
                if (this.header_background_color) {
                    row.column_box.css({
                        "background": this.header_background_color
                    });
                }
            }
            else if (footer) {
                if (this.footer_background_color) {
                    row.column_box.css({
                        "background": this.footer_background_color
                    });
                }
            }
            else {
                if (this.row_html_css) {
                    row.html.css(this.row_html_css);
                }
                if (this.row_column_box_css) {
                    row.column_box.css(this.row_column_box_css);
                }
            }
            // The on-scroll revolving row system used in this style doesn't work when the rows
            // are animated to expand/collapse. That anim delay breaks the revolving system when a
            // row is left expanded and the view gets scrolled. Delaying the revolving system doesn't
            // work to solve that, because the scroll events keep coming, causing further breakage.
            row.DisableAnimation();
            if (this.row_highlight_color) {
                row.SetHighlightColor(this.row_highlight_color);
            }
        }
        return row;
    };
    this.create_row_objects = function (total_needed) {
        for (var i = 0; i < total_needed; i++) {
            var row = this.get_new_row();
            this.hide_row(row);
            this.container.append(row.html);
            this.row_objects.push(row);
        }
    };
    this.show_row = function (row, row_index) {
        row.Collapse();
        row.HideHighlight();
        // Original ID's expanded data (before moving row)
        var expanded_data = this.expanded_ids[row.ID()];
        if (Dash.Validate.Object(expanded_data) && row.index === expanded_data["row_index"]) {
            var preview_height = parseInt(expanded_data["preview_content"].css("height"));
            this.adjust_row_tops(row, preview_height, false);
            this.expanded_ids[row.ID()]["row_index"] = -1;
        }
        row.index = row_index;
        row.id = this.included_row_ids[row_index];
        row.html.css({
            "top": row_index * this.full_row_height,
            "display": "initial",
            "pointer-events": "auto"
        });
        row.Update();
        this.setup_row_connections(row);
    };
    this.on_row_selected = function (row, force_expand=false) {
        if (!row) {
            return;
        }
        if (row.ID()) {
            this.last_selected_row_id = row.ID();
            if (this.recall_id) {
                Dash.Local.Set(this.recall_id, row.ID());
            }
        }
        if (this.non_expanding_click_cb) {
            if (this.non_expanding_click_highlight_color && !row.IsHighlighted()) {
                for (var other_row of this.row_objects) {
                    other_row.HideHighlight();
                }
                row.ShowHighlight(this.non_expanding_click_highlight_color);
            }
            this.non_expanding_click_cb(row, this);
            return;
        }
        if (!this.get_expand_preview) {
            return;
        }
        if (!force_expand && row.IsExpanded()) {
            this.adjust_row_tops(row, row.Collapse(), false);
            delete this.expanded_ids[row.ID()];
            this.setup_row_connections(row);
            return;
        }
        // Always redraw this content, otherwise, the connections won't work
        var preview_content = this.get_expand_preview(row);
        if (!preview_content) {
            return;
        }
        this.adjust_row_tops(row, row.Expand(preview_content, null, true), true);
        this.set_expanded_id(row, preview_content);
    };
    this.set_expanded_id = function (row, preview_content) {
        var row_id = row.ID();
        if (!(row_id in this.expanded_ids)) {
            this.expanded_ids[row_id] = {};
        }
        this.expanded_ids[row_id]["row_index"] = row.index;
        this.expanded_ids[row_id]["preview_content"] = preview_content;
    };
    // The 'expanded' param exists just in case row.IsExpanded() isn't immediately ready when this is called
    this.adjust_row_tops = function (row, height_adj, expanded=true) {
        var row_buffer = Math.ceil(height_adj / this.full_row_height);
        if (row_buffer > this.row_count_buffer) {
            this.row_count_buffer = row_buffer;
        }
        for (var other_row of this.row_objects) {
            if (other_row.index <= row.index || other_row.ID().toString() === row.ID().toString()) {
                continue;
            }
            var top_pos = parseInt(other_row.html.css("top"));
            var default_top_pos = other_row.index * this.full_row_height;
            if (expanded || top_pos > default_top_pos) {
                var new_top = expanded ? top_pos + height_adj : top_pos - height_adj;
                if (new_top < default_top_pos) {
                    new_top = default_top_pos;
                }
                other_row.html.css({
                    "top": new_top
                });
            }
        }
    };
    this.hide_row = function (row) {
        row.Collapse();
        row.HideHighlight();
        row.index = -1;
        row.html.css({
            "top": 0,
            "display": "none",
            "pointer-events": "none"
        });
    };
    this.set_hover_preview = function (row) {
        if (this.row_events_disabled) {
            return;
        }
        (function (self) {
            row.html.on("mouseenter", function () {
                if (!self.get_hover_preview_content) {
                    return;
                }
                row.SetHoverPreview(self.get_hover_preview_content(row.ID()) || "");
            });
        })(this);
    };
    // Replace the DashLayoutList-driven click behavior
    this.set_on_row_click = function (row) {
        if (this.row_events_disabled || this.row_clicks_disabled) {
            return;
        }
        row.column_box.off("click");
        (function (self) {
            row.column_box.on("click", function (e) {
                if (e.target && e.target.className.includes(" fa-")) {
                    // Don't set selection if it was an icon button that was clicked
                    return;
                }
                self.on_row_selected(row);
            });
        })(this);
    };
    this.setup_row_connections = function (row) {
        if (this.row_events_disabled) {
            return;
        }
        row.RefreshConnections();
        if (this.row_clicks_disabled) {
            row.column_box.off("click");
        }
        this.set_on_row_click(row);
        this.set_hover_preview(row);
    };
    this.setup_styles();
}

/**@member DashLayoutRevolvingList*/
function DashLayoutRevolvingListScrolling () {
    this.on_view_scrolled = function () {
        if (!this.parent) {
            return;
        }
        var [start_index, end_index] = this.get_scroll_indexes();
        var needed_count = this.get_scroll_needed_count(start_index, end_index);
        var needed_indexes = this.get_scroll_needed_indexes(start_index);
        var [can_move, already_moved] = this.get_scroll_moves(needed_indexes);
        this.show_scroll_moves(needed_count, already_moved, can_move, start_index);
    };
    this.get_scroll_index_components = function (start_pos=0) {
        if (start_pos < 0) {
            start_pos = 0;
        }
        var end_pos = start_pos + window.innerHeight + this.full_row_height;
        var start_index = Math.floor(parseInt((start_pos / this.full_row_height).toString()));
        return [start_pos, end_pos, start_index];
    };
    this.get_scroll_indexes = function () {
        var [start_pos, end_pos, start_index] = this.get_scroll_index_components(this.container.scrollTop() - this.full_row_height);
        for (var row_id in this.expanded_ids) {
            var expanded_data = this.expanded_ids[row_id];
            if (!Dash.Validate.Object(expanded_data) || !expanded_data["preview_content"]) {
                continue;
            }
            if (start_index < expanded_data["row_index"]) {
                continue;
            }
            var preview_height = parseInt(expanded_data["preview_content"].css("height"));
            var index_buffer = Math.ceil(preview_height / this.full_row_height);
            if (start_index > (expanded_data["row_index"] + index_buffer)) {
                start_pos -= preview_height;
                [start_pos, end_pos, start_index] = this.get_scroll_index_components(start_pos);
                continue;
            }
            start_index = expanded_data["row_index"] - 1;
            end_pos -= preview_height;
            break;
        }
        var end_index = parseInt((end_pos / this.full_row_height).toString());
        if (start_index < 0) {
            start_index = 0;
        }
        if (end_index > this.included_row_ids.length) {
            end_index = this.included_row_ids.length;
        }
        return [start_index, end_index];
    };
    this.get_scroll_needed_count = function (start_index, end_index) {
        var needed = (end_index - start_index) + this.row_count_buffer;
        if (needed > this.row_objects.length) {
            this.create_row_objects(needed);
        }
        return needed;
    };
    this.get_scroll_needed_indexes = function (row_index) {
        var needed_indexes = [];
        for (var i = 0; i < this.row_objects.length; i++) {
            needed_indexes.push(row_index);
            row_index += 1;
        }
        return needed_indexes;
    };
    this.get_scroll_moves = function (needed_indexes) {
        var can_move = [];
        var already_moved = [];
        for (var i = 0; i < this.row_objects.length; i++) {
            if (needed_indexes.includes(this.row_objects[i].index)) {
                already_moved.push(this.row_objects[i].index);
            }
            else {
                can_move.push(this.row_objects[i]);
            }
        }
        return [can_move, already_moved];
    };
    this.show_scroll_moves = function (needed_count, already_moved, can_move, row_index) {
        var available_index = 0;
        for (var i = 0; i < needed_count; i++) {
            if (already_moved.includes(row_index)) {
                row_index += 1;
                continue;
            }
            if (row_index >= this.included_row_ids.length) {
                continue;
            }
            this.show_row(can_move[available_index], row_index);
            available_index += 1;
            row_index += 1;
        }
        this.re_expand_rows();
        this.re_highlight_rows();
        this.tighten_scroll_moves();
    };
    this.tighten_scroll_moves = function () {
        var row;
        for (row of this.row_objects) {
            if (!row.IsExpanded()) {
                continue;
            }
            // What's going on here?
            return;
        }
        for (row of this.row_objects) {
            row.html.css({
                "top": row.index * this.full_row_height
            });
        }
    };
    this.re_expand_rows = function () {
        for (var row_id in this.expanded_ids) {
            var expanded_data = this.expanded_ids[row_id];
            if (!Dash.Validate.Object(expanded_data)) {
                return;
            }
            for (var row of this.row_objects) {
                if (row.ID().toString() !== row_id.toString()) {
                    continue;
                }
                if (!row.IsExpanded()) {
                    this.on_row_selected(row, true);
                }
                break;
            }
        }
    };
    this.re_highlight_rows = function () {
        if (!this.non_expanding_click_highlight_color || !this.last_selected_row_id) {
            return;
        }
        for (var row of this.row_objects) {
            if (row.ID().toString() !== this.last_selected_row_id.toString()) {
                continue;
            }
            row.ShowHighlight(this.non_expanding_click_highlight_color);
            break;
        }
    };
    // If scrollbar exists in container, shift the header to the left to compensate and prevent misalignment
    this.set_header_scrollbar_offset = function () {
        if (!this.header_row) {
            return;
        }
        var margin = 0;
        if (Dash.Gui.HasOverflow(this.container)) {
            margin = Dash.Size.Padding * 1.5;
        }
        this.header_row.html.css({
            "margin-right": margin
        });
    };
    // If scrollbar exists in container, shift the footer to the left to compensate and prevent misalignment
    this.set_footer_scrollbar_offset = function () {
        if (!this.footer_row) {
            return;
        }
        var margin = 0;
        if (Dash.Gui.HasOverflow(this.container)) {
            margin = Dash.Size.Padding * 1.5;
        }
        this.footer_row.html.css({
            "margin-right": margin
        });
    };
    this.setup_scroll_connections = function () {
        (function (self) {
            self.parent = self.html.parent();
            self.parent.on("scroll", function () {
                self.on_view_scrolled();
            });
            self.container.on("scroll", function () {
                self.on_view_scrolled();
            });
        })(this);
        this.on_view_scrolled();
    };
}

// This must be an abstraction to combine the two, since implementing the revolving list into the searchable list is not going to work favorably
function DashLayoutSearchableRevolvingList (binder, on_row_click_cb, label_css={}, row_highlight_color="", row_height=null, color=null) {
    this.binder = binder;
    this.on_row_click_cb = on_row_click_cb.bind(this.binder);
    this.label_css = label_css;
    this.row_highlight_color = row_highlight_color;
    this.row_height = row_height || Dash.Size.ButtonHeight;
    this.color = color || binder.color || Dash.Color.Light;
    this.data = null;
    this.list = null;
    this.input = null;
    this.text_formatter = null;
    this.last_search_text = "";
    this.html = $("<div></div>");
    this.get_data_for_key = null;
    this.label_key = "display_name";
    this.setup_styles = function () {
        var column_config = new Dash.Layout.List.ColumnConfig();
        column_config.AddFlexText(
            this.label_key,
            "",
            0.25,
            {
                "text-overflow": "ellipsis",
                "overflow": "hidden",
                ...this.label_css
            }
        );
        this.list = new DashLayoutRevolvingList(
            this,
            column_config,
            this.color,
            false,
            {
                "row_height": this.row_height,
                "row_highlight_color": this.row_highlight_color
            }
        );
        this.list.html.css({
            "top": this.row_height + 1
        });
        this.list.SetNonExpandingClickCallback(this.on_row_click_cb, this.binder, this.color.AccentGood);
        this.input = (function (self) {
            return new DashLayoutSearchableListInput(
                self.list,
                function () {
                    self.on_search();  // Forego default parameters
                },
                function () {
                    var last_selected_id = self.LastSelectedRowID();
                    if (last_selected_id) {
                        self.SelectRow(last_selected_id);  // Force scroll
                    }
                }
            );
        })(this);
        this.html.append(this.input.html);
        this.html.append(this.list.html);
    };
    this.Update = function (data={"data": {}, "order": []}, on_search=true) {
        this.data = data;
        this.list.Draw(this.data["order"]);
        this.on_search(on_search);
    };
    this.SetRecallID = function (recall_id) {
        this.list.SetRecallID(recall_id);
    };
    this.SetTextFormatter = function (formatter_cb) {
        this.text_formatter = formatter_cb.bind(this.binder);
    };
    this.LastSelectedRowID = function () {
        return this.list.last_selected_row_id;
    };
    this.SelectRow = function (row_id) {
        this.list.SelectRow(row_id);
    };
    this.OverrideGetDataForKey = function (func) {
        this.get_data_for_key = func.bind(this.binder);
    };
    this.on_search = function (force=false) {
        var search_text = this.input.input.Text().trim().toLowerCase();
        if (!force && search_text === this.last_search_text) {
            return;
        }
        var matched_ids = [];
        for (var row_id of this.data["order"]) {
            var value = Dash.Utils.NormalizeSearchText(this.GetDataForKey(row_id, this.label_key));
            if (value.includes(search_text) || row_id === search_text) {
                matched_ids.push(row_id);
            }
        }
        this.list.Draw(matched_ids);
        this.last_search_text = search_text;
    };
    this.GetDataForKey = function (row_id, key) {
        if (this.get_data_for_key) {  // For some reason, simply overriding GetDataForKey wasn't successful...
            return this.get_data_for_key(row_id, key);
        }
        try {
            var value = this.data["data"][row_id][key] || "";
            if (this.text_formatter) {
                value = this.text_formatter(value);
            }
            return value;
        }
        catch {
            return "";
        }
    };
    this.setup_styles();
}

function DashLayoutSearchableList (binder, on_selection_callback, get_data_callback, on_row_draw_callback=null) {
    this.binder = binder;
    this.on_selection_callback = on_selection_callback.bind(this.binder);
    this.get_data_callback = get_data_callback.bind(this.binder);
    this.on_row_draw_callback = on_row_draw_callback ? on_row_draw_callback.bind(this.binder) : null;
    this.rows = {};
    this.id_list = [];
    this.RowContent = {};
    this.filter_text = "";
    this.search_terms = [];
    this.init_scroll = false;
    this.html = $("<div></div>");
    this.row_content_classes = {};
    this.auto_select_disabled = false;
    this.row_selection_disabled = false;
    this.current_selected_row_id = null;
    this.list_container = $("<div></div>");
    this.row_height = Dash.Size.ButtonHeight;
    this.color = this.binder.color || Dash.Color.Light;
    this.input = new DashLayoutSearchableListInput(this);
    this.recall_id = (this.binder.constructor + "").replace(/[^A-Za-z]/g, "").slice(0, 100).trim().toLowerCase();
    this.setup_styles = function () {
        this.html.css({
            "position": "absolute",
            "left": 0,
            "top": 0,
            "right": 0,
            "bottom": 0,
            "background": Dash.Color.Lighten(this.color.Background, 5)
        });
        this.list_container.css({
            "position": "absolute",
            "left": 0,
            "top": this.row_height + 1, // Include search pinstripe
            "right": 0,
            "bottom": 0,
            "overflow-y": "auto"
        });
        this.html.append(this.list_container);
        this.html.append(this.input.html);
    };
    this.DisableAutomaticSelection = function () {
        this.auto_select_disabled = true;
    };
    this.DisableRowSelection = function () {
        this.row_selection_disabled = true;
    };
    this.SetRowContent = function (row_id, html, class_with_update_function=null) {
        if (class_with_update_function && class_with_update_function.hasOwnProperty("Update")) {
            this.row_content_classes[row_id] = class_with_update_function;
        }
        this.RowContent[row_id] = html;
        this.rows[row_id].SetContent(html);
    };
    // Use this to set a unique ID that allows the last loaded selection to be applied
    this.SetRecallID = function (recall_id) {
        this.recall_id = recall_id;
    };
    this.OnSearchTermChanged = function (search_term) {
        search_term = search_term.trim().toLowerCase();
        if (search_term === this.filter_text) {
            return;
        }
        this.filter_text = search_term;
        this.filter_rows();
    };
    this.UpdateRows = function (order, data) {
        /**
         * @param {Array} order - IDs that correspond to data's keys
         * @param {Object} data - Data objects whose keys correspond to order
         */
        this.id_list = order;
        this.search_terms = [];  // Reset each time
        var id;
        for (id in this.rows) {
            this.rows[id].html.detach();
        }
        for (var row_id of order) {
            var row_data = data[row_id];
            if (!this.rows[row_id] || !this.rows[row_id].html.parent) {
                this.rows[row_id] = new DashLayoutSearchableListRow(this, row_id, row_data);
            }
            if (this.row_content_classes[row_id]) {
                this.row_content_classes[row_id].Update(row_data);
            }
            else if (this.on_row_draw_callback) {
                this.on_row_draw_callback(row_id);
                if (this.row_content_classes[row_id]) {
                    this.row_content_classes[row_id].Update(row_data);
                }
            }
            var search_text = this.rows[row_id].Update(row_data);
            if (search_text) {
                search_text = Dash.Utils.NormalizeSearchText(search_text);
            }
            else {
                console.warn("Warning: Dash.Layout.SearchableList > row update callback must return a search term. Ignoring row", row_id);
            }
            this.search_terms.push(search_text);
            this.list_container.append(this.rows[row_id].html);
        }
        if (this.filter_text.length > 0) {
            this.filter_rows();
        }
        if (!this.auto_select_disabled) {
            var last_loaded = Dash.Local.Get(this.recall_id);
            if (last_loaded && order.includes(last_loaded)) {
                this.SetActiveRowID(last_loaded);
            }
        }
    };
    this.GetSelectedID = function () {
        var selected = this.current_selected_row_id || Dash.Local.Get(this.recall_id);
        if (this.id_list.includes(selected)) {
            return selected;
        }
        else {
            return null;
        }
    };
    this.SetActiveRowID = function (row_id) {
        if (this.row_selection_disabled) {
            return;
        }
        if (this.current_selected_row_id === row_id) {
            return;
        }
        this.current_selected_row_id = row_id;
        Dash.Local.Set(this.recall_id, row_id);
        for (var id in this.rows) {
            if (id === row_id) {
                this.rows[id].SetActive(true);
                if (!this.init_scroll) {
                    if (!this.rows[id].IsVisible()) {
                        try {
                            this.rows[id].html[0].scrollIntoView();
                        }
                        catch {
                            // Pass
                        }
                    }
                    this.init_scroll = true;
                }
            }
            else {
                this.rows[id].SetActive(false);
            }
        }
        this.on_selection_callback(this.current_selected_row_id);
    };
    this.filter_rows = function () {
        for (var id in this.rows) {
            this.rows[id].html.detach();
        }
        for (var i in this.id_list) {
            var row_id = this.id_list[i];
            var search_text = this.search_terms[i];
            if (!search_text || !this.filter_text || search_text.includes(this.filter_text) || this.filter_text === row_id) {
                this.list_container.append(this.rows[row_id].html);
            }
        }
    };
    this.setup_styles();
}

function DashLayoutSearchableListRow (slist, row_id, optional_row_data) {
    this.slist = slist;
    this.row_id = row_id;
    this.optional_row_data = optional_row_data;
    this.observer = null;
    this.is_visible = false;
    this.pending_update = null;
    this.html = $("<div></div>");
    this.hover = $("<div></div>");
    this.pending_drawable = null;
    this.color = this.slist.color;
    this.display_name_label = null;
    this.cached_draw_response = null;
    this.content_layer = $("<div></div>");
    this.row_height = this.slist.row_height;
    this.get_data_callback = this.slist.get_data_callback;
    this.on_row_draw_callback = this.slist.on_row_draw_callback;
    this.setup_styles = function () {
        this.html.append(this.hover);
        this.html.append(this.content_layer);
        this.html.css({
            "height": this.row_height,
            "line-height": Dash.Size.ButtonHeight + "px",
            "border-bottom": "1px solid " + this.color.Pinstripe,
            "border-top": "1px solid " + "rgba(0, 0, 0, 0)",
            "cursor": "pointer",
            "user-select": "none"
        });
        this.hover.css({
            "position": "absolute",
            "background": "rgba(255, 255, 255, 0.5)",
            "left": 0,
            "top": 0,
            "right": 0,
            "bottom": 0,
            "pointer-events": "none",
            "user-select": "none",
            "opacity": 0
        });
        this.setup_connections();
        (function (self) {
            // This has to process on the next frame since
            // the dom elements aren't attached this frame
            requestAnimationFrame(function () {
                self.initialize_visibility();
            });
        })(this);
    };
    this.IsVisible = function () {
        var row_top = this.html.offset()["top"];
        var row_bottom = row_top + this.html[0].clientHeight;
        var list_top = this.slist.html.scrollTop();
        var list_bottom = list_top + this.slist.html[0].clientHeight;
        return (
            // Fully visible
            (row_top >= list_top && row_bottom <= list_bottom) ||
            // Partially visible
            (row_top < list_top && list_top < row_bottom) ||
            (row_top < list_bottom && list_bottom < row_bottom)
        );
    };
    this.initialize_visibility = function () {
        if (this.observer) {
            return;
        }
        this.observer = new IntersectionObserver((entries) => {
            if (entries[0].isIntersecting) {
                this.on_visible();
            }
            else {
                this.on_hidden();
            }
        });
        this.observer.observe(this.html[0]);
    };
    this.on_visible = function () {
        this.is_visible = true;
        if (this.pending_update) {
            this.pending_update = false;
            this.cached_draw_response = this.pending_drawable(this.row_id);
        }
    };
    this.on_hidden = function () {
        this.is_visible = false;
    };
    this.SetContent = function (html) {
        this.content_layer.empty().append(html);
    };
    // Call to redraw / on new data
    this.Update = function () {
        this.pending_drawable = this.on_row_draw_callback || this.update_display_name_label.bind(this);
        if (this.is_visible) {
            this.cached_draw_response = this.pending_drawable(this.row_id);
            return this.cached_draw_response;
        }
        else {
            this.pending_update = true;
            return this.cached_draw_response || this.get_label();
        }
    };
    this.setup_display_name_label = function () {
        // The display name label is used if there is no callback to draw the
        // row. This can be useful for simply populating a list of elements.
        this.display_name_label = $("<div></div>");
        this.display_name_label.css({
            "height": Dash.Size.ButtonHeight,
            "line-height": Dash.Size.ButtonHeight + "px",
            "padding-left": Dash.Size.Padding * 0.5,
            "color": this.color.Text,
            "white-space": "nowrap",
            "overflow": "hidden",
            "text-overflow": "ellipsis"
        });
        this.content_layer.empty().append(this.display_name_label);
    };
    this.update_display_name_label = function (row_id, text="") {
        if (!this.display_name_label) {
            this.setup_display_name_label();
        }
        if (!text) {
            text = this.get_label();
        }
        this.display_name_label.text(text);
        return text;
    };
    this.get_label = function () {
        var data = this.get_data_callback(this.row_id);
        if (typeof data === "string") {
            return data;
        }
        return data[this.row_id]["display_name"] || this.row_id || "";
    };
    this.SetActive = function (is_active) {
        if (is_active) {
            this.html.css({
                "border-top": "1px solid " + "rgba(255, 255, 255, 0.5)",
                "background": Dash.Color.Light.AccentGood,
            });
            this.content_layer.css({
                "opacity": 1.0,
            });
        }
        else {
            this.html.css({
                "background": "none",
                "border-top": "1px solid " + "rgba(0, 0, 0, 0)",
            });
            this.content_layer.css({
                "opacity": 0.6,
            });
        }
    };
    this.setup_connections = function () {
        (function (self) {
            self.html.on("click", function () {
                self.slist.SetActiveRowID(self.row_id);
            });
            self.html.on("mouseenter", function () {
                self.hover.stop().animate({"opacity": 1}, 50);
            });
            self.html.on("mouseleave", function () {
                self.hover.stop().animate({"opacity": 0}, 100);
            });
        })(this);
    };
    this.setup_styles();
}

function DashLayoutSearchableListInput (list, on_search_cb=null, on_clear_cb=null) {
    this.list = list;
    this.on_search_cb = on_search_cb;
    this.on_clear_cb = on_clear_cb;
    this.html = null;
    this.color = this.list.color;
    this.current_search_term = "";
    this.clear_icon_visible = false;
    this.row_height = this.list.row_height;
    this.input = new Dash.Gui.Input("Search...", this.color);
    this.icon_size = this.row_height - (Dash.Size.Padding * 1.5);
    this.clear_icon = new Dash.Gui.Icon(this.color, "delete", this.icon_size);
    this.search_icon = new Dash.Gui.Icon(this.color, "search", this.icon_size);
    this.setup_styles = function () {
        this.html = this.input.html;
        this.input.OnChange(this.on_search, this);
        this.html.append(this.search_icon.html);
        this.html.append(this.clear_icon.html);
        this.search_icon.Mirror();
        this.html.css({
            "position": "absolute",
            "left": 0,
            "top": 0,
            "right": 0,
            "height": this.row_height,
            "border-bottom": "1px solid " + this.color.Pinstripe,
            "background": Dash.Color.Lighten(this.color.Background, 10),
            "box-shadow": "none",
            "margin-right": 0,
            "padding-right": this.row_height + Dash.Size.Padding * 0.5
        });
        this.search_icon.html.css({
            "position": "absolute",
            "right": Dash.Size.Padding * 0.66,
            "top": Dash.Size.Padding * 0.66,
            "pointer-events": "none",
            "user-select": "none"
        });
        this.clear_icon.html.css({
            "position": "absolute",
            "right": Dash.Size.Padding * 0.66,
            "top": Dash.Size.Padding * 0.66,
            "user-select": "none",
            "cursor": "pointer",
            "opacity": 0
        });
        (function (self) {
            self.clear_icon.html.on("click", function () {
                self.clear_search();
            });
        })(this);
    };
    this.clear_search = function () {
        this.input.SetText("");
        this.hide_clear_icon();
        this.on_search();
        if (this.on_clear_cb) {
            this.on_clear_cb();
        }
    };
    this.on_search = function () {
        var _current_search_term = this.input.Text();
        if (_current_search_term === this.current_search_term) {
            return;
        }
        this.current_search_term = _current_search_term;
        if (this.current_search_term.length > 0) {
            this.show_clear_icon();
        }
        else {
            this.hide_clear_icon();
        }
        // Require a min of 2 to search, but allow 0 to reset the list
        if (this.current_search_term.length === 1) {
            return;
        }
        if (this.on_search_cb) {
            this.on_search_cb(this.current_search_term);
        }
        else {
            this.list.OnSearchTermChanged(this.current_search_term);
        }
    };
    this.show_clear_icon = function () {
        if (this.clear_icon_visible) {
            return;
        }
        this.clear_icon_visible = true;
        this.search_icon.html.stop().animate({"opacity": 0}, 250);
        this.clear_icon.html.stop().animate( {"opacity": 1}, 250);
    };
    this.hide_clear_icon = function () {
        if (!this.clear_icon_visible) {
            return;
        }
        this.clear_icon_visible = false;
        this.search_icon.html.stop().animate({"opacity": 1}, 250);
        this.clear_icon.html.stop().animate( {"opacity": 0}, 250);
    };
    this.setup_styles();
}

function DashLayoutToolbar (binder, color=null) {
    this.binder = binder;
    this.color = color || this.binder.color || Dash.Color.Dark;
    this.objects = [];
    this.stroke_height = 1;
    this.html = Dash.Gui.GetHTMLContext();
    this.allow_padding_refactoring = true;
    this.refactor_itom_padding_requested = false;
    this.stroke_sep = Dash.Gui.GetHTMLAbsContext();
    this.height = Dash.Size.ButtonHeight + this.stroke_height;
    DashLayoutToolbarInterface.call(this);
    this.setup_styles = function () {
        this.html.css({
            "background": Dash.Color.Lighten(this.color.Background, 7),
            "height": this.height, // +1 for the bottom stroke
            "padding-right": Dash.Size.Padding * 0.5,
            "display": "flex",
            "padding-left": Dash.Size.Padding * 0.5
        });
        this.stroke_sep.css({
            "background": this.color.Pinstripe,
            "top": "auto",
            "height": this.stroke_height
        });
        this.html.append(this.stroke_sep);
    };
    this.on_input_changed = function (obj_index) {
        var obj = this.objects[obj_index];
        obj["callback"](obj["html"].Text(), obj["html"]);
    };
    this.on_input_submitted = function (obj_index) {
        var obj = this.objects[obj_index];
        obj["on_enter_callback"](obj["html"].Text(), obj["html"], obj["additional_data"]);
    };
    this.on_input_autosaved = function (obj_index) {
        var obj = this.objects[obj_index];
        obj["on_autosave_callback"](obj["html"].Text(), obj["html"], obj["additional_data"]);
    };
    this.on_button_clicked = function (obj_index, data=null) {
        var obj = this.objects[obj_index];
        obj["callback"](obj["html"], data, this);
    };
    this.on_combo_updated = function (callback, selected_id, previous_selected_option, additional_data) {
        if (callback) {
            callback(selected_id, previous_selected_option, this, additional_data);
        }
        else {
            console.warn("Warning: No on_combo_updated() callback >> selected_option: " + selected_id);
        }
    };
    this.refactor_item_padding = function () {
        // refactor padding, but do it on the next frame since
        // the most likely time to do this happens after packing
        // a bunch of elements in the initialization of the Toolbar
        if (!this.allow_padding_refactoring || this.refactor_itom_padding_requested) {
            return;
        }
        this.refactor_itom_padding_requested = true;
        (function (self) {
            requestAnimationFrame(function () {
                self._refactor_item_padding();
            });
        })(this);
    };
    // Never call this directly. Instead, use this.refactor_item_padding()
    this._refactor_item_padding = function () {
        if (!this.refactor_itom_padding_requested) {
            return;
        }
        this.refactor_itom_padding_requested = false;
        for (var i = 0; i < this.objects.length; i++) {
            var html = this.objects[i]["html_elem"];
            if (i === (this.objects.length - 1)) {
                // This is the last element, and it gets no right-margin
                //since the toolbar itself has a margin built in to the left and right
                html.css({"margin-right": 0, "margin-left": 0});
            }
            else {
                html.css({"margin-right": Dash.Size.Padding * 0.5, "margin-left": 0});
            }
        }
    };
    this.setup_styles();
}

/**@member DashLayoutToolbar */
function DashLayoutToolbarInterface () {
    this.RemoveStrokeSep = function () {
        this.stroke_sep.remove();
        this.height -= this.stroke_height;
        this.html.css({
            "height": this.height
        });
    };
    this.DisablePaddingRefactoring = function () {
        this.allow_padding_refactoring = false;
    };
    this.AddExpander = function () {
        var expander = $("<div></div>");
        expander.css({
            "flex-grow": 2,
        });
        this.html.append(expander);
        var obj_index = this.objects.length;
        this.objects.push({
            "html_elem": expander,
            "index": obj_index
        });
        this.refactor_item_padding();
        return expander;
    };
    this.GetHeight = function () {
        return this.height;
    };
    this.AddSpace = function (width) {
        var space = $("<div></div>");
        space.css({
            "width": width,
        });
        var obj_index = this.objects.length;
        this.objects.push({
            "html_elem": space,
            "index": obj_index
        });
        this.refactor_item_padding();
        this.html.append(space);
    };
    // TODO: These params are a mess
    this.AddIconButton = function (icon_name, callback, size_percent_num=null, data=null, container_size=null, size_mult=1.0, for_uploader=false) {
        var obj_index = this.objects.length;
        callback = callback.bind(this.binder);
        var button = (function (self, obj_index, data) {
            return new Dash.Gui.IconButton(
                icon_name,
                for_uploader ? callback : function () {
                    self.on_button_clicked(obj_index, data);
                },
                self,
                self.color,
                {
                    "style": "toolbar",
                    "container_size": container_size || self.height,
                    "size_mult": size_mult
                }
            );
        })(this, obj_index, data);
        button.html.css({
            "margin-top": 0
        });
        this.html.append(button.html);
        this.objects.push({
            "html": button,
            "html_elem": button.html,
            "callback": callback,
            "index": obj_index
        });
        if (size_percent_num) {
            button.SetIconSize(size_percent_num);
        }
        this.refactor_item_padding();
        return button;
    };
    this.AddButton = function (label_text, callback, width=null, data=null, style="toolbar") {
        (function (self, obj_index, data) {
            var button = new Dash.Gui.Button(
                label_text,
                function () {
                    self.on_button_clicked(obj_index, data);
                },
                self,
                self.color,
                {"style": style}
            );
            if (width) {
                button.html.css({
                    "width": width
                });
            }
            self.html.append(button.html);
            self.objects.push({
                "html": button,
                "html_elem": button.html,
                "callback": callback.bind(self.binder),
                "index": obj_index
            });
        })(this, this.objects.length, data);
        this.refactor_item_padding();
        return this.objects.Last()["html"];
    };
    this.AddHTML = function (html) {
        this.html.append(html);
        var obj_index = this.objects.length;
        this.objects.push({
            "html_elem": html,
            "index": obj_index
        });
        this.refactor_item_padding();
        return html;
    };
    this.AddUploadButton = function (label_text, callback, bind, api, params) {
        var button = new Dash.Gui.Button(
            label_text,
            callback,
            bind,
            null,
            {"style": "toolbar"}
        );
        button.SetFileUploader(api, params);
        this.html.append(button.html);
        var obj_index = this.objects.length;
        this.objects.push({
            "html": button,
            "html_elem": button.html,
            "callback": callback,
            "index": obj_index
        });
        this.refactor_item_padding();
        return button;
    };
    this.AddDivider = function () {
        var divider_line = this.AddLabel("", false);
        divider_line.html.css({
            "padding-left": 0,
            "margin-left": Dash.Size.Padding * 0.7,
            "margin-top": Dash.Size.Padding * 0.5,
            "margin-right": Dash.Size.Padding * 0.2,
        });
        var obj_index = this.objects.length;
        this.objects.push({
            "html": divider_line,
            "html_elem": divider_line.html,
            "index": obj_index
        });
        this.refactor_item_padding();
        return divider_line;
    };
    // Intended to be the first item, if you want a header-style label starting the toolbar
    this.AddLabel = function (text, add_end_border=true, color=null, include_start_border=true) {
        var header = new Dash.Gui.Header(text, color || this.color, include_start_border);
        if (!include_start_border) {
            header.label.css({
                "padding-left": 0
            });
        }
        header.html.css({
            "padding-left": include_start_border ? Dash.Size.Padding * 0.5 : 0,
            "margin-top": Dash.Size.Padding * 0.5,
            "margin-right": Dash.Size.Padding,
        });
        this.html.append(header.html);
        if (!add_end_border) {
            return header;
        }
        var end_border = $("<div></div>");
        end_border.css({
            "margin-top": Dash.Size.Padding * 0.5,
            "margin-bottom": Dash.Size.Padding * 0.5,
            "margin-right": Dash.Size.Padding,
            "margin-left": Dash.Size.Padding * 0.5,
            "left": -Dash.Size.Padding * 0.25,
            "top": 0,
            "bottom": 0,
            "width": Dash.Size.Padding * 0.5,
            "background": this.color.AccentGood,
        });
        this.html.append(end_border);
        this.objects.push({
            "html_elem": end_border,
            "callback": null,
            "index": this.objects.length
        });
        this.refactor_item_padding();
        return header;
    };
    this.AddText = function (text, color=null) {
        var label = this.AddLabel(text, false, color);
        label.border.remove();
        label.html.css({
            "padding-left": 0,
            "margin-top": 0  // Why is this the default?
        });
        label.label.css({
            "font-family": "sans_serif_normal",
            "white-space": "nowrap",
            "overflow": "hidden",
            "text-overflow": "ellipsis",
            "padding-left": 0
        });
        this.html.append(label.html);
        var obj_index = this.objects.length;
        this.objects.push({
            "html": label,
            "html_elem": label.html,
            "callback": null,
            "index": obj_index
        });
        this.refactor_item_padding();
        return label;
    };
    this.AddTransparentInput = function (placeholder_label, callback, options={}, additional_data={}, double_click_clear=true) {
        var input = this.AddInput(placeholder_label, callback, options, additional_data, double_click_clear);
        input.EnableAutosave();
        var height = options["height"] || Dash.Size.ButtonHeight - Dash.Size.Padding;
        var width = options["width"] || Dash.Size.ColumnWidth;
        var text_align = "left";
        if (options["center"]) {
            text_align = "center";
        }
        input.Flatten();
        input.html.css({
            "padding": 0,
            "margin": 0,
            "margin-top": Dash.Size.Padding * 0.5,
            "margin-right": Dash.Size.Padding * 0.5,
            "border-bottom": "1px solid rgba(0, 0, 0, 0.2)",
            "height": height,
            "width": width
        });
        input.input.css({
            "color": "rgb(20, 20, 20)",
            "height": height,
            "margin": 0,
            "padding": 0,
            "line-height": height + "px",
            "top": -Dash.Size.Padding * 0.5,
            "width": width,
            "text-align": text_align
        });
        this.objects.push({
            "html": input,
            "html_elem": input.html,
            "callback": null,
            "index": this.objects.length
        });
        this.refactor_item_padding();
        return input;
    };
    this.AddInput = function (placeholder_label, callback, options={}, additional_data={}, double_click_clear=true) {
        var obj_index = this.objects.length;
        var input = new Dash.Gui.Input(placeholder_label, this.color);
        input.html.css({
            "background": this.color.BackgroundRaised,
            "padding-left": Dash.Size.Padding * 0.5,
            "margin-top": Dash.Size.Padding * 0.5
        });
        input.input.css({
            "padding-left": 0,
            "color": this.color.Input.Text.Base
        });
        var obj = {
            "html": input,
            "html_elem": input.html,
            "callback": callback.bind(this.binder),
            "index": obj_index,
            "additional_data": additional_data
        };
        if (options["on_enter"]) {
            obj["on_enter_callback"] = options["on_enter"].bind(this.binder);
        }
        if (options["on_autosave"]) {
            obj["on_autosave_callback"] = options["on_autosave"].bind(this.binder);
        }
        this.objects.push(obj);
        (function (self, input, obj_index, obj) {
            input.SetOnChange(
                function () {
                    self.on_input_changed(obj_index);
                },
                self
            );
            if (obj["on_enter_callback"]) {
                input.SetOnSubmit(
                    function () {
                        self.on_input_submitted(obj_index);
                    },
                    self
                );
            }
            if (obj["on_autosave_callback"]) {
                input.EnableAutosave();
                input.SetOnAutosave(
                    function () {
                        self.on_input_submitted(obj_index);
                    },
                    self
                );
            }
            // This really shouldn't be default behavior, but leaving the default as true to ensure nothing breaks.
            if (double_click_clear) {
                input.input.on("dblclick", function () {
                    input.SetText("");
                    self.on_input_changed(obj_index);
                });
            }
        })(this, input, obj_index, obj);
        this.html.append(input.html);
        this.refactor_item_padding();
        return input;
    };
    this.AddCombo = function (label_text, combo_options, selected_id, callback, return_full_option=false, additional_data={}, extra_options={}) {
        var obj_index = this.objects.length;
        callback = callback ? callback.bind(this.binder) : function (selected) {
            console.warn("No callback provided, selected:", selected);
        };
        var options = {
            "style": "row",
            "additional_data": additional_data,
            ...extra_options
        };
        var combo = new Dash.Gui.Combo (
            label_text,
            extra_options["multi_select"] ? function (selected_ids, additional_data) {
                callback(selected_ids, null, this, additional_data);
            } : function (selected_option, previous_selected_option, additional_data) {
                callback(
                    return_full_option ? selected_option : selected_option["id"],
                    return_full_option ? previous_selected_option : previous_selected_option["id"],
                    this,
                    additional_data
                );
            },
            this,
            combo_options,
            selected_id,
            this.color,
            options
        );
        this.html.append(combo.html);
        if (options["style"] === "row") {
            combo.html.css({
                "margin-top": Dash.Size.Padding * 0.5,
                "margin-right": Dash.Size.Padding * 0.5,
                "height": Dash.Size.RowHeight
            });
            combo.label.css({
                "height": Dash.Size.RowHeight,
                "line-height": Dash.Size.RowHeight + "px"
            });
        }
        this.objects.push({
            "html": combo,
            "html_elem": combo.html,
            "callback": callback,
            "index": obj_index
        });
        this.refactor_item_padding();
        return this.objects[obj_index]["html"];
    };
    this.AddCheckbox = function (
        label_text, default_state, callback, identifier, hover_hint="Toggle", checkbox_redraw_styling=null, label_border=true, strict_identifier=false
    ) {
        var checkbox = new Dash.Gui.Checkbox(
            strict_identifier ? identifier : "dash_gui_toolbar_toggle_" + label_text + identifier,   // Local storage key
            default_state,                                          // Default state
            this.color,                                             // Color
            hover_hint,                                             // Hover hint text
            this,                                                   // Binder
            callback ? callback.bind(this.binder) : callback,       // Callback
            label_text,                                             // Label text
            true,                                                   // Label first
            label_border                                            // Include border
        );
        checkbox.html.css({
            "margin-top": Dash.Size.Padding * 0.5
        });
        if (checkbox_redraw_styling) {
            checkbox.AddIconButtonRedrawStyling(checkbox_redraw_styling);
        }
        this.AddHTML(checkbox.html);
        return checkbox;
    };
}

function DashMobileCombo (color=null, options={}, binder=null, on_change_cb=null) {
    this.color = color || (binder && binder.color ? binder.color : Dash.Color.Light);
    this.options = options;  // Format: {id: label}
    this.binder = binder;
    this.on_change_cb = binder && on_change_cb ? on_change_cb.bind(binder) : on_change_cb;
    this.label = null;
    this.html = $("<div></div>");
    this.select = $("<select></select>");
    this.setup_styles = function () {
        this.select.css({
            "color": this.color.Text,
            "height": Dash.Size.RowHeight,
            "box-sizing": "border-box",
            "width": "100%",
            "min-width": "100%",
            "max-width": "100%",
            "border-radius": Dash.Size.BorderRadius * 0.5,
            "border": "1px solid " + this.color.Stroke,
            "padding-left": Dash.Size.Padding * 0.25
        });
        this.html.append(this.select);
        this.add_options();
        this.setup_connections();
    };
    this.GetID = function (allow_none=true) {
        var id = this.select.val();
        if (id === "none" && !allow_none) {
            return null;
        }
        return id;
    };
    this.GetLabel = function () {
        return this.options[this.GetID()];
    };
    this.GetOptions = function () {
        return this.options;
    };
    this.SetOptions = function (options={}) {
        this.select.empty();
        this.options = options;
        this.add_options();
    };
    this.AddOption = function (id, label, _check=true) {
        if (_check && this.options[id]) {
            return;
        }
        this.options[id] = label;
        var row = $(
            "<option></option>",
            {
                "value": id,
                "text": label
            }
        );
        row.css({
            "height": Dash.Size.RowHeight
        });
        this.select.append(row);
    };
    this.SetSelection = function (option_id) {
        if (!this.options[option_id]) {
            console.warn("Option ID (" + option_id + ") not in options:", this.options);
            return;
        }
        this.select.val(option_id);
    };
    this.Lock = function () {
        this.select.prop("disabled", true);
    };
    this.Unlock = function () {
        this.select.prop("disabled", false);
    };
    this.SetWidth = function (width, min=null, max=null) {
        if (min === null) {
            min = width;
        }
        if (max === null) {
            max = width;
        }
        this.select.css({
            "width": width,
            "min-width": min,
            "max-width": max
        });
    };
    this.AddLabel = function (text) {
        if (this.label) {
            return this.label;
        }
        this.label = $("<div>" + text + "</div>");
        this.label.css({
            "position": "absolute",
            "font-family": "sans_serif_bold",
            "font-size": "80%",
            "color": this.color.StrokeLight,
            "top": -Dash.Size.Padding * 0.8,
            "left": Dash.Size.Padding * 0.1
        });
        this.html.append(this.label);
        return this.label;
    };
    this.add_options = function () {
        for (var id in this.options) {
            this.AddOption(id, this.options[id], false);
        }
    };
    this.setup_connections = function () {
        (function (self) {
            self.select.on("change", function () {
                if (self.on_change_cb) {
                    self.on_change_cb(self.GetID());
                }
            });
        })(this);
    };
    this.setup_styles();
}

function DashMobileTextBox (color=null, placeholder_text="", binder=null, on_change_cb=null, delay_change_cb=false) {
    this.color = color || (binder && binder.color ? binder.color : Dash.Color.Light);
    this.placeholder_text = placeholder_text;
    this.binder = binder;
    this.on_change_cb = binder && on_change_cb ? on_change_cb.bind(binder) : on_change_cb;
    this.delay_change_cb = delay_change_cb;
    this.label = null;
    this.border_size = 1;
    this.flash_disabled = false;
    this.last_change_ts = null;
    this.change_timeout = null;
    this.flash_highlight = null;
    this.change_delay_ms = 1500;  // Same as DashGuiInput's autosave delay
    this.html = $("<div></div>");
    this.last_change_value = null;
    this.submit_override_only = false;
    this.line_break_replacement = null;
    this.last_arrow_navigation_ts = null;
    this.border_radius = Dash.Size.BorderRadius * 0.5;
    this.textarea = $(
        "<textarea></textarea>",
        {
            "class": this.color.PlaceholderClass,
            "placeholder": this.placeholder_text
        }
    );
    this.setup_styles = function () {
        this.textarea.css({
            "color": this.color.Text,
            "font-family": "sans_serif_normal",
            "padding": Dash.Size.Padding * 0.5,
            "box-sizing": "border-box",
            "width": "100%",
            "min-width": "100%",
            "max-width": "100%",
            "height": Dash.Size.RowHeight * 4,
            "line-height": (Dash.Size.RowHeight * 0.5) + "px",
            "min-height": Dash.Size.RowHeight * 1.1,
            "border-radius": this.border_radius,
            "border": this.border_size + "px solid " + this.color.Stroke
        });
        this.html.append(this.textarea);
        this.setup_connections();
    };
    this.AutoFocus = function () {
        this.textarea.attr("autofocus", "autofocus");
    };
    // Deliberately setting null as the default so that an empty string can be supplied
    this.GetText = function (line_break_replacement=null) {
        if (line_break_replacement === null && this.line_break_replacement !== null) {
            line_break_replacement = this.line_break_replacement;
        }
        var val = this.textarea.val();
        if (typeof line_break_replacement === "string") {
            return val.replaceAll("\n", line_break_replacement);
        }
        return val;
    };
    this.SetText = function (text) {
        return this.textarea.val(text);
    };
    this.SetLineBreakReplacement = function (value="") {
        this.line_break_replacement = value;
    };
    this.Lock = function (restyle=true, text_and_border_color=null) {
        if (restyle) {
            if (!text_and_border_color) {
                text_and_border_color = this.color.StrokeLight;
            }
            var css = {"color": text_and_border_color};
            if (this.textarea.css("border-top") !== "none") {
                css["border"] = this.border_size + "px solid " + text_and_border_color;
            }
            else {
                css["border-bottom"] = this.border_size + "px solid " + text_and_border_color;
            }
            this.textarea.css(css);
        }
        this.textarea.prop("readOnly", true);
    };
    this.Unlock = function (restore_style=true) {
        if (restore_style) {
            var css = {"color": this.color.Text};
            if (this.textarea.css("border-top") !== "none") {
                css["border"] = this.border_size + "px solid " + this.color.Stroke;
            }
            else {
                css["border-bottom"] = this.border_size + "px solid " + this.color.Stroke;
            }
            this.textarea.css(css);
        }
        this.textarea.prop("readOnly", false);
    };
    this.StyleAsRow = function (bottom_border_only=false, _backup_line_break_replacement=" ") {
        var css = {
            "height": Dash.Size.RowHeight,
            "min-height": Dash.Size.RowHeight,
            "max-height": Dash.Size.RowHeight,
            "overflow-y": "hidden",
            "white-space": "nowrap"
        };
        if (bottom_border_only) {
            css["border-top"] = "none";
            css["border-left"] = "none";
            css["border-right"] = "none";
            css["line-height"] = (Dash.Size.RowHeight * 0.75) + "px";
        }
        this.textarea.css(css);
        this.DisableNewLines(_backup_line_break_replacement);
    };
    // This is definitely redundant, because you can just use an input instead, but it's useful in some rare scenarios
    this.DisableNewLines = function (_backup_line_break_replacement=" ") {
        (function (self) {
            self.textarea.on("keydown",function (e) {
                if (e.key === "Enter") {
                    e.preventDefault();
                    self.fire_change_cb(true);
                }
            });
        })(this);
        // This shouldn't be necessary since we reroute the enter key event above, but just in case
        this.SetLineBreakReplacement(_backup_line_break_replacement);
    };
    this.SetInputMode = function (mode) {
        this.textarea.attr("inputmode", mode);
        if (mode === "email") {
            // This is supposed to happen when the mode is set to "email", but isn't happening automatically
            this.textarea.attr("autocapitalize", "off");
        }
        else if (mode === "numeric") {
            this.textarea.attr({
                "type": "number",
                "pattern": "[0-9]*",
                "step": "1",
                "min": "0"
            });
        }
    };
    this.StyleAsPIN = function (length=4, disable_auto_submit=false) {
        this.StyleAsRow();
        this.SetWidth(Dash.Size.ColumnWidth * 0.7);
        this.SetMaxCharacters(length);
        this.SetInputMode("numeric");
        if (disable_auto_submit) {
            this.DisableAutoSubmit();
        }
        this.textarea.css({
            "text-align": "center",
            "font-size": "350%",
            "padding-left": Dash.Size.Padding,
            "letter-spacing": (Dash.Size.Padding * 0.5) + "px",
            "height": Dash.Size.RowHeight * 2.25,
            "min-height": Dash.Size.RowHeight * 2.25,
            "max-height": Dash.Size.RowHeight * 2.25,
            "line-height": (Dash.Size.RowHeight * 1.8) + "px"
        });
    };
    this.SetMaxCharacters = function (num) {
        this.textarea.attr("maxlength", num);
    };
    this.SetHeight = function (height) {
        this.textarea.css({
            "height": height
        });
    };
    this.SetWidth = function (width) {
        this.html.css({
            "width": width
        });
    };
    this.InFocus = function () {
        return $(this.textarea).is(":focus");
    };
    this.Focus = function () {
        this.textarea.trigger("focus");
    };
    this.DisableAutoSubmit = function () {
        this.submit_override_only = true;
    };
    this.Flash = function () {
        if (this.flash_disabled) {
            return;
        }
        if (!this.flash_highlight) {
            this.flash_highlight = $("<div></div>");
            this.flash_highlight.css({
                "border": (this.border_size * 2) + "px solid " + Dash.Color.Mobile.AccentSecondary,
                "position": "absolute",
                "inset": 0,
                "opacity": 0,
                "pointer-events": "none",
                "border-radius": this.border_radius
            });
            this.html.append(this.flash_highlight);
        }
        this.flash_highlight.css({
            "height": (this.textarea.outerHeight() || this.textarea.innerHeight() || this.textarea.height()) - (this.border_size * 4)
        });
        (function (self) {
            self.flash_highlight.stop().animate(
                {"opacity": 1},
                100,
                function () {
                    self.flash_highlight.stop().animate(
                        {"opacity": 0},
                        1000
                    );
                }
            );
        })(this);
    };
    this.AddLabel = function (text) {
        if (this.label) {
            return this.label;
        }
        this.label = $("<div>" + text + "</div>");
        this.label.css({
            "position": "absolute",
            "font-family": "sans_serif_bold",
            "font-size": "80%",
            "color": this.color.StrokeLight,
            "top": -Dash.Size.Padding * 0.8,
            "left": Dash.Size.Padding * 0.1
        });
        this.html.append(this.label);
        return this.label;
    };
    this.DisableFlash = function () {
        this.flash_disabled = true;
    };
    this.setup_connections = function () {
        // Important note:
        // When testing on a desktop's mobile view, you can't select the text with the
        // mouse in the traditional way, since it's simulating a mobile device. To select
        // the text, click and hold to simulate a long press like you would on mobile.
        (function (self) {
            self.textarea.on("change", function () {
                self.fire_change_cb();
            });
            self.textarea.on("input", function () {
                self.fire_change_cb();
            });
            self.textarea.on("paste", function () {
                self.fire_change_cb();
            });
            self.textarea.on("blur", function () {
                self.fire_change_cb(true);
            });
            self.textarea.on("keydown",function (e) {
                if (self.on_change_cb && (e.key === "ArrowLeft" || e.key === "ArrowRight")) {
                    self.last_arrow_navigation_ts = new Date();
                }
            });
        })(this);
    };
    this.fire_change_cb = function (submit_override=false) {
        if (!this.on_change_cb || (this.submit_override_only && !submit_override)) {
            return;
        }
        var value = this.GetText();
        if (!submit_override && this.last_change_value === value) {
            return;
        }
        this.last_change_value = value;
        if (submit_override || !this.delay_change_cb) {
            if (submit_override) {
                this.clear_change_timeout();
            }
            this.fire_on_change_cb(submit_override, value);
            return;
        }
        this.last_change_ts = new Date();
        this.clear_change_timeout();
        (function (self) {
            self.change_timeout = setTimeout(
                function () {
                    self._fire_change_cb();
                },
                self.change_delay_ms
            );
        })(this);
    };
    this.clear_change_timeout = function () {
        if (this.change_timeout) {
            clearTimeout(this.change_timeout);
            this.change_timeout = null;
        }
    };
    this._fire_change_cb = function () {
        var now = new Date();
        // Reset attempt if, after a change, the user navigated using the arrow keys during the time window
        if (this.last_arrow_navigation_ts !== null) {
            if (this.last_change_ts < this.last_arrow_navigation_ts < now) {
                if (now - this.last_arrow_navigation_ts < this.change_delay_ms) {
                    this.fire_change_cb();
                    return;
                }
            }
        }
        this.fire_on_change_cb(true);
    };
    this.fire_on_change_cb = function (flash=false, text="") {
        if (!this.on_change_cb) {
            return;
        }
        if (!text) {
            text = this.GetText();
        }
        if (flash) {
            this.Flash();
        }
        this.on_change_cb(text, this);
    };
    this.setup_styles();
}

function DashMobileCard (stack) {
    this.stack = stack;
    this.slider = null;
    this.pull_active = false;
    this.left_pull_icon = null;
    this.left_pull_area = null;
    this.right_pull_icon = null;
    this.right_pull_area = null;
    this.restoring_pull = false;
    this.color = this.stack.color;
    this.left_pull_callback = null;
    this.right_pull_callback = null;
    this.restoring_pull_start_x = 0;
    this.pull_mechanic_ready = false; // This is off by default since it requires more overhead
    this.last_touch_move_event = null;
    this.html = Dash.Gui.GetHTMLContext();
    this.content = Dash.Gui.GetHTMLContext();
    this.setup_styles = function () {
        this.html.css({
            "background": "none",
            "margin-bottom": Dash.Size.Padding,
            ...Dash.HardwareAccelerationCSS,
            "overflow": "visible"
        });
        this.content.css({
            "background": "white",
            "padding": Dash.Size.Padding,
            "border-radius": Dash.Size.BorderRadius,
            "box-shadow": "0px 6px 10px 1px rgba(0, 0, 0, 0.1), inset 0px 1px 1px 0px rgba(255, 255, 255, 0.5)",
            "color": this.color.Text,
            "margin-right": Dash.Size.Padding,
            "margin-left": Dash.Size.Padding
        });
        this.html.append(this.content);
    };
    this.AddHTML = function (html) {
        this.content.append(html);
    };
    this.AddLabel = function (text) {
        var label = $("<div>" + text + "</div>");
        label.css({
            "color": Dash.Color.Mobile.AccentPrimary,
            "font-family": "sans_serif_bold",
            "font-size": "120%",
            "margin-bottom": Dash.Size.Padding
        });
        this.AddHTML(label);
        return label;
    };
    this.AddButton = function (label_text, binder, callback) {
        var button = new Dash.Gui.Button(
            label_text,
            callback,
            binder,
            this.color,
            {"style": "toolbar"}
        );
        button.html.css({
            "margin-right": 0
        });
        this.AddHTML(button.html);
        return button;
    };
    this.AddButtonWithIcon = function (icon_name, label_text, callback, left_side_icon=false) {
        var button = new DashMobileCardStackFooterButton(this, icon_name, label_text, callback, left_side_icon);
        button.html.css({
            "margin-right": 0,
            "border-radius": Dash.Size.BorderRadius,
            "background": Dash.Color.Mobile.AccentPrimary
        });
        this.AddHTML(button.html);
        return button;
    };
    this.PullToDelete = function (callback) {
        this.SetLeftPullCallback(callback, "trash_solid");
    };
    this.SetLeftPullCallback = function (callback, icon_name) {
        this.left_pull_callback = callback;
        if (!this.pull_mechanic_ready) {
            this.setup_pull_mechanic();
        }
        this.left_pull_icon = icon_name;
    };
    this.SetRightPullCallback = function (callback, icon_name) {
        this.right_pull_callback = callback;
        if (!this.pull_mechanic_ready) {
            this.setup_pull_mechanic();
        }
        this.right_pull_icon = icon_name;
        if (this.right_pull_area) {
            this.right_pull_area.UpdateIcon(icon_name);
        }
    };
    this.SetText = function (text) {
        this.content.text(text);
    };
    // Animate the hiding of this card
    this.Clear = function () {
        this.html.stop().animate(
            {
                "opacity": 0,
                "height": 0,
                "padding-top": 0,
                "padding-bottom": 0,
                "margin-top": 0,
                "margin-bottom": 0
            },
            function () {
                this.remove();
            }
        );
    };
    // Prepare for a fancy show by shrinking the box. Wait until the next
    // frame to ensure we can calculate the destination height of the show.
    this.FancyShow = function () {
        this.html.css({
            "margin-bottom": 0,
            "height": 0,
            "overflow": "hidden"
        });
        (function (self) {
            requestAnimationFrame(function () {
                self._fancy_show();
            });
        })(this);
    };
    this.setup_slider = function () {
        this.slider = $("<div></div>");
        var content_width = this.content.width() + (Dash.Size.Padding * 2);
        var content_height = this.content.height() + (Dash.Size.Padding * 2);
        this.content.remove();
        this.setup_pull_icons();
        this.slider.css({
            "width": content_width,
            "height": content_height,
            "left": 0,
            "top": 0,
            "position": "absolute",
            ...Dash.HardwareAccelerationCSS,
            "margin-left": Dash.Size.Padding
        });
        this.content.css({
            "margin-right": 0,
            "margin-left": 0
        });
        this.html.css({
            "height": content_height
        });
        this.slider.append(this.content);
        this.html.append(this.slider);
    };
    this.setup_pull_icons = function () {
        if (this.left_pull_area) {
            return;
        }
        this.left_pull_area = new DashMobileCardPullIcon(this, this.left_pull_icon);
        this.right_pull_area = new DashMobileCardPullIcon(this, this.right_pull_icon);
        this.html.append(this.left_pull_area.html);
        this.html.append(this.right_pull_area.html);
    };
    this.position_pull_icons = function () {
        // var content_width = this.content.width() + (Dash.Size.Padding * 2);
        var content_height = this.content.height() + (Dash.Size.Padding * 2);
        this.left_pull_area.html.css({
            "left": Dash.Size.Padding,
            "top": (content_height * 0.5) - (this.left_pull_area.Size * 0.5),
            "opacity": 0
        });
        this.right_pull_area.html.css({
            "left": "auto",
            "right": Dash.Size.Padding,
            "top": content_height * 0.5 - (this.left_pull_area.Size * 0.5),
            "opacity": 0
        });
    };
    this.restore_slider_content = function () {
        this.content.remove();
        this.html.append(this.content);
        this.slider.remove();
        this.slider = null;
        this.html.css({
            "height": "auto"
        });
        this.content.css({
            "margin-right": Dash.Size.Padding,
            "margin-left": Dash.Size.Padding
        });
    };
    // this.get_coords_from_event = function (event) {
    //     for (var i in event.originalEvent["changedTouches"]) {
    //         var touch = event.originalEvent["changedTouches"][i];
    //
    //         return [touch.clientX, touch.clientY];
    //     }
    //
    //     return null;
    // };
    this.on_drag_start = function (event) {
        if (this.pull_active || this.restoring_pull) {
            return;
        }
        if (!this.slider) {
            this.setup_slider();
        }
        this.position_pull_icons();
        if (!event || !event.originalEvent || !event.originalEvent["changedTouches"] || !event.originalEvent["changedTouches"][0]) {
            this.pull_active = null;
        }
        this.pull_active = {
            "touch_start_x": event.originalEvent["changedTouches"][0].clientX,
            "touch_start_y": event.originalEvent["changedTouches"][0].clientY,
            "touch_now_x": event.originalEvent["changedTouches"][0].clientX,
            "touch_now_y": event.originalEvent["changedTouches"][0].clientY,
            "offset_x": this.html.offset()["left"],
            "offset_y": this.html.offset()["top"]
        };
    };
    this.on_drag = function (event) {
        if (!this.pull_active || this.restoring_pull) {
            return;
        }
        if (!event || !event.originalEvent || !event.originalEvent["changedTouches"] || !event.originalEvent["changedTouches"][0]) {
            console.warn("Warning: No touches found??");
            return;
        }
        this.pull_active["touch_now_x"] = event.originalEvent["changedTouches"][0].clientX;
        this.pull_active["touch_now_y"] = event.originalEvent["changedTouches"][0].clientY;
        var screen_px_moved_x = this.pull_active["touch_now_x"] - this.pull_active["touch_start_x"];
        // var screen_px_moved_y = this.pull_active["touch_now_y"] - this.pull_active["touch_start_y"];
        this.restoring_pull_start_x = screen_px_moved_x;
        var pulled_norm = Dash.Math.InverseLerp(0, $(window).width(), Math.abs(this.restoring_pull_start_x));
        if (this.restoring_pull_start_x > 0) {
            this.left_pull_area.OnDrag(pulled_norm);
        }
        else {
            this.right_pull_area.OnDrag(pulled_norm);
        }
        this.slider.css({
            "left": screen_px_moved_x
        });
    };
    this.on_drag_end = function () {
        if (!this.pull_active || this.restoring_pull) {
            return;
        }
        if (this.left_pull_callback && this.left_pull_area.IsTriggered) {
            this.left_pull_callback();
        }
        if (this.right_pull_callback && this.right_pull_area.IsTriggered) {
            this.right_pull_callback();
        }
        this.pull_active = null;
        this.restoring_pull = true;
        Dash.Animation.Start(
            Dash.Math.Lerp(  // Longer duration for a further pull
                300,
                1000,
                Dash.Math.InverseLerp(0, $(window).width(), Math.abs(this.restoring_pull_start_x))
            ),
            this.on_restore.bind(this),
            Dash.Animation.Curves.EaseOutBounce
        );
    };
    // This is the frame after this card was hidden
    this._fancy_show = function () {
        this.html.stop().css({
            "height": "auto",
            "margin-bottom": Dash.Size.Padding
        });
        var display_height = this.html.height();
        this.html.css({
            "height": 0,
            "margin-bottom": 0
        });
        this.html.animate(
            {
                "height": display_height,
                "margin-bottom": Dash.Size.Padding
            },
            550,
            function () {
                $(this).css({
                    "height": "auto"
                });
            }
        );
    };
    this.on_restore = function (t) {
        this.slider.css({
            "left": Dash.Math.Lerp(this.restoring_pull_start_x, 0, t)
        });
        if (t >= 1.0) {
            this.restoring_pull = false;
            this.restore_slider_content();
        }
    };
    this.manage_touch_start = function (event) {
        if (!event.cancelable || this.pull_active) {
            return;
        }
        // Reset this to ensure that if we do activate a pull and want
        // to use the positioning from this event, it's a fresh event
        this.last_touch_move_event = null;
        (function (self, event) {
            setTimeout(
                function () {
                    if (self.stack.GetScrollActive()) {
                        return;
                    }
                    if (self.last_touch_move_event) {
                        self.on_drag_start(self.last_touch_move_event);
                        self.last_touch_move_event.preventDefault();
                    }
                    else {
                        self.on_drag_start(event);
                    }
                    event.preventDefault();
                },
                150
            );
        })(this, event);
    };
    this.setup_pull_mechanic = function () {
        this.pull_mechanic_ready = true;
        this.html.css({
            "pointer-events": "auto"
        });
        (function (self) {
            self.html.on("touchstart", function (e) {
                self.manage_touch_start(e);
            });
            self.html.on("touchmove", function (e) {
                self.last_touch_move_event = e;
                self.on_drag(e);
                if (self.pull_active && e.cancelable) {
                    e.preventDefault();
                }
            });
            self.html.on("touchend", function (e) {
                self.on_drag_end(e);
                if (self.pull_active && e.cancelable) {
                    e.preventDefault();
                }
            });
            self.html.on("touchcancel", function (e) {
                self.on_drag_end(e);
                if (self.pull_active && e.cancelable) {
                    e.preventDefault();
                }
            });
        })(this);
    };
    this.setup_styles();
}

function DashMobileUserProfile (binder, on_exit_callback, user_data=null, context_logo_img_url="", include_refresh_button=true) {
    this.binder = binder;
    this.on_exit_callback = on_exit_callback.bind(binder);
    this.user_data = user_data || Dash.User.Data;
    this.context_logo_img_url = context_logo_img_url;
    this.include_refresh_button = include_refresh_button;
    this.html = null;
    this.stack = null;
    this.profile_button = null;
    this.color = this.binder.color || Dash.Color.Dark;
    this.setup_styles = function () {
        this.stack = new Dash.Mobile.CardStack(this);
        this.html = this.stack.html;
        this.setup_banner();
        this.add_user_settings_card();
        if (this.user_data["img"] && this.user_data["img"]["thumb_url"]) {
            this.user_banner.SetBackground(this.user_data["img"]["thumb_url"]);
        }
        this.add_context_logo_img();
    };
    this.setup_banner = function () {
        this.user_banner = this.stack.AddBanner();
        this.user_banner.SetMarginMode(7);
        this.user_banner.SetRightIcon("close", this.exit_stack.bind(this));
        this.user_banner.AddFooterIcon("log_out", "Log Out", this.log_user_out.bind(this));
        if (this.include_refresh_button) {
            this.user_banner.AddFooterIcon(
                "refresh",
                "Refresh App",
                function () {
                    location.reload();
                }
            );
        }
        this.user_banner.header_row.right_icon.AddShadow("1px 1px 3px rgba(0, 0, 0, 1)");
        this.profile_button = this.user_banner.AddFooterIcon("image", "Change Profile", this.on_profile_changed.bind(this));
        this.profile_button.AddUploader(
            this,
            this.on_user_img_uploaded,
            "Users",
            {
                "f": "upload_image",
                "user_data": JSON.stringify(this.get_data())
            }
        );
    };
    this.add_context_logo_img = function () {
        if (!this.context_logo_img_url) {
            return;
        }
        var image = $("<div></div>");
        image.css({
            "height": Dash.Size.RowHeight * 2,
            "margin-top": Dash.Size.Padding,
            "background-image": "url(" + this.context_logo_img_url + ")",
            "background-repeat": "no-repeat",
            "background-size": "contain",
            "background-position": "center"
        });
        this.stack.AddHTML(image);
    };
    this.on_user_img_uploaded = function (response) {
        if (response.timeStamp) {
            return;
        }
        console.log("User image uploaded:", response);
        if (!response["img"]) {
            return;
        }
        this.user_data["img"] = response["img"];
        this.user_banner.SetBackground(this.user_data["img"]["thumb_url"]);
    };
    this.add_user_settings_card = function () {
        var card = this.stack.AddCard();
        card.AddLabel("User Settings");
        this.add_input(card, "first_name");
        this.add_input(card, "last_name");
        this.add_input(card, "email", false);
        this.add_input(card, "password");
    };
    this.add_input = function (card, key, can_edit=true) {
        var text_box = (function (self) {
            return new Dash.Mobile.TextBox(
                self.color,
                key === "password" ? "Update Password" : key.Title(),
                this,
                function (value, text_box) {
                    self.set_data(key, value, text_box);
                },
                true
            );
        })(this);
        text_box.SetText(this.get_data()[key]);
        text_box.StyleAsRow();
        if (key.includes("password")) {
            text_box.DisableAutoSubmit();
        }
        if (!can_edit) {
            text_box.Lock();
        }
        card.AddHTML(text_box.html);
    };
    this.log_user_out = function () {
        Dash.Logout();
    };
    this.exit_stack = function () {
        if (this.on_exit_callback) {
            this.on_exit_callback();
        }
    };
    this.get_data = function () {
        return this.user_data;
    };
    this.set_data = function (key, value, text_box) {
        var email = this.get_data()["email"];
        var params = {
            "f": "set_property",
            "key": key,
            "value": value,
            "obj_id": email
        };
        if (key.includes("password")) {
            params["f"] = "update_password";
            params["p"] = value;
            params["email"] = email;
        }
        (function (self) {
            Dash.Request(
                self,
                function (response) {
                    Dash.Validate.Response(response);
                    console.log("User settings updated:", response);
                    if (params["f"] === "update_password") {
                        text_box.SetText("");
                    }
                },
                "Users",
                params
            );
        })(this);
    };
    this.on_profile_changed = function () {
        // Dummy/placeholder function
    };
    this.setup_styles();
}

function DashMobileSearchableCombo (color=null, options={}, placeholder_text="", binder=null, on_submit_cb=null, on_change_cb=null) {
    this.color = color || (binder && binder.color ? binder.color : Dash.Color.Light);
    this.options = options;  // Format: {id: label}
    this.placeholder_text = placeholder_text;
    this.binder = binder;
    this.on_submit_cb = binder && on_submit_cb ? on_submit_cb.bind(binder) : on_submit_cb;
    this.on_change_cb = binder && on_change_cb ? on_change_cb.bind(binder) : on_change_cb;
    this.label = null;
    this.disabled = false;
    // this.option_rows = [];
    this.clear_button = null;
    this.html = $("<div></div>");
    this.id = "DashMobileSearchableCombo_" + Dash.Math.RandomID();
    this.datalist = $("<datalist></datalist", {"id": this.id});
    this.input = $(
        "<input/>",
        {
            "list": this.id,
            "class": this.color.PlaceholderClass,
            "placeholder": this.placeholder_text,
            "inputmode": "search"
        }
    );
    this.setup_styles = function () {
        var shared_css = {
            "box-sizing": "border-box",
            "color": this.color.Text,
            "border-radius": Dash.Size.BorderRadius * 0.5
        };
        this.html.css({
            "height": Dash.Size.RowHeight,
            "border": "1px solid " + this.color.Stroke,
            "padding-left": Dash.Size.Padding * 0.5,
            "padding-right": Dash.Size.Padding * 0.5,
            ...shared_css
        });
        this.input.css({
            "height": Dash.Size.RowHeight - 2,  // Account for border
            ...shared_css
        });
        this.set_width("100%", true);
        this.add_options();
        this.html.append(this.datalist);
        this.html.append(this.input);
        this.setup_connections();
    };
    this.GetID = function (allow_none=true) {
        var label = this.GetLabel();
        for (var id in this.options) {
            if (this.options[id].toString().toLowerCase() === label.toString().toLowerCase()) {
                if (id === "none" && !allow_none) {
                    return null;
                }
                return id;
            }
        }
        return null;
    };
    this.GetLabel = function () {
        return this.input.val();
    };
    this.SetLabel = function (text) {
        this.input.val(text);
    };
    this.SetLabelByID = function (id) {
        if (!(id in this.options)) {
            console.warn("ID not in options:", id);
            return;
        }
        this.SetLabel(this.options[id]);
    };
    this.GetOptions = function () {
        return this.options;
    };
    this.SetOptions = function (options={}) {
        this.datalist.empty();
        this.options = options;
        this.add_options();
    };
    this.AddOption = function (id, label, _check=true) {
        if (_check && this.options[id]) {
            return;
        }
        this.options[id] = label;
        // Unlike the select element, the datalist does not allow option elements
        // to contain both a value and a label, so for us to get the ID after a
        // selection is made, we loop through the options and match the current value (label)
        var row = $("<option></option>",{"value": label});
        row.css({
            "height": Dash.Size.RowHeight
        });
        // this.option_rows.push(row);
        this.datalist.append(row);
    };
    this.EnableResetInvalidOnBlur = function () {
        (function (self) {
            self.input.on("blur", function () {
                if (!self.GetID()) {
                    self.input.val("");
                }
            });
        })(this);
    };
    this.AddLabel = function (text) {
        if (this.label) {
            return this.label;
        }
        this.label = $("<div>" + text + "</div>");
        this.label.css({
            "position": "absolute",
            "font-family": "sans_serif_bold",
            "font-size": "80%",
            "color": this.color.StrokeLight,
            "top": -Dash.Size.Padding * 0.8,
            "left": Dash.Size.Padding * 0.1
        });
        this.html.append(this.label);
        return this.label;
    };
    this.AddClearButton = function () {
        if (this.clear_button) {
            return this.clear_button;
        }
        (function (self) {
            self.clear_button = new Dash.Gui.IconButton(
                "close_circle",
                function () {
                    self.SetLabel("");
                    requestAnimationFrame(function () {
                        self.input.trigger("focus");
                        self.input.trigger("click");
                    });
                },
                self,
                self.color,
                {
                    "container_size": Dash.Size.RowHeight,
                    "size_mult": 0.6
                }
            );
        })(this);
        this.clear_button.SetIconColor(Dash.Color.Mobile.AccentPrimary);
        this.clear_button.html.css({
            "position": "absolute",
            "top": 0,
            "right": -(Dash.Size.Padding * 1.9)
        });
        this.set_width("calc(100% - " + (Dash.Size.Padding * 1.4) + "px)");
        this.html.append(this.clear_button.html);
        return this.clear_button;
    };
    // There might be a better way to do this for a datalist element, but
    // this is a quick thing for now since I have limited time
    // - maybe update later, maybe not a big deal
    this.Disable = function () {
        if (this.disabled) {
            return;
        }
        this.disabled = true;
        this.html.css({
            "opacity": 0.5,
            "pointer-events": "none",
            "user-select": "none"
        });
    };
    this.Enable = function () {
        if (!this.disabled) {
            return;
        }
        this.disabled = false;
        this.html.css({
            "opacity": 1,
            "pointer-events": "auto",
            "user-select": "auto"
        });
    };
    this.set_width = function (width, set_input=false, min_width=null, max_width=null) {
        var css = {
            "width": width,
            "min-width": min_width || width,
            "max-width": max_width || width
        };
        this.html.css(css);
        if (set_input) {
            this.input.css(css);
        }
    };
    this.add_options = function () {
        for (var id in this.options) {
            this.AddOption(id, this.options[id], false);
        }
    };
    this.setup_connections = function () {
        (function (self) {
            self.input.on("change", function () {
                // Since this is linked to the datalist, the change event only triggers
                // when a selection is made, whether that's by clicking an option or
                // typing an option and selecting it using the arrow keys and enter key
                if (self.on_submit_cb) {
                    var id = self.GetID();
                    if (id) {
                        self.on_submit_cb(id);
                    }
                }
            });
            self.input.on("input", function () {
                if (self.on_change_cb) {
                    self.on_change_cb(self.GetLabel());
                }
            });
            self.input.on("click", function (event, reclick=false) {
                if (reclick) {
                    // Force redraw of datalist
                    // self.option_rows.Last().detach();
                    //
                    // requestAnimationFrame(function () {
                    //     self.datalist.append(self.option_rows.Last());
                    // });
                    return;
                }
                setTimeout(
                    function () {
                        // If the list is long, the list will cover the virtual keyboard unless re-clicked after initial draw
                        self.input.trigger("focus");
                        self.input.trigger("click", [true]);
                    },
                    300
                );
            });
        })(this);
    };
    this.setup_styles();
}

function DashMobileCardPullIcon (card, icon_name) {
    this.card = card;
    this.icon_name = icon_name;
    this.icon = null;
    this.IsTriggered = false;
    this.stack = this.card.stack;
    this.color = this.stack.color;
    this.Size = Dash.Size.ButtonHeight;
    this.html = Dash.Gui.GetHTMLAbsContext();
    this.setup_styles = function () {
        this.html.css({
            "background": "green",  // TODO?
            "width": this.Size,
            "height": this.Size,
            "left": 0,
            "top": 0,
            "right": "auto",
            "bottom": "auto",
            "opacity": 0,
            "pointer-events": "none",
            "border-radius": this.Size * 0.5
        });
        this.add_icon();
    };
    this.UpdateIcon = function (icon_name="") {
        if (icon_name) {
            this.icon_name = icon_name;
            if (this.icon) {
                this.icon.SetIcon(this.icon_name);
            }
            else {
                this.add_icon();
            }
        }
        else {
            this.icon.html.remove();
            this.icon = null;
        }
    };
    this.OnDrag = function (norm_t) {
        var color = "rgb(130, 130, 130)";
        if (this.IsTriggered && norm_t < 0.4) {
            this.IsTriggered = false;
        }
        if (!this.icon) {
            return;
        }
        var px_pulled = Dash.Math.Lerp(0, $(window).width(), norm_t);
        var px_max = this.Size + (Dash.Size.Padding * 0.5);
        if (px_pulled > px_max) {
            norm_t = 1.0;
            color = Dash.Color.Mobile.AccentPrimary;
            this.IsTriggered = true;
        }
        else {
            norm_t = Dash.Math.InverseLerp(0.0, px_max, px_pulled);
        }
        this.html.css({
            "opacity": norm_t,
            "background": color
        });
    };
    this.add_icon = function () {
        if (!this.icon_name || this.icon) {
            return;
        }
        this.icon = new Dash.Gui.Icon(this.color, this.icon_name, this.Size, 0.5, "white");
        this.html.append(this.icon.html);
    };
    this.setup_styles();
}

function DashMobileCardStack (binder, color=null) {
    this.binder = binder;
    this.color = color || this.binder.color || Dash.Color.Dark;
    this.width = 0;
    this.frame = 0;
    this.height = 0;
    this.cards = [];
    this.slider = null;
    this.banner = null;
    this.anim_duration = 250;
    this.left_content = null;
    this.footer_buttons = [];
    this.footer_spacer = null;
    this.right_content = null;
    this.banner_fixed = false;  // By default, the banner scrolls with the rest of the content
    this.banner_spacer = null;
    this.touch_active = false;
    this.content_elements = [];
    this.center_content = null;
    this.center_scroll_top = 0;
    this.active_panel_index = 1;  // Center
    this.backing_gradient = null;
    this.panel_offsets = [0, 0, 0];
    this.footer_button_overlay = null;
    this.vertical_scroll_active = false;
    this.vertical_scroll_timer_id = null;
    this.html = Dash.Gui.GetHTMLAbsContext();
    this.footer_overlay_width_padding = Dash.Size.Padding * 0.5;
    this.iphone_standalone = /iPhone/i.test(navigator.userAgent) && Dash.IsMobileFromHomeScreen;
    this.footer_height = Dash.Size.ButtonHeight + (this.iphone_standalone ? Dash.Size.Padding * 0.5 : 0);
    this.setup_styles = function () {
        this.slider = $("<div></div>");
        this.slider.css({
            "position": "absolute",
            "left": 0,
            "top": 0,
            ...Dash.HardwareAccelerationCSS
        });
        this.left_content = this.make_content_panel();
        this.center_content = this.make_content_panel();
        this.right_content = this.make_content_panel();
        this.center_content.css({
            "display": "block"
        });
        this.html.css({
            "color": this.color.Text,
            "overflow": "hidden",
            "overflow-y": "auto",
            "background": this.color.Background,
            ...Dash.HardwareAccelerationCSS
        });
        this.setup_connections();
        this.html.append(this.slider);
        Dash.OnHTMLResized(this, this.on_resized);
        this.on_resized(window.innerWidth, window.innerHeight);
    };
    this.setup_connections = function () {
        (function (self) {
            self.center_content.scroll(function () {
                self.on_center_scroll();
            });
            self.slider.on("touchstart", function () {
                self.touch_active = true;
            });
            self.slider.on("touchmove", function () {
                self.touch_active = true;
            });
            self.slider.on("touchend", function () {
                self.touch_active = false;
                if (!self.vertical_scroll_timer_id) {
                    self.set_scroll_active(false);
                }
            });
            self.slider.on("touchcancel", function () {
                self.touch_active = false;
                if (!self.vertical_scroll_timer_id) {
                    self.set_scroll_active(false);
                }
            });
        })(this);
    };
    this.GetScrollTop = function () {
        return this.center_scroll_top;
    };
    this.GetScrollActive = function () {
        return this.vertical_scroll_active;
    };
    this.AddBanner = function () {
        if (this.banner) {
            console.error("Error: Stack.AddBanner() >> A banner already exists!");
            return this.banner;
        }
        this.banner = new DashMobileCardStackBanner(this);
        this.AddHTML(this.banner.html, false);
        return this.banner;
    };
    // When is_fixed is true, the banner does not scroll with the rest of the content on the page
    this.SetFixedBanner = function (is_fixed) {
        if (is_fixed) {
            this.fix_banner_on_top();
        }
        else {  // TODO?
            console.warn("Warning: Stack.SetFixedBanner(false) >> This is not implemented yet!");
        }
    };
    this.AddCard = function (prepend=false) {
        var existing_card;
        var card = new DashMobileCard(this);
        if (!this.cards.length && this.banner) {
            if (!this.banner.header_row && !this.banner.footer_row) {
                card.html.css({
                    "margin-top": Dash.Size.Padding
                });
            }
        }
        if (prepend && Dash.Validate.Object(this.cards)) {
            for (existing_card of this.cards) {
                existing_card.html.detach();
            }
        }
        this.AddHTML(card.html);
        if (prepend && Dash.Validate.Object(this.cards)) {
            for (existing_card of this.cards) {
                this.center_content.append(existing_card.html);
            }
        }
        this.cards.push(card);
        return card;
    };
    this.RemoveCard = function (card) {
        this.cards.Remove(card);
        card.html.remove();
        return null;
    };
    this.AddUserBanner = function (include_refresh_button=true) {
        var banner = new DashMobileCardStackUserBanner(this, include_refresh_button);
        this.AddHTML(banner.html, false);
        return banner;
    };
    this.AddHTML = function (html, add_to_content_elements=true) {
        html.css({
            ...Dash.HardwareAccelerationCSS
        });
        this.center_content.append(html);
        if (add_to_content_elements) {
            this.content_elements.push(html);
        }
        if (this.footer_spacer) {
            this.center_content.append(this.footer_spacer);
        }
    };
    this.EmptyContent = function () {
        for (var element of this.content_elements) {
            element.remove();
        }
        this.cards = [];
        this.content_elements = [];
    };
    // DEPRECATED in favor of AddHTML to stay consistent with that naming across Dash
    this.AppendHTML = function (html) {
        this.AddHTML(html);
    };
    this.AddLeftContent = function (html) {
        // if (this.banner_fixed) {
        //     console.log("AddLeftContent >> This banner is fixed, it needs to be re-attached before transition!");
        // };
        if (this.active_panel_index === 0) {
            console.warn("The left panel is already loaded");
        }
        html.css({
            ...Dash.HardwareAccelerationCSS
        });
        this.left_content.empty();
        this.left_content.append(html);
        this.slide_to_index(0);
    };
    this.ShowCenterContent = function () {
        // if (this.banner_fixed) {
        //     console.log("ShowCenterContent >> This banner is fixed, it needs to be re-attached before transition!");
        // };
        this.slide_to_index(1);
    };
    this.AddFooterOverlay = function () {
        this.create_footer_overlay();
    };
    this.AddRightContent = function (html) {
        // if (this.banner_fixed) {
        //     console.log("AddRightContent >> This banner is fixed, it needs to be re-attached before transition!");
        //
        //     this.unfix_banner_on_top();
        // };
        if (this.active_panel_index === 2) {
            console.warn("The right panel is already loaded");
        }
        html.css({
            ...Dash.HardwareAccelerationCSS
        });
        this.right_content.empty();
        this.right_content.append(html);
        this.slide_to_index(2);
    };
    this.AddFooterButton = function (icon_name, label_text, callback, left_side_icon=false, icon_only=false) {
        if (!this.footer_button_overlay) {
            this.create_footer_overlay();
        }
        var button = new DashMobileCardStackFooterButton(this, icon_name, label_text, callback, left_side_icon, icon_only);
        this.footer_buttons.push(button);
        this.footer_button_overlay.append(button.html);
        if (icon_only && this.footer_overlay_width_padding !== Dash.Size.Padding) {
            this.footer_button_overlay.css({
                "justify-content": "space-between",
                "overflow": "hidden",
                "padding-right": Dash.Size.Padding * 0.5
            });
            this.footer_overlay_width_padding = Dash.Size.Padding;
            this.set_footer_overlay_size();
        }
        return button;
    };
    this.reset_scroll_timer = function () {
        this.vertical_scroll_timer_id = null;
        if (!this.touch_active) {
            this.set_scroll_active(false);
        }
    };
    this.set_scroll_active = function (scrolling_is_active) {
        this.vertical_scroll_active = scrolling_is_active;
        // if (this.vertical_scroll_active) {
        //     this.center_content.css("background", "red");
        // }
        // else {
        //     this.center_content.css("background", "none");
        // };
    };
    this.on_center_scroll = function () {
        this.center_scroll_top = this.center_content.scrollTop();
        this.set_scroll_active(true);
        if (this.vertical_scroll_timer_id) {
            clearTimeout(this.vertical_scroll_timer_id);
            this.vertical_scroll_timer_id = null;
        }
        (function (self) {
            self.vertical_scroll_timer_id = setTimeout(
                function () {
                    self.reset_scroll_timer();
                },
                300
            );
        })(this);
        if (!this.banner_fixed) {
            return;
        }
        var banner_height = this.banner.html.height();
        this.banner_spacer.css("height", banner_height);
        this.banner.OnScroll(this.center_scroll_top);
    };
    this.on_resized = function (width, height) {
        this.panel_offsets = [0, -width, -width * 2];
        this.slider.css({
            "width": width * 3,
            "height": height,
            "left": this.panel_offsets[this.active_panel_index]
        });
        this.left_content.css({
            "left": 0,
            "width": width,
            "height": height
        });
        this.center_content.css({
            "left": width,
            "width": width,
            "height": height
        });
        this.right_content.css({
            "left": width * 2,
            "width": width,
            "height": height
        });
        this.width = width;
        this.height = height;
        if (this.footer_button_overlay) {
            this.set_footer_overlay_size();
        }
        if (this.banner_fixed) {
            this.set_fixed_banner_size();
            this.on_center_scroll();
        }
    };
    this.make_content_panel = function () {
        var content = $("<div></div>");
        content.css({
            "position": "absolute",
            "left": 0,
            "top": 0,
            "text-align": "center",
            "color": this.color.Text,
            "overflow-y": "auto",
            ...Dash.HardwareAccelerationCSS,
            "background": "none",
            "display": "none",
            // "margin-left": Dash.Size.Padding * 4,
            // "margin-right": Dash.Size.Padding
        });
        this.slider.append(content);
        return content;
    };
    this.fix_banner_on_top = function () {
        if (this.banner_fixed || !this.banner) {
            return;
        }
        this.banner_fixed = true;
        this.set_fixed_banner_size();
        // this.html.append(this.banner.html);
        this.slider.append(this.banner.html);
        // You should never see this, but it allows the window to scroll correctly
        this.banner_spacer = $("<div></div>");
        this.banner_spacer.css({
            "height": this.banner.html.height()
        });
        this.center_content.prepend(this.banner_spacer);
        // Wait until the next frame to force on_center_scroll since if this was called
        // as part of the constructor, it will not yet be attached and have no height
        (function (self) {
            requestAnimationFrame(function () {
                self.on_center_scroll();
            });
        })(this);
    };
    this.create_footer_overlay = function () {
        this.footer_button_overlay = Dash.Gui.GetHTMLAbsContext(
            "",
            this.color,
            {
                "display": "flex",
                "top": "auto",
                "color": "white",
                "box-shadow": "0px 0px 20px 1px rgba(0, 0, 0, 0.2)",
                "padding-left": Dash.Size.Padding * 0.5,
                // This prevents cut-off from the rounded corners of the modern iPhone screen, which are only problematic on the bottom
                "padding-bottom": this.iphone_standalone ? Dash.Size.Padding * 0.5 : 0
            }
        );
        this.set_footer_overlay_size();
        this.slider.append(this.footer_button_overlay);
        // You should never see this, but it allows the window to scroll correctly
        // without having to add padding/margin for the lower button content
        this.footer_spacer = $("<div></div>");
        this.footer_spacer.css({
            "height": this.footer_height
        });
        this.center_content.append(this.footer_spacer);
    };
    this.set_footer_overlay_size = function () {
        this.footer_button_overlay.css({
            "position": "fixed",
            "height": this.footer_height,
            "line-height": this.footer_height + "px",
            "bottom": 0,
            "left": this.width,
            "width": this.width - this.footer_overlay_width_padding,
            "right": "auto"
        });
    };
    this.set_fixed_banner_size = function () {
        this.banner.html.css({
            "position": "fixed",
            "top": 0,
            "left": this.width,
            "width": this.width,
            "right": "auto"
        });
    };
    this.slide_to_index = function (target_index) {
        var backing_opacity = 0;
        if (target_index === 0) {  // Left
            this.left_content.css({"display": "block", "opacity": 1});
            this.right_content.stop().animate({"opacity":   0}, this.anim_duration);
            this.center_content.stop().animate({"opacity": 0}, this.anim_duration);
        }
        else if (target_index === 2) {  // Right
            this.right_content.css({"display": "block", "opacity": 1});
            this.left_content.stop().animate({"opacity":   0}, this.anim_duration);
            this.center_content.stop().animate({"opacity": 0}, this.anim_duration);
        }
        else {  // Center
            this.center_content.css({"display": "block", "opacity": 1});
            this.left_content.stop().animate({"opacity":  0}, this.anim_duration);
            this.right_content.stop().animate({"opacity": 0}, this.anim_duration);
            backing_opacity = 1;
        }
        if (target_index === 1) {  // Make sure to show header and footer
            if (this.footer_button_overlay) {
                this.footer_button_overlay.stop().animate({"opacity": 1}, this.anim_duration * 0.25);
            }
            if (this.banner_fixed) {
                this.banner.html.stop().animate({"opacity": 1}, this.anim_duration * 0.25);
            }
        }
        else {  // Make sure to hide header and footer
            if (this.footer_button_overlay) {
                this.footer_button_overlay.stop().animate({"opacity": 0}, this.anim_duration * 1.5);
            }
            if (this.banner_fixed) {
                this.banner.html.stop().animate({"opacity": 0}, this.anim_duration * 1.5);
            }
        }
        (function (self) {
            self.slider.stop().animate(
                {"left": self.panel_offsets[target_index]},
                self.anim_duration,
                function () {
                    self.cleanup_hidden_panels();
                }
            );
            if (self.backing_gradient) {
                self.backing_gradient.stop().animate({"opacity": backing_opacity}, self.anim_duration);
            }
        })(this);
        this.active_panel_index = target_index;
    };
    this.reset_center_column = function () {
        this.slide_to_index(1);
    };
    this.cleanup_hidden_panels = function () {
        if (this.active_panel_index === 0) {  // Left is visible
            this.center_content.css({"display": "none"});
            this.right_content.css({"display": "none"});
        }
        else if (this.active_panel_index === 2) {  // Center is visible
            this.left_content.css({"display": "none"});
            this.center_content.css({"display": "none"});
        }
        else {  // Right is visible
            this.left_content.css({"display": "none"});
            this.right_content.css({"display": "none"});
        }
    };
    this.setup_styles();
}

function DashMobileCardStackFooterButton (stack, icon_name, label_text="", callback=null, left_side_icon=false, icon_only=false) {
    this.stack = stack;
    this.icon_name = icon_name;
    this.label_text = label_text;
    this.callback = callback;
    this.left_side_icon = left_side_icon;
    this.icon_only = icon_only;
    this.icon = null;
    this.label = null;
    this.icon_size = null;
    this.click_active = false;
    this.color = this.stack.color;
    this.html = Dash.Gui.GetHTMLContext();
    this.icon_circle = Dash.Gui.GetHTMLAbsContext();
    this.height = Dash.Size.ButtonHeight - (Dash.Size.Padding * (this.icon_only ? 0.4 : 1));
    this.setup_styles = function () {
        var css = {
            "height": this.height,
            "width": this.icon_only ? this.height : "auto",
            "background": this.icon_only ? "none" : Dash.Color.Mobile.ButtonGradient,
            "margin-top": Dash.Size.Padding * (this.icon_only ? 0.2 : 0.5),
            "margin-bottom": Dash.Size.Padding * 0.5,
            "margin-right": Dash.Size.Padding * (this.icon_only ? 0.25 : 0.5),
            "line-height": this.height + "px",
            "border-radius": this.height
        };
        if (this.icon_only) {
            css["margin-left"] = Dash.Size.Padding * 0.25;
        }
        else {
            css["flex-grow"] = 1;
        }
        this.html.css(css);
        this.add_icon();
        this.add_label();
        this.setup_connections();
    };
    this.add_icon = function () {
        this.icon_size = this.height - (Dash.Size.Padding * (this.icon_only ? 0.25 : 0.5));
        this.icon = new Dash.Gui.Icon(
            this.color,
            icon_name,
            this.icon_size,
            this.icon_only ? 0.65 : 0.75,
            Dash.Color.Mobile.AccentPrimary
        );
        this.icon.AddShadow("0px 2px 3px rgba(0, 0, 0, 0.2)");
        var css = {
            "background": "rgb(250, 250, 250)",
            "height": this.icon_size,
            "width": this.icon_size,
            "border-radius": this.icon_size * 0.5,
            "box-shadow": (this.icon_only ? "0px 0px 7px 2px rgba(0, 0, 0, 0.35)" : "0px 6px 10px 1px rgba(0, 0, 0, 0.1)") +
                ", inset 0px 2px 2px 0px rgba(255, 255, 255, 1)"
        };
        if (this.icon_only) {
            css["inset"] = 0;
            css["top"] = (this.height - this.icon_size) * 0.5;
            css["left"] = (this.height - this.icon_size) * 0.5;
        }
        else {
            css["left"] = this.left_side_icon ? Dash.Size.Padding * 0.25 : "auto";
            css["top"] = Dash.Size.Padding * 0.25;
            css["right"] = this.left_side_icon ? "auto" : Dash.Size.Padding * 0.25;
            css["bottom"] = "auto";
        }
        this.icon_circle.css(css);
        this.icon_circle.append(this.icon.html);
        this.html.append(this.icon_circle);
    };
    this.add_label = function () {
        if (this.icon_only) {
            return;
        }
        this.label = Dash.Gui.GetHTMLAbsContext();
        var label_css = {
            "height": this.height,
            "line-height": this.height + "px",
            "background": "none",
            "white-space": "nowrap",
            "overflow": "hidden",
            "text-overflow": "ellipsis",
            "color": "white"
        };
        label_css["margin-" + (this.left_side_icon ? "left" : "right")] = this.height - (Dash.Size.Padding * 0.5);
        label_css["padding-" + (this.left_side_icon ? "right" : "left")] = this.height - (Dash.Size.Padding * 0.5);
        this.label.css(label_css);
        this.label.text(this.label_text);
        this.html.append(this.label);
    };
    this.setup_connections = function () {
        (function (self) {
            self.html.on("mousedown", function (event) {
                self.on_button_clicked();
                event.preventDefault();
                return false;
            });
        })(this);
    };
    // Button presses have a short timeout to prevent accidental multiple taps
    this.on_button_clicked = function () {
        if (this.click_active) {
            return;
        }
        if (this.callback) {
            this.callback();
        }
        else {
            console.error("Error: No callback associated with button!");
        }
        this.click_active = true;
        (function (self) {
            setTimeout(
                function () {
                    self.click_active = false;
                },
                750
            );
        })(this);
    };
    this.SetNotificationActive = function (is_active) {
        if (is_active && !this.notification_icon) {
            this.create_notification_icon();
        }
        if (!is_active && this.notification_icon) {
            this.notification_icon.remove();
            this.notification_icon = null;
        }
    };
    this.create_notification_icon = function () {
        this.notification_icon = Dash.Gui.GetMobileNotificationIcon(this.height * 0.25);
        this.html.append(this.notification_icon);
    };
    this.setup_styles();
}

function DashMobileCardStackBanner (stack) {
    this.stack = stack;
    this.headline = null;
    this.footer_row = null;
    this.header_row = null;
    this.last_sizing_mode = -1;
    this.skirt_bottom_rest = 0;
    this.color = this.stack.color;
    this.margin_mode_override = null;
    this.content = $("<div></div>");
    this.html = Dash.Gui.GetHTMLContext();
    this.background_skirt = $("<div></div>");
    this.HeaderHeight = Dash.Size.ButtonHeight;
    this.FooterHeight = Dash.Size.ButtonHeight * 2;
    this.FooterButtonWidth = Dash.Size.ButtonHeight + Dash.Size.Padding;
    this.setup_styles = function () {
        this.headline = new DashMobileCardStackBannerHeadline(this);
        this.html.css({
            "background": "none",
            "pointer-events": "none"
        });
        this.background_skirt.css({
            "background": "orange",
            "position": "absolute",
            "left": 0,
            "right": 0,
            "top": 0,
            "pointer-events": "none",
            "display": "none"
        });
        this.content.append(this.headline.html);
        this.html.append(this.background_skirt);
        this.html.append(this.content);
        // Default
        this.SetBackground(Dash.Color.Mobile.BackgroundGradient);
    };
    this.SetBackground = function (html_color_or_url) {
        if (!html_color_or_url || html_color_or_url === "none") {
            this.background_skirt.css({
                "display": "none",
                "background": "none"
            });
            return;
        }
        if (html_color_or_url.includes("http")) {
            this.background_skirt.css({
                "display": "block",
                "background": "#000",
                "background-image": "url(" + html_color_or_url + ")",
                "background-size": "cover",
                "background-position": "center"
            });
        }
        else {
            this.background_skirt.css({
                "display": "block",
                "background": html_color_or_url
            });
        }
    };
    this.SetHeadlineText = function (text_primary, text_secondary="") {
        this.headline.SetHeadlineText(text_primary, text_secondary);
        this.adjust_margins();
    };
    this.SetLeftIcon = function (icon_name, callback) {
        this.assert_header_row();
        this.header_row.SetLeftIcon(icon_name, callback);
    };
    this.SetRightIcon = function (icon_name, callback) {
        this.assert_header_row();
        this.header_row.SetRightIcon(icon_name, callback);
    };
    // When is_fixed is true, the banner does not scroll with the rest of the content on the page
    this.SetFixed = function (is_fixed) {
        this.stack.SetFixedBanner(is_fixed);
    };
    this.AddFooterIcon = function (icon_name, label_text, callback=null) {
        this.assert_footer_row();
        return this.footer_row.AddIcon(icon_name, label_text, callback);
    };
    this.OnScroll = function (scroll_top) {
        var scroll_norm = 1; // Scrolled past the banner
        // var footer_row_height = 0;
        var current_height = this.html.height();
        var scroll_max = current_height * 0.5;
        if (scroll_top <= scroll_max) {
            scroll_norm = scroll_top / scroll_max;
        }
        scroll_norm = Dash.Animation.Curves.EaseOut(scroll_norm);
        // if (this.footer_row) {
        //     footer_row_height = this.footer_row.row_height;
        // }
        // var scroll_norm = scroll_top / current_height;
        // var max_offset = current_height + footer_row_height;
        var headline_offset = 0;
        if (this.headline) {
            headline_offset = this.headline.GetHeight();
            this.headline.OnScroll(scroll_norm);
        }
        if (this.footer_row) {
            this.footer_row.OnScroll(scroll_norm, headline_offset);
        }
        if (this.background_skirt) {
            var shadow_opacity = scroll_norm * 0.7;
            this.background_skirt.css({
                "bottom": Dash.Math.Lerp(-this.skirt_bottom_rest, headline_offset, scroll_norm),
                "box-shadow": "0px 0px 40px 1px rgba(0, 0, 0, " + shadow_opacity + ")"
            });
        }
    };
    this.SetMarginMode = function (mode, save=true) {
        if (save) {
            this.margin_mode_override = mode;
        }
        this.set_margins(mode);
    };
    // Create the header row if it doesn't exist yet
    this.assert_header_row = function () {
        if (this.header_row) {
            return;
        }
        this.header_row = new DashMobileCardStackBannerTopButtonRow(this);
        this.content.prepend(this.header_row.html);
        this.adjust_margins();
    };
    // Create the footer row if it doesn't exist yet
    this.assert_footer_row = function () {
        if (this.footer_row) {
            return;
        }
        this.footer_row = new DashMobileCardStackBannerFooterButtonRow(this);
        this.content.append(this.footer_row.html);
        this.adjust_margins();
    };
    this.adjust_margins = function () {
        if (this.margin_mode_override !== null) {
            this.SetMarginMode(this.margin_mode_override);
            return;
        }
        if (this.header_row) {
            if (this.footer_row) {
                this.SetMarginMode(2, false);
            }
            else {
                this.SetMarginMode(1, false);
            }
        }
        else if (this.footer_row) {
            this.SetMarginMode(3, false);
        }
        else {
            this.SetMarginMode(0, false);
        }
    };
    this.set_margins = function (mode) {
        if (mode === this.last_sizing_mode) {
            return;
        }
        // Default/auto modes:
        //  0: No header or footer
        //  1: Header only
        //  2: Header and footer
        //  3: Footer only
        // No-overlap/manual modes (useful when abs-filling the content area)
        //  4: Slim version of mode 0
        //  5: Slimmer version of mode 0
        //  6: Slimmest version of mode 0
        // Alternate default/auto modes:
        // 7: Header and footer version for when not using a double-lined headline that size banner is desired
        this.skirt_bottom_rest = (mode === 2 || mode === 3) ? -(this.FooterHeight - (this.FooterButtonWidth * 0.5)) :
                                 Dash.Size.ButtonHeight * (mode === 1 ? 2 : mode === 4 ? 0.65 : mode === 5 ? 0.35 : mode === 6 ? 0.2 : mode === 7 ? -1.35 : 1);
        this.headline.SetTopBottomMargins(
            Dash.Size.Padding * ((mode === 1 || mode === 2) ? 0.25 : (mode === 3 || mode === 5) ? 1 : mode === 6 ? 0.65 : mode === 7 ? 5 : 2),
            (Dash.Size.Padding * ((mode === 1 || mode === 2) ? 0.25 : mode === 3 ? 1 : mode === 7 ? 2 : 0)) +
                (mode === 2 ? Dash.Size.ButtonHeight : 0)  // To account for the weight of the header
        );
        this.html.css({
            "margin-bottom": mode === 1 ? Dash.Size.ButtonHeight : (mode === 2 || mode === 3 || mode === 7) ? Dash.Size.Padding : 0
        });
        this.background_skirt.css({
            "bottom": -this.skirt_bottom_rest
        });
        this.last_sizing_mode = mode;
    };
    this.setup_styles();
}

function DashMobileCardStackUserBanner (stack, include_refresh_button=true) {
    this._stack = stack;  // The below .call() function includes a this.stack already
    this.include_refresh_button = include_refresh_button;
    this.user_modal = null;
    this.color = this._stack.color;
    this.context_logo_img_url = "";
    DashMobileCardStackBanner.call(this, this);
    this.setup_styles = function () {
        this.SetBackground(Dash.Color.Mobile.BackgroundGradient);
        this.SetLeftIcon("user_settings", this.on_user_clicked);
    };
    this.SetContextLogoImg = function (url) {
        this.context_logo_img_url = url;
    };
    this.on_user_clicked = function () {
        this.user_modal = new Dash.Mobile.UserProfile(
            this,
            this.on_show_main,
            null,
            this.context_logo_img_url,
            this.include_refresh_button
        );
        this._stack.AddLeftContent(this.user_modal.html);
    };
    this.on_show_main = function () {
        this._stack.ShowCenterContent();
    };
    this.setup_styles();
}

function DashMobileCardStackBannerHeadline (banner) {
    this.banner = banner;
    this.stack = this.banner.stack;
    this.color = this.stack.color;
    this.html = Dash.Gui.GetHTMLContext();
    this.label_top = Dash.Gui.GetHTMLContext();
    this.label_bottom = Dash.Gui.GetHTMLContext();
    this.setup_styles = function () {
        this.html.css({
            "background": "none",
            "padding-top": Dash.Size.Padding * 2,
            "padding-bottom": Dash.Size.Padding * 2
        });
        this.label_top.css({
            "background": "none",
            "color": "white",
            "font-size": "175%"
        });
        this.label_bottom.css({
            "background": "none",
            "color": "white",
            "font-family": "sans_serif_bold",
            "font-size": "175%"
        });
        this.html.append(this.label_top);
        this.html.append(this.label_bottom);
    };
    this.GetHeight = function () {
        return this.html.height() + (Dash.Size.Padding * 6);
    };
    this.OnScroll = function (scroll_norm) {
        var opac_norm = scroll_norm > 0.1 && scroll_norm < 0.3 ? Dash.Math.InverseLerp(0.3, 0.1, scroll_norm) : scroll_norm >= 0.3 ? 0 : 1;
        this.label_top.css("opacity", opac_norm);
        this.label_bottom.css("opacity", opac_norm);
    };
    this.SetHeadlineText = function (text_primary, text_secondary) {
        this.label_top.text(text_primary);
        this.label_bottom.text(text_secondary);
    };
    this.SetTopBottomMargins = function (margin_top, margin_bottom) {
        this.html.css({
            "padding-top": margin_top,
            "padding-bottom": margin_bottom
        });
    };
    this.setup_styles();
}

function DashMobileCardStackBannerTopButtonRow (banner) {
    this.banner = banner;
    this.stack = this.banner.stack;
    this.color = this.stack.color;
    this.left_icon_callback = null;
    this.right_icon_callback = null;
    this.left_icon_click_active = false;
    this.right_icon_click_active = false;
    this.html = Dash.Gui.GetHTMLContext();
    this.row_height = this.banner.HeaderHeight;
    this.center_content = Dash.Gui.GetHTMLContext();
    this.left_button_content = Dash.Gui.GetHTMLContext();
    this.right_button_content = Dash.Gui.GetHTMLContext();
    this.button_size = Dash.Size.ButtonHeight-Dash.Size.Padding;
    this.left_icon = new Dash.Gui.Icon(this.color, "gear", this.button_size, 0.75, Dash.Color.Mobile.BannerButton);
    this.right_icon = new Dash.Gui.Icon(this.color, "gear", this.button_size, 0.75, Dash.Color.Mobile.BannerButton);
    this.setup_styles = function () {
        this.html.css({
            "background": "none",
            "height": this.row_height,
            "display": "flex",
            // "overflow": "hidden"
        });
        this.left_button_content.css({
            "height": this.button_size,
            "width": this.button_size,
            "margin": (this.row_height-this.button_size) * 0.5,
            "border-radius": this.button_size * 0.5,
            "background": "none",
            "display": "none",
            "flex-grow": 0
        });
        this.right_button_content.css({
            "height": this.button_size,
            "width": this.button_size,
            "margin": (this.row_height-this.button_size) * 0.5,
            "border-radius": this.button_size * 0.5,
            "background": "none",
            "display": "none",
            "flex-grow": 0
        });
        this.center_content.css({
            "background": "none",
            "height": this.row_height,
            "flex-grow": 2
        });
        this.left_button_content.append(this.left_icon.html);
        this.right_button_content.append(this.right_icon.html);
        this.html.append(this.left_button_content);
        this.html.append(this.center_content);
        this.html.append(this.right_button_content);
        this.setup_connections();
    };
    this.setup_connections = function () {
        (function (self) {
            self.left_button_content.on("click", function () {
                self.on_left_button_clicked();
            });
            self.right_button_content.on("click", function () {
                self.on_right_button_clicked();
            });
        })(this);
    };
    // Button presses have a short timeout to prevent accidental multiple taps
    this.on_left_button_clicked = function () {
        if (!this.left_icon_callback || this.left_icon_click_active) {
            return;
        }
        this.left_icon_click_active = true;
        this.left_button_content.css("opacity", 0.75);
        (function (self) {
            setTimeout(
                function () {
                    self.left_icon_click_active = false;
                    self.left_button_content.stop().animate({"opacity": 1.0}, 400);
                },
                750
            );
        })(this);
        this.left_icon_callback();
    };
    // Button presses have a short timeout to prevent accidental multiple taps
    this.on_right_button_clicked = function () {
        if (!this.right_icon_callback || this.right_icon_click_active) {
            return;
        }
        this.right_icon_click_active = true;
        this.right_button_content.css("opacity", 0.75);
        (function (self) {
            setTimeout(
                function () {
                    self.right_icon_click_active = false;
                    self.right_button_content.stop().animate({"opacity": 1.0}, 400);
                },
                750
            );
        })(this);
        this.right_icon_callback();
    };
    this.SetLeftIcon = function (icon_name="gear", callback=null) {
        this.set_icon(this.left_button_content, this.left_icon, icon_name);
        this.left_icon_callback = callback.bind(this.banner);
        this.left_button_content.css({
            "display": "block",
            "pointer-events": "auto"
        });
    };
    this.SetRightIcon = function (icon_name="gear", callback=null) {
        this.set_icon(this.right_button_content, this.right_icon, icon_name);
        this.right_icon_callback = callback.bind(this.banner);
        this.right_button_content.css({
            "display": "block",
            "pointer-events": "auto"
        });
    };
    this.set_icon = function (container, icon, icon_name) {
        icon.SetIcon(icon_name);
    };
    this.setup_styles();
}

function DashMobileCardStackBannerFooterButtonRow (banner) {
    this.banner = banner;
    this.buttons = [];
    this.stack = this.banner.stack;
    this.html = Dash.Gui.GetHTMLContext();
    this.row_height = this.banner.FooterHeight;
    this.button_size = this.banner.FooterHeight;
    this.left_spacer = Dash.Gui.GetHTMLContext();
    this.right_spacer = Dash.Gui.GetHTMLContext();
    this.vertical_offset_slider = $("<div></div>");
    this.center_content = Dash.Gui.GetHTMLContext();
    this.color = this.stack.color || Dash.Color.Light;
    this.setup_styles = function () {
        this.html.css({
            "background": "none",
            "height": this.row_height,
            "pointer-events": "none",
            ...Dash.HardwareAccelerationCSS
        });
        this.vertical_offset_slider.css({
            "position": "absolute",
            "left": 0,
            "right": 0,
            "top": 0,
            "height": this.row_height,
            "display": "flex",
            ...Dash.HardwareAccelerationCSS
        });
        var spacer_css = {
            "height": this.row_height,
            "background": "none",
            "flex-grow": 2
        };
        this.left_spacer.css(spacer_css);
        this.right_spacer.css(spacer_css);
        this.center_content.css({
            "display": "flex",
            "background": "none",
            "height": this.row_height,
        });
        this.vertical_offset_slider.append(this.left_spacer);
        this.vertical_offset_slider.append(this.center_content);
        this.vertical_offset_slider.append(this.right_spacer);
        this.html.append(this.vertical_offset_slider);
        this.setup_connections();
    };
    this.OnScroll = function (scroll_norm, headline_offset) {
        var anim_clamp = 0.7;
        if (scroll_norm < anim_clamp) {
            scroll_norm = Dash.Math.InverseLerp(0, anim_clamp, scroll_norm);
        }
        else {
            scroll_norm = 1;
        }
        // This is technically a double ease out...
        scroll_norm = Dash.Animation.Curves.EaseOut(scroll_norm);
        this.vertical_offset_slider.css("top", Dash.Math.Lerp(0, -headline_offset, scroll_norm));
    };
    this.AddIcon = function (icon_name="gear", label_text="--", callback=null) {
        var button = new DashMobileCardStackBannerFooterButtonRowButton(
            this,
            icon_name,
            label_text,
            callback
        );
        if (this.buttons.length > 0) {
            this.buttons.Last().html.css({
                "margin-right": Dash.Size.Padding * 2
            });
        }
        this.center_content.append(button.html);
        this.buttons.push(button);
        return button;
    };
    // TODO: not needed?
    this.setup_connections = function () {
        // (function (self) {
        //     self.left_button_content.on("click", function () {
        //         self.on_left_button_clicked();
        //     });
        //
        //     self.right_button_content.on("click", function () {
        //         self.on_right_button_clicked();
        //     });
        // })(this);
    };
    this.setup_styles();
}

function DashMobileCardStackBannerFooterButtonRowButton (footer, icon_name="gear", label_text="--", callback=null) {
    this.footer = footer;
    this.icon_name = icon_name;
    this.label_text = label_text;
    this.callback = callback;
    this.disabled = false;
    this.highlighted = false;
    this.click_active = false;
    this.upload_button = null;
    this.notification_icon = null;
    this.banner = this.footer.banner;
    this.stack = this.banner.stack;
    this.color = this.stack.color;
    this.html = Dash.Gui.GetHTMLContext();
    this.label = Dash.Gui.GetHTMLAbsContext();
    this.row_height = this.banner.FooterHeight;
    this.width = this.banner.FooterButtonWidth;
    this.icon_circle = Dash.Gui.GetHTMLAbsContext();
    this.icon_circle_box_shadow = "0px 6px 10px 1px rgba(0, 0, 0, 0.1)";
    this.icon_circle_box_shadow_inset = "inset 0px 2px 2px 0px rgba(255, 255, 255, 1)";
    this.label_height = (this.row_height - this.width) < this.label_height ? this.row_height - this.width : Dash.Size.RowHeight;
    this.icon = new Dash.Gui.Icon(
        this.color,
        icon_name,
        this.width,
        0.5,
        Dash.Color.Mobile.AccentPrimary
    );
    this.setup_styles = function () {
        this.label.text(this.label_text);
        this.icon.icon_html.css({
            "text-shadow": "0px 2px 3px rgba(0, 0, 0, 0.2)",
        });
        this.html.css({
            "height": this.row_height,
            "width": this.width,
            "background": "none",
            "pointer-events": "auto",
            ...Dash.HardwareAccelerationCSS
        });
        this.icon_circle.css({
            "position": "absolute",
            "left": 0,
            "top": 0,
            "bottom": "auto",
            "background": "rgb(250, 250, 250)",
            "height": this.width,
            "width": this.width,
            "border-radius": this.width * 0.5,
            "box-shadow": this.icon_circle_box_shadow + ", " + this.icon_circle_box_shadow_inset
        });
        this.label.css({
            "position": "absolute",
            "left": -Dash.Size.Padding,
            "bottom": 0,
            "top": "auto",
            "height": this.label_height,
            "line-height": this.label_height + "px",
            "width": this.width + (Dash.Size.Padding * 2),
            "font-size": "80%",
            "background": "none"
        });
        this.icon_circle.append(this.icon.html);
        this.html.append(this.icon_circle);
        this.html.append(this.label);
        this.setup_connections();
    };
    this.AddUploader = function (binder, callback, endpoint, params) {
        if (this.upload_button) {
            return;
        }
        this.upload_button = new Dash.Gui.Button(
            "",
            callback,
            binder,
            this.color
        );
        var abs_css = {
            "position": "absolute",
            "inset": 0,
            "width": "auto",
            "height": "auto"
        };
        this.upload_button.html.css({
            ...abs_css,
            "background": "rgba(0, 0, 0, 0)"
        });
        this.upload_button.highlight.css(abs_css);
        this.upload_button.label.css({
            "opacity": 0
        });
        this.UpdateUploaderParams(endpoint, params);
        this.icon_circle.append(this.upload_button.html);
    };
    this.UpdateUploaderParams = function (endpoint, params) {
        this.upload_button.SetFileUploader(endpoint, params);
        this.upload_button.file_uploader.html.css({
            "width": "auto",
            "height": "auto"
        });
    };
    this.SetNotificationActive = function (is_active) {
        if (!this.notification_icon) {
            this.create_notification_icon();
        }
        if (is_active) {
            this.notification_icon.stop().animate({"opacity": 1}, 350);
        }
        else {
            this.notification_icon.stop().animate({"opacity": 0}, 350);
        }
    };
    this.ToggleHighlight = function (highlighted) {
        if (this.highlighted === highlighted) {
            return;
        }
        if (highlighted) {
            this.icon_circle.css({
                "box-shadow": "0px 0px 2px 3px " + Dash.Color.Mobile.AccentPrimary + ", " + this.icon_circle_box_shadow_inset
            });
        }
        else {
            this.icon_circle.css({
                "box-shadow": this.icon_circle_box_shadow + ", " + this.icon_circle_box_shadow_inset
            });
        }
        this.highlighted = highlighted;
    };
    this.Disable = function () {
        if (this.disabled) {
            return;
        }
        this.disabled = true;
        this.html.css({
            "opacity": 0.5,
            "pointer-events": "none",
            "user-select": "none"
        });
    };
    this.Enable = function () {
        if (!this.disabled) {
            return;
        }
        this.disabled = false;
        this.html.css({
            "opacity": 1,
            "pointer-events": "auto",
            "user-select": "auto"
        });
    };
    this.setup_connections = function () {
        (function (self) {
            self.icon_circle.on("mousedown", function (event) {
                self.on_button_clicked();
                event.preventDefault();
                return false;
            });
        })(this);
    };
    // Button presses have a short timeout to prevent accidental multiple taps
    this.on_button_clicked = function () {
        if (this.click_active) {
            return;
        }
        if (this.callback) {
            this.callback();
        }
        else if (!this.upload_button) {
            console.error("Error: No callback associated with button!");
        }
        this.click_active = true;
        (function (self) {
            setTimeout(function () {
                self.click_active = false;
            }, 750);
        })(this);
    };
    this.create_notification_icon = function () {
        this.notification_icon = $("<div></div>");
        var icon_size = this.width * 0.25;
        this.notification_icon.css({
            "background": "red",
            "position": "absolute",
            "top": 0,
            "right": 0,
            "width": icon_size,
            "height": icon_size,
            "border-radius": icon_size,
            "box-shadow": "0px 3px 5px 1px rgba(0, 0, 0, 0.2)",
            "border": "2px solid white",
            "opacity": 0.1
        });
        this.html.append(this.notification_icon);
    };
    this.setup_styles();
}

function DashPDFView (options) {
    this.html = Dash.Gui.GetHTMLContext("", {"margin": Dash.Size.Padding});
    options = options || {};
    this.on_uploaded_callback = null;
    this.content_key = options["content_key"] || null;
    this.owner_email_list = options["owner_email_list"] || [];
    this.content_width = -1;
    this.images = [];
    this.images_initialized = false;
    if (options["binder"] && options["callback"]) {
        this.on_uploaded_callback = options["callback"].bind(options["binder"]);
    }
    this.upload_button = null;
    this.pages_area = $("<div></div>");
    this.data = null;
    this.setup_styles = function () {
        if (!this.content_key) {
            console.log("Content key is missing for DashPDFView()");
            return;
        }
        this.upload_button = new Dash.Gui.Button("Upload PDF", this.upload_pdf, this);
        this.upload_button.html.css({"margin-bottom": Dash.Size.Padding});
        this.params = {};
        this.params["f"] = "upload_pdf";
        this.params["content_key"] = this.content_key;
        this.upload_button.SetFileUploader(
            "Api",
            this.params
        );
        this.html.append(this.upload_button.html);
        this.html.append(this.pages_area);
        (function (self) {
            setInterval(function () {
                self.check_width();
            }, 100);
        })(this);
    };
    this.check_width = function () {
        if (this.pages_area.width() != this.content_width) {
            this.content_width = this.pages_area.width();
            this.update_sizes();
        }
    };
    this.upload_pdf = function (response) {
        if (response.originalEvent) {
            // TODO: Prevent this from being called inside of dash_gui_button_uploader.js
            return;
        }
        console.log("Uploading pdf...");
        if (this.on_uploaded_callback) {
            this.on_uploaded_callback(response);
        }
        this.on_data(response);
    };
    this.update_sizes = function () {
        if (!this.images) {
            return;
        }
        // A small timeout that lets the stack
        // of images fade in one by one
        var init_delay = 0;
        // The number of ms between
        // each image's reveal
        var init_step = 100;
        // The number of ms it takes to
        // fade in each image
        var fade_in_duration = 100;
        for (var i in this.images) {
            this.images[i].css({
                "width": this.content_width,
            });
            if (!this.images_initialized) {
                if (init_delay > 10) {
                    (function (self, i, init_delay, fade_in_duration) {
                        setTimeout(function () {
                            self.images[i].animate({"opacity": 1}, fade_in_duration);
                        }, init_delay);
                    })(this, i, init_delay, fade_in_duration);
                }
                else {
                    this.images[i].animate({"opacity": 1}, fade_in_duration);
                }
                init_delay += init_step;
            }
        }
        this.images_initialized = true;
    };
    this.on_pdf_page_clicked = function (page_data) {
        console.log(page_data);
        window.open(page_data["url"], '_blank');
    };
    this.on_data = function (response) {
        if (!Dash.Validate.Response(response)) {return;}
        this.data = null;
        if (!response["data"]) {
            this.pages_area.empty();
            this.pages_area.text(response);
            return;
        }
        if (!response["data"]["pages"]) {
            this.pages_area.empty();
            this.pages_area.text("No Pages Converted");
            return;
        }
        this.data = response["data"];
        this.content_width = this.pages_area.width();
        this.images = [];
        this.images_initialized = false;
        for (var i in this.data["pages"]) {
            var page_data = this.data["pages"][i];
            var image = $("<img src='" + page_data["url"] + "' alt=''>");
            image.css({
                "width": this.content_width-(Dash.Size.Padding * 2),
                "margin-bottom": Dash.Size.Padding,
                "border-radius": Dash.Size.Padding * 0.5,
                "box-shadow": "0px 0px 10px 0px rgba(0, 0, 0, 0.2)",
                "opacity": 0.01,
                "cursor": "pointer",
            });
            this.pages_area.append(image);
            this.images.push(image);
            (function (self, image, page_data) {
                image.on("click", function () {
                    self.on_pdf_page_clicked(page_data);
                });
            })(this, image, page_data);
        }
        (function (self) {
            setTimeout(function () {
                if (!self.images_initialized) {
                    self.update_sizes();
                }
            }, 300);
        })(this);
    };
    this.setup_styles();
    Dash.Request(this, this.on_data, "Api", {"f": "get_pdf", "content_key": this.content_key});
}

// Profile page layout for the currently logged-in user
function DashUserView (user_data=null, options={}, view_mode="settings") {
    this.html = Dash.Gui.GetHTMLContext("", {"margin": Dash.Size.Padding});
    this.user_profile = new Dash.Layout.UserProfile(user_data, options, view_mode);
    this.property_box = this.user_profile.property_box;
    this.html.append(this.user_profile.html);
}

// Profile page layout for the currently logged-in user
function DashStyleView () {
    this.html = Dash.Gui.GetHTMLContext("", {"margin": Dash.Size.Padding});
    this.html.append(new Dash.Layout.UserProfile().html);
    console.log("in");
}
