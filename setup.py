# 2021 Ensomniac
# Ryan Martin ryan@ensomniac.com

"""
| This script requires that you have an account at https://dash.guide
|
| This script installs PyDash, so that you can import Dash on this environment
| This script installs the command line tool dashsync
"""

import os
import sys
import json
import site
import getpass
import requests


class Setup:
    _dash_data: dict
    _package_paths: list

    def __init__(self):
        print("\nDash - Tools for Developers\n")

        self.dash_data_path = os.path.join(os.path.expanduser("~"), ".dash")

        self.preflight()

        self.user = self.authenticate()
        self.package_root = os.path.dirname(os.path.realpath(__file__)) + "/"
        self.pydash_module_root = self.find_pydash_root()
        self.pydash_module_dest = self.find_pydash_dest()

        self.install_cli()
        self.link_pydash()

    @property
    def dash_creds(self):
        if not os.path.exists(self.dash_data_path):
            return None

        if not hasattr(self, "_dash_data"):
            self._dash_data = json.loads(open(self.dash_data_path, "r").read())

        return self._dash_data

    @property
    def package_paths(self):
        if not hasattr(self, "_package_paths"):
            self._package_paths = []

            all_files = [
                os.path.join(dp, f)
                for dp, dn, fn in os.walk(self.package_root)
                for f in fn
            ]

            for filename in all_files:
                if ".git" in filename or "/.D" in filename or ".pyc" in filename:
                    continue

                self._package_paths.append(filename)

        return self._package_paths

    @property
    def cli_content(self):
        return "\n".join([
            "#!/bin/bash",
            "#",
            f"# Script generated by {os.path.join(os.getcwd(), __file__)}",
            "",
            f"{sys.executable} -c 'import Dash;Dash.Sync()' "
        ])

    def install_cli(self):
        local_bin = os.path.join("/usr", "local", "bin")
        cli_path = os.path.join(local_bin, "dashsync")

        os.makedirs(local_bin, exist_ok=True)

        if os.path.exists(cli_path):
            os.remove(cli_path)

        try:
            open(cli_path, "w").write(self.cli_content)

        except PermissionError:
            from subprocess import check_output

            temp_path = os.path.join("/var", "tmp", "dashsync")

            open(temp_path, "w").write(self.cli_content)

            print(check_output(
                f'sudo mv {temp_path} {cli_path}',  # sudo is necessary
                shell=True
            ).decode().strip().strip("\n"))

        except:
            print("\nERROR: Unable to install the CPE CLI!\n")

            return

        if not os.path.exists(cli_path):
            sys.exit("\nError: Unable to install dashsync!\n")

        os.system(f"chmod +x {cli_path}")

        print("\tDash cli tool 'dashsync' installed!")

    def link_pydash(self):
        if os.path.exists(self.pydash_module_dest):
            if os.path.islink(self.pydash_module_dest):
                os.unlink(self.pydash_module_dest)
            else:
                os.remove(self.pydash_module_dest)

        try:
            os.symlink(self.pydash_module_root, self.pydash_module_dest)

        except FileExistsError:
            os.remove(self.pydash_module_dest)
            os.symlink(self.pydash_module_root, self.pydash_module_dest)

        if not os.path.exists(self.pydash_module_dest):
            sys.exit("\nError: Unable to install pydash!\n")

        print("\tPydash module installed!")

    def find_pydash_dest(self):
        pydash_dest = None

        for path in site.getsitepackages():
            if os.path.exists(path):
                pydash_dest = os.path.join(path, "Dash")

        if not pydash_dest:
            sys.exit("\nError: Unable to locate your system's python site packages!\n")

        print(f"\tPydash module link: '{pydash_dest}'")

        return pydash_dest

    def find_pydash_root(self):
        pydash_root = None

        for package_path in self.package_paths:
            if "pydash/" not in package_path:
                continue

            if "__init__.py" not in package_path:
                continue

            if "SETUP_PYDASH" not in open(package_path, "r").read():
                continue

            pydash_root = "/".join(package_path.split("/")[:-1]) + "/"

            break

        if not pydash_root:
            sys.exit("\nError: Unable to locate pydash!\n")

        print(f"\tPydash module: '{pydash_root}'")

        return pydash_root

    # Checks to make sure this is being installed correctly
    def preflight(self):
        if os.path.exists(os.path.join("/var", "www", "vhosts", "oapi.co", "logs")):
            sys.exit("\nError: This setup.py is not intended for the server\n")

    def authenticate(self):
        if self.dash_creds:
            return

        if os.path.exists(self.dash_data_path):
            os.remove(self.dash_data_path)

        email = input("Enter your email (from https://dash.guide): ").strip()

        if not email:
            sys.exit()

        password = getpass.getpass(prompt="Enter your password: ")

        if not password:
            return

        response = requests.post(
            "https://dash.guide/Users",
            data={
                "f": "login",
                "email": email,
                "pass": password
            }
        ).json()

        if response.get("error"):
            sys.exit(f"\nUnable to authenticate @ https://dash.guide/\n\tReason:\n{response['error']}\n")

        if not response.get("token"):
            sys.exit(f"\nUnable to authenticate @ https://dash.guide/\n\tReason: Unknown\n")

        dash_data = {"user": response}

        open(self.dash_data_path, "w").write(json.dumps(dash_data))

        self._dash_data = dash_data

        print("\nSuccessfully authenticated!\n")

        return dash_data["user"]


if __name__ == "__main__":
    Setup()
