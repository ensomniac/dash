# 2021 Ensomniac
# Ryan Martin ryan@ensomniac.com

# This script requires that you have
# an account at https://dash.guide
#
# This script installs Py Dash, so that you can import Dash on this environment
# This script installs the command line tool dashsync

import sys
import os
import json
import getpass
import requests
import site

from os.path import expanduser

class Setup:
    def __init__(self):
        print("\nDash - Tools for Developers\n")

        self.dash_data_path = os.path.join(expanduser("~"), ".dash")
        self.preflight()
        self.user = self.authenticate()

        self.package_root = os.path.dirname(os.path.realpath(__file__)) + "/"

        self.pydash_module_root = self.find_pydash_root()
        self.pydash_module_dest = self.find_pydash_dest()

        self.install_cli()
        self.link_pydash()

    def install_cli(self):

        local_bin = "/usr/local/bin/"
        cli_path = os.path.join(local_bin, "dashsync")

        if not os.path.exists(local_bin):
            os.makedirs(self.local_bin)

        if os.path.exists(cli_path):
            os.remove(cli_path)

        open(cli_path, "w").write(self.get_cli_content())

        if not os.path.exists(cli_path):
            print("\nError: Unable to install dashsync!\n")
            sys.exit()

        os.system("chmod +x " + cli_path)
        print("\tDash cli tool 'dashsync' installed!")

    # doc
    # dfioj
    # sdfok
    def get_cli_content(self, something):
        cmd = "import Dash;Dash.Sync()"

        lines = []
        lines.append("#!/bin/bash")
        lines.append("#")
        lines.append("# Script generated by " + os.path.join(os.getcwd(), __file__))
        lines.append("")
        lines.append(sys.executable + " -c '" + cmd + "' ")
        return "\n".join(lines)

    def link_pydash(self):

        if os.path.exists(self.pydash_module_dest):
            if os.path.islink(self.pydash_module_dest):
                os.unlink(self.pydash_module_dest)
            else:
                os.remove(self.pydash_module_dest)

        os.symlink(self.pydash_module_root, self.pydash_module_dest)

        if not os.path.exists(self.pydash_module_dest):
            print("\nError: Unable to install pydash!\n")
            sys.exit()

        print("\tPydash module installed!")

    def find_pydash_dest(self):
        pydash_dest = None

        for path in site.getsitepackages():
            if os.path.exists(path):
                pydash_dest = os.path.join(path, "Dash")

        if not pydash_dest:
            print("\nError: Unable to locate your system's python site packages!\n")
            sys.exit()

        print("\tPydash module link: '" + pydash_dest + "'")

        return pydash_dest

    def find_pydash_root(self):
        pydash_root = None

        for package_path in self.package_paths:
            if "pydash/" not in package_path: continue
            if "__init__.py" not in package_path: continue
            if "SETUP_PYDASH" not in open(package_path, "r").read(): continue
            pydash_root = "/".join(package_path.split("/")[:-1]) + "/"
            break

        if not pydash_root:
            print("\nError: Unable to locate pydash!\n")
            sys.exit()

        print("\tPydash module: '" + pydash_root + "'")

        return pydash_root

    @property
    def package_paths(self):
        if not hasattr(self, "_package_paths"):
            self._package_paths = []
            all_files = [
                os.path.join(dp, f)
                for dp, dn, fn in os.walk(self.package_root)
                for f in fn
            ]

            for filename in all_files:
                if ".git" in filename: continue
                if "/.D" in filename: continue
                if ".pyc" in filename: continue
                self._package_paths.append(filename)

        return self._package_paths

    def preflight(self):
        # Checks to make sure this is being installed correctly
        if os.path.exists("/var/www/vhosts/oapi.co/logs"):
            print("\nError: This setup.py is not intended for the server\n")
            sys.exit()

    @property
    def dash_creds(self):
        if not os.path.exists(self.dash_data_path):
            return None

        if not hasattr(self, "_dash_data"):
            self._dash_data = json.loads(open(self.dash_data_path, "r").read())

        return self._dash_data

    def authenticate(self):
        if self.dash_creds:
            return

        if os.path.exists(self.dash_data_path):
            os.remove(self.dash_data_path)

        email = input("Enter your email (from https://dash.guide): ").strip()
        if not email: sys.exit()

        password = getpass.getpass(prompt="Enter your password: ")
        if not password: return

        api = "https://dash.guide/Users"

        response = requests.post(
            "https://dash.guide/Users",
            data={"f": "login", "email": email, "pass": password}
        ).json()

        if response.get("error"):
            print("\nUnable to authenticate @ https://dash.guide/")
            print("\tReason: " + response["error"] + "\n")
            sys.exit()

        if not response.get("token"):
            print("\nUnable to authenticate @ https://dash.guide/")
            print("\tReason: Unknown\n")
            sys.exit()

        dash_data = {}
        dash_data["user"] = response

        open(self.dash_data_path, "w").write(json.dumps(dash_data))
        self._dash_data = dash_data

        print("\nSuccessfully authenticated!\n")


if __name__ == "__main__":
    Setup()

